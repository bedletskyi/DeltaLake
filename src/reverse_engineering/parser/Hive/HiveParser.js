// Generated from HiveParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4');
var HiveParserVisitor = require('./HiveParserVisitor').HiveParserVisitor;

var grammarFileName = 'HiveParser.g4';

var serializedATN = [
	'\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964',
	'\u0003\u0185\u123e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004',
	'\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007',
	'\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f',
	'\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010',
	'\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014',
	'\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017',
	'\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b',
	'\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e',
	'\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#\t#\u0004',
	"$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
	'+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004',
	'2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004',
	'9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004',
	'@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004',
	'G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004',
	'N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004',
	'U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004',
	'\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004',
	'c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004',
	'j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004',
	'q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004',
	'x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004',
	'\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t',
	'\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004',
	'\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t',
	'\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004',
	'\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t',
	'\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004',
	'\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t',
	'\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004',
	'\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t',
	'\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004',
	'\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t',
	'\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004',
	'\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t',
	'\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004',
	'\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t',
	'\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004',
	'\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t',
	'\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004',
	'\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t',
	'\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004',
	'\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t',
	'\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004',
	'\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t',
	'\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004',
	'\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t',
	'\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004',
	'\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t',
	'\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004',
	'\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t',
	'\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004',
	'\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t',
	'\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004',
	'\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t',
	'\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004',
	'\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t',
	'\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004',
	'\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t',
	'\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004',
	'\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t',
	'\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004',
	'\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t',
	'\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004',
	'\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t',
	'\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004',
	'\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t',
	'\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004',
	'\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t',
	'\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004',
	'\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t',
	'\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004',
	'\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t',
	'\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004',
	'\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t',
	'\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004',
	'\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004\u013f\t',
	'\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t\u0142\u0004',
	'\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004\u0146\t',
	'\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t\u0149\u0004',
	'\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004\u014d\t',
	'\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t\u0150\u0004',
	'\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004\u0154\t',
	'\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t\u0157\u0004',
	'\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004\u015b\t',
	'\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t\u015e\u0004',
	'\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004\u0162\t',
	'\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t\u0165\u0004',
	'\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004\u0169\t',
	'\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t\u016c\u0004',
	'\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004\u0170\t',
	'\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t\u0173\u0004',
	'\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004\u0177\t',
	'\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t\u017a\u0004',
	'\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004\u017e\t',
	'\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t\u0181\u0004',
	'\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004\u0185\t',
	'\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t\u0188\u0004',
	'\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004\u018c\t',
	'\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0004\u018f\t\u018f\u0004',
	'\u0190\t\u0190\u0004\u0191\t\u0191\u0004\u0192\t\u0192\u0004\u0193\t',
	'\u0193\u0004\u0194\t\u0194\u0004\u0195\t\u0195\u0004\u0196\t\u0196\u0004',
	'\u0197\t\u0197\u0004\u0198\t\u0198\u0004\u0199\t\u0199\u0004\u019a\t',
	'\u019a\u0004\u019b\t\u019b\u0004\u019c\t\u019c\u0004\u019d\t\u019d\u0004',
	'\u019e\t\u019e\u0004\u019f\t\u019f\u0004\u01a0\t\u01a0\u0004\u01a1\t',
	'\u01a1\u0004\u01a2\t\u01a2\u0004\u01a3\t\u01a3\u0004\u01a4\t\u01a4\u0004',
	'\u01a5\t\u01a5\u0004\u01a6\t\u01a6\u0004\u01a7\t\u01a7\u0004\u01a8\t',
	'\u01a8\u0004\u01a9\t\u01a9\u0004\u01aa\t\u01aa\u0004\u01ab\t\u01ab\u0004',
	'\u01ac\t\u01ac\u0004\u01ad\t\u01ad\u0004\u01ae\t\u01ae\u0004\u01af\t',
	'\u01af\u0004\u01b0\t\u01b0\u0004\u01b1\t\u01b1\u0004\u01b2\t\u01b2\u0004',
	'\u01b3\t\u01b3\u0004\u01b4\t\u01b4\u0004\u01b5\t\u01b5\u0004\u01b6\t',
	'\u01b6\u0004\u01b7\t\u01b7\u0004\u01b8\t\u01b8\u0004\u01b9\t\u01b9\u0003',
	'\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u0377\n\u0002',
	'\f\u0002\u000e\u0002\u037a\u000b\u0002\u0003\u0002\u0003\u0002\u0003',
	'\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0005',
	'\u0005\u0384\n\u0005\u0003\u0006\u0003\u0006\u0007\u0006\u0388\n\u0006',
	'\f\u0006\u000e\u0006\u038b\u000b\u0006\u0003\u0006\u0003\u0006\u0003',
	'\u0006\u0005\u0006\u0390\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007',
	'\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007',
	'\u0005\u0007\u039b\n\u0007\u0003\u0007\u0005\u0007\u039e\n\u0007\u0005',
	'\u0007\u03a0\n\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n',
	'\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003',
	'\n\u0003\n\u0005\n\u03b2\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0005',
	'\u000b\u03b7\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b',
	'\u03bc\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005',
	'\u000b\u03c2\n\u000b\u0003\f\u0003\f\u0005\f\u03c6\n\f\u0003\f\u0003',
	'\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003',
	'\r\u0005\r\u03d3\n\r\u0003\u000e\u0003\u000e\u0005\u000e\u03d7\n\u000e',
	'\u0003\u000e\u0003\u000e\u0005\u000e\u03db\n\u000e\u0003\u000e\u0003',
	'\u000e\u0003\u000e\u0005\u000e\u03e0\n\u000e\u0003\u000f\u0003\u000f',
	'\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u03e7\n\u000f\u0003',
	'\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u03ed\n\u000f',
	'\u0003\u000f\u0003\u000f\u0005\u000f\u03f1\n\u000f\u0005\u000f\u03f3',
	'\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u03f7\n\u000f\u0003\u0010',
	'\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u03fe\n',
	'\u0010\u0005\u0010\u0400\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010',
	'\u0003\u0010\u0005\u0010\u0406\n\u0010\u0003\u0011\u0003\u0011\u0003',
	'\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u040f',
	'\n\u0012\f\u0012\u000e\u0012\u0412\u000b\u0012\u0003\u0013\u0003\u0013',
	'\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0419\n\u0013\u0003',
	'\u0013\u0003\u0013\u0005\u0013\u041d\n\u0013\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014',
	'\u044a\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003',
	'\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003',
	'\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003',
	'\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003',
	'\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0465\n\u001c\u0003\u001c',
	'\u0003\u001c\u0005\u001c\u0469\n\u001c\u0003\u001c\u0005\u001c\u046c',
	'\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0471\n\u001c',
	'\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e',
	'\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u047d\n',
	'\u001f\f\u001f\u000e\u001f\u0480\u000b\u001f\u0003 \u0003 \u0003 \u0003',
	'!\u0003!\u0003!\u0005!\u0488\n!\u0003!\u0003!\u0005!\u048c\n!\u0003',
	'"\u0003"\u0003"\u0003#\u0003#\u0005#\u0493\n#\u0003#\u0005#\u0496',
	'\n#\u0003#\u0003#\u0005#\u049a\n#\u0003#\u0003#\u0003#\u0003#\u0005',
	'#\u04a0\n#\u0003#\u0005#\u04a3\n#\u0003#\u0005#\u04a6\n#\u0003#\u0005',
	'#\u04a9\n#\u0003#\u0005#\u04ac\n#\u0003#\u0003#\u0003#\u0003#\u0005',
	'#\u04b2\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003',
	'#\u0007#\u04bd\n#\f#\u000e#\u04c0\u000b#\u0003#\u0003#\u0005#\u04c4',
	'\n#\u0005#\u04c6\n#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003',
	'$\u0003$\u0005$\u04d0\n$\u0003%\u0003%\u0003%\u0005%\u04d5\n%\u0003',
	'%\u0003%\u0005%\u04d9\n%\u0003%\u0005%\u04dc\n%\u0003&\u0003&\u0003',
	'&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u04e7\n&\u0003&\u0003',
	'&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003',
	"&\u0003&\u0003&\u0005&\u04f7\n&\u0003'\u0003'\u0003'\u0003'\u0003",
	"'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0005",
	"'\u0506\n'\u0003'\u0003'\u0005'\u050a\n'\u0003(\u0003(\u0003(",
	'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003',
	'(\u0003(\u0005(\u051a\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003',
	'*\u0003*\u0003*\u0003*\u0003*\u0005*\u0527\n*\u0003+\u0003+\u0005+\u052b',
	'\n+\u0003,\u0003,\u0003,\u0005,\u0530\n,\u0003-\u0003-\u0003-\u0003',
	'-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003',
	'/\u0003/\u00030\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u0003',
	'1\u00031\u00051\u054b\n1\u00032\u00032\u00032\u00052\u0550\n2\u0003',
	'3\u00033\u00033\u00053\u0555\n3\u00034\u00034\u00034\u00034\u00035\u0003',
	'5\u00055\u055d\n5\u00035\u00035\u00035\u00035\u00055\u0563\n5\u0003',
	'5\u00035\u00055\u0567\n5\u00035\u00055\u056a\n5\u00035\u00055\u056d',
	'\n5\u00036\u00036\u00036\u00036\u00056\u0573\n6\u00036\u00036\u0003',
	'6\u00036\u00036\u00056\u057a\n6\u00037\u00037\u00037\u00037\u00037\u0003',
	'8\u00038\u00038\u00058\u0584\n8\u00039\u00039\u00059\u0588\n9\u0003',
	'9\u00069\u058b\n9\r9\u000e9\u058c\u0003:\u0003:\u0005:\u0591\n:\u0003',
	';\u0003;\u0007;\u0595\n;\f;\u000e;\u0598\u000b;\u0003<\u0003<\u0007',
	'<\u059c\n<\f<\u000e<\u059f\u000b<\u0003=\u0003=\u0007=\u05a3\n=\f=\u000e',
	'=\u05a6\u000b=\u0003>\u0003>\u0003>\u0003?\u0003?\u0005?\u05ad\n?\u0003',
	'?\u0003?\u0003?\u0007?\u05b2\n?\f?\u000e?\u05b5\u000b?\u0003?\u0005',
	'?\u05b8\n?\u0003?\u0005?\u05bb\n?\u0003@\u0003@\u0003@\u0003@\u0003',
	'@\u0003@\u0005@\u05c3\n@\u0003@\u0005@\u05c6\n@\u0003A\u0003A\u0003',
	'A\u0003A\u0003A\u0003A\u0005A\u05ce\nA\u0003A\u0005A\u05d1\nA\u0003',
	'B\u0003B\u0005B\u05d5\nB\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003',
	'D\u0003D\u0005D\u05df\nD\u0003D\u0003D\u0003D\u0005D\u05e4\nD\u0003',
	'E\u0003E\u0003E\u0003E\u0005E\u05ea\nE\u0003E\u0003E\u0003F\u0003F\u0003',
	'F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u05f7\nG\u0003H\u0003',
	'H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003',
	'J\u0007J\u0605\nJ\fJ\u000eJ\u0608\u000bJ\u0003K\u0003K\u0003K\u0003',
	'K\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003M\u0005',
	'M\u0617\nM\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003',
	'O\u0003O\u0003P\u0003P\u0003P\u0003P\u0005P\u0627\nP\u0003P\u0003P\u0003',
	'P\u0003P\u0003P\u0005P\u062e\nP\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003',
	'R\u0003S\u0003S\u0003S\u0003S\u0005S\u063a\nS\u0003S\u0003S\u0005S\u063e',
	'\nS\u0003S\u0003S\u0003S\u0005S\u0643\nS\u0003S\u0003S\u0003S\u0005',
	'S\u0648\nS\u0003S\u0005S\u064b\nS\u0003S\u0005S\u064e\nS\u0003S\u0003',
	'S\u0005S\u0652\nS\u0003S\u0005S\u0655\nS\u0003S\u0005S\u0658\nS\u0003',
	'T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003',
	'U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0005',
	'V\u066e\nV\u0003V\u0005V\u0671\nV\u0003W\u0003W\u0003W\u0003W\u0003',
	'W\u0005W\u0678\nW\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003',
	'Y\u0003Y\u0007Y\u0683\nY\fY\u000eY\u0686\u000bY\u0003Z\u0003Z\u0005',
	'Z\u068a\nZ\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0005',
	'\\\u0693\n\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u069a\n]\u0003',
	']\u0003]\u0003^\u0003^\u0005^\u06a0\n^\u0003_\u0003_\u0003_\u0003`\u0003',
	'`\u0003`\u0005`\u06a8\n`\u0003`\u0003`\u0003`\u0003`\u0005`\u06ae\n',
	'`\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003',
	'b\u0003b\u0003b\u0003b\u0003b\u0005b\u06be\nb\u0003b\u0005b\u06c1\n',
	'b\u0003c\u0003c\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0005d\u06cb',
	'\nd\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u06d3\nd\u0007',
	'd\u06d5\nd\fd\u000ed\u06d8\u000bd\u0005d\u06da\nd\u0003e\u0003e\u0005',
	'e\u06de\ne\u0003f\u0003f\u0005f\u06e2\nf\u0003f\u0005f\u06e5\nf\u0003',
	'g\u0003g\u0003g\u0005g\u06ea\ng\u0003g\u0003g\u0003g\u0005g\u06ef\n',
	'g\u0003g\u0003g\u0003g\u0003g\u0005g\u06f5\ng\u0003h\u0003h\u0003h\u0003',
	'h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u0700\nh\u0005h\u0702\n',
	'h\u0003h\u0003h\u0005h\u0706\nh\u0003i\u0003i\u0003i\u0003i\u0005i\u070c',
	'\ni\u0003i\u0003i\u0003i\u0003i\u0005i\u0712\ni\u0003i\u0003i\u0003',
	'i\u0005i\u0717\ni\u0003i\u0003i\u0003i\u0003i\u0005i\u071d\ni\u0003',
	'i\u0003i\u0003i\u0005i\u0722\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0005',
	'i\u0729\ni\u0003i\u0003i\u0003i\u0005i\u072e\ni\u0003i\u0003i\u0003',
	'i\u0003i\u0003i\u0003i\u0005i\u0736\ni\u0003i\u0003i\u0003i\u0005i\u073b',
	'\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0742\ni\u0003i\u0003',
	'i\u0003i\u0003i\u0005i\u0748\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0003',
	'i\u0005i\u0750\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0757\n',
	'i\u0003i\u0003i\u0003i\u0005i\u075c\ni\u0003i\u0003i\u0003i\u0003i\u0003',
	'i\u0003i\u0005i\u0764\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u076b',
	'\ni\u0003i\u0005i\u076e\ni\u0003i\u0005i\u0771\ni\u0005i\u0773\ni\u0003',
	'i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003',
	'i\u0003i\u0005i\u0781\ni\u0005i\u0783\ni\u0003j\u0003j\u0003j\u0003',
	'j\u0005j\u0789\nj\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0003k\u0003',
	'l\u0003l\u0003m\u0003m\u0003m\u0003m\u0005m\u0798\nm\u0003n\u0003n\u0003',
	'n\u0003n\u0003o\u0003o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003',
	'q\u0003q\u0003q\u0005q\u07a9\nq\u0003q\u0003q\u0003q\u0005q\u07ae\n',
	'q\u0003r\u0003r\u0005r\u07b2\nr\u0003r\u0003r\u0005r\u07b6\nr\u0003',
	'r\u0003r\u0003r\u0003s\u0003s\u0005s\u07bd\ns\u0003s\u0003s\u0003s\u0007',
	's\u07c2\ns\fs\u000es\u07c5\u000bs\u0003s\u0003s\u0003s\u0005s\u07ca',
	'\ns\u0003t\u0003t\u0005t\u07ce\nt\u0003t\u0005t\u07d1\nt\u0003t\u0003',
	't\u0003t\u0007t\u07d6\nt\ft\u000et\u07d9\u000bt\u0003t\u0003t\u0003',
	't\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003w\u0003',
	'w\u0003w\u0003w\u0003x\u0003x\u0003x\u0003x\u0003x\u0005x\u07ef\nx\u0003',
	'y\u0003y\u0003y\u0005y\u07f4\ny\u0003y\u0003y\u0005y\u07f8\ny\u0003',
	'z\u0003z\u0003z\u0003z\u0003{\u0003{\u0005{\u0800\n{\u0003|\u0003|\u0003',
	'|\u0003}\u0003}\u0003}\u0005}\u0808\n}\u0003}\u0003}\u0005}\u080c\n',
	'}\u0003}\u0003}\u0003}\u0003}\u0005}\u0812\n}\u0003~\u0003~\u0003~\u0005',
	'~\u0817\n~\u0003~\u0003~\u0003~\u0003~\u0003~\u0005~\u081e\n~\u0003',
	'~\u0005~\u0821\n~\u0003~\u0003~\u0003~\u0003~\u0005~\u0827\n~\u0003',
	'\u007f\u0003\u007f\u0003\u007f\u0007\u007f\u082c\n\u007f\f\u007f\u000e',
	'\u007f\u082f\u000b\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080',
	'\u0003\u0080\u0005\u0080\u0836\n\u0080\u0003\u0081\u0003\u0081\u0003',
	'\u0082\u0003\u0082\u0003\u0082\u0007\u0082\u083d\n\u0082\f\u0082\u000e',
	'\u0082\u0840\u000b\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083',
	'\u0003\u0083\u0003\u0083\u0005\u0083\u0848\n\u0083\u0003\u0084\u0003',
	'\u0084\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003',
	'\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003',
	'\u0087\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0005\u0088\u085c',
	'\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088',
	'\u0862\n\u0088\u0003\u0088\u0005\u0088\u0865\n\u0088\u0005\u0088\u0867',
	'\n\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0007\u0089\u086c\n\u0089',
	'\f\u0089\u000e\u0089\u086f\u000b\u0089\u0003\u008a\u0003\u008a\u0003',
	'\u008a\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0005\u008c\u0878',
	'\n\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c',
	'\u0003\u008c\u0005\u008c\u0880\n\u008c\u0003\u008d\u0003\u008d\u0005',
	'\u008d\u0884\n\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u0888\n\u008d',
	'\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008f',
	'\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f',
	'\u0895\n\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u0090\u0003',
	'\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u089e\n\u0090\u0003\u0090',
	'\u0003\u0090\u0003\u0091\u0003\u0091\u0005\u0091\u08a4\n\u0091\u0003',
	'\u0091\u0003\u0091\u0005\u0091\u08a8\n\u0091\u0003\u0091\u0003\u0091',
	'\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u08af\n\u0091\u0003',
	'\u0091\u0005\u0091\u08b2\n\u0091\u0003\u0091\u0005\u0091\u08b5\n\u0091',
	'\u0003\u0091\u0005\u0091\u08b8\n\u0091\u0003\u0091\u0003\u0091\u0003',
	'\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u08c1',
	'\n\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u08c5\n\u0092\u0003\u0092',
	'\u0005\u0092\u08c8\n\u0092\u0003\u0092\u0005\u0092\u08cb\n\u0092\u0003',
	'\u0092\u0005\u0092\u08ce\n\u0092\u0003\u0092\u0005\u0092\u08d1\n\u0092',
	'\u0003\u0092\u0005\u0092\u08d4\n\u0092\u0003\u0092\u0003\u0092\u0003',
	'\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003',
	'\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u08e2\n\u0094',
	'\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095',
	'\u0005\u0095\u08ea\n\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003',
	'\u0096\u0005\u0096\u08f0\n\u0096\u0003\u0097\u0003\u0097\u0005\u0097',
	'\u08f4\n\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003',
	'\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003',
	'\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0007\u009b\u0904\n\u009b',
	'\f\u009b\u000e\u009b\u0907\u000b\u009b\u0003\u009b\u0003\u009b\u0003',
	'\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003',
	'\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0916',
	'\n\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009d',
	'\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d',
	'\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0926\n\u009d\u0003',
	'\u009e\u0003\u009e\u0005\u009e\u092a\n\u009e\u0003\u009f\u0003\u009f',
	'\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003\u00a1',
	'\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1',
	'\u0939\n\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005',
	'\u00a2\u093f\n\u00a2\u0003\u00a2\u0005\u00a2\u0942\n\u00a2\u0003\u00a2',
	'\u0005\u00a2\u0945\n\u00a2\u0003\u00a2\u0005\u00a2\u0948\n\u00a2\u0003',
	'\u00a2\u0005\u00a2\u094b\n\u00a2\u0003\u00a3\u0003\u00a3\u0005\u00a3',
	'\u094f\n\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003',
	'\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0007',
	'\u00a6\u095b\n\u00a6\f\u00a6\u000e\u00a6\u095e\u000b\u00a6\u0003\u00a6',
	'\u0003\u00a6\u0003\u00a6\u0007\u00a6\u0963\n\u00a6\f\u00a6\u000e\u00a6',
	'\u0966\u000b\u00a6\u0005\u00a6\u0968\n\u00a6\u0003\u00a7\u0003\u00a7',
	'\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8',
	'\u0971\n\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0007\u00a9\u0976',
	'\n\u00a9\f\u00a9\u000e\u00a9\u0979\u000b\u00a9\u0003\u00a9\u0005\u00a9',
	'\u097c\n\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003',
	'\u00aa\u0005\u00aa\u0983\n\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab',
	'\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac',
	'\u0003\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad',
	'\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae',
	'\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00b0',
	'\u0003\u00b0\u0003\u00b0\u0005\u00b0\u09a2\n\u00b0\u0003\u00b1\u0003',
	'\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u09aa',
	'\n\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3',
	'\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4',
	'\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u09ba\n\u00b4\u0003',
	'\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003',
	'\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0007',
	'\u00b8\u09c8\n\u00b8\f\u00b8\u000e\u00b8\u09cb\u000b\u00b8\u0003\u00b9',
	'\u0003\u00b9\u0003\u00b9\u0007\u00b9\u09d0\n\u00b9\f\u00b9\u000e\u00b9',
	'\u09d3\u000b\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0007\u00ba\u09d8',
	'\n\u00ba\f\u00ba\u000e\u00ba\u09db\u000b\u00ba\u0003\u00bb\u0003\u00bb',
	'\u0003\u00bb\u0007\u00bb\u09e0\n\u00bb\f\u00bb\u000e\u00bb\u09e3\u000b',
	'\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003',
	'\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u09ed\n\u00bd\u0007\u00bd',
	'\u09ef\n\u00bd\f\u00bd\u000e\u00bd\u09f2\u000b\u00bd\u0003\u00be\u0003',
	'\u00be\u0003\u00be\u0007\u00be\u09f7\n\u00be\f\u00be\u000e\u00be\u09fa',
	'\u000b\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00c0',
	'\u0003\u00c0\u0005\u00c0\u0a02\n\u00c0\u0003\u00c0\u0005\u00c0\u0a05',
	'\n\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c3',
	'\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0a0e\n\u00c3\u0003\u00c4\u0003',
	'\u00c4\u0005\u00c4\u0a12\n\u00c4\u0005\u00c4\u0a14\n\u00c4\u0003\u00c5',
	'\u0003\u00c5\u0005\u00c5\u0a18\n\u00c5\u0003\u00c5\u0003\u00c5\u0005',
	'\u00c5\u0a1c\n\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6',
	'\u0005\u00c6\u0a22\n\u00c6\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0a26',
	'\n\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9',
	'\u0003\u00c9\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0a30\n\u00ca\u0003',
	'\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003',
	'\u00ca\u0005\u00ca\u0a39\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb',
	'\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb',
	'\u0005\u00cb\u0a44\n\u00cb\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0a48',
	'\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0007\u00cd\u0a4d\n\u00cd',
	'\f\u00cd\u000e\u00cd\u0a50\u000b\u00cd\u0003\u00ce\u0003\u00ce\u0003',
	'\u00ce\u0003\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0007\u00cf\u0a59',
	'\n\u00cf\f\u00cf\u000e\u00cf\u0a5c\u000b\u00cf\u0003\u00d0\u0003\u00d0',
	'\u0003\u00d1\u0003\u00d1\u0005\u00d1\u0a62\n\u00d1\u0003\u00d2\u0003',
	'\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u0a6a',
	'\n\u00d3\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0a6e\n\u00d4\u0003\u00d4',
	'\u0005\u00d4\u0a71\n\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0007',
	'\u00d5\u0a76\n\u00d5\f\u00d5\u000e\u00d5\u0a79\u000b\u00d5\u0003\u00d6',
	'\u0003\u00d6\u0003\u00d6\u0005\u00d6\u0a7e\n\u00d6\u0003\u00d7\u0003',
	'\u00d7\u0005\u00d7\u0a82\n\u00d7\u0003\u00d7\u0005\u00d7\u0a85\n\u00d7',
	'\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u0a8b\n',
	'\u00d8\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0a8f\n\u00d9\u0003\u00da',
	'\u0003\u00da\u0005\u00da\u0a93\n\u00da\u0003\u00db\u0003\u00db\u0003',
	'\u00db\u0005\u00db\u0a98\n\u00db\u0003\u00db\u0003\u00db\u0005\u00db',
	'\u0a9c\n\u00db\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0aa0\n\u00dc\u0003',
	'\u00dd\u0003\u00dd\u0005\u00dd\u0aa4\n\u00dd\u0003\u00de\u0003\u00de',
	'\u0005\u00de\u0aa8\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003',
	'\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u0ab0\n\u00de\u0003\u00df',
	'\u0003\u00df\u0005\u00df\u0ab4\n\u00df\u0003\u00df\u0003\u00df\u0007',
	'\u00df\u0ab8\n\u00df\f\u00df\u000e\u00df\u0abb\u000b\u00df\u0003\u00df',
	'\u0005\u00df\u0abe\n\u00df\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0ac2',
	'\n\u00e0\u0003\u00e1\u0003\u00e1\u0005\u00e1\u0ac6\n\u00e1\u0003\u00e1',
	'\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1',
	'\u0ace\n\u00e1\u0003\u00e2\u0003\u00e2\u0005\u00e2\u0ad2\n\u00e2\u0003',
	'\u00e2\u0003\u00e2\u0005\u00e2\u0ad6\n\u00e2\u0003\u00e3\u0003\u00e3',
	'\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u0ade\n',
	'\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0005\u00e4\u0ae3\n\u00e4',
	'\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0ae8\n\u00e5\u0003',
	'\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003',
	'\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0005\u00e8\u0af5',
	'\n\u00e8\u0003\u00e9\u0003\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea',
	'\u0007\u00ea\u0afc\n\u00ea\f\u00ea\u000e\u00ea\u0aff\u000b\u00ea\u0003',
	'\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0005\u00eb\u0b06',
	'\n\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec',
	'\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0b10\n\u00ec\u0003',
	'\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003',
	'\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003',
	'\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0b22\n\u00ec',
	'\u0003\u00ec\u0005\u00ec\u0b25\n\u00ec\u0003\u00ec\u0003\u00ec\u0003',
	'\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005',
	'\u00ec\u0b2f\n\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed',
	'\u0003\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee',
	'\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef',
	'\u0003\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0',
	'\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0b4b\n',
	'\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0b51',
	'\n\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1',
	'\u0b57\n\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005',
	'\u00f1\u0b5d\n\u00f1\u0005\u00f1\u0b5f\n\u00f1\u0003\u00f2\u0005\u00f2',
	'\u0b62\n\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f3\u0003\u00f3\u0005',
	'\u00f3\u0b68\n\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4',
	'\u0007\u00f4\u0b6e\n\u00f4\f\u00f4\u000e\u00f4\u0b71\u000b\u00f4\u0003',
	'\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003',
	'\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0007\u00f6\u0b7d\n\u00f6',
	'\f\u00f6\u000e\u00f6\u0b80\u000b\u00f6\u0003\u00f7\u0003\u00f7\u0006',
	'\u00f7\u0b84\n\u00f7\r\u00f7\u000e\u00f7\u0b85\u0003\u00f8\u0003\u00f8',
	'\u0003\u00f8\u0005\u00f8\u0b8b\n\u00f8\u0003\u00f8\u0005\u00f8\u0b8e',
	'\n\u00f8\u0003\u00f9\u0003\u00f9\u0005\u00f9\u0b92\n\u00f9\u0003\u00f9',
	'\u0005\u00f9\u0b95\n\u00f9\u0003\u00f9\u0005\u00f9\u0b98\n\u00f9\u0003',
	'\u00f9\u0005\u00f9\u0b9b\n\u00f9\u0003\u00f9\u0005\u00f9\u0b9e\n\u00f9',
	'\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0005\u00f9\u0ba4\n',
	'\u00f9\u0003\u00fa\u0003\u00fa\u0005\u00fa\u0ba8\n\u00fa\u0003\u00fa',
	'\u0005\u00fa\u0bab\n\u00fa\u0003\u00fa\u0005\u00fa\u0bae\n\u00fa\u0003',
	'\u00fa\u0005\u00fa\u0bb1\n\u00fa\u0003\u00fa\u0005\u00fa\u0bb4\n\u00fa',
	'\u0003\u00fa\u0005\u00fa\u0bb7\n\u00fa\u0003\u00fb\u0003\u00fb\u0003',
	'\u00fb\u0006\u00fb\u0bbc\n\u00fb\r\u00fb\u000e\u00fb\u0bbd\u0003\u00fc',
	'\u0005\u00fc\u0bc1\n\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fd\u0003',
	'\u00fd\u0003\u00fd\u0005\u00fd\u0bc8\n\u00fd\u0003\u00fd\u0005\u00fd',
	'\u0bcb\n\u00fd\u0003\u00fd\u0005\u00fd\u0bce\n\u00fd\u0003\u00fd\u0005',
	'\u00fd\u0bd1\n\u00fd\u0003\u00fd\u0005\u00fd\u0bd4\n\u00fd\u0003\u00fd',
	'\u0005\u00fd\u0bd7\n\u00fd\u0003\u00fd\u0005\u00fd\u0bda\n\u00fd\u0003',
	'\u00fd\u0005\u00fd\u0bdd\n\u00fd\u0003\u00fd\u0005\u00fd\u0be0\n\u00fd',
	'\u0003\u00fd\u0005\u00fd\u0be3\n\u00fd\u0003\u00fd\u0003\u00fd\u0005',
	'\u00fd\u0be7\n\u00fd\u0003\u00fd\u0005\u00fd\u0bea\n\u00fd\u0003\u00fd',
	'\u0005\u00fd\u0bed\n\u00fd\u0003\u00fd\u0005\u00fd\u0bf0\n\u00fd\u0003',
	'\u00fd\u0005\u00fd\u0bf3\n\u00fd\u0003\u00fd\u0005\u00fd\u0bf6\n\u00fd',
	'\u0003\u00fd\u0005\u00fd\u0bf9\n\u00fd\u0003\u00fd\u0005\u00fd\u0bfc',
	'\n\u00fd\u0003\u00fd\u0005\u00fd\u0bff\n\u00fd\u0003\u00fd\u0005\u00fd',
	'\u0c02\n\u00fd\u0005\u00fd\u0c04\n\u00fd\u0003\u00fe\u0003\u00fe\u0003',
	'\u00fe\u0003\u00fe\u0005\u00fe\u0c0a\n\u00fe\u0003\u00fe\u0003\u00fe',
	'\u0003\u00fe\u0005\u00fe\u0c0f\n\u00fe\u0003\u00fe\u0003\u00fe\u0003',
	'\u00fe\u0003\u00fe\u0003\u00fe\u0005\u00fe\u0c16\n\u00fe\u0005\u00fe',
	'\u0c18\n\u00fe\u0003\u00ff\u0005\u00ff\u0c1b\n\u00ff\u0003\u00ff\u0003',
	'\u00ff\u0003\u00ff\u0005\u00ff\u0c20\n\u00ff\u0003\u00ff\u0005\u00ff',
	'\u0c23\n\u00ff\u0003\u00ff\u0003\u00ff\u0005\u00ff\u0c27\n\u00ff\u0003',
	'\u0100\u0003\u0100\u0003\u0100\u0005\u0100\u0c2c\n\u0100\u0003\u0100',
	'\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0005\u0100\u0c33\n',
	'\u0100\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0005\u0101\u0c39',
	'\n\u0101\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0103',
	'\u0003\u0103\u0003\u0103\u0003\u0103\u0007\u0103\u0c43\n\u0103\f\u0103',
	'\u000e\u0103\u0c46\u000b\u0103\u0003\u0104\u0003\u0104\u0003\u0104\u0003',
	'\u0104\u0005\u0104\u0c4c\n\u0104\u0003\u0105\u0003\u0105\u0003\u0105',
	'\u0003\u0105\u0005\u0105\u0c52\n\u0105\u0003\u0106\u0003\u0106\u0003',
	'\u0106\u0003\u0106\u0003\u0106\u0007\u0106\u0c59\n\u0106\f\u0106\u000e',
	'\u0106\u0c5c\u000b\u0106\u0005\u0106\u0c5e\n\u0106\u0003\u0107\u0003',
	'\u0107\u0005\u0107\u0c62\n\u0107\u0003\u0108\u0003\u0108\u0003\u0108',
	'\u0003\u0108\u0005\u0108\u0c68\n\u0108\u0003\u0109\u0003\u0109\u0003',
	'\u0109\u0003\u0109\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0005',
	'\u010b\u0c72\n\u010b\u0003\u010c\u0003\u010c\u0005\u010c\u0c76\n\u010c',
	'\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010e\u0003\u010e',
	'\u0003\u010e\u0006\u010e\u0c7f\n\u010e\r\u010e\u000e\u010e\u0c80\u0003',
	'\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0005\u010f\u0c87\n\u010f',
	'\u0003\u010f\u0005\u010f\u0c8a\n\u010f\u0003\u010f\u0003\u010f\u0003',
	'\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u0110\u0003\u0110\u0007',
	'\u0110\u0c94\n\u0110\f\u0110\u000e\u0110\u0c97\u000b\u0110\u0003\u0110',
	'\u0005\u0110\u0c9a\n\u0110\u0003\u0111\u0003\u0111\u0003\u0111\u0003',
	'\u0111\u0003\u0111\u0005\u0111\u0ca1\n\u0111\u0003\u0111\u0003\u0111',
	'\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0112\u0003\u0112\u0003\u0112',
	'\u0003\u0112\u0003\u0112\u0003\u0112\u0003\u0112\u0003\u0113\u0003\u0113',
	'\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0114\u0003\u0114\u0003\u0114',
	'\u0005\u0114\u0cb7\n\u0114\u0003\u0115\u0003\u0115\u0003\u0115\u0006',
	'\u0115\u0cbc\n\u0115\r\u0115\u000e\u0115\u0cbd\u0003\u0116\u0003\u0116',
	'\u0005\u0116\u0cc2\n\u0116\u0003\u0116\u0005\u0116\u0cc5\n\u0116\u0003',
	'\u0116\u0003\u0116\u0003\u0116\u0005\u0116\u0cca\n\u0116\u0003\u0116',
	'\u0005\u0116\u0ccd\n\u0116\u0003\u0117\u0003\u0117\u0003\u0117\u0007',
	'\u0117\u0cd2\n\u0117\f\u0117\u000e\u0117\u0cd5\u000b\u0117\u0003\u0118',
	'\u0003\u0118\u0003\u0118\u0003\u0118\u0005\u0118\u0cdb\n\u0118\u0003',
	'\u0118\u0005\u0118\u0cde\n\u0118\u0003\u0118\u0003\u0118\u0003\u0118',
	'\u0003\u0118\u0003\u0118\u0003\u0118\u0005\u0118\u0ce6\n\u0118\u0003',
	'\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0005\u0118\u0cec\n\u0118',
	'\u0005\u0118\u0cee\n\u0118\u0005\u0118\u0cf0\n\u0118\u0003\u0118\u0005',
	'\u0118\u0cf3\n\u0118\u0003\u0118\u0005\u0118\u0cf6\n\u0118\u0003\u0119',
	'\u0003\u0119\u0003\u0119\u0005\u0119\u0cfb\n\u0119\u0003\u0119\u0003',
	'\u0119\u0003\u0119\u0003\u0119\u0003\u0119\u0003\u0119\u0007\u0119\u0d03',
	'\n\u0119\f\u0119\u000e\u0119\u0d06\u000b\u0119\u0003\u0119\u0003\u0119',
	'\u0005\u0119\u0d0a\n\u0119\u0005\u0119\u0d0c\n\u0119\u0003\u011a\u0003',
	'\u011a\u0003\u011a\u0003\u011a\u0005\u011a\u0d12\n\u011a\u0003\u011a',
	'\u0005\u011a\u0d15\n\u011a\u0003\u011a\u0005\u011a\u0d18\n\u011a\u0003',
	'\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0005',
	'\u011a\u0d20\n\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a',
	'\u0005\u011a\u0d26\n\u011a\u0005\u011a\u0d28\n\u011a\u0005\u011a\u0d2a',
	'\n\u011a\u0003\u011a\u0005\u011a\u0d2d\n\u011a\u0003\u011a\u0005\u011a',
	'\u0d30\n\u011a\u0003\u011b\u0003\u011b\u0005\u011b\u0d34\n\u011b\u0003',
	'\u011c\u0003\u011c\u0003\u011c\u0007\u011c\u0d39\n\u011c\f\u011c\u000e',
	'\u011c\u0d3c\u000b\u011c\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d',
	'\u0007\u011d\u0d42\n\u011d\f\u011d\u000e\u011d\u0d45\u000b\u011d\u0003',
	'\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011f\u0003\u011f\u0003',
	'\u011f\u0005\u011f\u0d4e\n\u011f\u0003\u011f\u0005\u011f\u0d51\n\u011f',
	'\u0003\u011f\u0005\u011f\u0d54\n\u011f\u0003\u011f\u0005\u011f\u0d57',
	'\n\u011f\u0003\u0120\u0003\u0120\u0005\u0120\u0d5b\n\u0120\u0003\u0121',
	'\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121',
	'\u0003\u0121\u0005\u0121\u0d65\n\u0121\u0003\u0122\u0003\u0122\u0003',
	'\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0005',
	'\u0122\u0d6f\n\u0122\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123',
	'\u0003\u0123\u0003\u0123\u0005\u0123\u0d77\n\u0123\u0003\u0124\u0003',
	'\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u0d7f',
	'\n\u0124\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125',
	'\u0005\u0125\u0d86\n\u0125\u0003\u0126\u0003\u0126\u0003\u0127\u0003',
	'\u0127\u0003\u0127\u0007\u0127\u0d8d\n\u0127\f\u0127\u000e\u0127\u0d90',
	'\u000b\u0127\u0003\u0128\u0003\u0128\u0003\u0128\u0007\u0128\u0d95\n',
	'\u0128\f\u0128\u000e\u0128\u0d98\u000b\u0128\u0003\u0129\u0003\u0129',
	'\u0003\u0129\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0006\u012a',
	'\u0da1\n\u012a\r\u012a\u000e\u012a\u0da2\u0003\u012a\u0005\u012a\u0da6',
	'\n\u012a\u0003\u012b\u0003\u012b\u0007\u012b\u0daa\n\u012b\f\u012b\u000e',
	'\u012b\u0dad\u000b\u012b\u0003\u012b\u0003\u012b\u0007\u012b\u0db1\n',
	'\u012b\f\u012b\u000e\u012b\u0db4\u000b\u012b\u0003\u012b\u0003\u012b',
	'\u0007\u012b\u0db8\n\u012b\f\u012b\u000e\u012b\u0dbb\u000b\u012b\u0003',
	'\u012b\u0003\u012b\u0007\u012b\u0dbf\n\u012b\f\u012b\u000e\u012b\u0dc2',
	'\u000b\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0005\u012b',
	'\u0dc8\n\u012b\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0003',
	'\u012c\u0003\u012c\u0003\u012c\u0005\u012c\u0dd1\n\u012c\u0007\u012c',
	'\u0dd3\n\u012c\f\u012c\u000e\u012c\u0dd6\u000b\u012c\u0003\u012d\u0003',
	'\u012d\u0003\u012d\u0003\u012d\u0005\u012d\u0ddc\n\u012d\u0003\u012d',
	'\u0007\u012d\u0ddf\n\u012d\f\u012d\u000e\u012d\u0de2\u000b\u012d\u0003',
	'\u012e\u0005\u012e\u0de5\n\u012e\u0003\u012e\u0003\u012e\u0003\u012e',
	'\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u0130\u0003\u0130',
	'\u0003\u0131\u0003\u0131\u0003\u0131\u0003\u0131\u0003\u0131\u0003\u0131',
	'\u0003\u0131\u0003\u0131\u0005\u0131\u0df8\n\u0131\u0003\u0131\u0003',
	'\u0131\u0003\u0131\u0005\u0131\u0dfd\n\u0131\u0003\u0131\u0003\u0131',
	'\u0003\u0131\u0005\u0131\u0e02\n\u0131\u0003\u0131\u0003\u0131\u0003',
	'\u0131\u0003\u0131\u0005\u0131\u0e08\n\u0131\u0003\u0132\u0003\u0132',
	'\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132',
	'\u0003\u0132\u0007\u0132\u0e13\n\u0132\f\u0132\u000e\u0132\u0e16\u000b',
	'\u0132\u0005\u0132\u0e18\n\u0132\u0003\u0132\u0005\u0132\u0e1b\n\u0132',
	'\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132',
	'\u0003\u0132\u0003\u0132\u0007\u0132\u0e25\n\u0132\f\u0132\u000e\u0132',
	'\u0e28\u000b\u0132\u0005\u0132\u0e2a\n\u0132\u0003\u0132\u0005\u0132',
	'\u0e2d\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003',
	'\u0132\u0003\u0132\u0005\u0132\u0e35\n\u0132\u0003\u0132\u0003\u0132',
	'\u0003\u0132\u0003\u0132\u0003\u0132\u0007\u0132\u0e3c\n\u0132\f\u0132',
	'\u000e\u0132\u0e3f\u000b\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u0e43',
	'\n\u0132\u0005\u0132\u0e45\n\u0132\u0003\u0133\u0003\u0133\u0003\u0134',
	'\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134',
	'\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0007\u0134\u0e54\n',
	'\u0134\f\u0134\u000e\u0134\u0e57\u000b\u0134\u0005\u0134\u0e59\n\u0134',
	'\u0003\u0134\u0003\u0134\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135',
	'\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0005\u0135',
	'\u0e66\n\u0135\u0003\u0136\u0003\u0136\u0005\u0136\u0e6a\n\u0136\u0003',
	'\u0137\u0003\u0137\u0005\u0137\u0e6e\n\u0137\u0003\u0137\u0005\u0137',
	'\u0e71\n\u0137\u0003\u0137\u0005\u0137\u0e74\n\u0137\u0003\u0137\u0005',
	'\u0137\u0e77\n\u0137\u0003\u0138\u0003\u0138\u0005\u0138\u0e7b\n\u0138',
	'\u0003\u0138\u0005\u0138\u0e7e\n\u0138\u0003\u0138\u0005\u0138\u0e81',
	'\n\u0138\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139',
	'\u0005\u0139\u0e88\n\u0139\u0003\u013a\u0003\u013a\u0003\u013a\u0005',
	'\u013a\u0e8d\n\u013a\u0003\u013a\u0003\u013a\u0003\u013b\u0003\u013b',
	'\u0003\u013b\u0003\u013b\u0005\u013b\u0e95\n\u013b\u0003\u013b\u0003',
	'\u013b\u0003\u013c\u0003\u013c\u0005\u013c\u0e9b\n\u013c\u0003\u013c',
	'\u0003\u013c\u0003\u013c\u0005\u013c\u0ea0\n\u013c\u0003\u013c\u0003',
	'\u013c\u0005\u013c\u0ea4\n\u013c\u0003\u013d\u0003\u013d\u0003\u013d',
	'\u0005\u013d\u0ea9\n\u013d\u0003\u013e\u0003\u013e\u0003\u013e\u0003',
	'\u013e\u0003\u013e\u0005\u013e\u0eb0\n\u013e\u0003\u013e\u0003\u013e',
	'\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e',
	'\u0003\u013e\u0003\u013e\u0007\u013e\u0ebc\n\u013e\f\u013e\u000e\u013e',
	'\u0ebf\u000b\u013e\u0005\u013e\u0ec1\n\u013e\u0003\u013e\u0003\u013e',
	'\u0005\u013e\u0ec5\n\u013e\u0003\u013f\u0003\u013f\u0003\u013f\u0003',
	'\u0140\u0003\u0140\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0142\u0003',
	'\u0142\u0003\u0142\u0007\u0142\u0ed2\n\u0142\f\u0142\u000e\u0142\u0ed5',
	'\u000b\u0142\u0003\u0143\u0003\u0143\u0003\u0144\u0003\u0144\u0003\u0144',
	'\u0003\u0144\u0003\u0144\u0005\u0144\u0ede\n\u0144\u0003\u0144\u0003',
	'\u0144\u0003\u0144\u0003\u0144\u0003\u0144\u0007\u0144\u0ee5\n\u0144',
	'\f\u0144\u000e\u0144\u0ee8\u000b\u0144\u0005\u0144\u0eea\n\u0144\u0003',
	'\u0144\u0003\u0144\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003',
	'\u0146\u0003\u0146\u0003\u0146\u0005\u0146\u0ef5\n\u0146\u0003\u0147',
	'\u0003\u0147\u0003\u0147\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148',
	'\u0003\u0148\u0007\u0148\u0eff\n\u0148\f\u0148\u000e\u0148\u0f02\u000b',
	'\u0148\u0003\u0148\u0003\u0148\u0003\u0149\u0003\u0149\u0003\u0149\u0003',
	'\u0149\u0003\u0149\u0005\u0149\u0f0b\n\u0149\u0003\u0149\u0003\u0149',
	'\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0007\u0149\u0f13\n',
	'\u0149\f\u0149\u000e\u0149\u0f16\u000b\u0149\u0003\u0149\u0003\u0149',
	'\u0005\u0149\u0f1a\n\u0149\u0003\u014a\u0003\u014a\u0005\u014a\u0f1e',
	'\n\u014a\u0003\u014b\u0003\u014b\u0005\u014b\u0f22\n\u014b\u0003\u014b',
	'\u0003\u014b\u0007\u014b\u0f26\n\u014b\f\u014b\u000e\u014b\u0f29\u000b',
	'\u014b\u0003\u014b\u0003\u014b\u0003\u014c\u0003\u014c\u0003\u014d\u0003',
	'\u014d\u0003\u014d\u0003\u014e\u0003\u014e\u0003\u014f\u0003\u014f\u0003',
	'\u014f\u0003\u014f\u0003\u0150\u0003\u0150\u0005\u0150\u0f3a\n\u0150',
	'\u0003\u0151\u0003\u0151\u0006\u0151\u0f3e\n\u0151\r\u0151\u000e\u0151',
	'\u0f3f\u0003\u0152\u0003\u0152\u0005\u0152\u0f44\n\u0152\u0003\u0153',
	'\u0003\u0153\u0003\u0153\u0003\u0153\u0007\u0153\u0f4a\n\u0153\f\u0153',
	'\u000e\u0153\u0f4d\u000b\u0153\u0003\u0153\u0003\u0153\u0003\u0154\u0003',
	'\u0154\u0003\u0154\u0007\u0154\u0f54\n\u0154\f\u0154\u000e\u0154\u0f57',
	'\u000b\u0154\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155',
	'\u0007\u0155\u0f5e\n\u0155\f\u0155\u000e\u0155\u0f61\u000b\u0155\u0003',
	'\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0157\u0003\u0157\u0003',
	'\u0157\u0003\u0157\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003',
	'\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0005\u0159\u0f73\n\u0159',
	'\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0005\u015a\u0f79\n',
	'\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0007\u015a\u0f7e\n\u015a',
	'\f\u015a\u000e\u015a\u0f81\u000b\u015a\u0005\u015a\u0f83\n\u015a\u0005',
	'\u015a\u0f85\n\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0005\u015a',
	'\u0f8a\n\u015a\u0003\u015b\u0003\u015b\u0005\u015b\u0f8e\n\u015b\u0003',
	'\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003',
	'\u015c\u0003\u015d\u0003\u015d\u0003\u015d\u0003\u015d\u0003\u015d\u0003',
	'\u015d\u0003\u015d\u0006\u015d\u0f9e\n\u015d\r\u015d\u000e\u015d\u0f9f',
	'\u0003\u015d\u0003\u015d\u0005\u015d\u0fa4\n\u015d\u0003\u015d\u0003',
	'\u015d\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0003',
	'\u015e\u0006\u015e\u0fae\n\u015e\r\u015e\u000e\u015e\u0faf\u0003\u015e',
	'\u0003\u015e\u0005\u015e\u0fb4\n\u015e\u0003\u015e\u0003\u015e\u0003',
	'\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0005\u015f\u0fbd',
	'\n\u015f\u0003\u015f\u0003\u015f\u0003\u0160\u0003\u0160\u0003\u0161',
	'\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161',
	'\u0003\u0162\u0003\u0162\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163',
	'\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0003\u0163',
	'\u0003\u0163\u0003\u0163\u0005\u0163\u0fd8\n\u0163\u0003\u0164\u0003',
	'\u0164\u0006\u0164\u0fdc\n\u0164\r\u0164\u000e\u0164\u0fdd\u0003\u0165',
	'\u0003\u0165\u0003\u0165\u0003\u0166\u0003\u0166\u0003\u0166\u0005\u0166',
	'\u0fe6\n\u0166\u0003\u0167\u0003\u0167\u0003\u0167\u0005\u0167\u0feb',
	'\n\u0167\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0169\u0003\u0169',
	'\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016b\u0003\u016b\u0003\u016b',
	'\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b',
	'\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b',
	'\u0005\u016b\u1004\n\u016b\u0003\u016c\u0003\u016c\u0003\u016c\u0003',
	'\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0003',
	'\u016c\u0003\u016c\u0003\u016c\u0005\u016c\u1012\n\u016c\u0003\u016d',
	'\u0003\u016d\u0003\u016d\u0003\u016d\u0003\u016d\u0003\u016d\u0003\u016d',
	'\u0003\u016d\u0003\u016d\u0003\u016d\u0003\u016d\u0005\u016d\u101f\n',
	'\u016d\u0003\u016e\u0003\u016e\u0003\u016f\u0003\u016f\u0003\u016f\u0003',
	'\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0005',
	'\u016f\u102c\n\u016f\u0003\u0170\u0003\u0170\u0003\u0171\u0003\u0171',
	'\u0003\u0172\u0003\u0172\u0003\u0173\u0003\u0173\u0003\u0174\u0003\u0174',
	'\u0003\u0175\u0003\u0175\u0003\u0176\u0003\u0176\u0003\u0177\u0003\u0177',
	'\u0003\u0177\u0003\u0177\u0003\u0177\u0005\u0177\u1041\n\u0177\u0003',
	'\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0179\u0003\u0179\u0003',
	'\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0005\u0179\u104e',
	'\n\u0179\u0003\u017a\u0003\u017a\u0003\u017b\u0003\u017b\u0003\u017c',
	'\u0003\u017c\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d',
	'\u0003\u017d\u0003\u017d\u0003\u017d\u0007\u017d\u105e\n\u017d\f\u017d',
	'\u000e\u017d\u1061\u000b\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003',
	'\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003',
	'\u017d\u0003\u017d\u0003\u017d\u0005\u017d\u106f\n\u017d\u0003\u017d',
	'\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d',
	'\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d',
	'\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d',
	'\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d',
	'\u0003\u017d\u0003\u017d\u0005\u017d\u108c\n\u017d\u0003\u017d\u0003',
	'\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003',
	'\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003',
	'\u017d\u0003\u017d\u0007\u017d\u109d\n\u017d\f\u017d\u000e\u017d\u10a0',
	'\u000b\u017d\u0003\u017e\u0003\u017e\u0003\u017e\u0003\u017e\u0003\u017f',
	'\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0005\u017f',
	'\u10ac\n\u017f\u0003\u0180\u0003\u0180\u0003\u0180\u0003\u0180\u0003',
	'\u0180\u0003\u0180\u0003\u0180\u0003\u0180\u0003\u0180\u0003\u0180\u0003',
	'\u0180\u0003\u0180\u0003\u0180\u0005\u0180\u10bb\n\u0180\u0003\u0181',
	'\u0003\u0181\u0005\u0181\u10bf\n\u0181\u0003\u0182\u0003\u0182\u0003',
	'\u0182\u0003\u0182\u0005\u0182\u10c5\n\u0182\u0003\u0183\u0003\u0183',
	'\u0003\u0184\u0003\u0184\u0003\u0185\u0003\u0185\u0005\u0185\u10cd\n',
	'\u0185\u0003\u0186\u0003\u0186\u0003\u0186\u0003\u0186\u0003\u0186\u0007',
	'\u0186\u10d4\n\u0186\f\u0186\u000e\u0186\u10d7\u000b\u0186\u0003\u0186',
	'\u0003\u0186\u0003\u0187\u0003\u0187\u0003\u0187\u0005\u0187\u10de\n',
	'\u0187\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0007',
	'\u0188\u10e5\n\u0188\f\u0188\u000e\u0188\u10e8\u000b\u0188\u0003\u0188',
	'\u0003\u0188\u0003\u0189\u0003\u0189\u0003\u0189\u0003\u0189\u0003\u018a',
	'\u0003\u018a\u0003\u018b\u0003\u018b\u0003\u018c\u0003\u018c\u0003\u018c',
	'\u0005\u018c\u10f7\n\u018c\u0003\u018d\u0003\u018d\u0005\u018d\u10fb',
	'\n\u018d\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e',
	'\u0005\u018e\u1102\n\u018e\u0003\u018f\u0003\u018f\u0005\u018f\u1106',
	'\n\u018f\u0003\u0190\u0003\u0190\u0003\u0191\u0003\u0191\u0003\u0192',
	'\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192',
	'\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192',
	'\u0003\u0192\u0005\u0192\u111a\n\u0192\u0003\u0193\u0003\u0193\u0003',
	'\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0005\u0193\u1123',
	'\n\u0193\u0003\u0194\u0003\u0194\u0003\u0194\u0007\u0194\u1128\n\u0194',
	'\f\u0194\u000e\u0194\u112b\u000b\u0194\u0003\u0195\u0003\u0195\u0003',
	'\u0195\u0005\u0195\u1130\n\u0195\u0003\u0196\u0003\u0196\u0003\u0196',
	'\u0007\u0196\u1135\n\u0196\f\u0196\u000e\u0196\u1138\u000b\u0196\u0003',
	'\u0197\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0197\u0005\u0197\u113f',
	'\n\u0197\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0199',
	'\u0003\u0199\u0003\u0199\u0005\u0199\u1148\n\u0199\u0003\u019a\u0003',
	'\u019a\u0003\u019a\u0003\u019b\u0003\u019b\u0005\u019b\u114f\n\u019b',
	'\u0003\u019c\u0003\u019c\u0003\u019d\u0003\u019d\u0003\u019e\u0003\u019e',
	'\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u019f',
	'\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u019f',
	'\u0003\u019f\u0005\u019f\u1164\n\u019f\u0003\u019f\u0003\u019f\u0005',
	'\u019f\u1168\n\u019f\u0005\u019f\u116a\n\u019f\u0005\u019f\u116c\n\u019f',
	'\u0003\u01a0\u0003\u01a0\u0003\u01a0\u0003\u01a0\u0003\u01a1\u0003\u01a1',
	'\u0005\u01a1\u1174\n\u01a1\u0003\u01a1\u0003\u01a1\u0003\u01a1\u0003',
	'\u01a2\u0003\u01a2\u0003\u01a2\u0003\u01a2\u0003\u01a2\u0003\u01a2\u0003',
	'\u01a2\u0003\u01a2\u0003\u01a2\u0003\u01a2\u0003\u01a2\u0003\u01a2\u0005',
	'\u01a2\u1185\n\u01a2\u0003\u01a3\u0003\u01a3\u0003\u01a3\u0003\u01a3',
	'\u0003\u01a3\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0007\u01a4\u118f\n',
	'\u01a4\f\u01a4\u000e\u01a4\u1192\u000b\u01a4\u0003\u01a5\u0003\u01a5',
	'\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0003\u01a7\u0003\u01a7\u0003\u01a7',
	'\u0007\u01a7\u119c\n\u01a7\f\u01a7\u000e\u01a7\u119f\u000b\u01a7\u0003',
	'\u01a8\u0003\u01a8\u0003\u01a8\u0007\u01a8\u11a4\n\u01a8\f\u01a8\u000e',
	'\u01a8\u11a7\u000b\u01a8\u0003\u01a9\u0003\u01a9\u0003\u01a9\u0003\u01a9',
	'\u0003\u01aa\u0003\u01aa\u0003\u01ab\u0003\u01ab\u0003\u01ac\u0003\u01ac',
	'\u0003\u01ac\u0003\u01ac\u0005\u01ac\u11b5\n\u01ac\u0003\u01ad\u0003',
	'\u01ad\u0003\u01ad\u0003\u01ae\u0003\u01ae\u0003\u01ae\u0003\u01ae\u0003',
	'\u01ae\u0003\u01ae\u0003\u01ae\u0003\u01af\u0003\u01af\u0003\u01af\u0003',
	'\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0003',
	'\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0003',
	'\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0003\u01af\u0005\u01af\u11d5',
	'\n\u01af\u0003\u01b0\u0003\u01b0\u0003\u01b0\u0003\u01b0\u0003\u01b0',
	'\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1',
	'\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2',
	'\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b2',
	'\u0005\u01b2\u11ee\n\u01b2\u0003\u01b3\u0003\u01b3\u0003\u01b3\u0007',
	'\u01b3\u11f3\n\u01b3\f\u01b3\u000e\u01b3\u11f6\u000b\u01b3\u0003\u01b4',
	'\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4',
	'\u0003\u01b4\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5',
	'\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5',
	'\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0005\u01b5\u120f\n',
	'\u01b5\u0003\u01b6\u0003\u01b6\u0003\u01b6\u0003\u01b6\u0003\u01b6\u0003',
	'\u01b6\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003',
	'\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0005\u01b7\u1220\n\u01b7',
	'\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0005\u01b7\u1225\n\u01b7\u0003',
	'\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003',
	'\u01b8\u0003\u01b8\u0003\u01b8\u0005\u01b8\u1230\n\u01b8\u0003\u01b8',
	'\u0003\u01b8\u0003\u01b8\u0005\u01b8\u1235\n\u01b8\u0003\u01b9\u0003',
	'\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003',
	'\u01b9\u0002\u0003\u02f8\u01ba\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012',
	'\u0014\u0016\u0018\u001a\u001c\u001e "$&(*,.02468:<>@BDFHJLNPRTVXZ',
	'\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e',
	'\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6',
	'\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be',
	'\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6',
	'\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee',
	'\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106',
	'\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e',
	'\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136',
	'\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e',
	'\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166',
	'\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e',
	'\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196',
	'\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae',
	'\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6',
	'\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de',
	'\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6',
	'\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e',
	'\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226',
	'\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e',
	'\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256',
	'\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e',
	'\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286',
	'\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e',
	'\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6',
	'\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce',
	'\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6',
	'\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe',
	'\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316',
	'\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e',
	'\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346',
	'\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e',
	'\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0002$\u0003',
	'\u0002\u0136\u0139\u0003\u0002\u00e4\u00e5\u0004\u0002\u00b7\u00b7\u00ba',
	'\u00ba\u0003\u0002\u0088\u0089\u0004\u0002\u000f\u000fJJ\u0003\u0002',
	'\u0092\u0093\u0004\u0002\u00b8\u00b8\u00bb\u00bb\u0004\u0002\u0017\u0017',
	'\u00b6\u00b6\u0003\u0002\u00c3\u00c4\u000b\u0002\u0005\u0005\u0019\u0019',
	'\u001b\u001bCCEEKK\u00af\u00af\u00c0\u00c0\u00e2\u00e3\u0005\u0002K',
	'K\u0088\u0088\u014e\u014e\u0004\u0002\u008f\u0090\u00da\u00da\u0003',
	'\u0002\u0152\u0157\u0005\u0002\u014f\u0153\u0155\u0155\u0158\u0158\u0003',
	'\u0002\u007f\u0080\u0003\u0002\u0127\u0128\u0003\u0002\u000e\u000f\u0004',
	'\u0002\u0005\u0005\u001a\u001a\u0003\u0002\u00ed\u00ee\u0004\u0002m',
	'm\u0086\u0086\u0003\u0002\u00e7\u00e8\u0005\u0002\u010c\u010c\u010e',
	'\u0111\u0113\u0115\u0004\u0002\u010c\u010c\u010e\u0115\u0004\u0002\u0178',
	'\u0178\u017d\u017d\u0004\u0002\u016c\u016d\u0172\u0172\u0004\u0002\u016b',
	'\u016b\u016e\u0170\u0003\u0002\u016c\u016d\u0004\u0002\n\n\u008a\u008b',
	'\u0003\u0002\u0003\u0004\u0004\u0002\u0164\u0164\u0166\u016a\u000f\u0002',
	'\u0007\n\f\fOU__be\u008a\u008b\u00a4\u00a5\u00b6\u00b6\u00ce\u00ce\u00d0',
	'\u00d0\u012f\u012f\u0164\u0173\u0175\u0175:\u0002\u000e\u0011\u001c',
	'\u001c&&(157:;=@FFHILLNNPPXX\\\\__cceegikkn\u0081\u0083\u0083\u0088',
	'\u0089\u008c\u008c\u008f\u0091\u0093\u0096\u0098\u009c\u009e\u00a3\u00a9',
	'\u00ae\u00b0\u00b0\u00b4\u00b5\u00b8\u00bb\u00be\u00c4\u00c6\u00c8\u00ca',
	'\u00ca\u00cc\u00cd\u00d2\u00d2\u00d5\u00d7\u00d9\u00de\u00e0\u00e2\u00e4',
	'\u00e6\u00e9\u00e9\u00f6\u00f6\u00f8\u00f8\u00fa\u00fb\u00fe\u0106\u0108',
	'\u0108\u010b\u0115\u0117\u0117\u011a\u011a\u011c\u0121\u0126\u012a\u012c',
	'\u012d\u0131\u014c\u0154\u0154\u0156\u0157\u0159\u0159\f\u0002\f\fO',
	'OQUWWYYbbdd\u00d0\u00d0\u00f0\u00f1\u00f5\u00f5\u0005\u0002\u0013\u0013',
	'\u00f9\u00f9\u014d\u014d\u0002\u1398\u0002\u0378\u0003\u0002\u0002\u0002',
	'\u0004\u037d\u0003\u0002\u0002\u0002\u0006\u037f\u0003\u0002\u0002\u0002',
	'\b\u0383\u0003\u0002\u0002\u0002\n\u0385\u0003\u0002\u0002\u0002\f\u039f',
	'\u0003\u0002\u0002\u0002\u000e\u03a1\u0003\u0002\u0002\u0002\u0010\u03a3',
	'\u0003\u0002\u0002\u0002\u0012\u03b1\u0003\u0002\u0002\u0002\u0014\u03b3',
	'\u0003\u0002\u0002\u0002\u0016\u03c3\u0003\u0002\u0002\u0002\u0018\u03cc',
	'\u0003\u0002\u0002\u0002\u001a\u03d4\u0003\u0002\u0002\u0002\u001c\u03e1',
	'\u0003\u0002\u0002\u0002\u001e\u03f8\u0003\u0002\u0002\u0002 \u0407',
	'\u0003\u0002\u0002\u0002"\u040b\u0003\u0002\u0002\u0002$\u0413\u0003',
	'\u0002\u0002\u0002&\u0449\u0003\u0002\u0002\u0002(\u044b\u0003\u0002',
	'\u0002\u0002*\u044e\u0003\u0002\u0002\u0002,\u0450\u0003\u0002\u0002',
	'\u0002.\u0454\u0003\u0002\u0002\u00020\u0457\u0003\u0002\u0002\u0002',
	'2\u045a\u0003\u0002\u0002\u00024\u045e\u0003\u0002\u0002\u00026\u0461',
	'\u0003\u0002\u0002\u00028\u0472\u0003\u0002\u0002\u0002:\u0475\u0003',
	'\u0002\u0002\u0002<\u0479\u0003\u0002\u0002\u0002>\u0481\u0003\u0002',
	'\u0002\u0002@\u0484\u0003\u0002\u0002\u0002B\u048d\u0003\u0002\u0002',
	'\u0002D\u0490\u0003\u0002\u0002\u0002F\u04c7\u0003\u0002\u0002\u0002',
	'H\u04d1\u0003\u0002\u0002\u0002J\u04f6\u0003\u0002\u0002\u0002L\u0509',
	'\u0003\u0002\u0002\u0002N\u0519\u0003\u0002\u0002\u0002P\u051b\u0003',
	'\u0002\u0002\u0002R\u0526\u0003\u0002\u0002\u0002T\u052a\u0003\u0002',
	'\u0002\u0002V\u052f\u0003\u0002\u0002\u0002X\u0531\u0003\u0002\u0002',
	'\u0002Z\u0536\u0003\u0002\u0002\u0002\\\u053b\u0003\u0002\u0002\u0002',
	'^\u0540\u0003\u0002\u0002\u0002`\u0544\u0003\u0002\u0002\u0002b\u054c',
	'\u0003\u0002\u0002\u0002d\u0551\u0003\u0002\u0002\u0002f\u0556\u0003',
	'\u0002\u0002\u0002h\u055a\u0003\u0002\u0002\u0002j\u056e\u0003\u0002',
	'\u0002\u0002l\u057b\u0003\u0002\u0002\u0002n\u0583\u0003\u0002\u0002',
	'\u0002p\u0585\u0003\u0002\u0002\u0002r\u058e\u0003\u0002\u0002\u0002',
	't\u0592\u0003\u0002\u0002\u0002v\u0599\u0003\u0002\u0002\u0002x\u05a0',
	'\u0003\u0002\u0002\u0002z\u05a7\u0003\u0002\u0002\u0002|\u05aa\u0003',
	'\u0002\u0002\u0002~\u05c5\u0003\u0002\u0002\u0002\u0080\u05d0\u0003',
	'\u0002\u0002\u0002\u0082\u05d4\u0003\u0002\u0002\u0002\u0084\u05d6\u0003',
	'\u0002\u0002\u0002\u0086\u05e3\u0003\u0002\u0002\u0002\u0088\u05e5\u0003',
	'\u0002\u0002\u0002\u008a\u05ed\u0003\u0002\u0002\u0002\u008c\u05f6\u0003',
	'\u0002\u0002\u0002\u008e\u05f8\u0003\u0002\u0002\u0002\u0090\u05fd\u0003',
	'\u0002\u0002\u0002\u0092\u0601\u0003\u0002\u0002\u0002\u0094\u0609\u0003',
	'\u0002\u0002\u0002\u0096\u060d\u0003\u0002\u0002\u0002\u0098\u0616\u0003',
	'\u0002\u0002\u0002\u009a\u0618\u0003\u0002\u0002\u0002\u009c\u061e\u0003',
	'\u0002\u0002\u0002\u009e\u0622\u0003\u0002\u0002\u0002\u00a0\u062f\u0003',
	'\u0002\u0002\u0002\u00a2\u0631\u0003\u0002\u0002\u0002\u00a4\u0635\u0003',
	'\u0002\u0002\u0002\u00a6\u0659\u0003\u0002\u0002\u0002\u00a8\u0663\u0003',
	'\u0002\u0002\u0002\u00aa\u0669\u0003\u0002\u0002\u0002\u00ac\u0672\u0003',
	'\u0002\u0002\u0002\u00ae\u067b\u0003\u0002\u0002\u0002\u00b0\u067f\u0003',
	'\u0002\u0002\u0002\u00b2\u0687\u0003\u0002\u0002\u0002\u00b4\u068b\u0003',
	'\u0002\u0002\u0002\u00b6\u068e\u0003\u0002\u0002\u0002\u00b8\u0694\u0003',
	'\u0002\u0002\u0002\u00ba\u069d\u0003\u0002\u0002\u0002\u00bc\u06a1\u0003',
	'\u0002\u0002\u0002\u00be\u06a4\u0003\u0002\u0002\u0002\u00c0\u06af\u0003',
	'\u0002\u0002\u0002\u00c2\u06c0\u0003\u0002\u0002\u0002\u00c4\u06c2\u0003',
	'\u0002\u0002\u0002\u00c6\u06c7\u0003\u0002\u0002\u0002\u00c8\u06db\u0003',
	'\u0002\u0002\u0002\u00ca\u06df\u0003\u0002\u0002\u0002\u00cc\u06e6\u0003',
	'\u0002\u0002\u0002\u00ce\u06f6\u0003\u0002\u0002\u0002\u00d0\u0782\u0003',
	'\u0002\u0002\u0002\u00d2\u0784\u0003\u0002\u0002\u0002\u00d4\u078c\u0003',
	'\u0002\u0002\u0002\u00d6\u0791\u0003\u0002\u0002\u0002\u00d8\u0793\u0003',
	'\u0002\u0002\u0002\u00da\u0799\u0003\u0002\u0002\u0002\u00dc\u079d\u0003',
	'\u0002\u0002\u0002\u00de\u07a1\u0003\u0002\u0002\u0002\u00e0\u07a5\u0003',
	'\u0002\u0002\u0002\u00e2\u07af\u0003\u0002\u0002\u0002\u00e4\u07ba\u0003',
	'\u0002\u0002\u0002\u00e6\u07cb\u0003\u0002\u0002\u0002\u00e8\u07dd\u0003',
	'\u0002\u0002\u0002\u00ea\u07e2\u0003\u0002\u0002\u0002\u00ec\u07e5\u0003',
	'\u0002\u0002\u0002\u00ee\u07e9\u0003\u0002\u0002\u0002\u00f0\u07f0\u0003',
	'\u0002\u0002\u0002\u00f2\u07f9\u0003\u0002\u0002\u0002\u00f4\u07ff\u0003',
	'\u0002\u0002\u0002\u00f6\u0801\u0003\u0002\u0002\u0002\u00f8\u0811\u0003',
	'\u0002\u0002\u0002\u00fa\u0826\u0003\u0002\u0002\u0002\u00fc\u0828\u0003',
	'\u0002\u0002\u0002\u00fe\u0830\u0003\u0002\u0002\u0002\u0100\u0837\u0003',
	'\u0002\u0002\u0002\u0102\u0839\u0003\u0002\u0002\u0002\u0104\u0847\u0003',
	'\u0002\u0002\u0002\u0106\u0849\u0003\u0002\u0002\u0002\u0108\u084d\u0003',
	'\u0002\u0002\u0002\u010a\u0851\u0003\u0002\u0002\u0002\u010c\u0855\u0003',
	'\u0002\u0002\u0002\u010e\u0859\u0003\u0002\u0002\u0002\u0110\u0868\u0003',
	'\u0002\u0002\u0002\u0112\u0870\u0003\u0002\u0002\u0002\u0114\u0873\u0003',
	'\u0002\u0002\u0002\u0116\u0875\u0003\u0002\u0002\u0002\u0118\u0881\u0003',
	'\u0002\u0002\u0002\u011a\u088b\u0003\u0002\u0002\u0002\u011c\u088e\u0003',
	'\u0002\u0002\u0002\u011e\u0899\u0003\u0002\u0002\u0002\u0120\u08a1\u0003',
	'\u0002\u0002\u0002\u0122\u08bc\u0003\u0002\u0002\u0002\u0124\u08d8\u0003',
	'\u0002\u0002\u0002\u0126\u08de\u0003\u0002\u0002\u0002\u0128\u08e5\u0003',
	'\u0002\u0002\u0002\u012a\u08ef\u0003\u0002\u0002\u0002\u012c\u08f3\u0003',
	'\u0002\u0002\u0002\u012e\u08f5\u0003\u0002\u0002\u0002\u0130\u08f8\u0003',
	'\u0002\u0002\u0002\u0132\u08fb\u0003\u0002\u0002\u0002\u0134\u08fd\u0003',
	'\u0002\u0002\u0002\u0136\u090a\u0003\u0002\u0002\u0002\u0138\u091b\u0003',
	'\u0002\u0002\u0002\u013a\u0929\u0003\u0002\u0002\u0002\u013c\u092b\u0003',
	'\u0002\u0002\u0002\u013e\u092e\u0003\u0002\u0002\u0002\u0140\u0931\u0003',
	'\u0002\u0002\u0002\u0142\u093a\u0003\u0002\u0002\u0002\u0144\u094e\u0003',
	'\u0002\u0002\u0002\u0146\u0950\u0003\u0002\u0002\u0002\u0148\u0953\u0003',
	'\u0002\u0002\u0002\u014a\u0967\u0003\u0002\u0002\u0002\u014c\u0969\u0003',
	'\u0002\u0002\u0002\u014e\u0970\u0003\u0002\u0002\u0002\u0150\u097b\u0003',
	'\u0002\u0002\u0002\u0152\u097d\u0003\u0002\u0002\u0002\u0154\u0984\u0003',
	'\u0002\u0002\u0002\u0156\u0988\u0003\u0002\u0002\u0002\u0158\u098e\u0003',
	'\u0002\u0002\u0002\u015a\u0994\u0003\u0002\u0002\u0002\u015c\u0999\u0003',
	'\u0002\u0002\u0002\u015e\u09a1\u0003\u0002\u0002\u0002\u0160\u09a3\u0003',
	'\u0002\u0002\u0002\u0162\u09ab\u0003\u0002\u0002\u0002\u0164\u09af\u0003',
	'\u0002\u0002\u0002\u0166\u09b1\u0003\u0002\u0002\u0002\u0168\u09bb\u0003',
	'\u0002\u0002\u0002\u016a\u09be\u0003\u0002\u0002\u0002\u016c\u09c1\u0003',
	'\u0002\u0002\u0002\u016e\u09c4\u0003\u0002\u0002\u0002\u0170\u09cc\u0003',
	'\u0002\u0002\u0002\u0172\u09d4\u0003\u0002\u0002\u0002\u0174\u09dc\u0003',
	'\u0002\u0002\u0002\u0176\u09e4\u0003\u0002\u0002\u0002\u0178\u09e6\u0003',
	'\u0002\u0002\u0002\u017a\u09f3\u0003\u0002\u0002\u0002\u017c\u09fb\u0003',
	'\u0002\u0002\u0002\u017e\u0a04\u0003\u0002\u0002\u0002\u0180\u0a06\u0003',
	'\u0002\u0002\u0002\u0182\u0a08\u0003\u0002\u0002\u0002\u0184\u0a0d\u0003',
	'\u0002\u0002\u0002\u0186\u0a13\u0003\u0002\u0002\u0002\u0188\u0a17\u0003',
	'\u0002\u0002\u0002\u018a\u0a1d\u0003\u0002\u0002\u0002\u018c\u0a25\u0003',
	'\u0002\u0002\u0002\u018e\u0a27\u0003\u0002\u0002\u0002\u0190\u0a2a\u0003',
	'\u0002\u0002\u0002\u0192\u0a2f\u0003\u0002\u0002\u0002\u0194\u0a3a\u0003',
	'\u0002\u0002\u0002\u0196\u0a47\u0003\u0002\u0002\u0002\u0198\u0a49\u0003',
	'\u0002\u0002\u0002\u019a\u0a51\u0003\u0002\u0002\u0002\u019c\u0a55\u0003',
	'\u0002\u0002\u0002\u019e\u0a5d\u0003\u0002\u0002\u0002\u01a0\u0a61\u0003',
	'\u0002\u0002\u0002\u01a2\u0a63\u0003\u0002\u0002\u0002\u01a4\u0a69\u0003',
	'\u0002\u0002\u0002\u01a6\u0a6b\u0003\u0002\u0002\u0002\u01a8\u0a72\u0003',
	'\u0002\u0002\u0002\u01aa\u0a7a\u0003\u0002\u0002\u0002\u01ac\u0a7f\u0003',
	'\u0002\u0002\u0002\u01ae\u0a86\u0003\u0002\u0002\u0002\u01b0\u0a8e\u0003',
	'\u0002\u0002\u0002\u01b2\u0a92\u0003\u0002\u0002\u0002\u01b4\u0a94\u0003',
	'\u0002\u0002\u0002\u01b6\u0a9d\u0003\u0002\u0002\u0002\u01b8\u0aa3\u0003',
	'\u0002\u0002\u0002\u01ba\u0aa7\u0003\u0002\u0002\u0002\u01bc\u0ab3\u0003',
	'\u0002\u0002\u0002\u01be\u0ac1\u0003\u0002\u0002\u0002\u01c0\u0ac5\u0003',
	'\u0002\u0002\u0002\u01c2\u0ad1\u0003\u0002\u0002\u0002\u01c4\u0add\u0003',
	'\u0002\u0002\u0002\u01c6\u0ae2\u0003\u0002\u0002\u0002\u01c8\u0ae7\u0003',
	'\u0002\u0002\u0002\u01ca\u0ae9\u0003\u0002\u0002\u0002\u01cc\u0aec\u0003',
	'\u0002\u0002\u0002\u01ce\u0aef\u0003\u0002\u0002\u0002\u01d0\u0af6\u0003',
	'\u0002\u0002\u0002\u01d2\u0af8\u0003\u0002\u0002\u0002\u01d4\u0b05\u0003',
	'\u0002\u0002\u0002\u01d6\u0b2e\u0003\u0002\u0002\u0002\u01d8\u0b30\u0003',
	'\u0002\u0002\u0002\u01da\u0b35\u0003\u0002\u0002\u0002\u01dc\u0b3a\u0003',
	'\u0002\u0002\u0002\u01de\u0b41\u0003\u0002\u0002\u0002\u01e0\u0b5e\u0003',
	'\u0002\u0002\u0002\u01e2\u0b61\u0003\u0002\u0002\u0002\u01e4\u0b67\u0003',
	'\u0002\u0002\u0002\u01e6\u0b69\u0003\u0002\u0002\u0002\u01e8\u0b72\u0003',
	'\u0002\u0002\u0002\u01ea\u0b78\u0003\u0002\u0002\u0002\u01ec\u0b81\u0003',
	'\u0002\u0002\u0002\u01ee\u0b8d\u0003\u0002\u0002\u0002\u01f0\u0ba3\u0003',
	'\u0002\u0002\u0002\u01f2\u0ba5\u0003\u0002\u0002\u0002\u01f4\u0bbb\u0003',
	'\u0002\u0002\u0002\u01f6\u0bc0\u0003\u0002\u0002\u0002\u01f8\u0c03\u0003',
	'\u0002\u0002\u0002\u01fa\u0c17\u0003\u0002\u0002\u0002\u01fc\u0c26\u0003',
	'\u0002\u0002\u0002\u01fe\u0c32\u0003\u0002\u0002\u0002\u0200\u0c34\u0003',
	'\u0002\u0002\u0002\u0202\u0c3a\u0003\u0002\u0002\u0002\u0204\u0c3e\u0003',
	'\u0002\u0002\u0002\u0206\u0c47\u0003\u0002\u0002\u0002\u0208\u0c51\u0003',
	'\u0002\u0002\u0002\u020a\u0c53\u0003\u0002\u0002\u0002\u020c\u0c61\u0003',
	'\u0002\u0002\u0002\u020e\u0c67\u0003\u0002\u0002\u0002\u0210\u0c69\u0003',
	'\u0002\u0002\u0002\u0212\u0c6d\u0003\u0002\u0002\u0002\u0214\u0c6f\u0003',
	'\u0002\u0002\u0002\u0216\u0c73\u0003\u0002\u0002\u0002\u0218\u0c77\u0003',
	'\u0002\u0002\u0002\u021a\u0c7b\u0003\u0002\u0002\u0002\u021c\u0c82\u0003',
	'\u0002\u0002\u0002\u021e\u0c95\u0003\u0002\u0002\u0002\u0220\u0c9b\u0003',
	'\u0002\u0002\u0002\u0222\u0ca7\u0003\u0002\u0002\u0002\u0224\u0cae\u0003',
	'\u0002\u0002\u0002\u0226\u0cb6\u0003\u0002\u0002\u0002\u0228\u0cb8\u0003',
	'\u0002\u0002\u0002\u022a\u0ccc\u0003\u0002\u0002\u0002\u022c\u0cce\u0003',
	'\u0002\u0002\u0002\u022e\u0cd6\u0003\u0002\u0002\u0002\u0230\u0d0b\u0003',
	'\u0002\u0002\u0002\u0232\u0d11\u0003\u0002\u0002\u0002\u0234\u0d33\u0003',
	'\u0002\u0002\u0002\u0236\u0d35\u0003\u0002\u0002\u0002\u0238\u0d3d\u0003',
	'\u0002\u0002\u0002\u023a\u0d46\u0003\u0002\u0002\u0002\u023c\u0d56\u0003',
	'\u0002\u0002\u0002\u023e\u0d5a\u0003\u0002\u0002\u0002\u0240\u0d64\u0003',
	'\u0002\u0002\u0002\u0242\u0d6e\u0003\u0002\u0002\u0002\u0244\u0d76\u0003',
	'\u0002\u0002\u0002\u0246\u0d7e\u0003\u0002\u0002\u0002\u0248\u0d85\u0003',
	'\u0002\u0002\u0002\u024a\u0d87\u0003\u0002\u0002\u0002\u024c\u0d89\u0003',
	'\u0002\u0002\u0002\u024e\u0d91\u0003\u0002\u0002\u0002\u0250\u0d99\u0003',
	'\u0002\u0002\u0002\u0252\u0da5\u0003\u0002\u0002\u0002\u0254\u0dc7\u0003',
	'\u0002\u0002\u0002\u0256\u0dc9\u0003\u0002\u0002\u0002\u0258\u0ddb\u0003',
	'\u0002\u0002\u0002\u025a\u0de4\u0003\u0002\u0002\u0002\u025c\u0de9\u0003',
	'\u0002\u0002\u0002\u025e\u0ded\u0003\u0002\u0002\u0002\u0260\u0e07\u0003',
	'\u0002\u0002\u0002\u0262\u0e44\u0003\u0002\u0002\u0002\u0264\u0e46\u0003',
	'\u0002\u0002\u0002\u0266\u0e48\u0003\u0002\u0002\u0002\u0268\u0e65\u0003',
	'\u0002\u0002\u0002\u026a\u0e69\u0003\u0002\u0002\u0002\u026c\u0e6b\u0003',
	'\u0002\u0002\u0002\u026e\u0e78\u0003\u0002\u0002\u0002\u0270\u0e87\u0003',
	'\u0002\u0002\u0002\u0272\u0e8c\u0003\u0002\u0002\u0002\u0274\u0e90\u0003',
	'\u0002\u0002\u0002\u0276\u0ea3\u0003\u0002\u0002\u0002\u0278\u0ea8\u0003',
	'\u0002\u0002\u0002\u027a\u0eaa\u0003\u0002\u0002\u0002\u027c\u0ec6\u0003',
	'\u0002\u0002\u0002\u027e\u0ec9\u0003\u0002\u0002\u0002\u0280\u0ecb\u0003',
	'\u0002\u0002\u0002\u0282\u0ece\u0003\u0002\u0002\u0002\u0284\u0ed6\u0003',
	'\u0002\u0002\u0002\u0286\u0ed8\u0003\u0002\u0002\u0002\u0288\u0eed\u0003',
	'\u0002\u0002\u0002\u028a\u0ef4\u0003\u0002\u0002\u0002\u028c\u0ef6\u0003',
	'\u0002\u0002\u0002\u028e\u0ef9\u0003\u0002\u0002\u0002\u0290\u0f05\u0003',
	'\u0002\u0002\u0002\u0292\u0f1d\u0003\u0002\u0002\u0002\u0294\u0f1f\u0003',
	'\u0002\u0002\u0002\u0296\u0f2c\u0003\u0002\u0002\u0002\u0298\u0f2e\u0003',
	'\u0002\u0002\u0002\u029a\u0f31\u0003\u0002\u0002\u0002\u029c\u0f33\u0003',
	'\u0002\u0002\u0002\u029e\u0f37\u0003\u0002\u0002\u0002\u02a0\u0f3d\u0003',
	'\u0002\u0002\u0002\u02a2\u0f43\u0003\u0002\u0002\u0002\u02a4\u0f45\u0003',
	'\u0002\u0002\u0002\u02a6\u0f50\u0003\u0002\u0002\u0002\u02a8\u0f58\u0003',
	'\u0002\u0002\u0002\u02aa\u0f62\u0003\u0002\u0002\u0002\u02ac\u0f66\u0003',
	'\u0002\u0002\u0002\u02ae\u0f6a\u0003\u0002\u0002\u0002\u02b0\u0f6e\u0003',
	'\u0002\u0002\u0002\u02b2\u0f74\u0003\u0002\u0002\u0002\u02b4\u0f8d\u0003',
	'\u0002\u0002\u0002\u02b6\u0f8f\u0003\u0002\u0002\u0002\u02b8\u0f96\u0003',
	'\u0002\u0002\u0002\u02ba\u0fa7\u0003\u0002\u0002\u0002\u02bc\u0fb7\u0003',
	'\u0002\u0002\u0002\u02be\u0fc0\u0003\u0002\u0002\u0002\u02c0\u0fc2\u0003',
	'\u0002\u0002\u0002\u02c2\u0fc9\u0003\u0002\u0002\u0002\u02c4\u0fd7\u0003',
	'\u0002\u0002\u0002\u02c6\u0fd9\u0003\u0002\u0002\u0002\u02c8\u0fdf\u0003',
	'\u0002\u0002\u0002\u02ca\u0fe5\u0003\u0002\u0002\u0002\u02cc\u0fea\u0003',
	'\u0002\u0002\u0002\u02ce\u0fec\u0003\u0002\u0002\u0002\u02d0\u0fef\u0003',
	'\u0002\u0002\u0002\u02d2\u0ff1\u0003\u0002\u0002\u0002\u02d4\u1003\u0003',
	'\u0002\u0002\u0002\u02d6\u1011\u0003\u0002\u0002\u0002\u02d8\u101e\u0003',
	'\u0002\u0002\u0002\u02da\u1020\u0003\u0002\u0002\u0002\u02dc\u102b\u0003',
	'\u0002\u0002\u0002\u02de\u102d\u0003\u0002\u0002\u0002\u02e0\u102f\u0003',
	'\u0002\u0002\u0002\u02e2\u1031\u0003\u0002\u0002\u0002\u02e4\u1033\u0003',
	'\u0002\u0002\u0002\u02e6\u1035\u0003\u0002\u0002\u0002\u02e8\u1037\u0003',
	'\u0002\u0002\u0002\u02ea\u1039\u0003\u0002\u0002\u0002\u02ec\u1040\u0003',
	'\u0002\u0002\u0002\u02ee\u1042\u0003\u0002\u0002\u0002\u02f0\u104d\u0003',
	'\u0002\u0002\u0002\u02f2\u104f\u0003\u0002\u0002\u0002\u02f4\u1051\u0003',
	'\u0002\u0002\u0002\u02f6\u1053\u0003\u0002\u0002\u0002\u02f8\u106e\u0003',
	'\u0002\u0002\u0002\u02fa\u10a1\u0003\u0002\u0002\u0002\u02fc\u10ab\u0003',
	'\u0002\u0002\u0002\u02fe\u10ba\u0003\u0002\u0002\u0002\u0300\u10be\u0003',
	'\u0002\u0002\u0002\u0302\u10c4\u0003\u0002\u0002\u0002\u0304\u10c6\u0003',
	'\u0002\u0002\u0002\u0306\u10c8\u0003\u0002\u0002\u0002\u0308\u10ca\u0003',
	'\u0002\u0002\u0002\u030a\u10ce\u0003\u0002\u0002\u0002\u030c\u10da\u0003',
	'\u0002\u0002\u0002\u030e\u10df\u0003\u0002\u0002\u0002\u0310\u10eb\u0003',
	'\u0002\u0002\u0002\u0312\u10ef\u0003\u0002\u0002\u0002\u0314\u10f1\u0003',
	'\u0002\u0002\u0002\u0316\u10f6\u0003\u0002\u0002\u0002\u0318\u10fa\u0003',
	'\u0002\u0002\u0002\u031a\u1101\u0003\u0002\u0002\u0002\u031c\u1105\u0003',
	'\u0002\u0002\u0002\u031e\u1107\u0003\u0002\u0002\u0002\u0320\u1109\u0003',
	'\u0002\u0002\u0002\u0322\u1119\u0003\u0002\u0002\u0002\u0324\u1122\u0003',
	'\u0002\u0002\u0002\u0326\u1124\u0003\u0002\u0002\u0002\u0328\u112f\u0003',
	'\u0002\u0002\u0002\u032a\u1131\u0003\u0002\u0002\u0002\u032c\u1139\u0003',
	'\u0002\u0002\u0002\u032e\u1140\u0003\u0002\u0002\u0002\u0330\u1144\u0003',
	'\u0002\u0002\u0002\u0332\u1149\u0003\u0002\u0002\u0002\u0334\u114c\u0003',
	'\u0002\u0002\u0002\u0336\u1150\u0003\u0002\u0002\u0002\u0338\u1152\u0003',
	'\u0002\u0002\u0002\u033a\u1154\u0003\u0002\u0002\u0002\u033c\u1156\u0003',
	'\u0002\u0002\u0002\u033e\u116d\u0003\u0002\u0002\u0002\u0340\u1173\u0003',
	'\u0002\u0002\u0002\u0342\u1178\u0003\u0002\u0002\u0002\u0344\u1186\u0003',
	'\u0002\u0002\u0002\u0346\u118b\u0003\u0002\u0002\u0002\u0348\u1193\u0003',
	'\u0002\u0002\u0002\u034a\u1195\u0003\u0002\u0002\u0002\u034c\u1198\u0003',
	'\u0002\u0002\u0002\u034e\u11a0\u0003\u0002\u0002\u0002\u0350\u11a8\u0003',
	'\u0002\u0002\u0002\u0352\u11ac\u0003\u0002\u0002\u0002\u0354\u11ae\u0003',
	'\u0002\u0002\u0002\u0356\u11b4\u0003\u0002\u0002\u0002\u0358\u11b6\u0003',
	'\u0002\u0002\u0002\u035a\u11b9\u0003\u0002\u0002\u0002\u035c\u11c0\u0003',
	'\u0002\u0002\u0002\u035e\u11d6\u0003\u0002\u0002\u0002\u0360\u11db\u0003',
	'\u0002\u0002\u0002\u0362\u11ed\u0003\u0002\u0002\u0002\u0364\u11ef\u0003',
	'\u0002\u0002\u0002\u0366\u11f7\u0003\u0002\u0002\u0002\u0368\u11ff\u0003',
	'\u0002\u0002\u0002\u036a\u1210\u0003\u0002\u0002\u0002\u036c\u1216\u0003',
	'\u0002\u0002\u0002\u036e\u1226\u0003\u0002\u0002\u0002\u0370\u1236\u0003',
	'\u0002\u0002\u0002\u0372\u0373\u0005\b\u0005\u0002\u0373\u0374\u0005',
	'\u0004\u0003\u0002\u0374\u0377\u0003\u0002\u0002\u0002\u0375\u0377\u0005',
	'\u0006\u0004\u0002\u0376\u0372\u0003\u0002\u0002\u0002\u0376\u0375\u0003',
	'\u0002\u0002\u0002\u0377\u037a\u0003\u0002\u0002\u0002\u0378\u0376\u0003',
	'\u0002\u0002\u0002\u0378\u0379\u0003\u0002\u0002\u0002\u0379\u037b\u0003',
	'\u0002\u0002\u0002\u037a\u0378\u0003\u0002\u0002\u0002\u037b\u037c\u0007',
	'\u0002\u0002\u0003\u037c\u0003\u0003\u0002\u0002\u0002\u037d\u037e\u0007',
	'\u015d\u0002\u0002\u037e\u0005\u0003\u0002\u0002\u0002\u037f\u0380\u0005',
	'\u0004\u0003\u0002\u0380\u0007\u0003\u0002\u0002\u0002\u0381\u0384\u0005',
	'\n\u0006\u0002\u0382\u0384\u0005\u0012\n\u0002\u0383\u0381\u0003\u0002',
	'\u0002\u0002\u0383\u0382\u0003\u0002\u0002\u0002\u0384\t\u0003\u0002',
	'\u0002\u0002\u0385\u038f\u0007\u0091\u0002\u0002\u0386\u0388\u0005\f',
	'\u0007\u0002\u0387\u0386\u0003\u0002\u0002\u0002\u0388\u038b\u0003\u0002',
	'\u0002\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u0389\u038a\u0003\u0002',
	'\u0002\u0002\u038a\u038c\u0003\u0002\u0002\u0002\u038b\u0389\u0003\u0002',
	'\u0002\u0002\u038c\u0390\u0005\u0012\n\u0002\u038d\u038e\u0007\u0106',
	'\u0002\u0002\u038e\u0390\u0005\u01e2\u00f2\u0002\u038f\u0389\u0003\u0002',
	'\u0002\u0002\u038f\u038d\u0003\u0002\u0002\u0002\u0390\u000b\u0003\u0002',
	'\u0002\u0002\u0391\u03a0\u0007\u0092\u0002\u0002\u0392\u03a0\u0007\u0093',
	'\u0002\u0002\u0393\u03a0\u0007\u0094\u0002\u0002\u0394\u03a0\u0007\u0095',
	'\u0002\u0002\u0395\u03a0\u0007\u0107\u0002\u0002\u0396\u03a0\u0007\u00cc',
	'\u0002\u0002\u0397\u03a0\u0007\u0108\u0002\u0002\u0398\u039a\u0007\u0135',
	'\u0002\u0002\u0399\u039b\u0005\u000e\b\u0002\u039a\u0399\u0003\u0002',
	'\u0002\u0002\u039a\u039b\u0003\u0002\u0002\u0002\u039b\u039d\u0003\u0002',
	'\u0002\u0002\u039c\u039e\u0005\u0010\t\u0002\u039d\u039c\u0003\u0002',
	'\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002\u039e\u03a0\u0003\u0002',
	'\u0002\u0002\u039f\u0391\u0003\u0002\u0002\u0002\u039f\u0392\u0003\u0002',
	'\u0002\u0002\u039f\u0393\u0003\u0002\u0002\u0002\u039f\u0394\u0003\u0002',
	'\u0002\u0002\u039f\u0395\u0003\u0002\u0002\u0002\u039f\u0396\u0003\u0002',
	'\u0002\u0002\u039f\u0397\u0003\u0002\u0002\u0002\u039f\u0398\u0003\u0002',
	'\u0002\u0002\u03a0\r\u0003\u0002\u0002\u0002\u03a1\u03a2\u0007\u011b',
	'\u0002\u0002\u03a2\u000f\u0003\u0002\u0002\u0002\u03a3\u03a4\t\u0002',
	'\u0002\u0002\u03a4\u0011\u0003\u0002\u0002\u0002\u03a5\u03b2\u0005\u01e2',
	'\u00f2\u0002\u03a6\u03b2\u0005\u0014\u000b\u0002\u03a7\u03b2\u0005\u0018',
	'\r\u0002\u03a8\u03b2\u0005\u001a\u000e\u0002\u03a9\u03b2\u0005\u001c',
	'\u000f\u0002\u03aa\u03b2\u0005\u001e\u0010\u0002\u03ab\u03b2\u0005$',
	'\u0013\u0002\u03ac\u03b2\u0005&\u0014\u0002\u03ad\u03b2\u0005\u0200',
	'\u0101\u0002\u03ae\u03b2\u0005\u0206\u0104\u0002\u03af\u03b2\u0005\u0208',
	'\u0105\u0002\u03b0\u03b2\u0005\u021c\u010f\u0002\u03b1\u03a5\u0003\u0002',
	'\u0002\u0002\u03b1\u03a6\u0003\u0002\u0002\u0002\u03b1\u03a7\u0003\u0002',
	'\u0002\u0002\u03b1\u03a8\u0003\u0002\u0002\u0002\u03b1\u03a9\u0003\u0002',
	'\u0002\u0002\u03b1\u03aa\u0003\u0002\u0002\u0002\u03b1\u03ab\u0003\u0002',
	'\u0002\u0002\u03b1\u03ac\u0003\u0002\u0002\u0002\u03b1\u03ad\u0003\u0002',
	'\u0002\u0002\u03b1\u03ae\u0003\u0002\u0002\u0002\u03b1\u03af\u0003\u0002',
	'\u0002\u0002\u03b1\u03b0\u0003\u0002\u0002\u0002\u03b2\u0013\u0003\u0002',
	'\u0002\u0002\u03b3\u03b4\u0007:\u0002\u0002\u03b4\u03b6\u0007?\u0002',
	'\u0002\u03b5\u03b7\u00072\u0002\u0002\u03b6\u03b5\u0003\u0002\u0002',
	'\u0002\u03b6\u03b7\u0003\u0002\u0002\u0002\u03b7\u03b8\u0003\u0002\u0002',
	'\u0002\u03b8\u03b9\u0007@\u0002\u0002\u03b9\u03bb\u0007\u0178\u0002',
	'\u0002\u03ba\u03bc\u0007\u001c\u0002\u0002\u03bb\u03ba\u0003\u0002\u0002',
	'\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002\u0002',
	"\u0002\u03bd\u03be\u0007j\u0002\u0002\u03be\u03bf\u0007'\u0002\u0002",
	'\u03bf\u03c1\u0005\u0308\u0185\u0002\u03c0\u03c2\u0005\u00c4c\u0002',
	'\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002',
	'\u03c2\u0015\u0003\u0002\u0002\u0002\u03c3\u03c5\u0007\u00ea\u0002\u0002',
	'\u03c4\u03c6\u0007>\u0002\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002',
	'\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002',
	'\u03c7\u03c8\u0007=\u0002\u0002\u03c8\u03c9\u0007\u015e\u0002\u0002',
	'\u03c9\u03ca\u0007\u0178\u0002\u0002\u03ca\u03cb\u0007\u015f\u0002\u0002',
	'\u03cb\u0017\u0003\u0002\u0002\u0002\u03cc\u03cd\u0007;\u0002\u0002',
	"\u03cd\u03ce\u0007'\u0002\u0002\u03ce\u03cf\u0005\u0308\u0185\u0002",
	'\u03cf\u03d0\u0007M\u0002\u0002\u03d0\u03d2\u0007\u0178\u0002\u0002',
	'\u03d1\u03d3\u0005\u0016\f\u0002\u03d2\u03d1\u0003\u0002\u0002\u0002',
	'\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3\u0019\u0003\u0002\u0002\u0002',
	'\u03d4\u03da\u0007<\u0002\u0002\u03d5\u03d7\u0007D\u0002\u0002\u03d6',
	'\u03d5\u0003\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7',
	"\u03d8\u0003\u0002\u0002\u0002\u03d8\u03d9\u0007'\u0002\u0002\u03d9",
	'\u03db\u0005\u0308\u0185\u0002\u03da\u03d6\u0003\u0002\u0002\u0002\u03da',
	'\u03db\u0003\u0002\u0002\u0002\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc',
	'\u03dd\u0007\u0017\u0002\u0002\u03dd\u03df\u0007\u0178\u0002\u0002\u03de',
	'\u03e0\u0005\u016c\u00b7\u0002\u03df\u03de\u0003\u0002\u0002\u0002\u03df',
	'\u03e0\u0003\u0002\u0002\u0002\u03e0\u001b\u0003\u0002\u0002\u0002\u03e1',
	'\u03e2\u0007\u0132\u0002\u0002\u03e2\u03e3\u0007\u0133\u0002\u0002\u03e3',
	'\u03e6\u0005\u0318\u018d\u0002\u03e4\u03e5\u0007\u015a\u0002\u0002\u03e5',
	'\u03e7\u0005\u0318\u018d\u0002\u03e6\u03e4\u0003\u0002\u0002\u0002\u03e6',
	'\u03e7\u0003\u0002\u0002\u0002\u03e7\u03f2\u0003\u0002\u0002\u0002\u03e8',
	'\u03e9\u0007\u0017\u0002\u0002\u03e9\u03ec\u0007\u017d\u0002\u0002\u03ea',
	'\u03eb\u0007M\u0002\u0002\u03eb\u03ed\u0007\u017d\u0002\u0002\u03ec',
	'\u03ea\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002\u03ed',
	'\u03f0\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007\u009b\u0002\u0002\u03ef',
	'\u03f1\u0007\u017d\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0',
	'\u03f1\u0003\u0002\u0002\u0002\u03f1\u03f3\u0003\u0002\u0002\u0002\u03f2',
	'\u03e8\u0003\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3',
	'\u03f6\u0003\u0002\u0002\u0002\u03f4\u03f5\u0007\u0097\u0002\u0002\u03f5',
	'\u03f7\u0005 \u0011\u0002\u03f6\u03f4\u0003\u0002\u0002\u0002\u03f6',
	'\u03f7\u0003\u0002\u0002\u0002\u03f7\u001d\u0003\u0002\u0002\u0002\u03f8',
	'\u03f9\u0007\u0132\u0002\u0002\u03f9\u03ff\u0007:\u0002\u0002\u03fa',
	'\u03fd\u0005\u0318\u018d\u0002\u03fb\u03fc\u0007\u015a\u0002\u0002\u03fc',
	'\u03fe\u0005\u0318\u018d\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fd',
	'\u03fe\u0003\u0002\u0002\u0002\u03fe\u0400\u0003\u0002\u0002\u0002\u03ff',
	'\u03fa\u0003\u0002\u0002\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400',
	'\u0401\u0003\u0002\u0002\u0002\u0401\u0402\u0007\u0017\u0002\u0002\u0402',
	'\u0405\u0007\u0178\u0002\u0002\u0403\u0404\u0007\u0097\u0002\u0002\u0404',
	'\u0406\u0005 \u0011\u0002\u0405\u0403\u0003\u0002\u0002\u0002\u0405',
	'\u0406\u0003\u0002\u0002\u0002\u0406\u001f\u0003\u0002\u0002\u0002\u0407',
	'\u0408\u0007\u015e\u0002\u0002\u0408\u0409\u0005"\u0012\u0002\u0409',
	'\u040a\u0007\u015f\u0002\u0002\u040a!\u0003\u0002\u0002\u0002\u040b',
	'\u0410\u0005\u014c\u00a7\u0002\u040c\u040d\u0007\u015c\u0002\u0002\u040d',
	'\u040f\u0005\u014c\u00a7\u0002\u040e\u040c\u0003\u0002\u0002\u0002\u040f',
	'\u0412\u0003\u0002\u0002\u0002\u0410\u040e\u0003\u0002\u0002\u0002\u0410',
	'\u0411\u0003\u0002\u0002\u0002\u0411#\u0003\u0002\u0002\u0002\u0412',
	'\u0410\u0003\u0002\u0002\u0002\u0413\u0414\u0007\u0132\u0002\u0002\u0414',
	'\u0415\u0007\u0134\u0002\u0002\u0415\u0418\u0005\u0318\u018d\u0002\u0416',
	'\u0417\u0007\u015a\u0002\u0002\u0417\u0419\u0005\u0318\u018d\u0002\u0418',
	'\u0416\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002\u0419',
	'\u041c\u0003\u0002\u0002\u0002\u041a\u041b\u0007\u0097\u0002\u0002\u041b',
	'\u041d\u0005 \u0011\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041c',
	'\u041d\u0003\u0002\u0002\u0002\u041d%\u0003\u0002\u0002\u0002\u041e',
	'\u044a\u00056\u001c\u0002\u041f\u044a\u0005> \u0002\u0420\u044a\u0005',
	'@!\u0002\u0421\u044a\u0005D#\u0002\u0422\u044a\u0005H%\u0002\u0423\u044a',
	'\u0005F$\u0002\u0424\u044a\u0005J&\u0002\u0425\u044a\u0005\u00ccg\u0002',
	'\u0426\u044a\u0005\u00d0i\u0002\u0427\u044a\u0005\u010e\u0088\u0002',
	'\u0428\u044a\u0005\u0120\u0091\u0002\u0429\u044a\u0005\u0122\u0092\u0002',
	'\u042a\u044a\u0005\u0126\u0094\u0002\u042b\u044a\u0005\u0128\u0095\u0002',
	'\u042c\u044a\u0005\u0116\u008c\u0002\u042d\u044a\u0005\u011c\u008f\u0002',
	'\u042e\u044a\u0005\u0118\u008d\u0002\u042f\u044a\u0005\u011a\u008e\u0002',
	'\u0430\u044a\u0005\u011e\u0090\u0002\u0431\u044a\u0005\u00ceh\u0002',
	'\u0432\u044a\u0005\u00d2j\u0002\u0433\u044a\u0005\u00d8m\u0002\u0434',
	'\u044a\u0005\u00d4k\u0002\u0435\u044a\u0005\u00dan\u0002\u0436\u044a',
	'\u0005\u00dco\u0002\u0437\u044a\u0005\u00dep\u0002\u0438\u044a\u0005',
	'\u00e0q\u0002\u0439\u044a\u0005\u00e2r\u0002\u043a\u044a\u0005\u00f0',
	'y\u0002\u043b\u044a\u0005\u00e8u\u0002\u043c\u044a\u0005\u00f2z\u0002',
	'\u043d\u044a\u0005\u00eav\u0002\u043e\u044a\u0005\u00e4s\u0002\u043f',
	'\u044a\u0005\u00e6t\u0002\u0440\u044a\u0005\u00eex\u0002\u0441\u044a',
	'\u0005\u00ecw\u0002\u0442\u044a\u0005\u021a\u010e\u0002\u0443\u044a',
	'\u0005\u0228\u0115\u0002\u0444\u044a\u0005\u0322\u0192\u0002\u0445\u044a',
	'\u0005\u00a4S\u0002\u0446\u044a\u0005\u00a8U\u0002\u0447\u044a\u0005',
	'\u00aaV\u0002\u0448\u044a\u0005\u00b6\\\u0002\u0449\u041e\u0003\u0002',
	'\u0002\u0002\u0449\u041f\u0003\u0002\u0002\u0002\u0449\u0420\u0003\u0002',
	'\u0002\u0002\u0449\u0421\u0003\u0002\u0002\u0002\u0449\u0422\u0003\u0002',
	'\u0002\u0002\u0449\u0423\u0003\u0002\u0002\u0002\u0449\u0424\u0003\u0002',
	'\u0002\u0002\u0449\u0425\u0003\u0002\u0002\u0002\u0449\u0426\u0003\u0002',
	'\u0002\u0002\u0449\u0427\u0003\u0002\u0002\u0002\u0449\u0428\u0003\u0002',
	'\u0002\u0002\u0449\u0429\u0003\u0002\u0002\u0002\u0449\u042a\u0003\u0002',
	'\u0002\u0002\u0449\u042b\u0003\u0002\u0002\u0002\u0449\u042c\u0003\u0002',
	'\u0002\u0002\u0449\u042d\u0003\u0002\u0002\u0002\u0449\u042e\u0003\u0002',
	'\u0002\u0002\u0449\u042f\u0003\u0002\u0002\u0002\u0449\u0430\u0003\u0002',
	'\u0002\u0002\u0449\u0431\u0003\u0002\u0002\u0002\u0449\u0432\u0003\u0002',
	'\u0002\u0002\u0449\u0433\u0003\u0002\u0002\u0002\u0449\u0434\u0003\u0002',
	'\u0002\u0002\u0449\u0435\u0003\u0002\u0002\u0002\u0449\u0436\u0003\u0002',
	'\u0002\u0002\u0449\u0437\u0003\u0002\u0002\u0002\u0449\u0438\u0003\u0002',
	'\u0002\u0002\u0449\u0439\u0003\u0002\u0002\u0002\u0449\u043a\u0003\u0002',
	'\u0002\u0002\u0449\u043b\u0003\u0002\u0002\u0002\u0449\u043c\u0003\u0002',
	'\u0002\u0002\u0449\u043d\u0003\u0002\u0002\u0002\u0449\u043e\u0003\u0002',
	'\u0002\u0002\u0449\u043f\u0003\u0002\u0002\u0002\u0449\u0440\u0003\u0002',
	'\u0002\u0002\u0449\u0441\u0003\u0002\u0002\u0002\u0449\u0442\u0003\u0002',
	'\u0002\u0002\u0449\u0443\u0003\u0002\u0002\u0002\u0449\u0444\u0003\u0002',
	'\u0002\u0002\u0449\u0445\u0003\u0002\u0002\u0002\u0449\u0446\u0003\u0002',
	'\u0002\u0002\u0449\u0447\u0003\u0002\u0002\u0002\u0449\u0448\u0003\u0002',
	"\u0002\u0002\u044a'\u0003\u0002\u0002\u0002\u044b\u044c\u0007\f\u0002",
	'\u0002\u044c\u044d\u0007\r\u0002\u0002\u044d)\u0003\u0002\u0002\u0002',
	'\u044e\u044f\t\u0003\u0002\u0002\u044f+\u0003\u0002\u0002\u0002\u0450',
	'\u0451\u0007\f\u0002\u0002\u0451\u0452\u0007\t\u0002\u0002\u0452\u0453',
	'\u0007\r\u0002\u0002\u0453-\u0003\u0002\u0002\u0002\u0454\u0455\u0007',
	'\u007f\u0002\u0002\u0455\u0456\u0007\u0106\u0002\u0002\u0456/\u0003',
	'\u0002\u0002\u0002\u0457\u0458\u0007\u0080\u0002\u0002\u0458\u0459\u0007',
	'\u0106\u0002\u0002\u04591\u0003\u0002\u0002\u0002\u045a\u045b\u0007',
	'y\u0002\u0002\u045b\u045c\u0007\u0018\u0002\u0002\u045c\u045d\u0007',
	'\u00e9\u0002\u0002\u045d3\u0003\u0002\u0002\u0002\u045e\u045f\u0007',
	'\b\u0002\u0002\u045f\u0460\u0007\u0089\u0002\u0002\u04605\u0003\u0002',
	'\u0002\u0002\u0461\u0462\u0007C\u0002\u0002\u0462\u0464\t\u0004\u0002',
	'\u0002\u0463\u0465\u0005,\u0017\u0002\u0464\u0463\u0003\u0002\u0002',
	'\u0002\u0464\u0465\u0003\u0002\u0002\u0002\u0465\u0466\u0003\u0002\u0002',
	'\u0002\u0466\u0468\u0005\u0318\u018d\u0002\u0467\u0469\u0005B"\u0002',
	'\u0468\u0467\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002',
	'\u0469\u046b\u0003\u0002\u0002\u0002\u046a\u046c\u00058\u001d\u0002',
	'\u046b\u046a\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002\u0002',
	'\u046c\u0470\u0003\u0002\u0002\u0002\u046d\u046e\u0007\u0097\u0002\u0002',
	'\u046e\u046f\u0007\u009a\u0002\u0002\u046f\u0471\u0005:\u001e\u0002',
	'\u0470\u046d\u0003\u0002\u0002\u0002\u0470\u0471\u0003\u0002\u0002\u0002',
	'\u04717\u0003\u0002\u0002\u0002\u0472\u0473\u0007\u0081\u0002\u0002',
	'\u0473\u0474\u0007\u0178\u0002\u0002\u04749\u0003\u0002\u0002\u0002',
	'\u0475\u0476\u0007\u015e\u0002\u0002\u0476\u0477\u0005<\u001f\u0002',
	'\u0477\u0478\u0007\u015f\u0002\u0002\u0478;\u0003\u0002\u0002\u0002',
	'\u0479\u047e\u0005\u014c\u00a7\u0002\u047a\u047b\u0007\u015c\u0002\u0002',
	'\u047b\u047d\u0005\u014c\u00a7\u0002\u047c\u047a\u0003\u0002\u0002\u0002',
	'\u047d\u0480\u0003\u0002\u0002\u0002\u047e\u047c\u0003\u0002\u0002\u0002',
	'\u047e\u047f\u0003\u0002\u0002\u0002\u047f=\u0003\u0002\u0002\u0002',
	'\u0480\u047e\u0003\u0002\u0002\u0002\u0481\u0482\u0007\u00de\u0002\u0002',
	'\u0482\u0483\u0005\u0318\u018d\u0002\u0483?\u0003\u0002\u0002\u0002',
	'\u0484\u0485\u0007K\u0002\u0002\u0485\u0487\t\u0004\u0002\u0002\u0486',
	'\u0488\u0005(\u0015\u0002\u0487\u0486\u0003\u0002\u0002\u0002\u0487',
	'\u0488\u0003\u0002\u0002\u0002\u0488\u0489\u0003\u0002\u0002\u0002\u0489',
	'\u048b\u0005\u0318\u018d\u0002\u048a\u048c\u0005*\u0016\u0002\u048b',
	'\u048a\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002\u048c',
	'A\u0003\u0002\u0002\u0002\u048d\u048e\u0007N\u0002\u0002\u048e\u048f',
	'\u0007\u0178\u0002\u0002\u048fC\u0003\u0002\u0002\u0002\u0490\u0492',
	'\u0007C\u0002\u0002\u0491\u0493\u0007\u008c\u0002\u0002\u0492\u0491',
	'\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u0495',
	'\u0003\u0002\u0002\u0002\u0494\u0496\u0007D\u0002\u0002\u0495\u0494',
	'\u0003\u0002\u0002\u0002\u0495\u0496\u0003\u0002\u0002\u0002\u0496\u0497',
	"\u0003\u0002\u0002\u0002\u0497\u0499\u0007'\u0002\u0002\u0498\u049a",
	'\u0005,\u0017\u0002\u0499\u0498\u0003\u0002\u0002\u0002\u0499\u049a',
	'\u0003\u0002\u0002\u0002\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u04c5',
	'\u0005\u0270\u0139\u0002\u049c\u049d\u0007\n\u0002\u0002\u049d\u049f',
	'\u0005\u0270\u0139\u0002\u049e\u04a0\u0005\u0144\u00a3\u0002\u049f\u049e',
	'\u0003\u0002\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0\u04a2',
	'\u0003\u0002\u0002\u0002\u04a1\u04a3\u0005\u015e\u00b0\u0002\u04a2\u04a1',
	'\u0003\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a5',
	'\u0003\u0002\u0002\u0002\u04a4\u04a6\u0005\u0130\u0099\u0002\u04a5\u04a4',
	'\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002\u0002\u0002\u04a6\u04a8',
	'\u0003\u0002\u0002\u0002\u04a7\u04a9\u0005\u016c\u00b7\u0002\u04a8\u04a7',
	'\u0003\u0002\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04ab',
	'\u0003\u0002\u0002\u0002\u04aa\u04ac\u0005\u0146\u00a4\u0002\u04ab\u04aa',
	'\u0003\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04c6',
	'\u0003\u0002\u0002\u0002\u04ad\u04ae\u0007\u015e\u0002\u0002\u04ae\u04af',
	'\u0005\u0170\u00b9\u0002\u04af\u04b0\u0007\u015f\u0002\u0002\u04b0\u04b2',
	'\u0003\u0002\u0002\u0002\u04b1\u04ad\u0003\u0002\u0002\u0002\u04b1\u04b2',
	'\u0003\u0002\u0002\u0002\u04b2\u04be\u0003\u0002\u0002\u0002\u04b3\u04bd',
	'\u0005\u0130\u0099\u0002\u04b4\u04bd\u0005\u0136\u009c\u0002\u04b5\u04bd',
	'\u0005\u0138\u009d\u0002\u04b6\u04bd\u0005\u0144\u00a3\u0002\u04b7\u04bd',
	'\u0005\u015e\u00b0\u0002\u04b8\u04bd\u0005\u0134\u009b\u0002\u04b9\u04bd',
	'\u0005\u016c\u00b7\u0002\u04ba\u04bd\u0005\u0146\u00a4\u0002\u04bb\u04bd',
	'\u0005\u012e\u0098\u0002\u04bc\u04b3\u0003\u0002\u0002\u0002\u04bc\u04b4',
	'\u0003\u0002\u0002\u0002\u04bc\u04b5\u0003\u0002\u0002\u0002\u04bc\u04b6',
	'\u0003\u0002\u0002\u0002\u04bc\u04b7\u0003\u0002\u0002\u0002\u04bc\u04b8',
	'\u0003\u0002\u0002\u0002\u04bc\u04b9\u0003\u0002\u0002\u0002\u04bc\u04ba',
	'\u0003\u0002\u0002\u0002\u04bc\u04bb\u0003\u0002\u0002\u0002\u04bd\u04c0',
	'\u0003\u0002\u0002\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04be\u04bf',
	'\u0003\u0002\u0002\u0002\u04bf\u04c3\u0003\u0002\u0002\u0002\u04c0\u04be',
	'\u0003\u0002\u0002\u0002\u04c1\u04c2\u0007\u0018\u0002\u0002\u04c2\u04c4',
	'\u0005\u01f6\u00fc\u0002\u04c3\u04c1\u0003\u0002\u0002\u0002\u04c3\u04c4',
	'\u0003\u0002\u0002\u0002\u04c4\u04c6\u0003\u0002\u0002\u0002\u04c5\u049c',
	'\u0003\u0002\u0002\u0002\u04c5\u04b1\u0003\u0002\u0002\u0002\u04c6E',
	'\u0003\u0002\u0002\u0002\u04c7\u04c8\u0007\u00f7\u0002\u0002\u04c8\u04c9',
	"\u0007'\u0002\u0002\u04c9\u04cf\u0005\u00ba^\u0002\u04ca\u04cb\u0007",
	')\u0002\u0002\u04cb\u04cc\u0007\u015e\u0002\u0002\u04cc\u04cd\u0005',
	'\u0174\u00bb\u0002\u04cd\u04ce\u0007\u015f\u0002\u0002\u04ce\u04d0\u0003',
	'\u0002\u0002\u0002\u04cf\u04ca\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003',
	'\u0002\u0002\u0002\u04d0G\u0003\u0002\u0002\u0002\u04d1\u04d2\u0007',
	"K\u0002\u0002\u04d2\u04d4\u0007'\u0002\u0002\u04d3\u04d5\u0005(\u0015",
	'\u0002\u04d4\u04d3\u0003\u0002\u0002\u0002\u04d4\u04d5\u0003\u0002\u0002',
	'\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d8\u0005\u0270\u0139',
	'\u0002\u04d7\u04d9\u0007\u00ca\u0002\u0002\u04d8\u04d7\u0003\u0002\u0002',
	'\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9\u04db\u0003\u0002\u0002',
	'\u0002\u04da\u04dc\u0005\u0016\f\u0002\u04db\u04da\u0003\u0002\u0002',
	'\u0002\u04db\u04dc\u0003\u0002\u0002\u0002\u04dcI\u0003\u0002\u0002',
	"\u0002\u04dd\u04de\u0007E\u0002\u0002\u04de\u04df\u0007'\u0002\u0002",
	"\u04df\u04e0\u0005\u0270\u0139\u0002\u04e0\u04e1\u0005L'\u0002\u04e1",
	'\u04f7\u0003\u0002\u0002\u0002\u04e2\u04e3\u0007E\u0002\u0002\u04e3',
	'\u04e4\u0007\u00b4\u0002\u0002\u04e4\u04e6\u0005\u0270\u0139\u0002\u04e5',
	'\u04e7\u0007\u0018\u0002\u0002\u04e6\u04e5\u0003\u0002\u0002\u0002\u04e6',
	'\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8',
	'\u04e9\u0005R*\u0002\u04e9\u04f7\u0003\u0002\u0002\u0002\u04ea\u04eb',
	'\u0007E\u0002\u0002\u04eb\u04ec\u0007\u00b9\u0002\u0002\u04ec\u04ed',
	'\u0007\u00b4\u0002\u0002\u04ed\u04ee\u0005\u0270\u0139\u0002\u04ee\u04ef',
	'\u0005T+\u0002\u04ef\u04f7\u0003\u0002\u0002\u0002\u04f0\u04f1\u0007',
	'E\u0002\u0002\u04f1\u04f2\t\u0004\u0002\u0002\u04f2\u04f7\u0005V,\u0002',
	'\u04f3\u04f4\u0007E\u0002\u0002\u04f4\u04f5\u0007*\u0002\u0002\u04f5',
	'\u04f7\u0005\u0088E\u0002\u04f6\u04dd\u0003\u0002\u0002\u0002\u04f6',
	'\u04e2\u0003\u0002\u0002\u0002\u04f6\u04ea\u0003\u0002\u0002\u0002\u04f6',
	'\u04f0\u0003\u0002\u0002\u0002\u04f6\u04f3\u0003\u0002\u0002\u0002\u04f7',
	'K\u0003\u0002\u0002\u0002\u04f8\u050a\u0005^0\u0002\u04f9\u050a\u0005',
	'|?\u0002\u04fa\u050a\u0005p9\u0002\u04fb\u050a\u0005t;\u0002\u04fc\u050a',
	'\u0005v<\u0002\u04fd\u050a\u0005x=\u0002\u04fe\u050a\u0005~@\u0002\u04ff',
	'\u050a\u0005\u0098M\u0002\u0500\u050a\u0005\u009aN\u0002\u0501\u050a',
	'\u0005P)\u0002\u0502\u050a\u0005f4\u0002\u0503\u050a\u0005b2\u0002\u0504',
	'\u0506\u0005\u030a\u0186\u0002\u0505\u0504\u0003\u0002\u0002\u0002\u0505',
	'\u0506\u0003\u0002\u0002\u0002\u0506\u0507\u0003\u0002\u0002\u0002\u0507',
	'\u050a\u0005N(\u0002\u0508\u050a\u0005\u00c0a\u0002\u0509\u04f8\u0003',
	'\u0002\u0002\u0002\u0509\u04f9\u0003\u0002\u0002\u0002\u0509\u04fa\u0003',
	'\u0002\u0002\u0002\u0509\u04fb\u0003\u0002\u0002\u0002\u0509\u04fc\u0003',
	'\u0002\u0002\u0002\u0509\u04fd\u0003\u0002\u0002\u0002\u0509\u04fe\u0003',
	'\u0002\u0002\u0002\u0509\u04ff\u0003\u0002\u0002\u0002\u0509\u0500\u0003',
	'\u0002\u0002\u0002\u0509\u0501\u0003\u0002\u0002\u0002\u0509\u0502\u0003',
	'\u0002\u0002\u0002\u0509\u0503\u0003\u0002\u0002\u0002\u0509\u0505\u0003',
	'\u0002\u0002\u0002\u0509\u0508\u0003\u0002\u0002\u0002\u050aM\u0003',
	'\u0002\u0002\u0002\u050b\u051a\u0005\u008aF\u0002\u050c\u051a\u0005',
	'\u0096L\u0002\u050d\u051a\u0005\u00a0Q\u0002\u050e\u051a\u0005\u0086',
	'D\u0002\u050f\u051a\u0005\u009cO\u0002\u0510\u051a\u0005\u00a2R\u0002',
	'\u0511\u051a\u0005\u008eH\u0002\u0512\u051a\u0005\u008cG\u0002\u0513',
	'\u051a\u0005\u00be`\u0002\u0514\u051a\u0005j6\u0002\u0515\u051a\u0005',
	'l7\u0002\u0516\u051a\u0005h5\u0002\u0517\u051a\u0005`1\u0002\u0518\u051a',
	'\u0005d3\u0002\u0519\u050b\u0003\u0002\u0002\u0002\u0519\u050c\u0003',
	'\u0002\u0002\u0002\u0519\u050d\u0003\u0002\u0002\u0002\u0519\u050e\u0003',
	'\u0002\u0002\u0002\u0519\u050f\u0003\u0002\u0002\u0002\u0519\u0510\u0003',
	'\u0002\u0002\u0002\u0519\u0511\u0003\u0002\u0002\u0002\u0519\u0512\u0003',
	'\u0002\u0002\u0002\u0519\u0513\u0003\u0002\u0002\u0002\u0519\u0514\u0003',
	'\u0002\u0002\u0002\u0519\u0515\u0003\u0002\u0002\u0002\u0519\u0516\u0003',
	'\u0002\u0002\u0002\u0519\u0517\u0003\u0002\u0002\u0002\u0519\u0518\u0003',
	'\u0002\u0002\u0002\u051aO\u0003\u0002\u0002\u0002\u051b\u051c\u0007',
	'%\u0002\u0002\u051c\u051d\u0007G\u0002\u0002\u051d\u051e\u0007\u015e',
	'\u0002\u0002\u051e\u051f\u0005\u01ae\u00d8\u0002\u051f\u0520\u0007\u015f',
	'\u0002\u0002\u0520Q\u0003\u0002\u0002\u0002\u0521\u0527\u0005\u0080',
	'A\u0002\u0522\u0527\u0005^0\u0002\u0523\u0527\u0005p9\u0002\u0524\u0527',
	'\u0005|?\u0002\u0525\u0527\u0005\u01f6\u00fc\u0002\u0526\u0521\u0003',
	'\u0002\u0002\u0002\u0526\u0522\u0003\u0002\u0002\u0002\u0526\u0523\u0003',
	'\u0002\u0002\u0002\u0526\u0524\u0003\u0002\u0002\u0002\u0526\u0525\u0003',
	'\u0002\u0002\u0002\u0527S\u0003\u0002\u0002\u0002\u0528\u052b\u0005',
	'\u0082B\u0002\u0529\u052b\u0005\u0084C\u0002\u052a\u0528\u0003\u0002',
	'\u0002\u0002\u052a\u0529\u0003\u0002\u0002\u0002\u052bU\u0003\u0002',
	'\u0002\u0002\u052c\u0530\u0005X-\u0002\u052d\u0530\u0005Z.\u0002\u052e',
	'\u0530\u0005\\/\u0002\u052f\u052c\u0003\u0002\u0002\u0002\u052f\u052d',
	'\u0003\u0002\u0002\u0002\u052f\u052e\u0003\u0002\u0002\u0002\u0530W',
	'\u0003\u0002\u0002\u0002\u0531\u0532\u0005\u0318\u018d\u0002\u0532\u0533',
	'\u0007\u009d\u0002\u0002\u0533\u0534\u0007\u009a\u0002\u0002\u0534\u0535',
	'\u0005:\u001e\u0002\u0535Y\u0003\u0002\u0002\u0002\u0536\u0537\u0005',
	'\u0318\u018d\u0002\u0537\u0538\u0007\u009d\u0002\u0002\u0538\u0539\u0007',
	'\u0101\u0002\u0002\u0539\u053a\u0005\u0104\u0083\u0002\u053a[\u0003',
	'\u0002\u0002\u0002\u053b\u053c\u0005\u0318\u018d\u0002\u053c\u053d\u0007',
	'\u009d\u0002\u0002\u053d\u053e\u0007\u0081\u0002\u0002\u053e\u053f\u0007',
	'\u0178\u0002\u0002\u053f]\u0003\u0002\u0002\u0002\u0540\u0541\u0007',
	'L\u0002\u0002\u0541\u0542\u0007M\u0002\u0002\u0542\u0543\u0005\u0270',
	'\u0139\u0002\u0543_\u0003\u0002\u0002\u0002\u0544\u0545\t\u0005\u0002',
	'\u0002\u0545\u0546\u0007)\u0002\u0002\u0546\u0547\u0007\u015e\u0002',
	'\u0002\u0547\u0548\u0005\u016e\u00b8\u0002\u0548\u054a\u0007\u015f\u0002',
	'\u0002\u0549\u054b\u0005*\u0016\u0002\u054a\u0549\u0003\u0002\u0002',
	'\u0002\u054a\u054b\u0003\u0002\u0002\u0002\u054ba\u0003\u0002\u0002',
	'\u0002\u054c\u054f\u0007\u0088\u0002\u0002\u054d\u0550\u0005\u0194\u00cb',
	'\u0002\u054e\u0550\u0005\u018a\u00c6\u0002\u054f\u054d\u0003\u0002\u0002',
	'\u0002\u054f\u054e\u0003\u0002\u0002\u0002\u0550c\u0003\u0002\u0002',
	'\u0002\u0551\u0552\u0007\u00e3\u0002\u0002\u0552\u0554\u0007)\u0002',
	'\u0002\u0553\u0555\u0005*\u0016\u0002\u0554\u0553\u0003\u0002\u0002',
	'\u0002\u0554\u0555\u0003\u0002\u0002\u0002\u0555e\u0003\u0002\u0002',
	'\u0002\u0556\u0557\u0007K\u0002\u0002\u0557\u0558\u0007\u0125\u0002',
	'\u0002\u0558\u0559\u0005\u0318\u018d\u0002\u0559g\u0003\u0002\u0002',
	'\u0002\u055a\u055c\u0007F\u0002\u0002\u055b\u055d\u0007G\u0002\u0002',
	'\u055c\u055b\u0003\u0002\u0002\u0002\u055c\u055d\u0003\u0002\u0002\u0002',
	'\u055d\u055e\u0003\u0002\u0002\u0002\u055e\u055f\u0005\u0318\u018d\u0002',
	'\u055f\u0560\u0005\u0318\u018d\u0002\u0560\u0562\u0005\u01d0\u00e9\u0002',
	'\u0561\u0563\u0005\u01be\u00e0\u0002\u0562\u0561\u0003\u0002\u0002\u0002',
	'\u0562\u0563\u0003\u0002\u0002\u0002\u0563\u0566\u0003\u0002\u0002\u0002',
	'\u0564\u0565\u0007N\u0002\u0002\u0565\u0567\u0007\u0178\u0002\u0002',
	'\u0566\u0564\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002\u0002\u0002',
	'\u0567\u0569\u0003\u0002\u0002\u0002\u0568\u056a\u0005n8\u0002\u0569',
	'\u0568\u0003\u0002\u0002\u0002\u0569\u056a\u0003\u0002\u0002\u0002\u056a',
	'\u056c\u0003\u0002\u0002\u0002\u056b\u056d\u0005*\u0016\u0002\u056c',
	'\u056b\u0003\u0002\u0002\u0002\u056c\u056d\u0003\u0002\u0002\u0002\u056d',
	'i\u0003\u0002\u0002\u0002\u056e\u056f\u0007\u00e3\u0002\u0002\u056f',
	'\u0570\u0007\u00dd\u0002\u0002\u0570\u0572\u0007\u00ea\u0002\u0002\u0571',
	'\u0573\u0007G\u0002\u0002\u0572\u0571\u0003\u0002\u0002\u0002\u0572',
	'\u0573\u0003\u0002\u0002\u0002\u0573\u0574\u0003\u0002\u0002\u0002\u0574',
	'\u0575\u0005\u0318\u018d\u0002\u0575\u0576\u0007\u009d\u0002\u0002\u0576',
	'\u0579\u0005\u0148\u00a5\u0002\u0577\u0578\u0007N\u0002\u0002\u0578',
	'\u057a\u0007\u0178\u0002\u0002\u0579\u0577\u0003\u0002\u0002\u0002\u0579',
	'\u057a\u0003\u0002\u0002\u0002\u057ak\u0003\u0002\u0002\u0002\u057b',
	'\u057c\u0007\u00e3\u0002\u0002\u057c\u057d\u0007\u00dd\u0002\u0002\u057d',
	'\u057e\u0007\u009d\u0002\u0002\u057e\u057f\u0005\u0148\u00a5\u0002\u057f',
	'm\u0003\u0002\u0002\u0002\u0580\u0584\u0007H\u0002\u0002\u0581\u0582',
	'\u0007I\u0002\u0002\u0582\u0584\u0005\u0318\u018d\u0002\u0583\u0580',
	'\u0003\u0002\u0002\u0002\u0583\u0581\u0003\u0002\u0002\u0002\u0584o',
	'\u0003\u0002\u0002\u0002\u0585\u0587\u0007\u0088\u0002\u0002\u0586\u0588',
	'\u0005,\u0017\u0002\u0587\u0586\u0003\u0002\u0002\u0002\u0587\u0588',
	'\u0003\u0002\u0002\u0002\u0588\u058a\u0003\u0002\u0002\u0002\u0589\u058b',
	'\u0005r:\u0002\u058a\u0589\u0003\u0002\u0002\u0002\u058b\u058c\u0003',
	'\u0002\u0002\u0002\u058c\u058a\u0003\u0002\u0002\u0002\u058c\u058d\u0003',
	'\u0002\u0002\u0002\u058dq\u0003\u0002\u0002\u0002\u058e\u0590\u0005',
	'\u030a\u0186\u0002\u058f\u0591\u0005z>\u0002\u0590\u058f\u0003\u0002',
	'\u0002\u0002\u0590\u0591\u0003\u0002\u0002\u0002\u0591s\u0003\u0002',
	'\u0002\u0002\u0592\u0596\u0007\u00d9\u0002\u0002\u0593\u0595\u0005\u030a',
	'\u0186\u0002\u0594\u0593\u0003\u0002\u0002\u0002\u0595\u0598\u0003\u0002',
	'\u0002\u0002\u0596\u0594\u0003\u0002\u0002\u0002\u0596\u0597\u0003\u0002',
	'\u0002\u0002\u0597u\u0003\u0002\u0002\u0002\u0598\u0596\u0003\u0002',
	'\u0002\u0002\u0599\u059d\u0007\u00da\u0002\u0002\u059a\u059c\u0005\u030a',
	'\u0186\u0002\u059b\u059a\u0003\u0002\u0002\u0002\u059c\u059f\u0003\u0002',
	'\u0002\u0002\u059d\u059b\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002',
	'\u0002\u0002\u059ew\u0003\u0002\u0002\u0002\u059f\u059d\u0003\u0002',
	'\u0002\u0002\u05a0\u05a4\u0007\u00db\u0002\u0002\u05a1\u05a3\u0005\u030a',
	'\u0186\u0002\u05a2\u05a1\u0003\u0002\u0002\u0002\u05a3\u05a6\u0003\u0002',
	'\u0002\u0002\u05a4\u05a2\u0003\u0002\u0002\u0002\u05a4\u05a5\u0003\u0002',
	'\u0002\u0002\u05a5y\u0003\u0002\u0002\u0002\u05a6\u05a4\u0003\u0002',
	'\u0002\u0002\u05a7\u05a8\u0007\u0081\u0002\u0002\u05a8\u05a9\u0007\u0178',
	'\u0002\u0002\u05a9{\u0003\u0002\u0002\u0002\u05aa\u05ac\u0007K\u0002',
	'\u0002\u05ab\u05ad\u0005(\u0015\u0002\u05ac\u05ab\u0003\u0002\u0002',
	'\u0002\u05ac\u05ad\u0003\u0002\u0002\u0002\u05ad\u05ae\u0003\u0002\u0002',
	'\u0002\u05ae\u05b3\u0005\u030e\u0188\u0002\u05af\u05b0\u0007\u015c\u0002',
	'\u0002\u05b0\u05b2\u0005\u030e\u0188\u0002\u05b1\u05af\u0003\u0002\u0002',
	'\u0002\u05b2\u05b5\u0003\u0002\u0002\u0002\u05b3\u05b1\u0003\u0002\u0002',
	'\u0002\u05b3\u05b4\u0003\u0002\u0002\u0002\u05b4\u05b7\u0003\u0002\u0002',
	'\u0002\u05b5\u05b3\u0003\u0002\u0002\u0002\u05b6\u05b8\u0007\u00ca\u0002',
	'\u0002\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b7\u05b8\u0003\u0002\u0002',
	'\u0002\u05b8\u05ba\u0003\u0002\u0002\u0002\u05b9\u05bb\u0005\u0016\f',
	'\u0002\u05ba\u05b9\u0003\u0002\u0002\u0002\u05ba\u05bb\u0003\u0002\u0002',
	'\u0002\u05bb}\u0003\u0002\u0002\u0002\u05bc\u05bd\u0007\u009d\u0002',
	'\u0002\u05bd\u05be\u0007\u009f\u0002\u0002\u05be\u05c6\u0005\u0148\u00a5',
	'\u0002\u05bf\u05c0\u0007\u009e\u0002\u0002\u05c0\u05c2\u0007\u009f\u0002',
	'\u0002\u05c1\u05c3\u0005(\u0015\u0002\u05c2\u05c1\u0003\u0002\u0002',
	'\u0002\u05c2\u05c3\u0003\u0002\u0002\u0002\u05c3\u05c4\u0003\u0002\u0002',
	'\u0002\u05c4\u05c6\u0005\u0148\u00a5\u0002\u05c5\u05bc\u0003\u0002\u0002',
	'\u0002\u05c5\u05bf\u0003\u0002\u0002\u0002\u05c6\u007f\u0003\u0002\u0002',
	'\u0002\u05c7\u05c8\u0007\u009d\u0002\u0002\u05c8\u05c9\u0007\u009f\u0002',
	'\u0002\u05c9\u05d1\u0005\u0148\u00a5\u0002\u05ca\u05cb\u0007\u009e\u0002',
	'\u0002\u05cb\u05cd\u0007\u009f\u0002\u0002\u05cc\u05ce\u0005(\u0015',
	'\u0002\u05cd\u05cc\u0003\u0002\u0002\u0002\u05cd\u05ce\u0003\u0002\u0002',
	'\u0002\u05ce\u05cf\u0003\u0002\u0002\u0002\u05cf\u05d1\u0005\u0148\u00a5',
	'\u0002\u05d0\u05c7\u0003\u0002\u0002\u0002\u05d0\u05ca\u0003\u0002\u0002',
	'\u0002\u05d1\u0081\u0003\u0002\u0002\u0002\u05d2\u05d5\u0005.\u0018',
	'\u0002\u05d3\u05d5\u00050\u0019\u0002\u05d4\u05d2\u0003\u0002\u0002',
	'\u0002\u05d4\u05d3\u0003\u0002\u0002\u0002\u05d5\u0083\u0003\u0002\u0002',
	'\u0002\u05d6\u05d7\u0007,\u0002\u0002\u05d7\u0085\u0003\u0002\u0002',
	'\u0002\u05d8\u05d9\u0007\u009d\u0002\u0002\u05d9\u05da\u0007\u0096\u0002',
	'\u0002\u05da\u05de\u0007\u0178\u0002\u0002\u05db\u05dc\u0007\u0097\u0002',
	'\u0002\u05dc\u05dd\u0007\u0099\u0002\u0002\u05dd\u05df\u0005\u0148\u00a5',
	'\u0002\u05de\u05db\u0003\u0002\u0002\u0002\u05de\u05df\u0003\u0002\u0002',
	'\u0002\u05df\u05e4\u0003\u0002\u0002\u0002\u05e0\u05e1\u0007\u009d\u0002',
	'\u0002\u05e1\u05e2\u0007\u0099\u0002\u0002\u05e2\u05e4\u0005\u0148\u00a5',
	'\u0002\u05e3\u05d8\u0003\u0002\u0002\u0002\u05e3\u05e0\u0003\u0002\u0002',
	'\u0002\u05e4\u0087\u0003\u0002\u0002\u0002\u05e5\u05e6\u0005\u0318\u018d',
	'\u0002\u05e6\u05e7\u0007$\u0002\u0002\u05e7\u05e9\u0005\u0270\u0139',
	'\u0002\u05e8\u05ea\u0005\u030a\u0186\u0002\u05e9\u05e8\u0003\u0002\u0002',
	'\u0002\u05e9\u05ea\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002',
	'\u0002\u05eb\u05ec\u0007,\u0002\u0002\u05ec\u0089\u0003\u0002\u0002',
	'\u0002\u05ed\u05ee\u0007\u009d\u0002\u0002\u05ee\u05ef\u0007z\u0002',
	'\u0002\u05ef\u05f0\u0005\u00c2b\u0002\u05f0\u008b\u0003\u0002\u0002',
	'\u0002\u05f1\u05f2\u0007\t\u0002\u0002\u05f2\u05f7\u0007h\u0002\u0002',
	'\u05f3\u05f4\u0007\t\u0002\u0002\u05f4\u05f7\u0007i\u0002\u0002\u05f5',
	'\u05f7\u0005\u0136\u009c\u0002\u05f6\u05f1\u0003\u0002\u0002\u0002\u05f6',
	'\u05f3\u0003\u0002\u0002\u0002\u05f6\u05f5\u0003\u0002\u0002\u0002\u05f7',
	'\u008d\u0003\u0002\u0002\u0002\u05f8\u05f9\u0007\u009d\u0002\u0002\u05f9',
	'\u05fa\u0007\u00e6\u0002\u0002\u05fa\u05fb\u0007\u0081\u0002\u0002\u05fb',
	'\u05fc\u0005\u0090I\u0002\u05fc\u008f\u0003\u0002\u0002\u0002\u05fd',
	'\u05fe\u0007\u015e\u0002\u0002\u05fe\u05ff\u0005\u0092J\u0002\u05ff',
	'\u0600\u0007\u015f\u0002\u0002\u0600\u0091\u0003\u0002\u0002\u0002\u0601',
	'\u0606\u0005\u0094K\u0002\u0602\u0603\u0007\u015c\u0002\u0002\u0603',
	'\u0605\u0005\u0094K\u0002\u0604\u0602\u0003\u0002\u0002\u0002\u0605',
	'\u0608\u0003\u0002\u0002\u0002\u0606\u0604\u0003\u0002\u0002\u0002\u0606',
	'\u0607\u0003\u0002\u0002\u0002\u0607\u0093\u0003\u0002\u0002\u0002\u0608',
	'\u0606\u0003\u0002\u0002\u0002\u0609\u060a\u0005\u01a0\u00d1\u0002\u060a',
	'\u060b\u0007\u0164\u0002\u0002\u060b\u060c\u0007\u0178\u0002\u0002\u060c',
	'\u0095\u0003\u0002\u0002\u0002\u060d\u060e\u0007\u009d\u0002\u0002\u060e',
	'\u060f\u0007\u0081\u0002\u0002\u060f\u0610\u0007\u0178\u0002\u0002\u0610',
	'\u0097\u0003\u0002\u0002\u0002\u0611\u0617\u0005\u0138\u009d\u0002\u0612',
	'\u0613\u0007\t\u0002\u0002\u0613\u0617\u0007\u00e6\u0002\u0002\u0614',
	'\u0615\u0007\t\u0002\u0002\u0615\u0617\u00052\u001a\u0002\u0616\u0611',
	'\u0003\u0002\u0002\u0002\u0616\u0612\u0003\u0002\u0002\u0002\u0616\u0614',
	'\u0003\u0002\u0002\u0002\u0617\u0099\u0003\u0002\u0002\u0002\u0618\u0619',
	'\u0007\u00fd\u0002\u0002\u0619\u061a\u0005\u030a\u0186\u0002\u061a\u061b',
	"\u0007\u0097\u0002\u0002\u061b\u061c\u0007'\u0002\u0002\u061c\u061d",
	'\u0005\u0270\u0139\u0002\u061d\u009b\u0003\u0002\u0002\u0002\u061e\u061f',
	'\u0007L\u0002\u0002\u061f\u0620\u0007M\u0002\u0002\u0620\u0621\u0005',
	'\u030a\u0186\u0002\u0621\u009d\u0003\u0002\u0002\u0002\u0622\u0623\u0007',
	'\u00e3\u0002\u0002\u0623\u0624\u0007\u00dd\u0002\u0002\u0624\u0626\u0007',
	'\u00ea\u0002\u0002\u0625\u0627\u0007G\u0002\u0002\u0626\u0625\u0003',
	'\u0002\u0002\u0002\u0626\u0627\u0003\u0002\u0002\u0002\u0627\u0628\u0003',
	'\u0002\u0002\u0002\u0628\u0629\u0005\u0318\u018d\u0002\u0629\u062a\u0007',
	'\u009d\u0002\u0002\u062a\u062d\u0005\u0148\u00a5\u0002\u062b\u062c\u0007',
	'N\u0002\u0002\u062c\u062e\u0007\u0178\u0002\u0002\u062d\u062b\u0003',
	'\u0002\u0002\u0002\u062d\u062e\u0003\u0002\u0002\u0002\u062e\u009f\u0003',
	'\u0002\u0002\u0002\u062f\u0630\u0007\u00e1\u0002\u0002\u0630\u00a1\u0003',
	'\u0002\u0002\u0002\u0631\u0632\u0007j\u0002\u0002\u0632\u0633\u0007',
	'\u017d\u0002\u0002\u0633\u0634\u0007k\u0002\u0002\u0634\u00a3\u0003',
	'\u0002\u0002\u0002\u0635\u0639\u0005\u00a6T\u0002\u0636\u0637\u0007',
	'\u0097\u0002\u0002\u0637\u0638\u0007\u0098\u0002\u0002\u0638\u063a\u0007',
	',\u0002\u0002\u0639\u0636\u0003\u0002\u0002\u0002\u0639\u063a\u0003',
	'\u0002\u0002\u0002\u063a\u063d\u0003\u0002\u0002\u0002\u063b\u063c\u0007',
	'\u00a0\u0002\u0002\u063c\u063e\u0005\u0148\u00a5\u0002\u063d\u063b\u0003',
	'\u0002\u0002\u0002\u063d\u063e\u0003\u0002\u0002\u0002\u063e\u0642\u0003',
	'\u0002\u0002\u0002\u063f\u0640\u0007\u00b6\u0002\u0002\u0640\u0641\u0007',
	"'\u0002\u0002\u0641\u0643\u0005\u0270\u0139\u0002\u0642\u063f\u0003",
	'\u0002\u0002\u0002\u0642\u0643\u0003\u0002\u0002\u0002\u0643\u0647\u0003',
	'\u0002\u0002\u0002\u0644\u0645\u0007g\u0002\u0002\u0645\u0646\u0007',
	'\u0014\u0002\u0002\u0646\u0648\u0005\u017c\u00bf\u0002\u0647\u0644\u0003',
	'\u0002\u0002\u0002\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u064d\u0003',
	'\u0002\u0002\u0002\u0649\u064b\u0005\u0144\u00a3\u0002\u064a\u0649\u0003',
	'\u0002\u0002\u0002\u064a\u064b\u0003\u0002\u0002\u0002\u064b\u064c\u0003',
	'\u0002\u0002\u0002\u064c\u064e\u0005\u015e\u00b0\u0002\u064d\u064a\u0003',
	'\u0002\u0002\u0002\u064d\u064e\u0003\u0002\u0002\u0002\u064e\u0651\u0003',
	'\u0002\u0002\u0002\u064f\u0650\u0007\u0081\u0002\u0002\u0650\u0652\u0005',
	'\u0346\u01a4\u0002\u0651\u064f\u0003\u0002\u0002\u0002\u0651\u0652\u0003',
	'\u0002\u0002\u0002\u0652\u0654\u0003\u0002\u0002\u0002\u0653\u0655\u0005',
	'\u0146\u00a4\u0002\u0654\u0653\u0003\u0002\u0002\u0002\u0654\u0655\u0003',
	'\u0002\u0002\u0002\u0655\u0657\u0003\u0002\u0002\u0002\u0656\u0658\u0005',
	'\u012e\u0098\u0002\u0657\u0656\u0003\u0002\u0002\u0002\u0657\u0658\u0003',
	'\u0002\u0002\u0002\u0658\u00a5\u0003\u0002\u0002\u0002\u0659\u065a\u0007',
	'C\u0002\u0002\u065a\u065b\u0007*\u0002\u0002\u065b\u065c\u0005\u0318',
	"\u018d\u0002\u065c\u065d\u0007$\u0002\u0002\u065d\u065e\u0007'\u0002",
	'\u0002\u065e\u065f\u0005\u0270\u0139\u0002\u065f\u0660\u0005\u017c\u00bf',
	'\u0002\u0660\u0661\u0007\u0018\u0002\u0002\u0661\u0662\u0007\u0178\u0002',
	'\u0002\u0662\u00a7\u0003\u0002\u0002\u0002\u0663\u0664\u0007K\u0002',
	'\u0002\u0664\u0665\u0007*\u0002\u0002\u0665\u0666\u0005\u0318\u018d',
	'\u0002\u0666\u0667\u0007$\u0002\u0002\u0667\u0668\u0005\u0270\u0139',
	'\u0002\u0668\u00a9\u0003\u0002\u0002\u0002\u0669\u066d\u0005\u00acW',
	'\u0002\u066a\u066b\u0007\u00ea\u0002\u0002\u066b\u066c\u0007)\u0002',
	'\u0002\u066c\u066e\u0005\u00aeX\u0002\u066d\u066a\u0003\u0002\u0002',
	'\u0002\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u0670\u0003\u0002\u0002',
	'\u0002\u066f\u0671\u0005\u00b4[\u0002\u0670\u066f\u0003\u0002\u0002',
	'\u0002\u0670\u0671\u0003\u0002\u0002\u0002\u0671\u00ab\u0003\u0002\u0002',
	'\u0002\u0672\u0673\u0007C\u0002\u0002\u0673\u0674\u0007\u0159\u0002',
	'\u0002\u0674\u0675\u0007*\u0002\u0002\u0675\u0677\u0007$\u0002\u0002',
	"\u0676\u0678\u0007'\u0002\u0002\u0677\u0676\u0003\u0002\u0002\u0002",
	'\u0677\u0678\u0003\u0002\u0002\u0002\u0678\u0679\u0003\u0002\u0002\u0002',
	'\u0679\u067a\u0005\u0270\u0139\u0002\u067a\u00ad\u0003\u0002\u0002\u0002',
	'\u067b\u067c\u0007\u015e\u0002\u0002\u067c\u067d\u0005\u00b0Y\u0002',
	'\u067d\u067e\u0007\u015f\u0002\u0002\u067e\u00af\u0003\u0002\u0002\u0002',
	'\u067f\u0684\u0005\u00b2Z\u0002\u0680\u0681\u0007\u015c\u0002\u0002',
	'\u0681\u0683\u0005\u00b2Z\u0002\u0682\u0680\u0003\u0002\u0002\u0002',
	'\u0683\u0686\u0003\u0002\u0002\u0002\u0684\u0682\u0003\u0002\u0002\u0002',
	'\u0684\u0685\u0003\u0002\u0002\u0002\u0685\u00b1\u0003\u0002\u0002\u0002',
	'\u0686\u0684\u0003\u0002\u0002\u0002\u0687\u0689\u0005\u0318\u018d\u0002',
	'\u0688\u068a\u0005\u00b4[\u0002\u0689\u0688\u0003\u0002\u0002\u0002',
	'\u0689\u068a\u0003\u0002\u0002\u0002\u068a\u00b3\u0003\u0002\u0002\u0002',
	'\u068b\u068c\u0007\u00df\u0002\u0002\u068c\u068d\u0005\u0148\u00a5\u0002',
	'\u068d\u00b5\u0003\u0002\u0002\u0002\u068e\u0692\u0005\u00b8]\u0002',
	'\u068f\u0690\u0007\u00ea\u0002\u0002\u0690\u0691\u0007)\u0002\u0002',
	'\u0691\u0693\u0005\u00aeX\u0002\u0692\u068f\u0003\u0002\u0002\u0002',
	'\u0692\u0693\u0003\u0002\u0002\u0002\u0693\u00b7\u0003\u0002\u0002\u0002',
	'\u0694\u0695\u0007K\u0002\u0002\u0695\u0696\u0007\u0159\u0002\u0002',
	'\u0696\u0697\u0007*\u0002\u0002\u0697\u0699\u0007$\u0002\u0002\u0698',
	"\u069a\u0007'\u0002\u0002\u0699\u0698\u0003\u0002\u0002\u0002\u0699",
	'\u069a\u0003\u0002\u0002\u0002\u069a\u069b\u0003\u0002\u0002\u0002\u069b',
	'\u069c\u0005\u0270\u0139\u0002\u069c\u00b9\u0003\u0002\u0002\u0002\u069d',
	'\u069f\u0005\u0270\u0139\u0002\u069e\u06a0\u0005\u030a\u0186\u0002\u069f',
	'\u069e\u0003\u0002\u0002\u0002\u069f\u06a0\u0003\u0002\u0002\u0002\u06a0',
	'\u00bb\u0003\u0002\u0002\u0002\u06a1\u06a2\u0007\u0007\u0002\u0002\u06a2',
	'\u06a3\u0007\u013a\u0002\u0002\u06a3\u00bd\u0003\u0002\u0002\u0002\u06a4',
	'\u06a5\u0007\u0103\u0002\u0002\u06a5\u06a7\u0007\u0178\u0002\u0002\u06a6',
	'\u06a8\u0005\u00bc_\u0002\u06a7\u06a6\u0003\u0002\u0002\u0002\u06a7',
	'\u06a8\u0003\u0002\u0002\u0002\u06a8\u06ad\u0003\u0002\u0002\u0002\u06a9',
	'\u06aa\u0007\u0097\u0002\u0002\u06aa\u06ab\u0007\u001c\u0002\u0002\u06ab',
	'\u06ac\u0007\u009f\u0002\u0002\u06ac\u06ae\u0005\u0148\u00a5\u0002\u06ad',
	'\u06a9\u0003\u0002\u0002\u0002\u06ad\u06ae\u0003\u0002\u0002\u0002\u06ae',
	'\u00bf\u0003\u0002\u0002\u0002\u06af\u06b0\u0007\u009d\u0002\u0002\u06b0',
	'\u06b1\u0007\u0101\u0002\u0002\u06b1\u06b2\u0005\u0104\u0083\u0002\u06b2',
	'\u00c1\u0003\u0002\u0002\u0002\u06b3\u06b4\u0007{\u0002\u0002\u06b4',
	'\u06b5\u0007\u0178\u0002\u0002\u06b5\u06b6\u0007|\u0002\u0002\u06b6',
	'\u06b7\u0007\u0178\u0002\u0002\u06b7\u06b8\u0007\u0096\u0002\u0002\u06b8',
	'\u06bd\u0007\u0178\u0002\u0002\u06b9\u06ba\u0007}\u0002\u0002\u06ba',
	'\u06bb\u0007\u0178\u0002\u0002\u06bb\u06bc\u0007~\u0002\u0002\u06bc',
	'\u06be\u0007\u0178\u0002\u0002\u06bd\u06b9\u0003\u0002\u0002\u0002\u06bd',
	'\u06be\u0003\u0002\u0002\u0002\u06be\u06c1\u0003\u0002\u0002\u0002\u06bf',
	'\u06c1\u0005\u0164\u00b3\u0002\u06c0\u06b3\u0003\u0002\u0002\u0002\u06c0',
	'\u06bf\u0003\u0002\u0002\u0002\u06c1\u00c3\u0003\u0002\u0002\u0002\u06c2',
	'\u06c3\u0007{\u0002\u0002\u06c3\u06c4\u0007\u0178\u0002\u0002\u06c4',
	'\u06c5\u0007\u0096\u0002\u0002\u06c5\u06c6\u0007\u0178\u0002\u0002\u06c6',
	'\u00c5\u0003\u0002\u0002\u0002\u06c7\u06ca\u0005\u0318\u018d\u0002\u06c8',
	'\u06c9\u0007\u015a\u0002\u0002\u06c9\u06cb\u0005\u0318\u018d\u0002\u06ca',
	'\u06c8\u0003\u0002\u0002\u0002\u06ca\u06cb\u0003\u0002\u0002\u0002\u06cb',
	'\u06d9\u0003\u0002\u0002\u0002\u06cc\u06d6\u0005\u0318\u018d\u0002\u06cd',
	'\u06d2\u0007\u015a\u0002\u0002\u06ce\u06d3\u0007\u00a2\u0002\u0002\u06cf',
	'\u06d3\u0007v\u0002\u0002\u06d0\u06d3\u0007\u00a1\u0002\u0002\u06d1',
	'\u06d3\u0005\u0318\u018d\u0002\u06d2\u06ce\u0003\u0002\u0002\u0002\u06d2',
	'\u06cf\u0003\u0002\u0002\u0002\u06d2\u06d0\u0003\u0002\u0002\u0002\u06d2',
	'\u06d1\u0003\u0002\u0002\u0002\u06d3\u06d5\u0003\u0002\u0002\u0002\u06d4',
	'\u06cd\u0003\u0002\u0002\u0002\u06d5\u06d8\u0003\u0002\u0002\u0002\u06d6',
	'\u06d4\u0003\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002\u0002\u0002\u06d7',
	'\u06da\u0003\u0002\u0002\u0002\u06d8\u06d6\u0003\u0002\u0002\u0002\u06d9',
	'\u06cc\u0003\u0002\u0002\u0002\u06d9\u06da\u0003\u0002\u0002\u0002\u06da',
	'\u00c7\u0003\u0002\u0002\u0002\u06db\u06dd\u0005\u00c6d\u0002\u06dc',
	'\u06de\u0005\u030a\u0186\u0002\u06dd\u06dc\u0003\u0002\u0002\u0002\u06dd',
	'\u06de\u0003\u0002\u0002\u0002\u06de\u00c9\u0003\u0002\u0002\u0002\u06df',
	'\u06e1\u0005\u0270\u0139\u0002\u06e0\u06e2\u0005\u030a\u0186\u0002\u06e1',
	'\u06e0\u0003\u0002\u0002\u0002\u06e1\u06e2\u0003\u0002\u0002\u0002\u06e2',
	'\u06e4\u0003\u0002\u0002\u0002\u06e3\u06e5\u0005\u0178\u00bd\u0002\u06e4',
	'\u06e3\u0003\u0002\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5',
	'\u00cb\u0003\u0002\u0002\u0002\u06e6\u06f4\t\u0006\u0002\u0002\u06e7',
	'\u06e9\t\u0004\u0002\u0002\u06e8\u06ea\u0007\u0092\u0002\u0002\u06e9',
	'\u06e8\u0003\u0002\u0002\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea',
	'\u06eb\u0003\u0002\u0002\u0002\u06eb\u06f5\u0005\u0318\u018d\u0002\u06ec',
	'\u06ee\u0007\u008d\u0002\u0002\u06ed\u06ef\u0007\u0092\u0002\u0002\u06ee',
	'\u06ed\u0003\u0002\u0002\u0002\u06ee\u06ef\u0003\u0002\u0002\u0002\u06ef',
	'\u06f0\u0003\u0002\u0002\u0002\u06f0\u06f5\u0005\u0316\u018c\u0002\u06f1',
	'\u06f2\t\u0007\u0002\u0002\u06f2\u06f5\u0005\u00caf\u0002\u06f3\u06f5',
	'\u0005\u00caf\u0002\u06f4\u06e7\u0003\u0002\u0002\u0002\u06f4\u06ec',
	'\u0003\u0002\u0002\u0002\u06f4\u06f1\u0003\u0002\u0002\u0002\u06f4\u06f3',
	'\u0003\u0002\u0002\u0002\u06f5\u00cd\u0003\u0002\u0002\u0002\u06f6\u06f7',
	"\u0007\u00cc\u0002\u0002\u06f7\u06f8\u0007'\u0002\u0002\u06f8\u0705",
	'\u0005\u0308\u0185\u0002\u06f9\u06fa\u0007\u00dc\u0002\u0002\u06fa\u0701',
	'\u0007\u00dd\u0002\u0002\u06fb\u0702\u0007\u00f8\u0002\u0002\u06fc\u06fd',
	'\u0007\u00ea\u0002\u0002\u06fd\u06ff\u0007)\u0002\u0002\u06fe\u0700',
	'\u0005\u0174\u00bb\u0002\u06ff\u06fe\u0003\u0002\u0002\u0002\u06ff\u0700',
	'\u0003\u0002\u0002\u0002\u0700\u0702\u0003\u0002\u0002\u0002\u0701\u06fb',
	'\u0003\u0002\u0002\u0002\u0701\u06fc\u0003\u0002\u0002\u0002\u0701\u0702',
	'\u0003\u0002\u0002\u0002\u0702\u0706\u0003\u0002\u0002\u0002\u0703\u0704',
	'\u0007\u0121\u0002\u0002\u0704\u0706\u0007>\u0002\u0002\u0705\u06f9',
	'\u0003\u0002\u0002\u0002\u0705\u0703\u0003\u0002\u0002\u0002\u0706\u00cf',
	'\u0003\u0002\u0002\u0002\u0707\u0708\u0007.\u0002\u0002\u0708\u070b',
	'\t\b\u0002\u0002\u0709\u070a\u0007\n\u0002\u0002\u070a\u070c\u0005\u012c',
	'\u0097\u0002\u070b\u0709\u0003\u0002\u0002\u0002\u070b\u070c\u0003\u0002',
	'\u0002\u0002\u070c\u0783\u0003\u0002\u0002\u0002\u070d\u070e\u0007.',
	'\u0002\u0002\u070e\u0711\u0007(\u0002\u0002\u070f\u0710\t\t\u0002\u0002',
	'\u0710\u0712\u0005\u0318\u018d\u0002\u0711\u070f\u0003\u0002\u0002\u0002',
	'\u0711\u0712\u0003\u0002\u0002\u0002\u0712\u0716\u0003\u0002\u0002\u0002',
	'\u0713\u0714\u0007\n\u0002\u0002\u0714\u0717\u0005\u012c\u0097\u0002',
	'\u0715\u0717\u0005\u012c\u0097\u0002\u0716\u0713\u0003\u0002\u0002\u0002',
	'\u0716\u0715\u0003\u0002\u0002\u0002\u0716\u0717\u0003\u0002\u0002\u0002',
	'\u0717\u0783\u0003\u0002\u0002\u0002\u0718\u0719\u0007.\u0002\u0002',
	'\u0719\u071c\u0007\u00b5\u0002\u0002\u071a\u071b\t\t\u0002\u0002\u071b',
	'\u071d\u0005\u0318\u018d\u0002\u071c\u071a\u0003\u0002\u0002\u0002\u071c',
	'\u071d\u0003\u0002\u0002\u0002\u071d\u0721\u0003\u0002\u0002\u0002\u071e',
	'\u071f\u0007\n\u0002\u0002\u071f\u0722\u0005\u012c\u0097\u0002\u0720',
	'\u0722\u0005\u012c\u0097\u0002\u0721\u071e\u0003\u0002\u0002\u0002\u0721',
	'\u0720\u0003\u0002\u0002\u0002\u0721\u0722\u0003\u0002\u0002\u0002\u0722',
	'\u0783\u0003\u0002\u0002\u0002\u0723\u0724\u0007.\u0002\u0002\u0724',
	'\u0725\u0007\u00b9\u0002\u0002\u0725\u0728\u0007\u00b5\u0002\u0002\u0726',
	'\u0727\t\t\u0002\u0002\u0727\u0729\u0005\u0318\u018d\u0002\u0728\u0726',
	'\u0003\u0002\u0002\u0002\u0728\u0729\u0003\u0002\u0002\u0002\u0729\u072d',
	'\u0003\u0002\u0002\u0002\u072a\u072b\u0007\n\u0002\u0002\u072b\u072e',
	'\u0005\u012c\u0097\u0002\u072c\u072e\u0005\u012c\u0097\u0002\u072d\u072a',
	'\u0003\u0002\u0002\u0002\u072d\u072c\u0003\u0002\u0002\u0002\u072d\u072e',
	'\u0003\u0002\u0002\u0002\u072e\u0783\u0003\u0002\u0002\u0002\u072f\u0730',
	'\u0007.\u0002\u0002\u0730\u0731\u0007)\u0002\u0002\u0731\u0732\t\t\u0002',
	'\u0002\u0732\u0735\u0005\u0270\u0139\u0002\u0733\u0734\t\t\u0002\u0002',
	'\u0734\u0736\u0005\u0318\u018d\u0002\u0735\u0733\u0003\u0002\u0002\u0002',
	'\u0735\u0736\u0003\u0002\u0002\u0002\u0736\u073a\u0003\u0002\u0002\u0002',
	'\u0737\u0738\u0007\n\u0002\u0002\u0738\u073b\u0005\u012c\u0097\u0002',
	'\u0739\u073b\u0005\u012c\u0097\u0002\u073a\u0737\u0003\u0002\u0002\u0002',
	'\u073a\u0739\u0003\u0002\u0002\u0002\u073a\u073b\u0003\u0002\u0002\u0002',
	'\u073b\u0783\u0003\u0002\u0002\u0002\u073c\u073d\u0007.\u0002\u0002',
	'\u073d\u0741\u0007-\u0002\u0002\u073e\u073f\u0007\n\u0002\u0002\u073f',
	'\u0742\u0005\u012a\u0096\u0002\u0740\u0742\u0005\u012a\u0096\u0002\u0741',
	'\u073e\u0003\u0002\u0002\u0002\u0741\u0740\u0003\u0002\u0002\u0002\u0741',
	'\u0742\u0003\u0002\u0002\u0002\u0742\u0783\u0003\u0002\u0002\u0002\u0743',
	'\u0744\u0007.\u0002\u0002\u0744\u0745\u0007&\u0002\u0002\u0745\u0747',
	'\u0005\u0270\u0139\u0002\u0746\u0748\u0005\u030a\u0186\u0002\u0747\u0746',
	'\u0003\u0002\u0002\u0002\u0747\u0748\u0003\u0002\u0002\u0002\u0748\u0783',
	'\u0003\u0002\u0002\u0002\u0749\u074a\u0007.\u0002\u0002\u074a\u074f',
	'\u0007C\u0002\u0002\u074b\u074c\t\u0004\u0002\u0002\u074c\u0750\u0005',
	"\u0318\u018d\u0002\u074d\u074e\u0007'\u0002\u0002\u074e\u0750\u0005",
	'\u0270\u0139\u0002\u074f\u074b\u0003\u0002\u0002\u0002\u074f\u074d\u0003',
	'\u0002\u0002\u0002\u0750\u0783\u0003\u0002\u0002\u0002\u0751\u0752\u0007',
	".\u0002\u0002\u0752\u0753\u0007'\u0002\u0002\u0753\u0756\u0007\u0092",
	'\u0002\u0002\u0754\u0755\t\t\u0002\u0002\u0755\u0757\u0005\u0318\u018d',
	'\u0002\u0756\u0754\u0003\u0002\u0002\u0002\u0756\u0757\u0003\u0002\u0002',
	'\u0002\u0757\u0758\u0003\u0002\u0002\u0002\u0758\u0759\u0007\n\u0002',
	'\u0002\u0759\u075b\u0005\u012c\u0097\u0002\u075a\u075c\u0005\u030a\u0186',
	'\u0002\u075b\u075a\u0003\u0002\u0002\u0002\u075b\u075c\u0003\u0002\u0002',
	'\u0002\u075c\u0783\u0003\u0002\u0002\u0002\u075d\u075e\u0007.\u0002',
	'\u0002\u075e\u075f\u0007\u009f\u0002\u0002\u075f\u0763\u0005\u0270\u0139',
	'\u0002\u0760\u0761\u0007\u015e\u0002\u0002\u0761\u0762\u0007\u0178\u0002',
	'\u0002\u0762\u0764\u0007\u015f\u0002\u0002\u0763\u0760\u0003\u0002\u0002',
	'\u0002\u0763\u0764\u0003\u0002\u0002\u0002\u0764\u0783\u0003\u0002\u0002',
	'\u0002\u0765\u0766\u0007.\u0002\u0002\u0766\u0772\u0007\u00c1\u0002',
	'\u0002\u0767\u0768\t\u0004\u0002\u0002\u0768\u076a\u0005\u0318\u018d',
	'\u0002\u0769\u076b\u0007\u0092\u0002\u0002\u076a\u0769\u0003\u0002\u0002',
	'\u0002\u076a\u076b\u0003\u0002\u0002\u0002\u076b\u0773\u0003\u0002\u0002',
	'\u0002\u076c\u076e\u0005\u00c8e\u0002\u076d\u076c\u0003\u0002\u0002',
	'\u0002\u076d\u076e\u0003\u0002\u0002\u0002\u076e\u0770\u0003\u0002\u0002',
	'\u0002\u076f\u0771\u0007\u0092\u0002\u0002\u0770\u076f\u0003\u0002\u0002',
	'\u0002\u0770\u0771\u0003\u0002\u0002\u0002\u0771\u0773\u0003\u0002\u0002',
	'\u0002\u0772\u0767\u0003\u0002\u0002\u0002\u0772\u076d\u0003\u0002\u0002',
	'\u0002\u0773\u0783\u0003\u0002\u0002\u0002\u0774\u0775\u0007.\u0002',
	'\u0002\u0775\u0783\u0007\u0104\u0002\u0002\u0776\u0777\u0007.\u0002',
	'\u0002\u0777\u0783\u0007\u0105\u0002\u0002\u0778\u0779\u0007.\u0002',
	'\u0002\u0779\u077a\u0007\u0109\u0002\u0002\u077a\u0783\u0007\u0178\u0002',
	'\u0002\u077b\u077c\u0007.\u0002\u0002\u077c\u0780\u0007\u013b\u0002',
	'\u0002\u077d\u077e\u0007\u013c\u0002\u0002\u077e\u0781\u0005\u0318\u018d',
	'\u0002\u077f\u0781\u0007\u013e\u0002\u0002\u0780\u077d\u0003\u0002\u0002',
	'\u0002\u0780\u077f\u0003\u0002\u0002\u0002\u0781\u0783\u0003\u0002\u0002',
	'\u0002\u0782\u0707\u0003\u0002\u0002\u0002\u0782\u070d\u0003\u0002\u0002',
	'\u0002\u0782\u0718\u0003\u0002\u0002\u0002\u0782\u0723\u0003\u0002\u0002',
	'\u0002\u0782\u072f\u0003\u0002\u0002\u0002\u0782\u073c\u0003\u0002\u0002',
	'\u0002\u0782\u0743\u0003\u0002\u0002\u0002\u0782\u0749\u0003\u0002\u0002',
	'\u0002\u0782\u0751\u0003\u0002\u0002\u0002\u0782\u075d\u0003\u0002\u0002',
	'\u0002\u0782\u0765\u0003\u0002\u0002\u0002\u0782\u0774\u0003\u0002\u0002',
	'\u0002\u0782\u0776\u0003\u0002\u0002\u0002\u0782\u0778\u0003\u0002\u0002',
	'\u0002\u0782\u077b\u0003\u0002\u0002\u0002\u0783\u00d1\u0003\u0002\u0002',
	"\u0002\u0784\u0785\u0007\u00c0\u0002\u0002\u0785\u0786\u0007'\u0002",
	'\u0002\u0786\u0788\u0005\u0270\u0139\u0002\u0787\u0789\u0005\u030a\u0186',
	'\u0002\u0788\u0787\u0003\u0002\u0002\u0002\u0788\u0789\u0003\u0002\u0002',
	'\u0002\u0789\u078a\u0003\u0002\u0002\u0002\u078a\u078b\u0005\u00d6l',
	'\u0002\u078b\u00d3\u0003\u0002\u0002\u0002\u078c\u078d\u0007\u00c0\u0002',
	'\u0002\u078d\u078e\t\u0004\u0002\u0002\u078e\u078f\u0005\u0318\u018d',
	'\u0002\u078f\u0790\u0005\u00d6l\u0002\u0790\u00d5\u0003\u0002\u0002',
	'\u0002\u0791\u0792\t\n\u0002\u0002\u0792\u00d7\u0003\u0002\u0002\u0002',
	"\u0793\u0794\u0007\u00c2\u0002\u0002\u0794\u0795\u0007'\u0002\u0002",
	'\u0795\u0797\u0005\u0270\u0139\u0002\u0796\u0798\u0005\u030a\u0186\u0002',
	'\u0797\u0796\u0003\u0002\u0002\u0002\u0797\u0798\u0003\u0002\u0002\u0002',
	'\u0798\u00d9\u0003\u0002\u0002\u0002\u0799\u079a\u0007\u00c2\u0002\u0002',
	'\u079a\u079b\t\u0004\u0002\u0002\u079b\u079c\u0005\u0318\u018d\u0002',
	'\u079c\u00db\u0003\u0002\u0002\u0002\u079d\u079e\u0007C\u0002\u0002',
	'\u079e\u079f\u0007\u00fa\u0002\u0002\u079f\u07a0\u0005\u0318\u018d\u0002',
	'\u07a0\u00dd\u0003\u0002\u0002\u0002\u07a1\u07a2\u0007K\u0002\u0002',
	'\u07a2\u07a3\u0007\u00fa\u0002\u0002\u07a3\u07a4\u0005\u0318\u018d\u0002',
	'\u07a4\u00df\u0003\u0002\u0002\u0002\u07a5\u07a6\u0007\u00bc\u0002\u0002',
	'\u07a6\u07a8\u0005\u00fc\u007f\u0002\u07a7\u07a9\u0005\u00f6|\u0002',
	'\u07a8\u07a7\u0003\u0002\u0002\u0002\u07a8\u07a9\u0003\u0002\u0002\u0002',
	'\u07a9\u07aa\u0003\u0002\u0002\u0002\u07aa\u07ab\u0007M\u0002\u0002',
	'\u07ab\u07ad\u0005\u0102\u0082\u0002\u07ac\u07ae\u0005\u0106\u0084\u0002',
	'\u07ad\u07ac\u0003\u0002\u0002\u0002\u07ad\u07ae\u0003\u0002\u0002\u0002',
	'\u07ae\u00e1\u0003\u0002\u0002\u0002\u07af\u07b1\u0007\u00bd\u0002\u0002',
	'\u07b0\u07b2\u0005\u0108\u0085\u0002\u07b1\u07b0\u0003\u0002\u0002\u0002',
	'\u07b1\u07b2\u0003\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002\u0002\u0002',
	'\u07b3\u07b5\u0005\u00fc\u007f\u0002\u07b4\u07b6\u0005\u00f6|\u0002',
	'\u07b5\u07b4\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002\u0002\u0002',
	'\u07b6\u07b7\u0003\u0002\u0002\u0002\u07b7\u07b8\u0007\u0017\u0002\u0002',
	'\u07b8\u07b9\u0005\u0102\u0082\u0002\u07b9\u00e3\u0003\u0002\u0002\u0002',
	'\u07ba\u07bc\u0007\u00bc\u0002\u0002\u07bb\u07bd\u0007\u00fa\u0002\u0002',
	'\u07bc\u07bb\u0003\u0002\u0002\u0002\u07bc\u07bd\u0003\u0002\u0002\u0002',
	'\u07bd\u07be\u0003\u0002\u0002\u0002\u07be\u07c3\u0005\u0318\u018d\u0002',
	'\u07bf\u07c0\u0007\u015c\u0002\u0002\u07c0\u07c2\u0005\u0318\u018d\u0002',
	'\u07c1\u07bf\u0003\u0002\u0002\u0002\u07c2\u07c5\u0003\u0002\u0002\u0002',
	'\u07c3\u07c1\u0003\u0002\u0002\u0002\u07c3\u07c4\u0003\u0002\u0002\u0002',
	'\u07c4\u07c6\u0003\u0002\u0002\u0002\u07c5\u07c3\u0003\u0002\u0002\u0002',
	'\u07c6\u07c7\u0007M\u0002\u0002\u07c7\u07c9\u0005\u0102\u0082\u0002',
	'\u07c8\u07ca\u0005\u010c\u0087\u0002\u07c9\u07c8\u0003\u0002\u0002\u0002',
	'\u07c9\u07ca\u0003\u0002\u0002\u0002\u07ca\u00e5\u0003\u0002\u0002\u0002',
	'\u07cb\u07cd\u0007\u00bd\u0002\u0002\u07cc\u07ce\u0005\u010a\u0086\u0002',
	'\u07cd\u07cc\u0003\u0002\u0002\u0002\u07cd\u07ce\u0003\u0002\u0002\u0002',
	'\u07ce\u07d0\u0003\u0002\u0002\u0002\u07cf\u07d1\u0007\u00fa\u0002\u0002',
	'\u07d0\u07cf\u0003\u0002\u0002\u0002\u07d0\u07d1\u0003\u0002\u0002\u0002',
	'\u07d1\u07d2\u0003\u0002\u0002\u0002\u07d2\u07d7\u0005\u0318\u018d\u0002',
	'\u07d3\u07d4\u0007\u015c\u0002\u0002\u07d4\u07d6\u0005\u0318\u018d\u0002',
	'\u07d5\u07d3\u0003\u0002\u0002\u0002\u07d6\u07d9\u0003\u0002\u0002\u0002',
	'\u07d7\u07d5\u0003\u0002\u0002\u0002\u07d7\u07d8\u0003\u0002\u0002\u0002',
	'\u07d8\u07da\u0003\u0002\u0002\u0002\u07d9\u07d7\u0003\u0002\u0002\u0002',
	'\u07da\u07db\u0007\u0017\u0002\u0002\u07db\u07dc\u0005\u0102\u0082\u0002',
	'\u07dc\u00e7\u0003\u0002\u0002\u0002\u07dd\u07de\u0007.\u0002\u0002',
	'\u07de\u07df\u0007\u00fa\u0002\u0002\u07df\u07e0\u0007\u00bc\u0002\u0002',
	'\u07e0\u07e1\u0005\u0104\u0083\u0002\u07e1\u00e9\u0003\u0002\u0002\u0002',
	'\u07e2\u07e3\u0007.\u0002\u0002\u07e3\u07e4\u0007\u00fb\u0002\u0002',
	'\u07e4\u00eb\u0003\u0002\u0002\u0002\u07e5\u07e6\u0007.\u0002\u0002',
	'\u07e6\u07e7\u0007\u00ef\u0002\u0002\u07e7\u07e8\u0007\u00fb\u0002\u0002',
	'\u07e8\u00ed\u0003\u0002\u0002\u0002\u07e9\u07ea\u0007\u009d\u0002\u0002',
	'\u07ea\u07ee\u0007\u00fa\u0002\u0002\u07eb\u07ef\u0007\u0005\u0002\u0002',
	'\u07ec\u07ef\u0007\u0006\u0002\u0002\u07ed\u07ef\u0005\u0318\u018d\u0002',
	'\u07ee\u07eb\u0003\u0002\u0002\u0002\u07ee\u07ec\u0003\u0002\u0002\u0002',
	'\u07ee\u07ed\u0003\u0002\u0002\u0002\u07ef\u00ef\u0003\u0002\u0002\u0002',
	'\u07f0\u07f1\u0007.\u0002\u0002\u07f1\u07f3\u0007\u00bc\u0002\u0002',
	'\u07f2\u07f4\u0005\u0104\u0083\u0002\u07f3\u07f2\u0003\u0002\u0002\u0002',
	'\u07f3\u07f4\u0003\u0002\u0002\u0002\u07f4\u07f7\u0003\u0002\u0002\u0002',
	'\u07f5\u07f6\u0007$\u0002\u0002\u07f6\u07f8\u0005\u00f4{\u0002\u07f7',
	'\u07f5\u0003\u0002\u0002\u0002\u07f7\u07f8\u0003\u0002\u0002\u0002\u07f8',
	'\u00f1\u0003\u0002\u0002\u0002\u07f9\u07fa\u0007.\u0002\u0002\u07fa',
	'\u07fb\u0007\u0102\u0002\u0002\u07fb\u07fc\u0005\u0318\u018d\u0002\u07fc',
	'\u00f3\u0003\u0002\u0002\u0002\u07fd\u0800\u0007\u0005\u0002\u0002\u07fe',
	'\u0800\u0005\u00fa~\u0002\u07ff\u07fd\u0003\u0002\u0002\u0002\u07ff',
	'\u07fe\u0003\u0002\u0002\u0002\u0800\u00f5\u0003\u0002\u0002\u0002\u0801',
	'\u0802\u0007$\u0002\u0002\u0802\u0803\u0005\u00f8}\u0002\u0803\u00f7',
	'\u0003\u0002\u0002\u0002\u0804\u0805\t\u0004\u0002\u0002\u0805\u0812',
	"\u0005\u0318\u018d\u0002\u0806\u0808\u0007'\u0002\u0002\u0807\u0806",
	'\u0003\u0002\u0002\u0002\u0807\u0808\u0003\u0002\u0002\u0002\u0808\u0809',
	'\u0003\u0002\u0002\u0002\u0809\u080b\u0005\u0270\u0139\u0002\u080a\u080c',
	'\u0005\u030a\u0186\u0002\u080b\u080a\u0003\u0002\u0002\u0002\u080b\u080c',
	'\u0003\u0002\u0002\u0002\u080c\u0812\u0003\u0002\u0002\u0002\u080d\u080e',
	'\u0007\u00fe\u0002\u0002\u080e\u0812\u0007\u0178\u0002\u0002\u080f\u0810',
	'\u0007\u00ff\u0002\u0002\u0810\u0812\u0005\u0318\u018d\u0002\u0811\u0804',
	'\u0003\u0002\u0002\u0002\u0811\u0807\u0003\u0002\u0002\u0002\u0811\u080d',
	'\u0003\u0002\u0002\u0002\u0811\u080f\u0003\u0002\u0002\u0002\u0812\u00f9',
	'\u0003\u0002\u0002\u0002\u0813\u0814\t\u0004\u0002\u0002\u0814\u0827',
	"\u0005\u0318\u018d\u0002\u0815\u0817\u0007'\u0002\u0002\u0816\u0815",
	'\u0003\u0002\u0002\u0002\u0816\u0817\u0003\u0002\u0002\u0002\u0817\u0818',
	'\u0003\u0002\u0002\u0002\u0818\u081d\u0005\u0270\u0139\u0002\u0819\u081a',
	'\u0007\u015e\u0002\u0002\u081a\u081b\u0005\u0174\u00bb\u0002\u081b\u081c',
	'\u0007\u015f\u0002\u0002\u081c\u081e\u0003\u0002\u0002\u0002\u081d\u0819',
	'\u0003\u0002\u0002\u0002\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u0820',
	'\u0003\u0002\u0002\u0002\u081f\u0821\u0005\u030a\u0186\u0002\u0820\u081f',
	'\u0003\u0002\u0002\u0002\u0820\u0821\u0003\u0002\u0002\u0002\u0821\u0827',
	'\u0003\u0002\u0002\u0002\u0822\u0823\u0007\u00fe\u0002\u0002\u0823\u0827',
	'\u0007\u0178\u0002\u0002\u0824\u0825\u0007\u00ff\u0002\u0002\u0825\u0827',
	'\u0005\u0318\u018d\u0002\u0826\u0813\u0003\u0002\u0002\u0002\u0826\u0816',
	'\u0003\u0002\u0002\u0002\u0826\u0822\u0003\u0002\u0002\u0002\u0826\u0824',
	'\u0003\u0002\u0002\u0002\u0827\u00fb\u0003\u0002\u0002\u0002\u0828\u082d',
	'\u0005\u00fe\u0080\u0002\u0829\u082a\u0007\u015c\u0002\u0002\u082a\u082c',
	'\u0005\u00fe\u0080\u0002\u082b\u0829\u0003\u0002\u0002\u0002\u082c\u082f',
	'\u0003\u0002\u0002\u0002\u082d\u082b\u0003\u0002\u0002\u0002\u082d\u082e',
	'\u0003\u0002\u0002\u0002\u082e\u00fd\u0003\u0002\u0002\u0002\u082f\u082d',
	'\u0003\u0002\u0002\u0002\u0830\u0835\u0005\u0100\u0081\u0002\u0831\u0832',
	'\u0007\u015e\u0002\u0002\u0832\u0833\u0005\u0174\u00bb\u0002\u0833\u0834',
	'\u0007\u015f\u0002\u0002\u0834\u0836\u0003\u0002\u0002\u0002\u0835\u0831',
	'\u0003\u0002\u0002\u0002\u0835\u0836\u0003\u0002\u0002\u0002\u0836\u00ff',
	'\u0003\u0002\u0002\u0002\u0837\u0838\t\u000b\u0002\u0002\u0838\u0101',
	'\u0003\u0002\u0002\u0002\u0839\u083e\u0005\u0104\u0083\u0002\u083a\u083b',
	'\u0007\u015c\u0002\u0002\u083b\u083d\u0005\u0104\u0083\u0002\u083c\u083a',
	'\u0003\u0002\u0002\u0002\u083d\u0840\u0003\u0002\u0002\u0002\u083e\u083c',
	'\u0003\u0002\u0002\u0002\u083e\u083f\u0003\u0002\u0002\u0002\u083f\u0103',
	'\u0003\u0002\u0002\u0002\u0840\u083e\u0003\u0002\u0002\u0002\u0841\u0842',
	'\u0007\u00f9\u0002\u0002\u0842\u0848\u0005\u031c\u018f\u0002\u0843\u0844',
	'\u0007\u0013\u0002\u0002\u0844\u0848\u0005\u031c\u018f\u0002\u0845\u0846',
	'\u0007\u00fa\u0002\u0002\u0846\u0848\u0005\u0318\u018d\u0002\u0847\u0841',
	'\u0003\u0002\u0002\u0002\u0847\u0843\u0003\u0002\u0002\u0002\u0847\u0845',
	'\u0003\u0002\u0002\u0002\u0848\u0105\u0003\u0002\u0002\u0002\u0849\u084a',
	'\u0007\u0097\u0002\u0002\u084a\u084b\u0007\u00bc\u0002\u0002\u084b\u084c',
	'\u0007\u00e0\u0002\u0002\u084c\u0107\u0003\u0002\u0002\u0002\u084d\u084e',
	'\u0007\u00bc\u0002\u0002\u084e\u084f\u0007\u00e0\u0002\u0002\u084f\u0850',
	'\u0007\u00ea\u0002\u0002\u0850\u0109\u0003\u0002\u0002\u0002\u0851\u0852',
	'\u0007\u0100\u0002\u0002\u0852\u0853\u0007\u00e0\u0002\u0002\u0853\u0854',
	'\u0007\u00ea\u0002\u0002\u0854\u010b\u0003\u0002\u0002\u0002\u0855\u0856',
	'\u0007\u0097\u0002\u0002\u0856\u0857\u0007\u0100\u0002\u0002\u0857\u0858',
	'\u0007\u00e0\u0002\u0002\u0858\u010d\u0003\u0002\u0002\u0002\u0859\u085b',
	'\u0007/\u0002\u0002\u085a\u085c\u00070\u0002\u0002\u085b\u085a\u0003',
	'\u0002\u0002\u0002\u085b\u085c\u0003\u0002\u0002\u0002\u085c\u0866\u0003',
	"\u0002\u0002\u0002\u085d\u085e\u0007'\u0002\u0002\u085e\u0861\u0005",
	'\u0270\u0139\u0002\u085f\u0860\t\f\u0002\u0002\u0860\u0862\u0007&\u0002',
	'\u0002\u0861\u085f\u0003\u0002\u0002\u0002\u0861\u0862\u0003\u0002\u0002',
	'\u0002\u0862\u0867\u0003\u0002\u0002\u0002\u0863\u0865\u0005\u030a\u0186',
	'\u0002\u0864\u0863\u0003\u0002\u0002\u0002\u0864\u0865\u0003\u0002\u0002',
	'\u0002\u0865\u0867\u0003\u0002\u0002\u0002\u0866\u085d\u0003\u0002\u0002',
	'\u0002\u0866\u0864\u0003\u0002\u0002\u0002\u0867\u010f\u0003\u0002\u0002',
	'\u0002\u0868\u086d\u0005\u0112\u008a\u0002\u0869\u086a\u0007\u015c\u0002',
	'\u0002\u086a\u086c\u0005\u0112\u008a\u0002\u086b\u0869\u0003\u0002\u0002',
	'\u0002\u086c\u086f\u0003\u0002\u0002\u0002\u086d\u086b\u0003\u0002\u0002',
	'\u0002\u086d\u086e\u0003\u0002\u0002\u0002\u086e\u0111\u0003\u0002\u0002',
	'\u0002\u086f\u086d\u0003\u0002\u0002\u0002\u0870\u0871\u0005\u0114\u008b',
	'\u0002\u0871\u0872\u0007\u0178\u0002\u0002\u0872\u0113\u0003\u0002\u0002',
	'\u0002\u0873\u0874\t\r\u0002\u0002\u0874\u0115\u0003\u0002\u0002\u0002',
	'\u0875\u0877\u0007C\u0002\u0002\u0876\u0878\u0007\u008c\u0002\u0002',
	'\u0877\u0876\u0003\u0002\u0002\u0002\u0877\u0878\u0003\u0002\u0002\u0002',
	'\u0878\u0879\u0003\u0002\u0002\u0002\u0879\u087a\u0007\u008d\u0002\u0002',
	'\u087a\u087b\u0005\u031a\u018e\u0002\u087b\u087c\u0007\u0018\u0002\u0002',
	'\u087c\u087f\u0007\u0178\u0002\u0002\u087d\u087e\u00074\u0002\u0002',
	'\u087e\u0880\u0005\u0110\u0089\u0002\u087f\u087d\u0003\u0002\u0002\u0002',
	'\u087f\u0880\u0003\u0002\u0002\u0002\u0880\u0117\u0003\u0002\u0002\u0002',
	'\u0881\u0883\u0007K\u0002\u0002\u0882\u0884\u0007\u008c\u0002\u0002',
	'\u0883\u0882\u0003\u0002\u0002\u0002\u0883\u0884\u0003\u0002\u0002\u0002',
	'\u0884\u0885\u0003\u0002\u0002\u0002\u0885\u0887\u0007\u008d\u0002\u0002',
	'\u0886\u0888\u0005(\u0015\u0002\u0887\u0886\u0003\u0002\u0002\u0002',
	'\u0887\u0888\u0003\u0002\u0002\u0002\u0888\u0889\u0003\u0002\u0002\u0002',
	'\u0889\u088a\u0005\u031a\u018e\u0002\u088a\u0119\u0003\u0002\u0002\u0002',
	'\u088b\u088c\u0007\u010b\u0002\u0002\u088c\u088d\u0007\u008d\u0002\u0002',
	'\u088d\u011b\u0003\u0002\u0002\u0002\u088e\u088f\u0007C\u0002\u0002',
	'\u088f\u0890\u0007\u008c\u0002\u0002\u0890\u0891\u0007\u008e\u0002\u0002',
	'\u0891\u0892\u0007\u017e\u0002\u0002\u0892\u0894\u0007\u015e\u0002\u0002',
	'\u0893\u0895\u0005\u016e\u00b8\u0002\u0894\u0893\u0003\u0002\u0002\u0002',
	'\u0894\u0895\u0003\u0002\u0002\u0002\u0895\u0896\u0003\u0002\u0002\u0002',
	'\u0896\u0897\u0007\u015f\u0002\u0002\u0897\u0898\u0005\u02f8\u017d\u0002',
	'\u0898\u011d\u0003\u0002\u0002\u0002\u0899\u089a\u0007K\u0002\u0002',
	'\u089a\u089b\u0007\u008c\u0002\u0002\u089b\u089d\u0007\u008e\u0002\u0002',
	'\u089c\u089e\u0005(\u0015\u0002\u089d\u089c\u0003\u0002\u0002\u0002',
	'\u089d\u089e\u0003\u0002\u0002\u0002\u089e\u089f\u0003\u0002\u0002\u0002',
	'\u089f\u08a0\u0007\u017e\u0002\u0002\u08a0\u011f\u0003\u0002\u0002\u0002',
	'\u08a1\u08a3\u0007C\u0002\u0002\u08a2\u08a4\u00054\u001b\u0002\u08a3',
	'\u08a2\u0003\u0002\u0002\u0002\u08a3\u08a4\u0003\u0002\u0002\u0002\u08a4',
	'\u08a5\u0003\u0002\u0002\u0002\u08a5\u08a7\u0007\u00b4\u0002\u0002\u08a6',
	'\u08a8\u0005,\u0017\u0002\u08a7\u08a6\u0003\u0002\u0002\u0002\u08a7',
	'\u08a8\u0003\u0002\u0002\u0002\u08a8\u08a9\u0003\u0002\u0002\u0002\u08a9',
	'\u08ae\u0005\u0270\u0139\u0002\u08aa\u08ab\u0007\u015e\u0002\u0002\u08ab',
	'\u08ac\u0005\u01a8\u00d5\u0002\u08ac\u08ad\u0007\u015f\u0002\u0002\u08ad',
	'\u08af\u0003\u0002\u0002\u0002\u08ae\u08aa\u0003\u0002\u0002\u0002\u08ae',
	'\u08af\u0003\u0002\u0002\u0002\u08af\u08b1\u0003\u0002\u0002\u0002\u08b0',
	'\u08b2\u0005\u012e\u0098\u0002\u08b1\u08b0\u0003\u0002\u0002\u0002\u08b1',
	'\u08b2\u0003\u0002\u0002\u0002\u08b2\u08b4\u0003\u0002\u0002\u0002\u08b3',
	'\u08b5\u0005\u0124\u0093\u0002\u08b4\u08b3\u0003\u0002\u0002\u0002\u08b4',
	'\u08b5\u0003\u0002\u0002\u0002\u08b5\u08b7\u0003\u0002\u0002\u0002\u08b6',
	'\u08b8\u0005\u0146\u00a4\u0002\u08b7\u08b6\u0003\u0002\u0002\u0002\u08b7',
	'\u08b8\u0003\u0002\u0002\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002\u08b9',
	'\u08ba\u0007\u0018\u0002\u0002\u08ba\u08bb\u0005\u01f6\u00fc\u0002\u08bb',
	'\u0121\u0003\u0002\u0002\u0002\u08bc\u08bd\u0007C\u0002\u0002\u08bd',
	'\u08be\u0007\u00b9\u0002\u0002\u08be\u08c0\u0007\u00b4\u0002\u0002\u08bf',
	'\u08c1\u0005,\u0017\u0002\u08c0\u08bf\u0003\u0002\u0002\u0002\u08c0',
	'\u08c1\u0003\u0002\u0002\u0002\u08c1\u08c2\u0003\u0002\u0002\u0002\u08c2',
	'\u08c4\u0005\u0270\u0139\u0002\u08c3\u08c5\u00050\u0019\u0002\u08c4',
	'\u08c3\u0003\u0002\u0002\u0002\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5',
	'\u08c7\u0003\u0002\u0002\u0002\u08c6\u08c8\u0005\u012e\u0098\u0002\u08c7',
	'\u08c6\u0003\u0002\u0002\u0002\u08c7\u08c8\u0003\u0002\u0002\u0002\u08c8',
	'\u08ca\u0003\u0002\u0002\u0002\u08c9\u08cb\u0005\u0144\u00a3\u0002\u08ca',
	'\u08c9\u0003\u0002\u0002\u0002\u08ca\u08cb\u0003\u0002\u0002\u0002\u08cb',
	'\u08cd\u0003\u0002\u0002\u0002\u08cc\u08ce\u0005\u015e\u00b0\u0002\u08cd',
	'\u08cc\u0003\u0002\u0002\u0002\u08cd\u08ce\u0003\u0002\u0002\u0002\u08ce',
	'\u08d0\u0003\u0002\u0002\u0002\u08cf\u08d1\u0005\u016c\u00b7\u0002\u08d0',
	'\u08cf\u0003\u0002\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002\u0002\u08d1',
	'\u08d3\u0003\u0002\u0002\u0002\u08d2\u08d4\u0005\u0146\u00a4\u0002\u08d3',
	'\u08d2\u0003\u0002\u0002\u0002\u08d3\u08d4\u0003\u0002\u0002\u0002\u08d4',
	'\u08d5\u0003\u0002\u0002\u0002\u08d5\u08d6\u0007\u0018\u0002\u0002\u08d6',
	'\u08d7\u0005\u01f6\u00fc\u0002\u08d7\u0123\u0003\u0002\u0002\u0002\u08d8',
	'\u08d9\u0007g\u0002\u0002\u08d9\u08da\u0007$\u0002\u0002\u08da\u08db',
	'\u0007\u015e\u0002\u0002\u08db\u08dc\u0005\u0174\u00bb\u0002\u08dc\u08dd',
	'\u0007\u015f\u0002\u0002\u08dd\u0125\u0003\u0002\u0002\u0002\u08de\u08df',
	'\u0007K\u0002\u0002\u08df\u08e1\u0007\u00b4\u0002\u0002\u08e0\u08e2',
	'\u0005(\u0015\u0002\u08e1\u08e0\u0003\u0002\u0002\u0002\u08e1\u08e2',
	'\u0003\u0002\u0002\u0002\u08e2\u08e3\u0003\u0002\u0002\u0002\u08e3\u08e4',
	'\u0005\u0272\u013a\u0002\u08e4\u0127\u0003\u0002\u0002\u0002\u08e5\u08e6',
	'\u0007K\u0002\u0002\u08e6\u08e7\u0007\u00b9\u0002\u0002\u08e7\u08e9',
	'\u0007\u00b4\u0002\u0002\u08e8\u08ea\u0005(\u0015\u0002\u08e9\u08e8',
	'\u0003\u0002\u0002\u0002\u08e9\u08ea\u0003\u0002\u0002\u0002\u08ea\u08eb',
	'\u0003\u0002\u0002\u0002\u08eb\u08ec\u0005\u0272\u013a\u0002\u08ec\u0129',
	'\u0003\u0002\u0002\u0002\u08ed\u08f0\u0005\u031a\u018e\u0002\u08ee\u08f0',
	'\u0007\u0178\u0002\u0002\u08ef\u08ed\u0003\u0002\u0002\u0002\u08ef\u08ee',
	'\u0003\u0002\u0002\u0002\u08f0\u012b\u0003\u0002\u0002\u0002\u08f1\u08f4',
	'\u0005\u0318\u018d\u0002\u08f2\u08f4\u0007\u0178\u0002\u0002\u08f3\u08f1',
	'\u0003\u0002\u0002\u0002\u08f3\u08f2\u0003\u0002\u0002\u0002\u08f4\u012d',
	'\u0003\u0002\u0002\u0002\u08f5\u08f6\u0007N\u0002\u0002\u08f6\u08f7',
	'\u0007\u0178\u0002\u0002\u08f7\u012f\u0003\u0002\u0002\u0002\u08f8\u08f9',
	'\u00074\u0002\u0002\u08f9\u08fa\u0005\u0132\u009a\u0002\u08fa\u0131',
	'\u0003\u0002\u0002\u0002\u08fb\u08fc\t\u000e\u0002\u0002\u08fc\u0133',
	'\u0003\u0002\u0002\u0002\u08fd\u08fe\u0007g\u0002\u0002\u08fe\u08ff',
	'\u0007\u0014\u0002\u0002\u08ff\u0900\u0007\u015e\u0002\u0002\u0900\u0905',
	'\u0005\u01b6\u00dc\u0002\u0901\u0902\u0007\u015c\u0002\u0002\u0902\u0904',
	'\u0005\u01b6\u00dc\u0002\u0903\u0901\u0003\u0002\u0002\u0002\u0904\u0907',
	'\u0003\u0002\u0002\u0002\u0905\u0903\u0003\u0002\u0002\u0002\u0905\u0906',
	'\u0003\u0002\u0002\u0002\u0906\u0908\u0003\u0002\u0002\u0002\u0907\u0905',
	'\u0003\u0002\u0002\u0002\u0908\u0909\u0007\u015f\u0002\u0002\u0909\u0135',
	'\u0003\u0002\u0002\u0002\u090a\u090b\u0007h\u0002\u0002\u090b\u090c',
	'\u0007\u0014\u0002\u0002\u090c\u090d\u0007\u015e\u0002\u0002\u090d\u090e',
	'\u0005\u0174\u00bb\u0002\u090e\u0915\u0007\u015f\u0002\u0002\u090f\u0910',
	'\u0007i\u0002\u0002\u0910\u0911\u0007\u0014\u0002\u0002\u0911\u0912',
	'\u0007\u015e\u0002\u0002\u0912\u0913\u0005\u017a\u00be\u0002\u0913\u0914',
	'\u0007\u015f\u0002\u0002\u0914\u0916\u0003\u0002\u0002\u0002\u0915\u090f',
	'\u0003\u0002\u0002\u0002\u0915\u0916\u0003\u0002\u0002\u0002\u0916\u0917',
	'\u0003\u0002\u0002\u0002\u0917\u0918\u0007j\u0002\u0002\u0918\u0919',
	'\u0007\u017d\u0002\u0002\u0919\u091a\u0007k\u0002\u0002\u091a\u0137',
	'\u0003\u0002\u0002\u0002\u091b\u091c\u0007\u00e6\u0002\u0002\u091c\u091d',
	'\u0007\u0014\u0002\u0002\u091d\u091e\u0007\u015e\u0002\u0002\u091e\u091f',
	'\u0005\u0174\u00bb\u0002\u091f\u0920\u0007\u015f\u0002\u0002\u0920\u0921',
	'\u0007$\u0002\u0002\u0921\u0922\u0007\u015e\u0002\u0002\u0922\u0923',
	'\u0005\u0196\u00cc\u0002\u0923\u0925\u0007\u015f\u0002\u0002\u0924\u0926',
	'\u00052\u001a\u0002\u0925\u0924\u0003\u0002\u0002\u0002\u0925\u0926',
	'\u0003\u0002\u0002\u0002\u0926\u0139\u0003\u0002\u0002\u0002\u0927\u092a',
	'\u0005\u0140\u00a1\u0002\u0928\u092a\u0005\u0142\u00a2\u0002\u0929\u0927',
	'\u0003\u0002\u0002\u0002\u0929\u0928\u0003\u0002\u0002\u0002\u092a\u013b',
	'\u0003\u0002\u0002\u0002\u092b\u092c\u0007\u00d5\u0002\u0002\u092c\u092d',
	'\u0007\u0178\u0002\u0002\u092d\u013d\u0003\u0002\u0002\u0002\u092e\u092f',
	'\u0007\u00d6\u0002\u0002\u092f\u0930\u0007\u0178\u0002\u0002\u0930\u013f',
	'\u0003\u0002\u0002\u0002\u0931\u0932\u0007l\u0002\u0002\u0932\u0933',
	'\u0007n\u0002\u0002\u0933\u0934\u0007\u0096\u0002\u0002\u0934\u0938',
	'\u0007\u0178\u0002\u0002\u0935\u0936\u0007\u0097\u0002\u0002\u0936\u0937',
	'\u0007\u0099\u0002\u0002\u0937\u0939\u0005\u0148\u00a5\u0002\u0938\u0935',
	'\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002\u0002\u0002\u0939\u0141',
	'\u0003\u0002\u0002\u0002\u093a\u093b\u0007l\u0002\u0002\u093b\u093c',
	'\u0007n\u0002\u0002\u093c\u093e\u0007o\u0002\u0002\u093d\u093f\u0005',
	'\u0152\u00aa\u0002\u093e\u093d\u0003\u0002\u0002\u0002\u093e\u093f\u0003',
	'\u0002\u0002\u0002\u093f\u0941\u0003\u0002\u0002\u0002\u0940\u0942\u0005',
	'\u0156\u00ac\u0002\u0941\u0940\u0003\u0002\u0002\u0002\u0941\u0942\u0003',
	'\u0002\u0002\u0002\u0942\u0944\u0003\u0002\u0002\u0002\u0943\u0945\u0005',
	'\u0158\u00ad\u0002\u0944\u0943\u0003\u0002\u0002\u0002\u0944\u0945\u0003',
	'\u0002\u0002\u0002\u0945\u0947\u0003\u0002\u0002\u0002\u0946\u0948\u0005',
	'\u015a\u00ae\u0002\u0947\u0946\u0003\u0002\u0002\u0002\u0947\u0948\u0003',
	'\u0002\u0002\u0002\u0948\u094a\u0003\u0002\u0002\u0002\u0949\u094b\u0005',
	'\u015c\u00af\u0002\u094a\u0949\u0003\u0002\u0002\u0002\u094a\u094b\u0003',
	'\u0002\u0002\u0002\u094b\u0143\u0003\u0002\u0002\u0002\u094c\u094f\u0005',
	'\u0142\u00a2\u0002\u094d\u094f\u0005\u0140\u00a1\u0002\u094e\u094c\u0003',
	'\u0002\u0002\u0002\u094e\u094d\u0003\u0002\u0002\u0002\u094f\u0145\u0003',
	'\u0002\u0002\u0002\u0950\u0951\u0007\u009f\u0002\u0002\u0951\u0952\u0005',
	'\u0148\u00a5\u0002\u0952\u0147\u0003\u0002\u0002\u0002\u0953\u0954\u0007',
	'\u015e\u0002\u0002\u0954\u0955\u0005\u014a\u00a6\u0002\u0955\u0956\u0007',
	'\u015f\u0002\u0002\u0956\u0149\u0003\u0002\u0002\u0002\u0957\u095c\u0005',
	'\u014c\u00a7\u0002\u0958\u0959\u0007\u015c\u0002\u0002\u0959\u095b\u0005',
	'\u014c\u00a7\u0002\u095a\u0958\u0003\u0002\u0002\u0002\u095b\u095e\u0003',
	'\u0002\u0002\u0002\u095c\u095a\u0003\u0002\u0002\u0002\u095c\u095d\u0003',
	'\u0002\u0002\u0002\u095d\u0968\u0003\u0002\u0002\u0002\u095e\u095c\u0003',
	'\u0002\u0002\u0002\u095f\u0964\u0005\u0150\u00a9\u0002\u0960\u0961\u0007',
	'\u015c\u0002\u0002\u0961\u0963\u0005\u0150\u00a9\u0002\u0962\u0960\u0003',
	'\u0002\u0002\u0002\u0963\u0966\u0003\u0002\u0002\u0002\u0964\u0962\u0003',
	'\u0002\u0002\u0002\u0964\u0965\u0003\u0002\u0002\u0002\u0965\u0968\u0003',
	'\u0002\u0002\u0002\u0966\u0964\u0003\u0002\u0002\u0002\u0967\u0957\u0003',
	'\u0002\u0002\u0002\u0967\u095f\u0003\u0002\u0002\u0002\u0968\u014b\u0003',
	'\u0002\u0002\u0002\u0969\u096a\u0005\u0150\u00a9\u0002\u096a\u096b\u0007',
	'\u0164\u0002\u0002\u096b\u096c\u0005\u014e\u00a8\u0002\u096c\u014d\u0003',
	'\u0002\u0002\u0002\u096d\u0971\u0007\u017d\u0002\u0002\u096e\u0971\u0005',
	'\u0304\u0183\u0002\u096f\u0971\u0007\u0178\u0002\u0002\u0970\u096d\u0003',
	'\u0002\u0002\u0002\u0970\u096e\u0003\u0002\u0002\u0002\u0970\u096f\u0003',
	'\u0002\u0002\u0002\u0971\u014f\u0003\u0002\u0002\u0002\u0972\u0977\u0005',
	'\u0318\u018d\u0002\u0973\u0974\u0007\u015a\u0002\u0002\u0974\u0976\u0005',
	'\u0318\u018d\u0002\u0975\u0973\u0003\u0002\u0002\u0002\u0976\u0979\u0003',
	'\u0002\u0002\u0002\u0977\u0975\u0003\u0002\u0002\u0002\u0977\u0978\u0003',
	'\u0002\u0002\u0002\u0978\u097c\u0003\u0002\u0002\u0002\u0979\u0977\u0003',
	'\u0002\u0002\u0002\u097a\u097c\u0007\u0178\u0002\u0002\u097b\u0972\u0003',
	'\u0002\u0002\u0002\u097b\u097a\u0003\u0002\u0002\u0002\u097c\u0151\u0003',
	'\u0002\u0002\u0002\u097d\u097e\u0007p\u0002\u0002\u097e\u097f\u0007',
	'q\u0002\u0002\u097f\u0980\u0007\u0014\u0002\u0002\u0980\u0982\u0007',
	'\u0178\u0002\u0002\u0981\u0983\u0005\u0154\u00ab\u0002\u0982\u0981\u0003',
	'\u0002\u0002\u0002\u0982\u0983\u0003\u0002\u0002\u0002\u0983\u0153\u0003',
	'\u0002\u0002\u0002\u0984\u0985\u0007r\u0002\u0002\u0985\u0986\u0007',
	'\u0014\u0002\u0002\u0986\u0987\u0007\u0178\u0002\u0002\u0987\u0155\u0003',
	'\u0002\u0002\u0002\u0988\u0989\u0007s\u0002\u0002\u0989\u098a\u0007',
	't\u0002\u0002\u098a\u098b\u0007q\u0002\u0002\u098b\u098c\u0007\u0014',
	'\u0002\u0002\u098c\u098d\u0007\u0178\u0002\u0002\u098d\u0157\u0003\u0002',
	'\u0002\u0002\u098e\u098f\u0007d\u0002\u0002\u098f\u0990\u0007u\u0002',
	'\u0002\u0990\u0991\u0007q\u0002\u0002\u0991\u0992\u0007\u0014\u0002',
	'\u0002\u0992\u0993\u0007\u0178\u0002\u0002\u0993\u0159\u0003\u0002\u0002',
	'\u0002\u0994\u0995\u0007x\u0002\u0002\u0995\u0996\u0007q\u0002\u0002',
	'\u0996\u0997\u0007\u0014\u0002\u0002\u0997\u0998\u0007\u0178\u0002\u0002',
	'\u0998\u015b\u0003\u0002\u0002\u0002\u0999\u099a\u0007B\u0002\u0002',
	'\u099a\u099b\u0007\u00a3\u0002\u0002\u099b\u099c\u0007\u0018\u0002\u0002',
	'\u099c\u099d\u0007\u0178\u0002\u0002\u099d\u015d\u0003\u0002\u0002\u0002',
	'\u099e\u09a2\u0005\u0166\u00b4\u0002\u099f\u09a2\u0005\u0160\u00b1\u0002',
	'\u09a0\u09a2\u0005\u0162\u00b2\u0002\u09a1\u099e\u0003\u0002\u0002\u0002',
	'\u09a1\u099f\u0003\u0002\u0002\u0002\u09a1\u09a0\u0003\u0002\u0002\u0002',
	'\u09a2\u015f\u0003\u0002\u0002\u0002\u09a3\u09a4\u0007y\u0002\u0002',
	'\u09a4\u09a5\u0007\u0014\u0002\u0002\u09a5\u09a9\u0007\u0178\u0002\u0002',
	'\u09a6\u09a7\u0007\u0097\u0002\u0002\u09a7\u09a8\u0007\u0099\u0002\u0002',
	'\u09a8\u09aa\u0005\u0148\u00a5\u0002\u09a9\u09a6\u0003\u0002\u0002\u0002',
	'\u09a9\u09aa\u0003\u0002\u0002\u0002\u09aa\u0161\u0003\u0002\u0002\u0002',
	'\u09ab\u09ac\u0007y\u0002\u0002\u09ac\u09ad\u0007\u0018\u0002\u0002',
	'\u09ad\u09ae\u0005\u0164\u00b3\u0002\u09ae\u0163\u0003\u0002\u0002\u0002',
	'\u09af\u09b0\t\u000f\u0002\u0002\u09b0\u0165\u0003\u0002\u0002\u0002',
	'\u09b1\u09b2\u0007y\u0002\u0002\u09b2\u09b3\u0007\u0018\u0002\u0002',
	'\u09b3\u09b4\u0005\u0168\u00b5\u0002\u09b4\u09b9\u0005\u016a\u00b6\u0002',
	'\u09b5\u09b6\u0007}\u0002\u0002\u09b6\u09b7\u0007\u0178\u0002\u0002',
	'\u09b7\u09b8\u0007~\u0002\u0002\u09b8\u09ba\u0007\u0178\u0002\u0002',
	'\u09b9\u09b5\u0003\u0002\u0002\u0002\u09b9\u09ba\u0003\u0002\u0002\u0002',
	'\u09ba\u0167\u0003\u0002\u0002\u0002\u09bb\u09bc\u0007{\u0002\u0002',
	'\u09bc\u09bd\u0007\u0178\u0002\u0002\u09bd\u0169\u0003\u0002\u0002\u0002',
	'\u09be\u09bf\u0007|\u0002\u0002\u09bf\u09c0\u0007\u0178\u0002\u0002',
	'\u09c0\u016b\u0003\u0002\u0002\u0002\u09c1\u09c2\u0007\u0081\u0002\u0002',
	'\u09c2\u09c3\u0007\u0178\u0002\u0002\u09c3\u016d\u0003\u0002\u0002\u0002',
	'\u09c4\u09c9\u0005\u01ae\u00d8\u0002\u09c5\u09c6\u0007\u015c\u0002\u0002',
	'\u09c6\u09c8\u0005\u01ae\u00d8\u0002\u09c7\u09c5\u0003\u0002\u0002\u0002',
	'\u09c8\u09cb\u0003\u0002\u0002\u0002\u09c9\u09c7\u0003\u0002\u0002\u0002',
	'\u09c9\u09ca\u0003\u0002\u0002\u0002\u09ca\u016f\u0003\u0002\u0002\u0002',
	'\u09cb\u09c9\u0003\u0002\u0002\u0002\u09cc\u09d1\u0005\u01b0\u00d9\u0002',
	'\u09cd\u09ce\u0007\u015c\u0002\u0002\u09ce\u09d0\u0005\u01b0\u00d9\u0002',
	'\u09cf\u09cd\u0003\u0002\u0002\u0002\u09d0\u09d3\u0003\u0002\u0002\u0002',
	'\u09d1\u09cf\u0003\u0002\u0002\u0002\u09d1\u09d2\u0003\u0002\u0002\u0002',
	'\u09d2\u0171\u0003\u0002\u0002\u0002\u09d3\u09d1\u0003\u0002\u0002\u0002',
	'\u09d4\u09d9\u0005\u01ce\u00e8\u0002\u09d5\u09d6\u0007\u015c\u0002\u0002',
	'\u09d6\u09d8\u0005\u01ce\u00e8\u0002\u09d7\u09d5\u0003\u0002\u0002\u0002',
	'\u09d8\u09db\u0003\u0002\u0002\u0002\u09d9\u09d7\u0003\u0002\u0002\u0002',
	'\u09d9\u09da\u0003\u0002\u0002\u0002\u09da\u0173\u0003\u0002\u0002\u0002',
	'\u09db\u09d9\u0003\u0002\u0002\u0002\u09dc\u09e1\u0005\u0176\u00bc\u0002',
	'\u09dd\u09de\u0007\u015c\u0002\u0002\u09de\u09e0\u0005\u0176\u00bc\u0002',
	'\u09df\u09dd\u0003\u0002\u0002\u0002\u09e0\u09e3\u0003\u0002\u0002\u0002',
	'\u09e1\u09df\u0003\u0002\u0002\u0002\u09e1\u09e2\u0003\u0002\u0002\u0002',
	'\u09e2\u0175\u0003\u0002\u0002\u0002\u09e3\u09e1\u0003\u0002\u0002\u0002',
	'\u09e4\u09e5\u0005\u0318\u018d\u0002\u09e5\u0177\u0003\u0002\u0002\u0002',
	'\u09e6\u09f0\u0005\u0318\u018d\u0002\u09e7\u09ec\u0007\u015a\u0002\u0002',
	'\u09e8\u09ed\u0007\u00a2\u0002\u0002\u09e9\u09ed\u0007v\u0002\u0002',
	'\u09ea\u09ed\u0007\u00a1\u0002\u0002\u09eb\u09ed\u0005\u0318\u018d\u0002',
	'\u09ec\u09e8\u0003\u0002\u0002\u0002\u09ec\u09e9\u0003\u0002\u0002\u0002',
	'\u09ec\u09ea\u0003\u0002\u0002\u0002\u09ec\u09eb\u0003\u0002\u0002\u0002',
	'\u09ed\u09ef\u0003\u0002\u0002\u0002\u09ee\u09e7\u0003\u0002\u0002\u0002',
	'\u09ef\u09f2\u0003\u0002\u0002\u0002\u09f0\u09ee\u0003\u0002\u0002\u0002',
	'\u09f0\u09f1\u0003\u0002\u0002\u0002\u09f1\u0179\u0003\u0002\u0002\u0002',
	'\u09f2\u09f0\u0003\u0002\u0002\u0002\u09f3\u09f8\u0005\u01a6\u00d4\u0002',
	'\u09f4\u09f5\u0007\u015c\u0002\u0002\u09f5\u09f7\u0005\u01a6\u00d4\u0002',
	'\u09f6\u09f4\u0003\u0002\u0002\u0002\u09f7\u09fa\u0003\u0002\u0002\u0002',
	'\u09f8\u09f6\u0003\u0002\u0002\u0002\u09f8\u09f9\u0003\u0002\u0002\u0002',
	'\u09f9\u017b\u0003\u0002\u0002\u0002\u09fa\u09f8\u0003\u0002\u0002\u0002',
	'\u09fb\u09fc\u0007\u015e\u0002\u0002\u09fc\u09fd\u0005\u0174\u00bb\u0002',
	'\u09fd\u09fe\u0007\u015f\u0002\u0002\u09fe\u017d\u0003\u0002\u0002\u0002',
	'\u09ff\u0a01\u0005\u0180\u00c1\u0002\u0a00\u0a02\u0005\u0182\u00c2\u0002',
	'\u0a01\u0a00\u0003\u0002\u0002\u0002\u0a01\u0a02\u0003\u0002\u0002\u0002',
	'\u0a02\u0a05\u0003\u0002\u0002\u0002\u0a03\u0a05\u0005\u0184\u00c3\u0002',
	'\u0a04\u09ff\u0003\u0002\u0002\u0002\u0a04\u0a03\u0003\u0002\u0002\u0002',
	'\u0a05\u017f\u0003\u0002\u0002\u0002\u0a06\u0a07\t\u0010\u0002\u0002',
	'\u0a07\u0181\u0003\u0002\u0002\u0002\u0a08\u0a09\t\u0011\u0002\u0002',
	'\u0a09\u0183\u0003\u0002\u0002\u0002\u0a0a\u0a0e\u0007\u0126\u0002\u0002',
	'\u0a0b\u0a0c\u0007\t\u0002\u0002\u0a0c\u0a0e\u0007\u0126\u0002\u0002',
	'\u0a0d\u0a0a\u0003\u0002\u0002\u0002\u0a0d\u0a0b\u0003\u0002\u0002\u0002',
	'\u0a0e\u0185\u0003\u0002\u0002\u0002\u0a0f\u0a14\u0007\u0129\u0002\u0002',
	'\u0a10\u0a12\u0007\u012a\u0002\u0002\u0a11\u0a10\u0003\u0002\u0002\u0002',
	'\u0a11\u0a12\u0003\u0002\u0002\u0002\u0a12\u0a14\u0003\u0002\u0002\u0002',
	'\u0a13\u0a0f\u0003\u0002\u0002\u0002\u0a13\u0a11\u0003\u0002\u0002\u0002',
	'\u0a14\u0187\u0003\u0002\u0002\u0002\u0a15\u0a16\u0007\u0125\u0002\u0002',
	'\u0a16\u0a18\u0005\u0318\u018d\u0002\u0a17\u0a15\u0003\u0002\u0002\u0002',
	'\u0a17\u0a18\u0003\u0002\u0002\u0002\u0a18\u0a19\u0003\u0002\u0002\u0002',
	'\u0a19\u0a1b\u0005\u018c\u00c7\u0002\u0a1a\u0a1c\u0005\u01ca\u00e6\u0002',
	'\u0a1b\u0a1a\u0003\u0002\u0002\u0002\u0a1b\u0a1c\u0003\u0002\u0002\u0002',
	'\u0a1c\u0189\u0003\u0002\u0002\u0002\u0a1d\u0a1e\u0007\u0125\u0002\u0002',
	'\u0a1e\u0a1f\u0005\u0318\u018d\u0002\u0a1f\u0a21\u0005\u018c\u00c7\u0002',
	'\u0a20\u0a22\u0005\u01cc\u00e7\u0002\u0a21\u0a20\u0003\u0002\u0002\u0002',
	'\u0a21\u0a22\u0003\u0002\u0002\u0002\u0a22\u018b\u0003\u0002\u0002\u0002',
	'\u0a23\u0a26\u0005\u018e\u00c8\u0002\u0a24\u0a26\u0005\u0190\u00c9\u0002',
	'\u0a25\u0a23\u0003\u0002\u0002\u0002\u0a25\u0a24\u0003\u0002\u0002\u0002',
	'\u0a26\u018d\u0003\u0002\u0002\u0002\u0a27\u0a28\u0005\u01c8\u00e5\u0002',
	'\u0a28\u0a29\u0005\u017c\u00bf\u0002\u0a29\u018f\u0003\u0002\u0002\u0002',
	'\u0a2a\u0a2b\u0007\u0141\u0002\u0002\u0a2b\u0a2c\u0005\u02f8\u017d\u0002',
	'\u0a2c\u0191\u0003\u0002\u0002\u0002\u0a2d\u0a2e\u0007\u0125\u0002\u0002',
	'\u0a2e\u0a30\u0005\u0318\u018d\u0002\u0a2f\u0a2d\u0003\u0002\u0002\u0002',
	'\u0a2f\u0a30\u0003\u0002\u0002\u0002\u0a30\u0a31\u0003\u0002\u0002\u0002',
	'\u0a31\u0a32\u0007\u0123\u0002\u0002\u0a32\u0a33\u0007\u012c\u0002\u0002',
	'\u0a33\u0a34\u0005\u017c\u00bf\u0002\u0a34\u0a35\u0007\u0124\u0002\u0002',
	'\u0a35\u0a36\u0005\u0270\u0139\u0002\u0a36\u0a38\u0005\u017c\u00bf\u0002',
	'\u0a37\u0a39\u0005\u01ca\u00e6\u0002\u0a38\u0a37\u0003\u0002\u0002\u0002',
	'\u0a38\u0a39\u0003\u0002\u0002\u0002\u0a39\u0193\u0003\u0002\u0002\u0002',
	'\u0a3a\u0a3b\u0007\u0125\u0002\u0002\u0a3b\u0a3c\u0005\u0318\u018d\u0002',
	'\u0a3c\u0a3d\u0007\u0123\u0002\u0002\u0a3d\u0a3e\u0007\u012c\u0002\u0002',
	'\u0a3e\u0a3f\u0005\u017c\u00bf\u0002\u0a3f\u0a40\u0007\u0124\u0002\u0002',
	'\u0a40\u0a41\u0005\u0270\u0139\u0002\u0a41\u0a43\u0005\u017c\u00bf\u0002',
	'\u0a42\u0a44\u0005\u01cc\u00e7\u0002\u0a43\u0a42\u0003\u0002\u0002\u0002',
	'\u0a43\u0a44\u0003\u0002\u0002\u0002\u0a44\u0195\u0003\u0002\u0002\u0002',
	'\u0a45\u0a48\u0005\u019c\u00cf\u0002\u0a46\u0a48\u0005\u0198\u00cd\u0002',
	'\u0a47\u0a45\u0003\u0002\u0002\u0002\u0a47\u0a46\u0003\u0002\u0002\u0002',
	'\u0a48\u0197\u0003\u0002\u0002\u0002\u0a49\u0a4e\u0005\u019a\u00ce\u0002',
	'\u0a4a\u0a4b\u0007\u015c\u0002\u0002\u0a4b\u0a4d\u0005\u019a\u00ce\u0002',
	'\u0a4c\u0a4a\u0003\u0002\u0002\u0002\u0a4d\u0a50\u0003\u0002\u0002\u0002',
	'\u0a4e\u0a4c\u0003\u0002\u0002\u0002\u0a4e\u0a4f\u0003\u0002\u0002\u0002',
	'\u0a4f\u0199\u0003\u0002\u0002\u0002\u0a50\u0a4e\u0003\u0002\u0002\u0002',
	'\u0a51\u0a52\u0007\u015e\u0002\u0002\u0a52\u0a53\u0005\u019c\u00cf\u0002',
	'\u0a53\u0a54\u0007\u015f\u0002\u0002\u0a54\u019b\u0003\u0002\u0002\u0002',
	'\u0a55\u0a5a\u0005\u019e\u00d0\u0002\u0a56\u0a57\u0007\u015c\u0002\u0002',
	'\u0a57\u0a59\u0005\u019e\u00d0\u0002\u0a58\u0a56\u0003\u0002\u0002\u0002',
	'\u0a59\u0a5c\u0003\u0002\u0002\u0002\u0a5a\u0a58\u0003\u0002\u0002\u0002',
	'\u0a5a\u0a5b\u0003\u0002\u0002\u0002\u0a5b\u019d\u0003\u0002\u0002\u0002',
	'\u0a5c\u0a5a\u0003\u0002\u0002\u0002\u0a5d\u0a5e\u0005\u02c4\u0163\u0002',
	'\u0a5e\u019f\u0003\u0002\u0002\u0002\u0a5f\u0a62\u0005\u019e\u00d0\u0002',
	'\u0a60\u0a62\u0005\u019a\u00ce\u0002\u0a61\u0a5f\u0003\u0002\u0002\u0002',
	'\u0a61\u0a60\u0003\u0002\u0002\u0002\u0a62\u01a1\u0003\u0002\u0002\u0002',
	'\u0a63\u0a64\t\u0012\u0002\u0002\u0a64\u01a3\u0003\u0002\u0002\u0002',
	'\u0a65\u0a66\u0007\u0010\u0002\u0002\u0a66\u0a6a\u0007H\u0002\u0002',
	'\u0a67\u0a68\u0007\u0010\u0002\u0002\u0a68\u0a6a\u0007\u0011\u0002\u0002',
	'\u0a69\u0a65\u0003\u0002\u0002\u0002\u0a69\u0a67\u0003\u0002\u0002\u0002',
	'\u0a6a\u01a5\u0003\u0002\u0002\u0002\u0a6b\u0a6d\u0005\u0318\u018d\u0002',
	'\u0a6c\u0a6e\u0005\u01a2\u00d2\u0002\u0a6d\u0a6c\u0003\u0002\u0002\u0002',
	'\u0a6d\u0a6e\u0003\u0002\u0002\u0002\u0a6e\u0a70\u0003\u0002\u0002\u0002',
	'\u0a6f\u0a71\u0005\u01a4\u00d3\u0002\u0a70\u0a6f\u0003\u0002\u0002\u0002',
	'\u0a70\u0a71\u0003\u0002\u0002\u0002\u0a71\u01a7\u0003\u0002\u0002\u0002',
	'\u0a72\u0a77\u0005\u01aa\u00d6\u0002\u0a73\u0a74\u0007\u015c\u0002\u0002',
	'\u0a74\u0a76\u0005\u01aa\u00d6\u0002\u0a75\u0a73\u0003\u0002\u0002\u0002',
	'\u0a76\u0a79\u0003\u0002\u0002\u0002\u0a77\u0a75\u0003\u0002\u0002\u0002',
	'\u0a77\u0a78\u0003\u0002\u0002\u0002\u0a78\u01a9\u0003\u0002\u0002\u0002',
	'\u0a79\u0a77\u0003\u0002\u0002\u0002\u0a7a\u0a7d\u0005\u0318\u018d\u0002',
	'\u0a7b\u0a7c\u0007N\u0002\u0002\u0a7c\u0a7e\u0007\u0178\u0002\u0002',
	'\u0a7d\u0a7b\u0003\u0002\u0002\u0002\u0a7d\u0a7e\u0003\u0002\u0002\u0002',
	'\u0a7e\u01ab\u0003\u0002\u0002\u0002\u0a7f\u0a81\u0005\u02f8\u017d\u0002',
	'\u0a80\u0a82\u0005\u01a2\u00d2\u0002\u0a81\u0a80\u0003\u0002\u0002\u0002',
	'\u0a81\u0a82\u0003\u0002\u0002\u0002\u0a82\u0a84\u0003\u0002\u0002\u0002',
	'\u0a83\u0a85\u0005\u01a4\u00d3\u0002\u0a84\u0a83\u0003\u0002\u0002\u0002',
	'\u0a84\u0a85\u0003\u0002\u0002\u0002\u0a85\u01ad\u0003\u0002\u0002\u0002',
	'\u0a86\u0a87\u0005\u0318\u018d\u0002\u0a87\u0a8a\u0005\u01d0\u00e9\u0002',
	'\u0a88\u0a89\u0007N\u0002\u0002\u0a89\u0a8b\u0007\u0178\u0002\u0002',
	'\u0a8a\u0a88\u0003\u0002\u0002\u0002\u0a8a\u0a8b\u0003\u0002\u0002\u0002',
	'\u0a8b\u01af\u0003\u0002\u0002\u0002\u0a8c\u0a8f\u0005\u01b2\u00da\u0002',
	'\u0a8d\u0a8f\u0005\u01b4\u00db\u0002\u0a8e\u0a8c\u0003\u0002\u0002\u0002',
	'\u0a8e\u0a8d\u0003\u0002\u0002\u0002\u0a8f\u01b1\u0003\u0002\u0002\u0002',
	'\u0a90\u0a93\u0005\u0192\u00ca\u0002\u0a91\u0a93\u0005\u0188\u00c5\u0002',
	'\u0a92\u0a90\u0003\u0002\u0002\u0002\u0a92\u0a91\u0003\u0002\u0002\u0002',
	'\u0a93\u01b3\u0003\u0002\u0002\u0002\u0a94\u0a95\u0005\u0318\u018d\u0002',
	'\u0a95\u0a97\u0005\u01d0\u00e9\u0002\u0a96\u0a98\u0005\u01b8\u00dd\u0002',
	'\u0a97\u0a96\u0003\u0002\u0002\u0002\u0a97\u0a98\u0003\u0002\u0002\u0002',
	'\u0a98\u0a9b\u0003\u0002\u0002\u0002\u0a99\u0a9a\u0007N\u0002\u0002',
	'\u0a9a\u0a9c\u0007\u0178\u0002\u0002\u0a9b\u0a99\u0003\u0002\u0002\u0002',
	'\u0a9b\u0a9c\u0003\u0002\u0002\u0002\u0a9c\u01b5\u0003\u0002\u0002\u0002',
	'\u0a9d\u0a9f\u0005\u0318\u018d\u0002\u0a9e\u0aa0\u0005\u01d0\u00e9\u0002',
	'\u0a9f\u0a9e\u0003\u0002\u0002\u0002\u0a9f\u0aa0\u0003\u0002\u0002\u0002',
	'\u0aa0\u01b7\u0003\u0002\u0002\u0002\u0aa1\u0aa4\u0005\u01ba\u00de\u0002',
	'\u0aa2\u0aa4\u0005\u01bc\u00df\u0002\u0aa3\u0aa1\u0003\u0002\u0002\u0002',
	'\u0aa3\u0aa2\u0003\u0002\u0002\u0002\u0aa4\u01b9\u0003\u0002\u0002\u0002',
	'\u0aa5\u0aa6\u0007\u0125\u0002\u0002\u0aa6\u0aa8\u0005\u0318\u018d\u0002',
	'\u0aa7\u0aa5\u0003\u0002\u0002\u0002\u0aa7\u0aa8\u0003\u0002\u0002\u0002',
	'\u0aa8\u0aa9\u0003\u0002\u0002\u0002\u0aa9\u0aaa\u0007\u0124\u0002\u0002',
	'\u0aaa\u0aab\u0005\u0270\u0139\u0002\u0aab\u0aac\u0007\u015e\u0002\u0002',
	'\u0aac\u0aad\u0005\u0176\u00bc\u0002\u0aad\u0aaf\u0007\u015f\u0002\u0002',
	'\u0aae\u0ab0\u0005\u01ca\u00e6\u0002\u0aaf\u0aae\u0003\u0002\u0002\u0002',
	'\u0aaf\u0ab0\u0003\u0002\u0002\u0002\u0ab0\u01bb\u0003\u0002\u0002\u0002',
	'\u0ab1\u0ab2\u0007\u0125\u0002\u0002\u0ab2\u0ab4\u0005\u0318\u018d\u0002',
	'\u0ab3\u0ab1\u0003\u0002\u0002\u0002\u0ab3\u0ab4\u0003\u0002\u0002\u0002',
	'\u0ab4\u0ab5\u0003\u0002\u0002\u0002\u0ab5\u0ab9\u0005\u01c4\u00e3\u0002',
	'\u0ab6\u0ab8\u0005\u01c4\u00e3\u0002\u0ab7\u0ab6\u0003\u0002\u0002\u0002',
	'\u0ab8\u0abb\u0003\u0002\u0002\u0002\u0ab9\u0ab7\u0003\u0002\u0002\u0002',
	'\u0ab9\u0aba\u0003\u0002\u0002\u0002\u0aba\u0abd\u0003\u0002\u0002\u0002',
	'\u0abb\u0ab9\u0003\u0002\u0002\u0002\u0abc\u0abe\u0005\u01ca\u00e6\u0002',
	'\u0abd\u0abc\u0003\u0002\u0002\u0002\u0abd\u0abe\u0003\u0002\u0002\u0002',
	'\u0abe\u01bd\u0003\u0002\u0002\u0002\u0abf\u0ac2\u0005\u01c0\u00e1\u0002',
	'\u0ac0\u0ac2\u0005\u01c2\u00e2\u0002\u0ac1\u0abf\u0003\u0002\u0002\u0002',
	'\u0ac1\u0ac0\u0003\u0002\u0002\u0002\u0ac2\u01bf\u0003\u0002\u0002\u0002',
	'\u0ac3\u0ac4\u0007\u0125\u0002\u0002\u0ac4\u0ac6\u0005\u0318\u018d\u0002',
	'\u0ac5\u0ac3\u0003\u0002\u0002\u0002\u0ac5\u0ac6\u0003\u0002\u0002\u0002',
	'\u0ac6\u0ac7\u0003\u0002\u0002\u0002\u0ac7\u0ac8\u0007\u0124\u0002\u0002',
	'\u0ac8\u0ac9\u0005\u0270\u0139\u0002\u0ac9\u0aca\u0007\u015e\u0002\u0002',
	'\u0aca\u0acb\u0005\u0176\u00bc\u0002\u0acb\u0acd\u0007\u015f\u0002\u0002',
	'\u0acc\u0ace\u0005\u01cc\u00e7\u0002\u0acd\u0acc\u0003\u0002\u0002\u0002',
	'\u0acd\u0ace\u0003\u0002\u0002\u0002\u0ace\u01c1\u0003\u0002\u0002\u0002',
	'\u0acf\u0ad0\u0007\u0125\u0002\u0002\u0ad0\u0ad2\u0005\u0318\u018d\u0002',
	'\u0ad1\u0acf\u0003\u0002\u0002\u0002\u0ad1\u0ad2\u0003\u0002\u0002\u0002',
	'\u0ad2\u0ad3\u0003\u0002\u0002\u0002\u0ad3\u0ad5\u0005\u01c4\u00e3\u0002',
	'\u0ad4\u0ad6\u0005\u01cc\u00e7\u0002\u0ad5\u0ad4\u0003\u0002\u0002\u0002',
	'\u0ad5\u0ad6\u0003\u0002\u0002\u0002\u0ad6\u01c3\u0003\u0002\u0002\u0002',
	'\u0ad7\u0ad8\u0007\t\u0002\u0002\u0ad8\u0ade\u0007B\u0002\u0002\u0ad9',
	'\u0ada\u0007\u0140\u0002\u0002\u0ada\u0ade\u0005\u01c6\u00e4\u0002\u0adb',
	'\u0ade\u0005\u0190\u00c9\u0002\u0adc\u0ade\u0005\u01c8\u00e5\u0002\u0add',
	'\u0ad7\u0003\u0002\u0002\u0002\u0add\u0ad9\u0003\u0002\u0002\u0002\u0add',
	'\u0adb\u0003\u0002\u0002\u0002\u0add\u0adc\u0003\u0002\u0002\u0002\u0ade',
	'\u01c5\u0003\u0002\u0002\u0002\u0adf\u0ae3\u0005\u02c4\u0163\u0002\u0ae0',
	'\u0ae3\u0005\u02b2\u015a\u0002\u0ae1\u0ae3\u0005\u02b6\u015c\u0002\u0ae2',
	'\u0adf\u0003\u0002\u0002\u0002\u0ae2\u0ae0\u0003\u0002\u0002\u0002\u0ae2',
	'\u0ae1\u0003\u0002\u0002\u0002\u0ae3\u01c7\u0003\u0002\u0002\u0002\u0ae4',
	'\u0ae5\u0007\u0122\u0002\u0002\u0ae5\u0ae8\u0007\u012c\u0002\u0002\u0ae6',
	'\u0ae8\u0007\u012b\u0002\u0002\u0ae7\u0ae4\u0003\u0002\u0002\u0002\u0ae7',
	'\u0ae6\u0003\u0002\u0002\u0002\u0ae8\u01c9\u0003\u0002\u0002\u0002\u0ae9',
	'\u0aea\u0005\u017e\u00c0\u0002\u0aea\u0aeb\u0005\u0186\u00c4\u0002\u0aeb',
	'\u01cb\u0003\u0002\u0002\u0002\u0aec\u0aed\u0005\u017e\u00c0\u0002\u0aed',
	'\u0aee\u0005\u0186\u00c4\u0002\u0aee\u01cd\u0003\u0002\u0002\u0002\u0aef',
	'\u0af0\u0005\u0318\u018d\u0002\u0af0\u0af1\u0007\u015b\u0002\u0002\u0af1',
	'\u0af4\u0005\u01d0\u00e9\u0002\u0af2\u0af3\u0007N\u0002\u0002\u0af3',
	'\u0af5\u0007\u0178\u0002\u0002\u0af4\u0af2\u0003\u0002\u0002\u0002\u0af4',
	'\u0af5\u0003\u0002\u0002\u0002\u0af5\u01cf\u0003\u0002\u0002\u0002\u0af6',
	'\u0af7\u0005\u01d4\u00eb\u0002\u0af7\u01d1\u0003\u0002\u0002\u0002\u0af8',
	'\u0afd\u0005\u01d0\u00e9\u0002\u0af9\u0afa\u0007\u015c\u0002\u0002\u0afa',
	'\u0afc\u0005\u01d0\u00e9\u0002\u0afb\u0af9\u0003\u0002\u0002\u0002\u0afc',
	'\u0aff\u0003\u0002\u0002\u0002\u0afd\u0afb\u0003\u0002\u0002\u0002\u0afd',
	'\u0afe\u0003\u0002\u0002\u0002\u0afe\u01d3\u0003\u0002\u0002\u0002\u0aff',
	'\u0afd\u0003\u0002\u0002\u0002\u0b00\u0b06\u0005\u01d6\u00ec\u0002\u0b01',
	'\u0b06\u0005\u01d8\u00ed\u0002\u0b02\u0b06\u0005\u01da\u00ee\u0002\u0b03',
	'\u0b06\u0005\u01dc\u00ef\u0002\u0b04\u0b06\u0005\u01de\u00f0\u0002\u0b05',
	'\u0b00\u0003\u0002\u0002\u0002\u0b05\u0b01\u0003\u0002\u0002\u0002\u0b05',
	'\u0b02\u0003\u0002\u0002\u0002\u0b05\u0b03\u0003\u0002\u0002\u0002\u0b05',
	'\u0b04\u0003\u0002\u0002\u0002\u0b06\u01d5\u0003\u0002\u0002\u0002\u0b07',
	'\u0b2f\u0007P\u0002\u0002\u0b08\u0b2f\u0007Q\u0002\u0002\u0b09\u0b2f',
	'\u0007R\u0002\u0002\u0b0a\u0b2f\u0007S\u0002\u0002\u0b0b\u0b2f\u0007',
	'O\u0002\u0002\u0b0c\u0b2f\u0007T\u0002\u0002\u0b0d\u0b0f\u0007U\u0002',
	'\u0002\u0b0e\u0b10\u0007V\u0002\u0002\u0b0f\u0b0e\u0003\u0002\u0002',
	'\u0002\u0b0f\u0b10\u0003\u0002\u0002\u0002\u0b10\u0b2f\u0003\u0002\u0002',
	'\u0002\u0b11\u0b2f\u0007W\u0002\u0002\u0b12\u0b2f\u0007X\u0002\u0002',
	'\u0b13\u0b2f\u0007Y\u0002\u0002\u0b14\u0b2f\u0007Z\u0002\u0002\u0b15',
	'\u0b16\u0007Y\u0002\u0002\u0b16\u0b17\u0007\u0097\u0002\u0002\u0b17',
	'\u0b18\u00072\u0002\u0002\u0b18\u0b19\u0007[\u0002\u0002\u0b19\u0b2f',
	'\u0007\\\u0002\u0002\u0b1a\u0b2f\u0007_\u0002\u0002\u0b1b\u0b2f\u0007',
	'\u00d0\u0002\u0002\u0b1c\u0b24\u0007^\u0002\u0002\u0b1d\u0b1e\u0007',
	'\u015e\u0002\u0002\u0b1e\u0b21\u0007\u017d\u0002\u0002\u0b1f\u0b20\u0007',
	'\u015c\u0002\u0002\u0b20\u0b22\u0007\u017d\u0002\u0002\u0b21\u0b1f\u0003',
	'\u0002\u0002\u0002\u0b21\u0b22\u0003\u0002\u0002\u0002\u0b22\u0b23\u0003',
	'\u0002\u0002\u0002\u0b23\u0b25\u0007\u015f\u0002\u0002\u0b24\u0b1d\u0003',
	'\u0002\u0002\u0002\u0b24\u0b25\u0003\u0002\u0002\u0002\u0b25\u0b2f\u0003',
	'\u0002\u0002\u0002\u0b26\u0b27\u0007a\u0002\u0002\u0b27\u0b28\u0007',
	'\u015e\u0002\u0002\u0b28\u0b29\u0007\u017d\u0002\u0002\u0b29\u0b2f\u0007',
	'\u015f\u0002\u0002\u0b2a\u0b2b\u0007`\u0002\u0002\u0b2b\u0b2c\u0007',
	'\u015e\u0002\u0002\u0b2c\u0b2d\u0007\u017d\u0002\u0002\u0b2d\u0b2f\u0007',
	'\u015f\u0002\u0002\u0b2e\u0b07\u0003\u0002\u0002\u0002\u0b2e\u0b08\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b09\u0003\u0002\u0002\u0002\u0b2e\u0b0a\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b0b\u0003\u0002\u0002\u0002\u0b2e\u0b0c\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b0d\u0003\u0002\u0002\u0002\u0b2e\u0b11\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b12\u0003\u0002\u0002\u0002\u0b2e\u0b13\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b14\u0003\u0002\u0002\u0002\u0b2e\u0b15\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b1a\u0003\u0002\u0002\u0002\u0b2e\u0b1b\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b1c\u0003\u0002\u0002\u0002\u0b2e\u0b26\u0003',
	'\u0002\u0002\u0002\u0b2e\u0b2a\u0003\u0002\u0002\u0002\u0b2f\u01d7\u0003',
	'\u0002\u0002\u0002\u0b30\u0b31\u0007b\u0002\u0002\u0b31\u0b32\u0007',
	'\u0168\u0002\u0002\u0b32\u0b33\u0005\u01d4\u00eb\u0002\u0b33\u0b34\u0007',
	'\u016a\u0002\u0002\u0b34\u01d9\u0003\u0002\u0002\u0002\u0b35\u0b36\u0007',
	'c\u0002\u0002\u0b36\u0b37\u0007\u0168\u0002\u0002\u0b37\u0b38\u0005',
	'\u0172\u00ba\u0002\u0b38\u0b39\u0007\u016a\u0002\u0002\u0b39\u01db\u0003',
	'\u0002\u0002\u0002\u0b3a\u0b3b\u0007d\u0002\u0002\u0b3b\u0b3c\u0007',
	'\u0168\u0002\u0002\u0b3c\u0b3d\u0005\u01d6\u00ec\u0002\u0b3d\u0b3e\u0007',
	'\u015c\u0002\u0002\u0b3e\u0b3f\u0005\u01d4\u00eb\u0002\u0b3f\u0b40\u0007',
	'\u016a\u0002\u0002\u0b40\u01dd\u0003\u0002\u0002\u0002\u0b41\u0b42\u0007',
	'e\u0002\u0002\u0b42\u0b43\u0007\u0168\u0002\u0002\u0b43\u0b44\u0005',
	'\u01d2\u00ea\u0002\u0b44\u0b45\u0007\u016a\u0002\u0002\u0b45\u01df\u0003',
	'\u0002\u0002\u0002\u0b46\u0b47\u00078\u0002\u0002\u0b47\u0b5f\u0007',
	'\u0005\u0002\u0002\u0b48\u0b4a\u00078\u0002\u0002\u0b49\u0b4b\u0007',
	'\u001a\u0002\u0002\u0b4a\u0b49\u0003\u0002\u0002\u0002\u0b4a\u0b4b\u0003',
	'\u0002\u0002\u0002\u0b4b\u0b5f\u0003\u0002\u0002\u0002\u0b4c\u0b4d\u0007',
	'\u00b3\u0002\u0002\u0b4d\u0b5f\u0007\u0005\u0002\u0002\u0b4e\u0b50\u0007',
	'\u00b3\u0002\u0002\u0b4f\u0b51\u0007\u001a\u0002\u0002\u0b50\u0b4f\u0003',
	'\u0002\u0002\u0002\u0b50\u0b51\u0003\u0002\u0002\u0002\u0b51\u0b5f\u0003',
	'\u0002\u0002\u0002\u0b52\u0b53\u00079\u0002\u0002\u0b53\u0b5f\u0007',
	'\u0005\u0002\u0002\u0b54\u0b56\u00079\u0002\u0002\u0b55\u0b57\u0007',
	'\u001a\u0002\u0002\u0b56\u0b55\u0003\u0002\u0002\u0002\u0b56\u0b57\u0003',
	'\u0002\u0002\u0002\u0b57\u0b5f\u0003\u0002\u0002\u0002\u0b58\u0b59\u0007',
	'\u00b1\u0002\u0002\u0b59\u0b5f\u0007\u0005\u0002\u0002\u0b5a\u0b5c\u0007',
	'\u00b1\u0002\u0002\u0b5b\u0b5d\u0007\u001a\u0002\u0002\u0b5c\u0b5b\u0003',
	'\u0002\u0002\u0002\u0b5c\u0b5d\u0003\u0002\u0002\u0002\u0b5d\u0b5f\u0003',
	'\u0002\u0002\u0002\u0b5e\u0b46\u0003\u0002\u0002\u0002\u0b5e\u0b48\u0003',
	'\u0002\u0002\u0002\u0b5e\u0b4c\u0003\u0002\u0002\u0002\u0b5e\u0b4e\u0003',
	'\u0002\u0002\u0002\u0b5e\u0b52\u0003\u0002\u0002\u0002\u0b5e\u0b54\u0003',
	'\u0002\u0002\u0002\u0b5e\u0b58\u0003\u0002\u0002\u0002\u0b5e\u0b5a\u0003',
	'\u0002\u0002\u0002\u0b5f\u01e1\u0003\u0002\u0002\u0002\u0b60\u0b62\u0005',
	'\u01e6\u00f4\u0002\u0b61\u0b60\u0003\u0002\u0002\u0002\u0b61\u0b62\u0003',
	'\u0002\u0002\u0002\u0b62\u0b63\u0003\u0002\u0002\u0002\u0b63\u0b64\u0005',
	'\u01e4\u00f3\u0002\u0b64\u01e3\u0003\u0002\u0002\u0002\u0b65\u0b68\u0005',
	'\u01ea\u00f6\u0002\u0b66\u0b68\u0005\u01ee\u00f8\u0002\u0b67\u0b65\u0003',
	'\u0002\u0002\u0002\u0b67\u0b66\u0003\u0002\u0002\u0002\u0b68\u01e5\u0003',
	'\u0002\u0002\u0002\u0b69\u0b6a\u0007\u0097\u0002\u0002\u0b6a\u0b6f\u0005',
	'\u01e8\u00f5\u0002\u0b6b\u0b6c\u0007\u015c\u0002\u0002\u0b6c\u0b6e\u0005',
	'\u01e8\u00f5\u0002\u0b6d\u0b6b\u0003\u0002\u0002\u0002\u0b6e\u0b71\u0003',
	'\u0002\u0002\u0002\u0b6f\u0b6d\u0003\u0002\u0002\u0002\u0b6f\u0b70\u0003',
	'\u0002\u0002\u0002\u0b70\u01e7\u0003\u0002\u0002\u0002\u0b71\u0b6f\u0003',
	'\u0002\u0002\u0002\u0b72\u0b73\u0005\u0318\u018d\u0002\u0b73\u0b74\u0007',
	'\u0018\u0002\u0002\u0b74\u0b75\u0007\u015e\u0002\u0002\u0b75\u0b76\u0005',
	'\u01e2\u00f2\u0002\u0b76\u0b77\u0007\u015f\u0002\u0002\u0b77\u01e9\u0003',
	'\u0002\u0002\u0002\u0b78\u0b7e\u0005\u01ec\u00f7\u0002\u0b79\u0b7a\u0005',
	'\u01e0\u00f1\u0002\u0b7a\u0b7b\u0005\u01ec\u00f7\u0002\u0b7b\u0b7d\u0003',
	'\u0002\u0002\u0002\u0b7c\u0b79\u0003\u0002\u0002\u0002\u0b7d\u0b80\u0003',
	'\u0002\u0002\u0002\u0b7e\u0b7c\u0003\u0002\u0002\u0002\u0b7e\u0b7f\u0003',
	'\u0002\u0002\u0002\u0b7f\u01eb\u0003\u0002\u0002\u0002\u0b80\u0b7e\u0003',
	'\u0002\u0002\u0002\u0b81\u0b83\u0005\u0250\u0129\u0002\u0b82\u0b84\u0005',
	'\u01f8\u00fd\u0002\u0b83\u0b82\u0003\u0002\u0002\u0002\u0b84\u0b85\u0003',
	'\u0002\u0002\u0002\u0b85\u0b83\u0003\u0002\u0002\u0002\u0b85\u0b86\u0003',
	'\u0002\u0002\u0002\u0b86\u01ed\u0003\u0002\u0002\u0002\u0b87\u0b8a\u0005',
	'\u01fa\u00fe\u0002\u0b88\u0b8b\u0005\u01f2\u00fa\u0002\u0b89\u0b8b\u0005',
	'\u0280\u0141\u0002\u0b8a\u0b88\u0003\u0002\u0002\u0002\u0b8a\u0b89\u0003',
	'\u0002\u0002\u0002\u0b8b\u0b8e\u0003\u0002\u0002\u0002\u0b8c\u0b8e\u0005',
	'\u01f2\u00fa\u0002\u0b8d\u0b87\u0003\u0002\u0002\u0002\u0b8d\u0b8c\u0003',
	'\u0002\u0002\u0002\u0b8e\u01ef\u0003\u0002\u0002\u0002\u0b8f\u0b91\u0005',
	'\u022a\u0116\u0002\u0b90\u0b92\u0005\u0250\u0129\u0002\u0b91\u0b90\u0003',
	'\u0002\u0002\u0002\u0b91\u0b92\u0003\u0002\u0002\u0002\u0b92\u0b94\u0003',
	'\u0002\u0002\u0002\u0b93\u0b95\u0005\u027c\u013f\u0002\u0b94\u0b93\u0003',
	'\u0002\u0002\u0002\u0b94\u0b95\u0003\u0002\u0002\u0002\u0b95\u0b97\u0003',
	'\u0002\u0002\u0002\u0b96\u0b98\u0005\u0288\u0145\u0002\u0b97\u0b96\u0003',
	'\u0002\u0002\u0002\u0b97\u0b98\u0003\u0002\u0002\u0002\u0b98\u0b9a\u0003',
	'\u0002\u0002\u0002\u0b99\u0b9b\u0005\u0298\u014d\u0002\u0b9a\u0b99\u0003',
	'\u0002\u0002\u0002\u0b9a\u0b9b\u0003\u0002\u0002\u0002\u0b9b\u0b9d\u0003',
	'\u0002\u0002\u0002\u0b9c\u0b9e\u0005\u0238\u011d\u0002\u0b9d\u0b9c\u0003',
	'\u0002\u0002\u0002\u0b9d\u0b9e\u0003\u0002\u0002\u0002\u0b9e\u0ba4\u0003',
	'\u0002\u0002\u0002\u0b9f\u0ba0\u0007\u015e\u0002\u0002\u0ba0\u0ba1\u0005',
	'\u01f2\u00fa\u0002\u0ba1\u0ba2\u0007\u015f\u0002\u0002\u0ba2\u0ba4\u0003',
	'\u0002\u0002\u0002\u0ba3\u0b8f\u0003\u0002\u0002\u0002\u0ba3\u0b9f\u0003',
	'\u0002\u0002\u0002\u0ba4\u01f1\u0003\u0002\u0002\u0002\u0ba5\u0ba7\u0005',
	'\u01f0\u00f9\u0002\u0ba6\u0ba8\u0005\u01f4\u00fb\u0002\u0ba7\u0ba6\u0003',
	'\u0002\u0002\u0002\u0ba7\u0ba8\u0003\u0002\u0002\u0002\u0ba8\u0baa\u0003',
	'\u0002\u0002\u0002\u0ba9\u0bab\u0005\u02a8\u0155\u0002\u0baa\u0ba9\u0003',
	'\u0002\u0002\u0002\u0baa\u0bab\u0003\u0002\u0002\u0002\u0bab\u0bad\u0003',
	'\u0002\u0002\u0002\u0bac\u0bae\u0005\u02aa\u0156\u0002\u0bad\u0bac\u0003',
	'\u0002\u0002\u0002\u0bad\u0bae\u0003\u0002\u0002\u0002\u0bae\u0bb0\u0003',
	'\u0002\u0002\u0002\u0baf\u0bb1\u0005\u02ae\u0158\u0002\u0bb0\u0baf\u0003',
	'\u0002\u0002\u0002\u0bb0\u0bb1\u0003\u0002\u0002\u0002\u0bb1\u0bb3\u0003',
	'\u0002\u0002\u0002\u0bb2\u0bb4\u0005\u02b0\u0159\u0002\u0bb3\u0bb2\u0003',
	'\u0002\u0002\u0002\u0bb3\u0bb4\u0003\u0002\u0002\u0002\u0bb4\u0bb6\u0003',
	'\u0002\u0002\u0002\u0bb5\u0bb7\u0005\u01fe\u0100\u0002\u0bb6\u0bb5\u0003',
	'\u0002\u0002\u0002\u0bb6\u0bb7\u0003\u0002\u0002\u0002\u0bb7\u01f3\u0003',
	'\u0002\u0002\u0002\u0bb8\u0bb9\u0005\u01e0\u00f1\u0002\u0bb9\u0bba\u0005',
	'\u01f0\u00f9\u0002\u0bba\u0bbc\u0003\u0002\u0002\u0002\u0bbb\u0bb8\u0003',
	'\u0002\u0002\u0002\u0bbc\u0bbd\u0003\u0002\u0002\u0002\u0bbd\u0bbb\u0003',
	'\u0002\u0002\u0002\u0bbd\u0bbe\u0003\u0002\u0002\u0002\u0bbe\u01f5\u0003',
	'\u0002\u0002\u0002\u0bbf\u0bc1\u0005\u01e6\u00f4\u0002\u0bc0\u0bbf\u0003',
	'\u0002\u0002\u0002\u0bc0\u0bc1\u0003\u0002\u0002\u0002\u0bc1\u0bc2\u0003',
	'\u0002\u0002\u0002\u0bc2\u0bc3\u0005\u01f2\u00fa\u0002\u0bc3\u01f7\u0003',
	'\u0002\u0002\u0002\u0bc4\u0bc5\u0005\u01fa\u00fe\u0002\u0bc5\u0bc7\u0005',
	'\u022a\u0116\u0002\u0bc6\u0bc8\u0005\u0262\u0132\u0002\u0bc7\u0bc6\u0003',
	'\u0002\u0002\u0002\u0bc7\u0bc8\u0003\u0002\u0002\u0002\u0bc8\u0bca\u0003',
	'\u0002\u0002\u0002\u0bc9\u0bcb\u0005\u027c\u013f\u0002\u0bca\u0bc9\u0003',
	'\u0002\u0002\u0002\u0bca\u0bcb\u0003\u0002\u0002\u0002\u0bcb\u0bcd\u0003',
	'\u0002\u0002\u0002\u0bcc\u0bce\u0005\u0288\u0145\u0002\u0bcd\u0bcc\u0003',
	'\u0002\u0002\u0002\u0bcd\u0bce\u0003\u0002\u0002\u0002\u0bce\u0bd0\u0003',
	'\u0002\u0002\u0002\u0bcf\u0bd1\u0005\u0298\u014d\u0002\u0bd0\u0bcf\u0003',
	'\u0002\u0002\u0002\u0bd0\u0bd1\u0003\u0002\u0002\u0002\u0bd1\u0bd3\u0003',
	'\u0002\u0002\u0002\u0bd2\u0bd4\u0005\u0238\u011d\u0002\u0bd3\u0bd2\u0003',
	'\u0002\u0002\u0002\u0bd3\u0bd4\u0003\u0002\u0002\u0002\u0bd4\u0bd6\u0003',
	'\u0002\u0002\u0002\u0bd5\u0bd7\u0005\u02a8\u0155\u0002\u0bd6\u0bd5\u0003',
	'\u0002\u0002\u0002\u0bd6\u0bd7\u0003\u0002\u0002\u0002\u0bd7\u0bd9\u0003',
	'\u0002\u0002\u0002\u0bd8\u0bda\u0005\u02aa\u0156\u0002\u0bd9\u0bd8\u0003',
	'\u0002\u0002\u0002\u0bd9\u0bda\u0003\u0002\u0002\u0002\u0bda\u0bdc\u0003',
	'\u0002\u0002\u0002\u0bdb\u0bdd\u0005\u02ae\u0158\u0002\u0bdc\u0bdb\u0003',
	'\u0002\u0002\u0002\u0bdc\u0bdd\u0003\u0002\u0002\u0002\u0bdd\u0bdf\u0003',
	'\u0002\u0002\u0002\u0bde\u0be0\u0005\u02b0\u0159\u0002\u0bdf\u0bde\u0003',
	'\u0002\u0002\u0002\u0bdf\u0be0\u0003\u0002\u0002\u0002\u0be0\u0be2\u0003',
	'\u0002\u0002\u0002\u0be1\u0be3\u0005\u01fe\u0100\u0002\u0be2\u0be1\u0003',
	'\u0002\u0002\u0002\u0be2\u0be3\u0003\u0002\u0002\u0002\u0be3\u0c04\u0003',
	'\u0002\u0002\u0002\u0be4\u0be6\u0005\u022a\u0116\u0002\u0be5\u0be7\u0005',
	'\u0262\u0132\u0002\u0be6\u0be5\u0003\u0002\u0002\u0002\u0be6\u0be7\u0003',
	'\u0002\u0002\u0002\u0be7\u0be9\u0003\u0002\u0002\u0002\u0be8\u0bea\u0005',
	'\u027c\u013f\u0002\u0be9\u0be8\u0003\u0002\u0002\u0002\u0be9\u0bea\u0003',
	'\u0002\u0002\u0002\u0bea\u0bec\u0003\u0002\u0002\u0002\u0beb\u0bed\u0005',
	'\u0288\u0145\u0002\u0bec\u0beb\u0003\u0002\u0002\u0002\u0bec\u0bed\u0003',
	'\u0002\u0002\u0002\u0bed\u0bef\u0003\u0002\u0002\u0002\u0bee\u0bf0\u0005',
	'\u0298\u014d\u0002\u0bef\u0bee\u0003\u0002\u0002\u0002\u0bef\u0bf0\u0003',
	'\u0002\u0002\u0002\u0bf0\u0bf2\u0003\u0002\u0002\u0002\u0bf1\u0bf3\u0005',
	'\u0238\u011d\u0002\u0bf2\u0bf1\u0003\u0002\u0002\u0002\u0bf2\u0bf3\u0003',
	'\u0002\u0002\u0002\u0bf3\u0bf5\u0003\u0002\u0002\u0002\u0bf4\u0bf6\u0005',
	'\u02a8\u0155\u0002\u0bf5\u0bf4\u0003\u0002\u0002\u0002\u0bf5\u0bf6\u0003',
	'\u0002\u0002\u0002\u0bf6\u0bf8\u0003\u0002\u0002\u0002\u0bf7\u0bf9\u0005',
	'\u02aa\u0156\u0002\u0bf8\u0bf7\u0003\u0002\u0002\u0002\u0bf8\u0bf9\u0003',
	'\u0002\u0002\u0002\u0bf9\u0bfb\u0003\u0002\u0002\u0002\u0bfa\u0bfc\u0005',
	'\u02ae\u0158\u0002\u0bfb\u0bfa\u0003\u0002\u0002\u0002\u0bfb\u0bfc\u0003',
	'\u0002\u0002\u0002\u0bfc\u0bfe\u0003\u0002\u0002\u0002\u0bfd\u0bff\u0005',
	'\u02b0\u0159\u0002\u0bfe\u0bfd\u0003\u0002\u0002\u0002\u0bfe\u0bff\u0003',
	'\u0002\u0002\u0002\u0bff\u0c01\u0003\u0002\u0002\u0002\u0c00\u0c02\u0005',
	'\u01fe\u0100\u0002\u0c01\u0c00\u0003\u0002\u0002\u0002\u0c01\u0c02\u0003',
	'\u0002\u0002\u0002\u0c02\u0c04\u0003\u0002\u0002\u0002\u0c03\u0bc4\u0003',
	'\u0002\u0002\u0002\u0c03\u0be4\u0003\u0002\u0002\u0002\u0c04\u01f9\u0003',
	'\u0002\u0002\u0002\u0c05\u0c06\u0007\u001b\u0002\u0002\u0c06\u0c07\u0007',
	'\u001c\u0002\u0002\u0c07\u0c09\u0005\u01fc\u00ff\u0002\u0c08\u0c0a\u0005',
	',\u0017\u0002\u0c09\u0c08\u0003\u0002\u0002\u0002\u0c09\u0c0a\u0003',
	'\u0002\u0002\u0002\u0c0a\u0c18\u0003\u0002\u0002\u0002\u0c0b\u0c0c\u0007',
	'\u001b\u0002\u0002\u0c0c\u0c0e\u0007j\u0002\u0002\u0c0d\u0c0f\u0007',
	"'\u0002\u0002\u0c0e\u0c0d\u0003\u0002\u0002\u0002\u0c0e\u0c0f\u0003",
	'\u0002\u0002\u0002\u0c0f\u0c10\u0003\u0002\u0002\u0002\u0c10\u0c15\u0005',
	'\u0308\u0185\u0002\u0c11\u0c12\u0007\u015e\u0002\u0002\u0c12\u0c13\u0005',
	'\u0174\u00bb\u0002\u0c13\u0c14\u0007\u015f\u0002\u0002\u0c14\u0c16\u0003',
	'\u0002\u0002\u0002\u0c15\u0c11\u0003\u0002\u0002\u0002\u0c15\u0c16\u0003',
	'\u0002\u0002\u0002\u0c16\u0c18\u0003\u0002\u0002\u0002\u0c17\u0c05\u0003',
	'\u0002\u0002\u0002\u0c17\u0c0b\u0003\u0002\u0002\u0002\u0c18\u01fb\u0003',
	'\u0002\u0002\u0002\u0c19\u0c1b\u00072\u0002\u0002\u0c1a\u0c19\u0003',
	'\u0002\u0002\u0002\u0c1a\u0c1b\u0003\u0002\u0002\u0002\u0c1b\u0c1c\u0003',
	'\u0002\u0002\u0002\u0c1c\u0c1d\u00071\u0002\u0002\u0c1d\u0c1f\u0007',
	'\u0178\u0002\u0002\u0c1e\u0c20\u0005\u0144\u00a3\u0002\u0c1f\u0c1e\u0003',
	'\u0002\u0002\u0002\u0c1f\u0c20\u0003\u0002\u0002\u0002\u0c20\u0c22\u0003',
	'\u0002\u0002\u0002\u0c21\u0c23\u0005\u015e\u00b0\u0002\u0c22\u0c21\u0003',
	'\u0002\u0002\u0002\u0c22\u0c23\u0003\u0002\u0002\u0002\u0c23\u0c27\u0003',
	"\u0002\u0002\u0002\u0c24\u0c25\u0007'\u0002\u0002\u0c25\u0c27\u0005",
	'\u0308\u0185\u0002\u0c26\u0c1a\u0003\u0002\u0002\u0002\u0c26\u0c24\u0003',
	'\u0002\u0002\u0002\u0c27\u01fd\u0003\u0002\u0002\u0002\u0c28\u0c2b\u0007',
	'\u009b\u0002\u0002\u0c29\u0c2a\u0007\u017d\u0002\u0002\u0c2a\u0c2c\u0007',
	'\u015c\u0002\u0002\u0c2b\u0c29\u0003\u0002\u0002\u0002\u0c2b\u0c2c\u0003',
	'\u0002\u0002\u0002\u0c2c\u0c2d\u0003\u0002\u0002\u0002\u0c2d\u0c33\u0007',
	'\u017d\u0002\u0002\u0c2e\u0c2f\u0007\u009b\u0002\u0002\u0c2f\u0c30\u0007',
	'\u017d\u0002\u0002\u0c30\u0c31\u0007\u009c\u0002\u0002\u0c31\u0c33\u0007',
	'\u017d\u0002\u0002\u0c32\u0c28\u0003\u0002\u0002\u0002\u0c32\u0c2e\u0003',
	'\u0002\u0002\u0002\u0c33\u01ff\u0003\u0002\u0002\u0002\u0c34\u0c35\u0007',
	'\u00af\u0002\u0002\u0c35\u0c36\u0007\u0017\u0002\u0002\u0c36\u0c38\u0005',
	'\u0270\u0139\u0002\u0c37\u0c39\u0005\u027c\u013f\u0002\u0c38\u0c37\u0003',
	'\u0002\u0002\u0002\u0c38\u0c39\u0003\u0002\u0002\u0002\u0c39\u0201\u0003',
	'\u0002\u0002\u0002\u0c3a\u0c3b\u0005\u024a\u0126\u0002\u0c3b\u0c3c\u0007',
	'\u0164\u0002\u0002\u0c3c\u0c3d\u0005\u02f8\u017d\u0002\u0c3d\u0203\u0003',
	'\u0002\u0002\u0002\u0c3e\u0c3f\u0007\u009d\u0002\u0002\u0c3f\u0c44\u0005',
	'\u0202\u0102\u0002\u0c40\u0c41\u0007\u015c\u0002\u0002\u0c41\u0c43\u0005',
	'\u0202\u0102\u0002\u0c42\u0c40\u0003\u0002\u0002\u0002\u0c43\u0c46\u0003',
	'\u0002\u0002\u0002\u0c44\u0c42\u0003\u0002\u0002\u0002\u0c44\u0c45\u0003',
	'\u0002\u0002\u0002\u0c45\u0205\u0003\u0002\u0002\u0002\u0c46\u0c44\u0003',
	'\u0002\u0002\u0002\u0c47\u0c48\u0007\u00e3\u0002\u0002\u0c48\u0c49\u0005',
	'\u0270\u0139\u0002\u0c49\u0c4b\u0005\u0204\u0103\u0002\u0c4a\u0c4c\u0005',
	'\u027c\u013f\u0002\u0c4b\u0c4a\u0003\u0002\u0002\u0002\u0c4b\u0c4c\u0003',
	'\u0002\u0002\u0002\u0c4c\u0207\u0003\u0002\u0002\u0002\u0c4d\u0c52\u0005',
	'\u020a\u0106\u0002\u0c4e\u0c52\u0005\u0214\u010b\u0002\u0c4f\u0c52\u0005',
	'\u0216\u010c\u0002\u0c50\u0c52\u0005\u0218\u010d\u0002\u0c51\u0c4d\u0003',
	'\u0002\u0002\u0002\u0c51\u0c4e\u0003\u0002\u0002\u0002\u0c51\u0c4f\u0003',
	'\u0002\u0002\u0002\u0c51\u0c50\u0003\u0002\u0002\u0002\u0c52\u0209\u0003',
	'\u0002\u0002\u0002\u0c53\u0c54\u0007\u0116\u0002\u0002\u0c54\u0c5d\u0007',
	'\u0117\u0002\u0002\u0c55\u0c5a\u0005\u020c\u0107\u0002\u0c56\u0c57\u0007',
	'\u015c\u0002\u0002\u0c57\u0c59\u0005\u020c\u0107\u0002\u0c58\u0c56\u0003',
	'\u0002\u0002\u0002\u0c59\u0c5c\u0003\u0002\u0002\u0002\u0c5a\u0c58\u0003',
	'\u0002\u0002\u0002\u0c5a\u0c5b\u0003\u0002\u0002\u0002\u0c5b\u0c5e\u0003',
	'\u0002\u0002\u0002\u0c5c\u0c5a\u0003\u0002\u0002\u0002\u0c5d\u0c55\u0003',
	'\u0002\u0002\u0002\u0c5d\u0c5e\u0003\u0002\u0002\u0002\u0c5e\u020b\u0003',
	'\u0002\u0002\u0002\u0c5f\u0c62\u0005\u0210\u0109\u0002\u0c60\u0c62\u0005',
	'\u020e\u0108\u0002\u0c61\u0c5f\u0003\u0002\u0002\u0002\u0c61\u0c60\u0003',
	'\u0002\u0002\u0002\u0c62\u020d\u0003\u0002\u0002\u0002\u0c63\u0c64\u0007',
	'\u00c8\u0002\u0002\u0c64\u0c68\u0007\u011b\u0002\u0002\u0c65\u0c66\u0007',
	'\u00c8\u0002\u0002\u0c66\u0c68\u0007\u011c\u0002\u0002\u0c67\u0c63\u0003',
	'\u0002\u0002\u0002\u0c67\u0c65\u0003\u0002\u0002\u0002\u0c68\u020f\u0003',
	'\u0002\u0002\u0002\u0c69\u0c6a\u0007\u011d\u0002\u0002\u0c6a\u0c6b\u0007',
	'\u011e\u0002\u0002\u0c6b\u0c6c\u0005\u0212\u010a\u0002\u0c6c\u0211\u0003',
	'\u0002\u0002\u0002\u0c6d\u0c6e\u0007\u011f\u0002\u0002\u0c6e\u0213\u0003',
	'\u0002\u0002\u0002\u0c6f\u0c71\u0007\u0118\u0002\u0002\u0c70\u0c72\u0007',
	'\u011a\u0002\u0002\u0c71\u0c70\u0003\u0002\u0002\u0002\u0c71\u0c72\u0003',
	'\u0002\u0002\u0002\u0c72\u0215\u0003\u0002\u0002\u0002\u0c73\u0c75\u0007',
	'\u0119\u0002\u0002\u0c74\u0c76\u0007\u011a\u0002\u0002\u0c75\u0c74\u0003',
	'\u0002\u0002\u0002\u0c75\u0c76\u0003\u0002\u0002\u0002\u0c76\u0217\u0003',
	'\u0002\u0002\u0002\u0c77\u0c78\u0007\u009d\u0002\u0002\u0c78\u0c79\u0007',
	'\u0120\u0002\u0002\u0c79\u0c7a\u0005\u0306\u0184\u0002\u0c7a\u0219\u0003',
	'\u0002\u0002\u0002\u0c7b\u0c7c\u0007\u012d\u0002\u0002\u0c7c\u0c7e\u0007',
	'\u0105\u0002\u0002\u0c7d\u0c7f\u0007\u017d\u0002\u0002\u0c7e\u0c7d\u0003',
	'\u0002\u0002\u0002\u0c7f\u0c80\u0003\u0002\u0002\u0002\u0c80\u0c7e\u0003',
	'\u0002\u0002\u0002\u0c80\u0c81\u0003\u0002\u0002\u0002\u0c81\u021b\u0003',
	'\u0002\u0002\u0002\u0c82\u0c83\u0007\u0130\u0002\u0002\u0c83\u0c84\u0007',
	'j\u0002\u0002\u0c84\u0c89\u0005\u0270\u0139\u0002\u0c85\u0c87\u0007',
	'\u0018\u0002\u0002\u0c86\u0c85\u0003\u0002\u0002\u0002\u0c86\u0c87\u0003',
	'\u0002\u0002\u0002\u0c87\u0c88\u0003\u0002\u0002\u0002\u0c88\u0c8a\u0005',
	'\u0318\u018d\u0002\u0c89\u0c86\u0003\u0002\u0002\u0002\u0c89\u0c8a\u0003',
	'\u0002\u0002\u0002\u0c8a\u0c8b\u0003\u0002\u0002\u0002\u0c8b\u0c8c\u0007',
	'4\u0002\u0002\u0c8c\u0c8d\u0005\u0258\u012d\u0002\u0c8d\u0c8e\u0007',
	'$\u0002\u0002\u0c8e\u0c8f\u0005\u02f8\u017d\u0002\u0c8f\u0c90\u0005',
	'\u021e\u0110\u0002\u0c90\u021d\u0003\u0002\u0002\u0002\u0c91\u0c94\u0005',
	'\u0222\u0112\u0002\u0c92\u0c94\u0005\u0224\u0113\u0002\u0c93\u0c91\u0003',
	'\u0002\u0002\u0002\u0c93\u0c92\u0003\u0002\u0002\u0002\u0c94\u0c97\u0003',
	'\u0002\u0002\u0002\u0c95\u0c93\u0003\u0002\u0002\u0002\u0c95\u0c96\u0003',
	'\u0002\u0002\u0002\u0c96\u0c99\u0003\u0002\u0002\u0002\u0c97\u0c95\u0003',
	'\u0002\u0002\u0002\u0c98\u0c9a\u0005\u0220\u0111\u0002\u0c99\u0c98\u0003',
	'\u0002\u0002\u0002\u0c99\u0c9a\u0003\u0002\u0002\u0002\u0c9a\u021f\u0003',
	'\u0002\u0002\u0002\u0c9b\u0c9c\u0007\u00a5\u0002\u0002\u0c9c\u0c9d\u0007',
	'\t\u0002\u0002\u0c9d\u0ca0\u0007\u0131\u0002\u0002\u0c9e\u0c9f\u0007',
	'\u0007\u0002\u0002\u0c9f\u0ca1\u0005\u02f8\u017d\u0002\u0ca0\u0c9e\u0003',
	'\u0002\u0002\u0002\u0ca0\u0ca1\u0003\u0002\u0002\u0002\u0ca1\u0ca2\u0003',
	'\u0002\u0002\u0002\u0ca2\u0ca3\u0007\u00a6\u0002\u0002\u0ca3\u0ca4\u0007',
	'\u001b\u0002\u0002\u0ca4\u0ca5\u0007\u010a\u0002\u0002\u0ca5\u0ca6\u0005',
	'\u0284\u0143\u0002\u0ca6\u0221\u0003\u0002\u0002\u0002\u0ca7\u0ca8\u0007',
	'\u00a5\u0002\u0002\u0ca8\u0ca9\u0007\u0131\u0002\u0002\u0ca9\u0caa\u0007',
	'\u0007\u0002\u0002\u0caa\u0cab\u0005\u02f8\u017d\u0002\u0cab\u0cac\u0007',
	'\u00a6\u0002\u0002\u0cac\u0cad\u0005\u0226\u0114\u0002\u0cad\u0223\u0003',
	'\u0002\u0002\u0002\u0cae\u0caf\u0007\u00a5\u0002\u0002\u0caf\u0cb0\u0007',
	'\u0131\u0002\u0002\u0cb0\u0cb1\u0007\u00a6\u0002\u0002\u0cb1\u0cb2\u0005',
	'\u0226\u0114\u0002\u0cb2\u0225\u0003\u0002\u0002\u0002\u0cb3\u0cb4\u0007',
	'\u00e3\u0002\u0002\u0cb4\u0cb7\u0005\u0204\u0103\u0002\u0cb5\u0cb7\u0007',
	'\u00af\u0002\u0002\u0cb6\u0cb3\u0003\u0002\u0002\u0002\u0cb6\u0cb5\u0003',
	'\u0002\u0002\u0002\u0cb7\u0227\u0003\u0002\u0002\u0002\u0cb8\u0cb9\u0007',
	'w\u0002\u0002\u0cb9\u0cbb\u0007\u010d\u0002\u0002\u0cba\u0cbc\u0007',
	'\u0178\u0002\u0002\u0cbb\u0cba\u0003\u0002\u0002\u0002\u0cbc\u0cbd\u0003',
	'\u0002\u0002\u0002\u0cbd\u0cbb\u0003\u0002\u0002\u0002\u0cbd\u0cbe\u0003',
	'\u0002\u0002\u0002\u0cbe\u0229\u0003\u0002\u0002\u0002\u0cbf\u0cc1\u0007',
	'\u0019\u0002\u0002\u0cc0\u0cc2\u0007\u0183\u0002\u0002\u0cc1\u0cc0\u0003',
	'\u0002\u0002\u0002\u0cc1\u0cc2\u0003\u0002\u0002\u0002\u0cc2\u0cc9\u0003',
	'\u0002\u0002\u0002\u0cc3\u0cc5\t\u0013\u0002\u0002\u0cc4\u0cc3\u0003',
	'\u0002\u0002\u0002\u0cc4\u0cc5\u0003\u0002\u0002\u0002\u0cc5\u0cc6\u0003',
	'\u0002\u0002\u0002\u0cc6\u0cca\u0005\u022c\u0117\u0002\u0cc7\u0cc8\u0007',
	'3\u0002\u0002\u0cc8\u0cca\u0005\u022e\u0118\u0002\u0cc9\u0cc4\u0003',
	'\u0002\u0002\u0002\u0cc9\u0cc7\u0003\u0002\u0002\u0002\u0cca\u0ccd\u0003',
	'\u0002\u0002\u0002\u0ccb\u0ccd\u0005\u0232\u011a\u0002\u0ccc\u0cbf\u0003',
	'\u0002\u0002\u0002\u0ccc\u0ccb\u0003\u0002\u0002\u0002\u0ccd\u022b\u0003',
	'\u0002\u0002\u0002\u0cce\u0cd3\u0005\u0230\u0119\u0002\u0ccf\u0cd0\u0007',
	'\u015c\u0002\u0002\u0cd0\u0cd2\u0005\u0230\u0119\u0002\u0cd1\u0ccf\u0003',
	'\u0002\u0002\u0002\u0cd2\u0cd5\u0003\u0002\u0002\u0002\u0cd3\u0cd1\u0003',
	'\u0002\u0002\u0002\u0cd3\u0cd4\u0003\u0002\u0002\u0002\u0cd4\u022d\u0003',
	'\u0002\u0002\u0002\u0cd5\u0cd3\u0003\u0002\u0002\u0002\u0cd6\u0cd7\u0007',
	'\u015e\u0002\u0002\u0cd7\u0cd8\u0005\u0236\u011c\u0002\u0cd8\u0cda\u0007',
	'\u015f\u0002\u0002\u0cd9\u0cdb\u0005\u013a\u009e\u0002\u0cda\u0cd9\u0003',
	'\u0002\u0002\u0002\u0cda\u0cdb\u0003\u0002\u0002\u0002\u0cdb\u0cdd\u0003',
	'\u0002\u0002\u0002\u0cdc\u0cde\u0005\u013e\u00a0\u0002\u0cdd\u0cdc\u0003',
	'\u0002\u0002\u0002\u0cdd\u0cde\u0003\u0002\u0002\u0002\u0cde\u0cdf\u0003',
	'\u0002\u0002\u0002\u0cdf\u0ce0\u00074\u0002\u0002\u0ce0\u0cef\u0007',
	'\u0178\u0002\u0002\u0ce1\u0ced\u0007\u0018\u0002\u0002\u0ce2\u0ce5\u0007',
	'\u015e\u0002\u0002\u0ce3\u0ce6\u0005\u024e\u0128\u0002\u0ce4\u0ce6\u0005',
	'\u016e\u00b8\u0002\u0ce5\u0ce3\u0003\u0002\u0002\u0002\u0ce5\u0ce4\u0003',
	'\u0002\u0002\u0002\u0ce6\u0ce7\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0007',
	'\u015f\u0002\u0002\u0ce8\u0cee\u0003\u0002\u0002\u0002\u0ce9\u0cec\u0005',
	'\u024e\u0128\u0002\u0cea\u0cec\u0005\u016e\u00b8\u0002\u0ceb\u0ce9\u0003',
	'\u0002\u0002\u0002\u0ceb\u0cea\u0003\u0002\u0002\u0002\u0cec\u0cee\u0003',
	'\u0002\u0002\u0002\u0ced\u0ce2\u0003\u0002\u0002\u0002\u0ced\u0ceb\u0003',
	'\u0002\u0002\u0002\u0cee\u0cf0\u0003\u0002\u0002\u0002\u0cef\u0ce1\u0003',
	'\u0002\u0002\u0002\u0cef\u0cf0\u0003\u0002\u0002\u0002\u0cf0\u0cf2\u0003',
	'\u0002\u0002\u0002\u0cf1\u0cf3\u0005\u013a\u009e\u0002\u0cf2\u0cf1\u0003',
	'\u0002\u0002\u0002\u0cf2\u0cf3\u0003\u0002\u0002\u0002\u0cf3\u0cf5\u0003',
	'\u0002\u0002\u0002\u0cf4\u0cf6\u0005\u013c\u009f\u0002\u0cf5\u0cf4\u0003',
	'\u0002\u0002\u0002\u0cf5\u0cf6\u0003\u0002\u0002\u0002\u0cf6\u022f\u0003',
	'\u0002\u0002\u0002\u0cf7\u0d0c\u0005\u0248\u0125\u0002\u0cf8\u0d09\u0005',
	'\u02f8\u017d\u0002\u0cf9\u0cfb\u0007\u0018\u0002\u0002\u0cfa\u0cf9\u0003',
	'\u0002\u0002\u0002\u0cfa\u0cfb\u0003\u0002\u0002\u0002\u0cfb\u0cfc\u0003',
	'\u0002\u0002\u0002\u0cfc\u0d0a\u0005\u0318\u018d\u0002\u0cfd\u0cfe\u0007',
	'\u0018\u0002\u0002\u0cfe\u0cff\u0007\u015e\u0002\u0002\u0cff\u0d04\u0005',
	'\u0318\u018d\u0002\u0d00\u0d01\u0007\u015c\u0002\u0002\u0d01\u0d03\u0005',
	'\u0318\u018d\u0002\u0d02\u0d00\u0003\u0002\u0002\u0002\u0d03\u0d06\u0003',
	'\u0002\u0002\u0002\u0d04\u0d02\u0003\u0002\u0002\u0002\u0d04\u0d05\u0003',
	'\u0002\u0002\u0002\u0d05\u0d07\u0003\u0002\u0002\u0002\u0d06\u0d04\u0003',
	'\u0002\u0002\u0002\u0d07\u0d08\u0007\u015f\u0002\u0002\u0d08\u0d0a\u0003',
	'\u0002\u0002\u0002\u0d09\u0cfa\u0003\u0002\u0002\u0002\u0d09\u0cfd\u0003',
	'\u0002\u0002\u0002\u0d09\u0d0a\u0003\u0002\u0002\u0002\u0d0a\u0d0c\u0003',
	'\u0002\u0002\u0002\u0d0b\u0cf7\u0003\u0002\u0002\u0002\u0d0b\u0cf8\u0003',
	'\u0002\u0002\u0002\u0d0c\u0231\u0003\u0002\u0002\u0002\u0d0d\u0d0e\u0007',
	'd\u0002\u0002\u0d0e\u0d12\u0005\u0236\u011c\u0002\u0d0f\u0d10\u0007',
	'f\u0002\u0002\u0d10\u0d12\u0005\u0236\u011c\u0002\u0d11\u0d0d\u0003',
	'\u0002\u0002\u0002\u0d11\u0d0f\u0003\u0002\u0002\u0002\u0d12\u0d14\u0003',
	'\u0002\u0002\u0002\u0d13\u0d15\u0005\u013a\u009e\u0002\u0d14\u0d13\u0003',
	'\u0002\u0002\u0002\u0d14\u0d15\u0003\u0002\u0002\u0002\u0d15\u0d17\u0003',
	'\u0002\u0002\u0002\u0d16\u0d18\u0005\u013e\u00a0\u0002\u0d17\u0d16\u0003',
	'\u0002\u0002\u0002\u0d17\u0d18\u0003\u0002\u0002\u0002\u0d18\u0d19\u0003',
	'\u0002\u0002\u0002\u0d19\u0d1a\u00074\u0002\u0002\u0d1a\u0d29\u0007',
	'\u0178\u0002\u0002\u0d1b\u0d27\u0007\u0018\u0002\u0002\u0d1c\u0d1f\u0007',
	'\u015e\u0002\u0002\u0d1d\u0d20\u0005\u024e\u0128\u0002\u0d1e\u0d20\u0005',
	'\u016e\u00b8\u0002\u0d1f\u0d1d\u0003\u0002\u0002\u0002\u0d1f\u0d1e\u0003',
	'\u0002\u0002\u0002\u0d20\u0d21\u0003\u0002\u0002\u0002\u0d21\u0d22\u0007',
	'\u015f\u0002\u0002\u0d22\u0d28\u0003\u0002\u0002\u0002\u0d23\u0d26\u0005',
	'\u024e\u0128\u0002\u0d24\u0d26\u0005\u016e\u00b8\u0002\u0d25\u0d23\u0003',
	'\u0002\u0002\u0002\u0d25\u0d24\u0003\u0002\u0002\u0002\u0d26\u0d28\u0003',
	'\u0002\u0002\u0002\u0d27\u0d1c\u0003\u0002\u0002\u0002\u0d27\u0d25\u0003',
	'\u0002\u0002\u0002\u0d28\u0d2a\u0003\u0002\u0002\u0002\u0d29\u0d1b\u0003',
	'\u0002\u0002\u0002\u0d29\u0d2a\u0003\u0002\u0002\u0002\u0d2a\u0d2c\u0003',
	'\u0002\u0002\u0002\u0d2b\u0d2d\u0005\u013a\u009e\u0002\u0d2c\u0d2b\u0003',
	'\u0002\u0002\u0002\u0d2c\u0d2d\u0003\u0002\u0002\u0002\u0d2d\u0d2f\u0003',
	'\u0002\u0002\u0002\u0d2e\u0d30\u0005\u013c\u009f\u0002\u0d2f\u0d2e\u0003',
	'\u0002\u0002\u0002\u0d2f\u0d30\u0003\u0002\u0002\u0002\u0d30\u0233\u0003',
	'\u0002\u0002\u0002\u0d31\u0d34\u0005\u0248\u0125\u0002\u0d32\u0d34\u0005',
	'\u02f8\u017d\u0002\u0d33\u0d31\u0003\u0002\u0002\u0002\u0d33\u0d32\u0003',
	'\u0002\u0002\u0002\u0d34\u0235\u0003\u0002\u0002\u0002\u0d35\u0d3a\u0005',
	'\u0234\u011b\u0002\u0d36\u0d37\u0007\u015c\u0002\u0002\u0d37\u0d39\u0005',
	'\u0234\u011b\u0002\u0d38\u0d36\u0003\u0002\u0002\u0002\u0d39\u0d3c\u0003',
	'\u0002\u0002\u0002\u0d3a\u0d38\u0003\u0002\u0002\u0002\u0d3a\u0d3b\u0003',
	'\u0002\u0002\u0002\u0d3b\u0237\u0003\u0002\u0002\u0002\u0d3c\u0d3a\u0003',
	'\u0002\u0002\u0002\u0d3d\u0d3e\u0007\u00eb\u0002\u0002\u0d3e\u0d43\u0005',
	'\u023a\u011e\u0002\u0d3f\u0d40\u0007\u015c\u0002\u0002\u0d40\u0d42\u0005',
	'\u023a\u011e\u0002\u0d41\u0d3f\u0003\u0002\u0002\u0002\u0d42\u0d45\u0003',
	'\u0002\u0002\u0002\u0d43\u0d41\u0003\u0002\u0002\u0002\u0d43\u0d44\u0003',
	'\u0002\u0002\u0002\u0d44\u0239\u0003\u0002\u0002\u0002\u0d45\u0d43\u0003',
	'\u0002\u0002\u0002\u0d46\u0d47\u0005\u0318\u018d\u0002\u0d47\u0d48\u0007',
	'\u0018\u0002\u0002\u0d48\u0d49\u0005\u023c\u011f\u0002\u0d49\u023b\u0003',
	'\u0002\u0002\u0002\u0d4a\u0d57\u0005\u0318\u018d\u0002\u0d4b\u0d4d\u0007',
	'\u015e\u0002\u0002\u0d4c\u0d4e\u0005\u0318\u018d\u0002\u0d4d\u0d4c\u0003',
	'\u0002\u0002\u0002\u0d4d\u0d4e\u0003\u0002\u0002\u0002\u0d4e\u0d50\u0003',
	'\u0002\u0002\u0002\u0d4f\u0d51\u0005\u0276\u013c\u0002\u0d50\u0d4f\u0003',
	'\u0002\u0002\u0002\u0d50\u0d51\u0003\u0002\u0002\u0002\u0d51\u0d53\u0003',
	'\u0002\u0002\u0002\u0d52\u0d54\u0005\u023e\u0120\u0002\u0d53\u0d52\u0003',
	'\u0002\u0002\u0002\u0d53\u0d54\u0003\u0002\u0002\u0002\u0d54\u0d55\u0003',
	'\u0002\u0002\u0002\u0d55\u0d57\u0007\u015f\u0002\u0002\u0d56\u0d4a\u0003',
	'\u0002\u0002\u0002\u0d56\u0d4b\u0003\u0002\u0002\u0002\u0d57\u023d\u0003',
	'\u0002\u0002\u0002\u0d58\u0d5b\u0005\u0240\u0121\u0002\u0d59\u0d5b\u0005',
	'\u0242\u0122\u0002\u0d5a\u0d58\u0003\u0002\u0002\u0002\u0d5a\u0d59\u0003',
	'\u0002\u0002\u0002\u0d5b\u023f\u0003\u0002\u0002\u0002\u0d5c\u0d5d\u0007',
	'm\u0002\u0002\u0d5d\u0d65\u0005\u0244\u0123\u0002\u0d5e\u0d5f\u0007',
	'm\u0002\u0002\u0d5f\u0d60\u0007\u00ce\u0002\u0002\u0d60\u0d61\u0005',
	'\u0246\u0124\u0002\u0d61\u0d62\u0007\u0007\u0002\u0002\u0d62\u0d63\u0005',
	'\u0246\u0124\u0002\u0d63\u0d65\u0003\u0002\u0002\u0002\u0d64\u0d5c\u0003',
	'\u0002\u0002\u0002\u0d64\u0d5e\u0003\u0002\u0002\u0002\u0d65\u0241\u0003',
	'\u0002\u0002\u0002\u0d66\u0d67\u0007\u00cb\u0002\u0002\u0d67\u0d6f\u0005',
	'\u0244\u0123\u0002\u0d68\u0d69\u0007\u00cb\u0002\u0002\u0d69\u0d6a\u0007',
	'\u00ce\u0002\u0002\u0d6a\u0d6b\u0005\u0246\u0124\u0002\u0d6b\u0d6c\u0007',
	'\u0007\u0002\u0002\u0d6c\u0d6d\u0005\u0246\u0124\u0002\u0d6d\u0d6f\u0003',
	'\u0002\u0002\u0002\u0d6e\u0d66\u0003\u0002\u0002\u0002\u0d6e\u0d68\u0003',
	'\u0002\u0002\u0002\u0d6f\u0243\u0003\u0002\u0002\u0002\u0d70\u0d71\u0007',
	'\u00ec\u0002\u0002\u0d71\u0d77\u0007\u00ed\u0002\u0002\u0d72\u0d73\u0007',
	'\u00ef\u0002\u0002\u0d73\u0d77\u0007l\u0002\u0002\u0d74\u0d75\u0007',
	'\u017d\u0002\u0002\u0d75\u0d77\u0007\u00ed\u0002\u0002\u0d76\u0d70\u0003',
	'\u0002\u0002\u0002\u0d76\u0d72\u0003\u0002\u0002\u0002\u0d76\u0d74\u0003',
	'\u0002\u0002\u0002\u0d77\u0245\u0003\u0002\u0002\u0002\u0d78\u0d79\u0007',
	'\u00ec\u0002\u0002\u0d79\u0d7f\t\u0014\u0002\u0002\u0d7a\u0d7b\u0007',
	'\u00ef\u0002\u0002\u0d7b\u0d7f\u0007l\u0002\u0002\u0d7c\u0d7d\u0007',
	'\u017d\u0002\u0002\u0d7d\u0d7f\t\u0014\u0002\u0002\u0d7e\u0d78\u0003',
	'\u0002\u0002\u0002\u0d7e\u0d7a\u0003\u0002\u0002\u0002\u0d7e\u0d7c\u0003',
	'\u0002\u0002\u0002\u0d7f\u0247\u0003\u0002\u0002\u0002\u0d80\u0d86\u0007',
	'\u016e\u0002\u0002\u0d81\u0d82\u0005\u0270\u0139\u0002\u0d82\u0d83\u0007',
	'\u015a\u0002\u0002\u0d83\u0d84\u0007\u016e\u0002\u0002\u0d84\u0d86\u0003',
	'\u0002\u0002\u0002\u0d85\u0d80\u0003\u0002\u0002\u0002\u0d85\u0d81\u0003',
	'\u0002\u0002\u0002\u0d86\u0249\u0003\u0002\u0002\u0002\u0d87\u0d88\u0005',
	'\u0318\u018d\u0002\u0d88\u024b\u0003\u0002\u0002\u0002\u0d89\u0d8e\u0005',
	'\u02f8\u017d\u0002\u0d8a\u0d8b\u0007\u015c\u0002\u0002\u0d8b\u0d8d\u0005',
	'\u02f8\u017d\u0002\u0d8c\u0d8a\u0003\u0002\u0002\u0002\u0d8d\u0d90\u0003',
	'\u0002\u0002\u0002\u0d8e\u0d8c\u0003\u0002\u0002\u0002\u0d8e\u0d8f\u0003',
	'\u0002\u0002\u0002\u0d8f\u024d\u0003\u0002\u0002\u0002\u0d90\u0d8e\u0003',
	'\u0002\u0002\u0002\u0d91\u0d96\u0005\u0318\u018d\u0002\u0d92\u0d93\u0007',
	'\u015c\u0002\u0002\u0d93\u0d95\u0005\u0318\u018d\u0002\u0d94\u0d92\u0003',
	'\u0002\u0002\u0002\u0d95\u0d98\u0003\u0002\u0002\u0002\u0d96\u0d94\u0003',
	'\u0002\u0002\u0002\u0d96\u0d97\u0003\u0002\u0002\u0002\u0d97\u024f\u0003',
	'\u0002\u0002\u0002\u0d98\u0d96\u0003\u0002\u0002\u0002\u0d99\u0d9a\u0007',
	'\u0017\u0002\u0002\u0d9a\u0d9b\u0005\u0252\u012a\u0002\u0d9b\u0251\u0003',
	'\u0002\u0002\u0002\u0d9c\u0d9d\u0005\u025e\u0130\u0002\u0d9d\u0da0\u0005',
	'\u025a\u012e\u0002\u0d9e\u0d9f\u0007\u015c\u0002\u0002\u0d9f\u0da1\u0005',
	'\u025a\u012e\u0002\u0da0\u0d9e\u0003\u0002\u0002\u0002\u0da1\u0da2\u0003',
	'\u0002\u0002\u0002\u0da2\u0da0\u0003\u0002\u0002\u0002\u0da2\u0da3\u0003',
	'\u0002\u0002\u0002\u0da3\u0da6\u0003\u0002\u0002\u0002\u0da4\u0da6\u0005',
	'\u0256\u012c\u0002\u0da5\u0d9c\u0003\u0002\u0002\u0002\u0da5\u0da4\u0003',
	'\u0002\u0002\u0002\u0da6\u0253\u0003\u0002\u0002\u0002\u0da7\u0dab\u0005',
	'\u026c\u0137\u0002\u0da8\u0daa\u0005\u0262\u0132\u0002\u0da9\u0da8\u0003',
	'\u0002\u0002\u0002\u0daa\u0dad\u0003\u0002\u0002\u0002\u0dab\u0da9\u0003',
	'\u0002\u0002\u0002\u0dab\u0dac\u0003\u0002\u0002\u0002\u0dac\u0dc8\u0003',
	'\u0002\u0002\u0002\u0dad\u0dab\u0003\u0002\u0002\u0002\u0dae\u0db2\u0005',
	'\u0286\u0144\u0002\u0daf\u0db1\u0005\u0262\u0132\u0002\u0db0\u0daf\u0003',
	'\u0002\u0002\u0002\u0db1\u0db4\u0003\u0002\u0002\u0002\u0db2\u0db0\u0003',
	'\u0002\u0002\u0002\u0db2\u0db3\u0003\u0002\u0002\u0002\u0db3\u0dc8\u0003',
	'\u0002\u0002\u0002\u0db4\u0db2\u0003\u0002\u0002\u0002\u0db5\u0db9\u0005',
	'\u0274\u013b\u0002\u0db6\u0db8\u0005\u0262\u0132\u0002\u0db7\u0db6\u0003',
	'\u0002\u0002\u0002\u0db8\u0dbb\u0003\u0002\u0002\u0002\u0db9\u0db7\u0003',
	'\u0002\u0002\u0002\u0db9\u0dba\u0003\u0002\u0002\u0002\u0dba\u0dc8\u0003',
	'\u0002\u0002\u0002\u0dbb\u0db9\u0003\u0002\u0002\u0002\u0dbc\u0dc0\u0005',
	'\u027a\u013e\u0002\u0dbd\u0dbf\u0005\u0262\u0132\u0002\u0dbe\u0dbd\u0003',
	'\u0002\u0002\u0002\u0dbf\u0dc2\u0003\u0002\u0002\u0002\u0dc0\u0dbe\u0003',
	'\u0002\u0002\u0002\u0dc0\u0dc1\u0003\u0002\u0002\u0002\u0dc1\u0dc8\u0003',
	'\u0002\u0002\u0002\u0dc2\u0dc0\u0003\u0002\u0002\u0002\u0dc3\u0dc4\u0007',
	'\u015e\u0002\u0002\u0dc4\u0dc5\u0005\u0256\u012c\u0002\u0dc5\u0dc6\u0007',
	'\u015f\u0002\u0002\u0dc6\u0dc8\u0003\u0002\u0002\u0002\u0dc7\u0da7\u0003',
	'\u0002\u0002\u0002\u0dc7\u0dae\u0003\u0002\u0002\u0002\u0dc7\u0db5\u0003',
	'\u0002\u0002\u0002\u0dc7\u0dbc\u0003\u0002\u0002\u0002\u0dc7\u0dc3\u0003',
	'\u0002\u0002\u0002\u0dc8\u0255\u0003\u0002\u0002\u0002\u0dc9\u0dd4\u0005',
	'\u0254\u012b\u0002\u0dca\u0dcb\u0005\u0260\u0131\u0002\u0dcb\u0dd0\u0005',
	'\u0258\u012d\u0002\u0dcc\u0dcd\u0007$\u0002\u0002\u0dcd\u0dd1\u0005',
	'\u02f8\u017d\u0002\u0dce\u0dcf\u00074\u0002\u0002\u0dcf\u0dd1\u0005',
	'\u017c\u00bf\u0002\u0dd0\u0dcc\u0003\u0002\u0002\u0002\u0dd0\u0dce\u0003',
	'\u0002\u0002\u0002\u0dd0\u0dd1\u0003\u0002\u0002\u0002\u0dd1\u0dd3\u0003',
	'\u0002\u0002\u0002\u0dd2\u0dca\u0003\u0002\u0002\u0002\u0dd3\u0dd6\u0003',
	'\u0002\u0002\u0002\u0dd4\u0dd2\u0003\u0002\u0002\u0002\u0dd4\u0dd5\u0003',
	'\u0002\u0002\u0002\u0dd5\u0257\u0003\u0002\u0002\u0002\u0dd6\u0dd4\u0003',
	'\u0002\u0002\u0002\u0dd7\u0ddc\u0005\u026c\u0137\u0002\u0dd8\u0ddc\u0005',
	'\u0286\u0144\u0002\u0dd9\u0ddc\u0005\u0274\u013b\u0002\u0dda\u0ddc\u0005',
	'\u027a\u013e\u0002\u0ddb\u0dd7\u0003\u0002\u0002\u0002\u0ddb\u0dd8\u0003',
	'\u0002\u0002\u0002\u0ddb\u0dd9\u0003\u0002\u0002\u0002\u0ddb\u0dda\u0003',
	'\u0002\u0002\u0002\u0ddc\u0de0\u0003\u0002\u0002\u0002\u0ddd\u0ddf\u0005',
	'\u0262\u0132\u0002\u0dde\u0ddd\u0003\u0002\u0002\u0002\u0ddf\u0de2\u0003',
	'\u0002\u0002\u0002\u0de0\u0dde\u0003\u0002\u0002\u0002\u0de0\u0de1\u0003',
	'\u0002\u0002\u0002\u0de1\u0259\u0003\u0002\u0002\u0002\u0de2\u0de0\u0003',
	'\u0002\u0002\u0002\u0de3\u0de5\u0007\u001f\u0002\u0002\u0de4\u0de3\u0003',
	'\u0002\u0002\u0002\u0de4\u0de5\u0003\u0002\u0002\u0002\u0de5\u0de6\u0003',
	'\u0002\u0002\u0002\u0de6\u0de7\u0005\u026e\u0138\u0002\u0de7\u0de8\u0005',
	'\u025c\u012f\u0002\u0de8\u025b\u0003\u0002\u0002\u0002\u0de9\u0dea\u0007',
	'\u015e\u0002\u0002\u0dea\u0deb\u0005\u024c\u0127\u0002\u0deb\u0dec\u0007',
	'\u015f\u0002\u0002\u0dec\u025d\u0003\u0002\u0002\u0002\u0ded\u0dee\u0007',
	'\u001e\u0002\u0002\u0dee\u025f\u0003\u0002\u0002\u0002\u0def\u0e08\u0007',
	' \u0002\u0002\u0df0\u0df1\u0007\u00fc\u0002\u0002\u0df1\u0e08\u0007',
	' \u0002\u0002\u0df2\u0e08\u0007\u015c\u0002\u0002\u0df3\u0df4\u0007',
	'\u00d1\u0002\u0002\u0df4\u0e08\u0007 \u0002\u0002\u0df5\u0df7\u0007',
	'!\u0002\u0002\u0df6\u0df8\u0007\u001d\u0002\u0002\u0df7\u0df6\u0003',
	'\u0002\u0002\u0002\u0df7\u0df8\u0003\u0002\u0002\u0002\u0df8\u0df9\u0003',
	'\u0002\u0002\u0002\u0df9\u0e08\u0007 \u0002\u0002\u0dfa\u0dfc\u0007',
	'"\u0002\u0002\u0dfb\u0dfd\u0007\u001d\u0002\u0002\u0dfc\u0dfb\u0003',
	'\u0002\u0002\u0002\u0dfc\u0dfd\u0003\u0002\u0002\u0002\u0dfd\u0dfe\u0003',
	'\u0002\u0002\u0002\u0dfe\u0e08\u0007 \u0002\u0002\u0dff\u0e01\u0007',
	'#\u0002\u0002\u0e00\u0e02\u0007\u001d\u0002\u0002\u0e01\u0e00\u0003',
	'\u0002\u0002\u0002\u0e01\u0e02\u0003\u0002\u0002\u0002\u0e02\u0e03\u0003',
	'\u0002\u0002\u0002\u0e03\u0e08\u0007 \u0002\u0002\u0e04\u0e05\u0007',
	'!\u0002\u0002\u0e05\u0e06\u0007\u00d7\u0002\u0002\u0e06\u0e08\u0007',
	' \u0002\u0002\u0e07\u0def\u0003\u0002\u0002\u0002\u0e07\u0df0\u0003',
	'\u0002\u0002\u0002\u0e07\u0df2\u0003\u0002\u0002\u0002\u0e07\u0df3\u0003',
	'\u0002\u0002\u0002\u0e07\u0df5\u0003\u0002\u0002\u0002\u0e07\u0dfa\u0003',
	'\u0002\u0002\u0002\u0e07\u0dff\u0003\u0002\u0002\u0002\u0e07\u0e04\u0003',
	'\u0002\u0002\u0002\u0e08\u0261\u0003\u0002\u0002\u0002\u0e09\u0e0a\u0007',
	'\u00d8\u0002\u0002\u0e0a\u0e0b\u0007\u00b4\u0002\u0002\u0e0b\u0e0c\u0007',
	'\u001d\u0002\u0002\u0e0c\u0e0d\u0005\u02b2\u015a\u0002\u0e0d\u0e17\u0005',
	'\u0264\u0133\u0002\u0e0e\u0e0f\u0007\u0018\u0002\u0002\u0e0f\u0e14\u0005',
	'\u0318\u018d\u0002\u0e10\u0e11\u0007\u015c\u0002\u0002\u0e11\u0e13\u0005',
	'\u0318\u018d\u0002\u0e12\u0e10\u0003\u0002\u0002\u0002\u0e13\u0e16\u0003',
	'\u0002\u0002\u0002\u0e14\u0e12\u0003\u0002\u0002\u0002\u0e14\u0e15\u0003',
	'\u0002\u0002\u0002\u0e15\u0e18\u0003\u0002\u0002\u0002\u0e16\u0e14\u0003',
	'\u0002\u0002\u0002\u0e17\u0e0e\u0003\u0002\u0002\u0002\u0e17\u0e18\u0003',
	'\u0002\u0002\u0002\u0e18\u0e45\u0003\u0002\u0002\u0002\u0e19\u0e1b\u0007',
	'\u015c\u0002\u0002\u0e1a\u0e19\u0003\u0002\u0002\u0002\u0e1a\u0e1b\u0003',
	'\u0002\u0002\u0002\u0e1b\u0e1c\u0003\u0002\u0002\u0002\u0e1c\u0e1d\u0007',
	'\u00d8\u0002\u0002\u0e1d\u0e1e\u0007\u00b4\u0002\u0002\u0e1e\u0e1f\u0005',
	'\u02b2\u015a\u0002\u0e1f\u0e29\u0005\u0264\u0133\u0002\u0e20\u0e21\u0007',
	'\u0018\u0002\u0002\u0e21\u0e26\u0005\u0318\u018d\u0002\u0e22\u0e23\u0007',
	'\u015c\u0002\u0002\u0e23\u0e25\u0005\u0318\u018d\u0002\u0e24\u0e22\u0003',
	'\u0002\u0002\u0002\u0e25\u0e28\u0003\u0002\u0002\u0002\u0e26\u0e24\u0003',
	'\u0002\u0002\u0002\u0e26\u0e27\u0003\u0002\u0002\u0002\u0e27\u0e2a\u0003',
	'\u0002\u0002\u0002\u0e28\u0e26\u0003\u0002\u0002\u0002\u0e29\u0e20\u0003',
	'\u0002\u0002\u0002\u0e29\u0e2a\u0003\u0002\u0002\u0002\u0e2a\u0e45\u0003',
	'\u0002\u0002\u0002\u0e2b\u0e2d\u0007\u015c\u0002\u0002\u0e2c\u0e2b\u0003',
	'\u0002\u0002\u0002\u0e2c\u0e2d\u0003\u0002\u0002\u0002\u0e2d\u0e2e\u0003',
	'\u0002\u0002\u0002\u0e2e\u0e2f\u0007\u00d8\u0002\u0002\u0e2f\u0e30\u0007',
	"'\u0002\u0002\u0e30\u0e31\u0007\u015e\u0002\u0002\u0e31\u0e32\u0005",
	'\u0280\u0141\u0002\u0e32\u0e34\u0007\u015f\u0002\u0002\u0e33\u0e35\u0007',
	'\u0018\u0002\u0002\u0e34\u0e33\u0003\u0002\u0002\u0002\u0e34\u0e35\u0003',
	'\u0002\u0002\u0002\u0e35\u0e36\u0003\u0002\u0002\u0002\u0e36\u0e42\u0005',
	'\u0264\u0133\u0002\u0e37\u0e38\u0007\u015e\u0002\u0002\u0e38\u0e3d\u0005',
	'\u0318\u018d\u0002\u0e39\u0e3a\u0007\u015c\u0002\u0002\u0e3a\u0e3c\u0005',
	'\u0318\u018d\u0002\u0e3b\u0e39\u0003\u0002\u0002\u0002\u0e3c\u0e3f\u0003',
	'\u0002\u0002\u0002\u0e3d\u0e3b\u0003\u0002\u0002\u0002\u0e3d\u0e3e\u0003',
	'\u0002\u0002\u0002\u0e3e\u0e40\u0003\u0002\u0002\u0002\u0e3f\u0e3d\u0003',
	'\u0002\u0002\u0002\u0e40\u0e41\u0007\u015f\u0002\u0002\u0e41\u0e43\u0003',
	'\u0002\u0002\u0002\u0e42\u0e37\u0003\u0002\u0002\u0002\u0e42\u0e43\u0003',
	'\u0002\u0002\u0002\u0e43\u0e45\u0003\u0002\u0002\u0002\u0e44\u0e09\u0003',
	'\u0002\u0002\u0002\u0e44\u0e1a\u0003\u0002\u0002\u0002\u0e44\u0e2c\u0003',
	'\u0002\u0002\u0002\u0e45\u0263\u0003\u0002\u0002\u0002\u0e46\u0e47\u0005',
	'\u0318\u018d\u0002\u0e47\u0265\u0003\u0002\u0002\u0002\u0e48\u0e49\u0007',
	'\u0082\u0002\u0002\u0e49\u0e4a\u0007\u015e\u0002\u0002\u0e4a\u0e4b\u0007',
	'\u0083\u0002\u0002\u0e4b\u0e4c\u0007\u017d\u0002\u0002\u0e4c\u0e4d\u0007',
	'\u0084\u0002\u0002\u0e4d\u0e4e\u0007\u0085\u0002\u0002\u0e4e\u0e58\u0007',
	'\u017d\u0002\u0002\u0e4f\u0e50\u0007$\u0002\u0002\u0e50\u0e55\u0005',
	'\u02f8\u017d\u0002\u0e51\u0e52\u0007\u015c\u0002\u0002\u0e52\u0e54\u0005',
	'\u02f8\u017d\u0002\u0e53\u0e51\u0003\u0002\u0002\u0002\u0e54\u0e57\u0003',
	'\u0002\u0002\u0002\u0e55\u0e53\u0003\u0002\u0002\u0002\u0e55\u0e56\u0003',
	'\u0002\u0002\u0002\u0e56\u0e59\u0003\u0002\u0002\u0002\u0e57\u0e55\u0003',
	'\u0002\u0002\u0002\u0e58\u0e4f\u0003\u0002\u0002\u0002\u0e58\u0e59\u0003',
	'\u0002\u0002\u0002\u0e59\u0e5a\u0003\u0002\u0002\u0002\u0e5a\u0e5b\u0007',
	'\u015f\u0002\u0002\u0e5b\u0267\u0003\u0002\u0002\u0002\u0e5c\u0e5d\u0007',
	'\u0082\u0002\u0002\u0e5d\u0e5e\u0007\u015e\u0002\u0002\u0e5e\u0e5f\u0007',
	'\u017d\u0002\u0002\u0e5f\u0e60\t\u0015\u0002\u0002\u0e60\u0e66\u0007',
	'\u015f\u0002\u0002\u0e61\u0e62\u0007\u0082\u0002\u0002\u0e62\u0e63\u0007',
	'\u015e\u0002\u0002\u0e63\u0e64\u0007\u017c\u0002\u0002\u0e64\u0e66\u0007',
	'\u015f\u0002\u0002\u0e65\u0e5c\u0003\u0002\u0002\u0002\u0e65\u0e61\u0003',
	'\u0002\u0002\u0002\u0e66\u0269\u0003\u0002\u0002\u0002\u0e67\u0e6a\u0005',
	'\u0266\u0134\u0002\u0e68\u0e6a\u0005\u0268\u0135\u0002\u0e69\u0e67\u0003',
	'\u0002\u0002\u0002\u0e69\u0e68\u0003\u0002\u0002\u0002\u0e6a\u026b\u0003',
	'\u0002\u0002\u0002\u0e6b\u0e6d\u0005\u0270\u0139\u0002\u0e6c\u0e6e\u0005',
	'\u0148\u00a5\u0002\u0e6d\u0e6c\u0003\u0002\u0002\u0002\u0e6d\u0e6e\u0003',
	'\u0002\u0002\u0002\u0e6e\u0e70\u0003\u0002\u0002\u0002\u0e6f\u0e71\u0005',
	'\u026a\u0136\u0002\u0e70\u0e6f\u0003\u0002\u0002\u0002\u0e70\u0e71\u0003',
	'\u0002\u0002\u0002\u0e71\u0e76\u0003\u0002\u0002\u0002\u0e72\u0e74\u0007',
	'\u0018\u0002\u0002\u0e73\u0e72\u0003\u0002\u0002\u0002\u0e73\u0e74\u0003',
	'\u0002\u0002\u0002\u0e74\u0e75\u0003\u0002\u0002\u0002\u0e75\u0e77\u0005',
	'\u0318\u018d\u0002\u0e76\u0e73\u0003\u0002\u0002\u0002\u0e76\u0e77\u0003',
	'\u0002\u0002\u0002\u0e77\u026d\u0003\u0002\u0002\u0002\u0e78\u0e7a\u0005',
	'\u0270\u0139\u0002\u0e79\u0e7b\u0005\u026a\u0136\u0002\u0e7a\u0e79\u0003',
	'\u0002\u0002\u0002\u0e7a\u0e7b\u0003\u0002\u0002\u0002\u0e7b\u0e80\u0003',
	'\u0002\u0002\u0002\u0e7c\u0e7e\u0007\u0018\u0002\u0002\u0e7d\u0e7c\u0003',
	'\u0002\u0002\u0002\u0e7d\u0e7e\u0003\u0002\u0002\u0002\u0e7e\u0e7f\u0003',
	'\u0002\u0002\u0002\u0e7f\u0e81\u0005\u0318\u018d\u0002\u0e80\u0e7d\u0003',
	'\u0002\u0002\u0002\u0e80\u0e81\u0003\u0002\u0002\u0002\u0e81\u026f\u0003',
	'\u0002\u0002\u0002\u0e82\u0e83\u0005\u0318\u018d\u0002\u0e83\u0e84\u0007',
	'\u015a\u0002\u0002\u0e84\u0e85\u0005\u0318\u018d\u0002\u0e85\u0e88\u0003',
	'\u0002\u0002\u0002\u0e86\u0e88\u0005\u0318\u018d\u0002\u0e87\u0e82\u0003',
	'\u0002\u0002\u0002\u0e87\u0e86\u0003\u0002\u0002\u0002\u0e88\u0271\u0003',
	'\u0002\u0002\u0002\u0e89\u0e8a\u0005\u0318\u018d\u0002\u0e8a\u0e8b\u0007',
	'\u015a\u0002\u0002\u0e8b\u0e8d\u0003\u0002\u0002\u0002\u0e8c\u0e89\u0003',
	'\u0002\u0002\u0002\u0e8c\u0e8d\u0003\u0002\u0002\u0002\u0e8d\u0e8e\u0003',
	'\u0002\u0002\u0002\u0e8e\u0e8f\u0005\u0318\u018d\u0002\u0e8f\u0273\u0003',
	'\u0002\u0002\u0002\u0e90\u0e91\u0007\u015e\u0002\u0002\u0e91\u0e92\u0005',
	'\u01e2\u00f2\u0002\u0e92\u0e94\u0007\u015f\u0002\u0002\u0e93\u0e95\u0007',
	'\u0018\u0002\u0002\u0e94\u0e93\u0003\u0002\u0002\u0002\u0e94\u0e95\u0003',
	'\u0002\u0002\u0002\u0e95\u0e96\u0003\u0002\u0002\u0002\u0e96\u0e97\u0005',
	'\u0318\u018d\u0002\u0e97\u0275\u0003\u0002\u0002\u0002\u0e98\u0e9a\u0005',
	'\u02ac\u0157\u0002\u0e99\u0e9b\u0005\u02a8\u0155\u0002\u0e9a\u0e99\u0003',
	'\u0002\u0002\u0002\u0e9a\u0e9b\u0003\u0002\u0002\u0002\u0e9b\u0ea4\u0003',
	'\u0002\u0002\u0002\u0e9c\u0ea4\u0005\u02a8\u0155\u0002\u0e9d\u0e9f\u0005',
	'\u02ae\u0158\u0002\u0e9e\u0ea0\u0005\u02b0\u0159\u0002\u0e9f\u0e9e\u0003',
	'\u0002\u0002\u0002\u0e9f\u0ea0\u0003\u0002\u0002\u0002\u0ea0\u0ea4\u0003',
	'\u0002\u0002\u0002\u0ea1\u0ea4\u0005\u02b0\u0159\u0002\u0ea2\u0ea4\u0005',
	'\u02aa\u0156\u0002\u0ea3\u0e98\u0003\u0002\u0002\u0002\u0ea3\u0e9c\u0003',
	'\u0002\u0002\u0002\u0ea3\u0e9d\u0003\u0002\u0002\u0002\u0ea3\u0ea1\u0003',
	'\u0002\u0002\u0002\u0ea3\u0ea2\u0003\u0002\u0002\u0002\u0ea4\u0277\u0003',
	'\u0002\u0002\u0002\u0ea5\u0ea9\u0005\u0274\u013b\u0002\u0ea6\u0ea9\u0005',
	'\u026c\u0137\u0002\u0ea7\u0ea9\u0005\u027a\u013e\u0002\u0ea8\u0ea5\u0003',
	'\u0002\u0002\u0002\u0ea8\u0ea6\u0003\u0002\u0002\u0002\u0ea8\u0ea7\u0003',
	'\u0002\u0002\u0002\u0ea9\u0279\u0003\u0002\u0002\u0002\u0eaa\u0eab\u0005',
	'\u0318\u018d\u0002\u0eab\u0eac\u0007\u015e\u0002\u0002\u0eac\u0ead\u0007',
	'$\u0002\u0002\u0ead\u0eaf\u0005\u0278\u013d\u0002\u0eae\u0eb0\u0005',
	'\u0276\u013c\u0002\u0eaf\u0eae\u0003\u0002\u0002\u0002\u0eaf\u0eb0\u0003',
	'\u0002\u0002\u0002\u0eb0\u0ec0\u0003\u0002\u0002\u0002\u0eb1\u0eb2\u0007',
	'\u017e\u0002\u0002\u0eb2\u0eb3\u0007\u015e\u0002\u0002\u0eb3\u0eb4\u0005',
	'\u02f8\u017d\u0002\u0eb4\u0ebd\u0007\u015f\u0002\u0002\u0eb5\u0eb6\u0007',
	'\u015c\u0002\u0002\u0eb6\u0eb7\u0007\u017e\u0002\u0002\u0eb7\u0eb8\u0007',
	'\u015e\u0002\u0002\u0eb8\u0eb9\u0005\u02f8\u017d\u0002\u0eb9\u0eba\u0007',
	'\u015f\u0002\u0002\u0eba\u0ebc\u0003\u0002\u0002\u0002\u0ebb\u0eb5\u0003',
	'\u0002\u0002\u0002\u0ebc\u0ebf\u0003\u0002\u0002\u0002\u0ebd\u0ebb\u0003',
	'\u0002\u0002\u0002\u0ebd\u0ebe\u0003\u0002\u0002\u0002\u0ebe\u0ec1\u0003',
	'\u0002\u0002\u0002\u0ebf\u0ebd\u0003\u0002\u0002\u0002\u0ec0\u0eb1\u0003',
	'\u0002\u0002\u0002\u0ec0\u0ec1\u0003\u0002\u0002\u0002\u0ec1\u0ec2\u0003',
	'\u0002\u0002\u0002\u0ec2\u0ec4\u0007\u015f\u0002\u0002\u0ec3\u0ec5\u0005',
	'\u0318\u018d\u0002\u0ec4\u0ec3\u0003\u0002\u0002\u0002\u0ec4\u0ec5\u0003',
	'\u0002\u0002\u0002\u0ec5\u027b\u0003\u0002\u0002\u0002\u0ec6\u0ec7\u0007',
	'\u0016\u0002\u0002\u0ec7\u0ec8\u0005\u027e\u0140\u0002\u0ec8\u027d\u0003',
	'\u0002\u0002\u0002\u0ec9\u0eca\u0005\u02f8\u017d\u0002\u0eca\u027f\u0003',
	'\u0002\u0002\u0002\u0ecb\u0ecc\u0007\u010a\u0002\u0002\u0ecc\u0ecd\u0005',
	'\u0282\u0142\u0002\u0ecd\u0281\u0003\u0002\u0002\u0002\u0ece\u0ed3\u0005',
	'\u0284\u0143\u0002\u0ecf\u0ed0\u0007\u015c\u0002\u0002\u0ed0\u0ed2\u0005',
	'\u0284\u0143\u0002\u0ed1\u0ecf\u0003\u0002\u0002\u0002\u0ed2\u0ed5\u0003',
	'\u0002\u0002\u0002\u0ed3\u0ed1\u0003\u0002\u0002\u0002\u0ed3\u0ed4\u0003',
	'\u0002\u0002\u0002\u0ed4\u0283\u0003\u0002\u0002\u0002\u0ed5\u0ed3\u0003',
	'\u0002\u0002\u0002\u0ed6\u0ed7\u0005\u029c\u014f\u0002\u0ed7\u0285\u0003',
	"\u0002\u0002\u0002\u0ed8\u0ed9\u0007'\u0002\u0002\u0ed9\u0eda\u0007",
	'\u015e\u0002\u0002\u0eda\u0edb\u0005\u0280\u0141\u0002\u0edb\u0edd\u0007',
	'\u015f\u0002\u0002\u0edc\u0ede\u0007\u0018\u0002\u0002\u0edd\u0edc\u0003',
	'\u0002\u0002\u0002\u0edd\u0ede\u0003\u0002\u0002\u0002\u0ede\u0edf\u0003',
	'\u0002\u0002\u0002\u0edf\u0ee9\u0005\u0264\u0133\u0002\u0ee0\u0ee1\u0007',
	'\u015e\u0002\u0002\u0ee1\u0ee6\u0005\u0318\u018d\u0002\u0ee2\u0ee3\u0007',
	'\u015c\u0002\u0002\u0ee3\u0ee5\u0005\u0318\u018d\u0002\u0ee4\u0ee2\u0003',
	'\u0002\u0002\u0002\u0ee5\u0ee8\u0003\u0002\u0002\u0002\u0ee6\u0ee4\u0003',
	'\u0002\u0002\u0002\u0ee6\u0ee7\u0003\u0002\u0002\u0002\u0ee7\u0eea\u0003',
	'\u0002\u0002\u0002\u0ee8\u0ee6\u0003\u0002\u0002\u0002\u0ee9\u0ee0\u0003',
	'\u0002\u0002\u0002\u0ee9\u0eea\u0003\u0002\u0002\u0002\u0eea\u0eeb\u0003',
	'\u0002\u0002\u0002\u0eeb\u0eec\u0007\u015f\u0002\u0002\u0eec\u0287\u0003',
	'\u0002\u0002\u0002\u0eed\u0eee\u0007\u0013\u0002\u0002\u0eee\u0eef\u0007',
	'\u0014\u0002\u0002\u0eef\u0ef0\u0005\u028a\u0146\u0002\u0ef0\u0289\u0003',
	'\u0002\u0002\u0002\u0ef1\u0ef5\u0005\u028e\u0148\u0002\u0ef2\u0ef5\u0005',
	'\u0290\u0149\u0002\u0ef3\u0ef5\u0005\u028c\u0147\u0002\u0ef4\u0ef1\u0003',
	'\u0002\u0002\u0002\u0ef4\u0ef2\u0003\u0002\u0002\u0002\u0ef4\u0ef3\u0003',
	'\u0002\u0002\u0002\u0ef5\u028b\u0003\u0002\u0002\u0002\u0ef6\u0ef7\u0007',
	'\u015e\u0002\u0002\u0ef7\u0ef8\u0007\u015f\u0002\u0002\u0ef8\u028d\u0003',
	'\u0002\u0002\u0002\u0ef9\u0efa\t\u0016\u0002\u0002\u0efa\u0efb\u0007',
	'\u015e\u0002\u0002\u0efb\u0f00\u0005\u02f8\u017d\u0002\u0efc\u0efd\u0007',
	'\u015c\u0002\u0002\u0efd\u0eff\u0005\u02f8\u017d\u0002\u0efe\u0efc\u0003',
	'\u0002\u0002\u0002\u0eff\u0f02\u0003\u0002\u0002\u0002\u0f00\u0efe\u0003',
	'\u0002\u0002\u0002\u0f00\u0f01\u0003\u0002\u0002\u0002\u0f01\u0f03\u0003',
	'\u0002\u0002\u0002\u0f02\u0f00\u0003\u0002\u0002\u0002\u0f03\u0f04\u0007',
	'\u015f\u0002\u0002\u0f04\u028f\u0003\u0002\u0002\u0002\u0f05\u0f0a\u0005',
	'\u029e\u0150\u0002\u0f06\u0f07\u0007\u0097\u0002\u0002\u0f07\u0f0b\u0007',
	'\u00e7\u0002\u0002\u0f08\u0f09\u0007\u0097\u0002\u0002\u0f09\u0f0b\u0007',
	'\u00e8\u0002\u0002\u0f0a\u0f06\u0003\u0002\u0002\u0002\u0f0a\u0f08\u0003',
	'\u0002\u0002\u0002\u0f0a\u0f0b\u0003\u0002\u0002\u0002\u0f0b\u0f19\u0003',
	'\u0002\u0002\u0002\u0f0c\u0f0d\u0007\u00f5\u0002\u0002\u0f0d\u0f0e\u0007',
	'\u00f6\u0002\u0002\u0f0e\u0f0f\u0007\u015e\u0002\u0002\u0f0f\u0f14\u0005',
	'\u0292\u014a\u0002\u0f10\u0f11\u0007\u015c\u0002\u0002\u0f11\u0f13\u0005',
	'\u0292\u014a\u0002\u0f12\u0f10\u0003\u0002\u0002\u0002\u0f13\u0f16\u0003',
	'\u0002\u0002\u0002\u0f14\u0f12\u0003\u0002\u0002\u0002\u0f14\u0f15\u0003',
	'\u0002\u0002\u0002\u0f15\u0f17\u0003\u0002\u0002\u0002\u0f16\u0f14\u0003',
	'\u0002\u0002\u0002\u0f17\u0f18\u0007\u015f\u0002\u0002\u0f18\u0f1a\u0003',
	'\u0002\u0002\u0002\u0f19\u0f0c\u0003\u0002\u0002\u0002\u0f19\u0f1a\u0003',
	'\u0002\u0002\u0002\u0f1a\u0291\u0003\u0002\u0002\u0002\u0f1b\u0f1e\u0005',
	'\u0294\u014b\u0002\u0f1c\u0f1e\u0005\u0296\u014c\u0002\u0f1d\u0f1b\u0003',
	'\u0002\u0002\u0002\u0f1d\u0f1c\u0003\u0002\u0002\u0002\u0f1e\u0293\u0003',
	'\u0002\u0002\u0002\u0f1f\u0f21\u0007\u015e\u0002\u0002\u0f20\u0f22\u0005',
	'\u02f8\u017d\u0002\u0f21\u0f20\u0003\u0002\u0002\u0002\u0f21\u0f22\u0003',
	'\u0002\u0002\u0002\u0f22\u0f27\u0003\u0002\u0002\u0002\u0f23\u0f24\u0007',
	'\u015c\u0002\u0002\u0f24\u0f26\u0005\u02f8\u017d\u0002\u0f25\u0f23\u0003',
	'\u0002\u0002\u0002\u0f26\u0f29\u0003\u0002\u0002\u0002\u0f27\u0f25\u0003',
	'\u0002\u0002\u0002\u0f27\u0f28\u0003\u0002\u0002\u0002\u0f28\u0f2a\u0003',
	'\u0002\u0002\u0002\u0f29\u0f27\u0003\u0002\u0002\u0002\u0f2a\u0f2b\u0007',
	'\u015f\u0002\u0002\u0f2b\u0295\u0003\u0002\u0002\u0002\u0f2c\u0f2d\u0005',
	'\u02f8\u017d\u0002\u0f2d\u0297\u0003\u0002\u0002\u0002\u0f2e\u0f2f\u0007',
	'\u0015\u0002\u0002\u0f2f\u0f30\u0005\u029a\u014e\u0002\u0f30\u0299\u0003',
	'\u0002\u0002\u0002\u0f31\u0f32\u0005\u02f8\u017d\u0002\u0f32\u029b\u0003',
	'\u0002\u0002\u0002\u0f33\u0f34\u0007\u015e\u0002\u0002\u0f34\u0f35\u0005',
	'\u029e\u0150\u0002\u0f35\u0f36\u0007\u015f\u0002\u0002\u0f36\u029d\u0003',
	'\u0002\u0002\u0002\u0f37\u0f39\u0005\u02f8\u017d\u0002\u0f38\u0f3a\u0005',
	'\u02a0\u0151\u0002\u0f39\u0f38\u0003\u0002\u0002\u0002\u0f39\u0f3a\u0003',
	'\u0002\u0002\u0002\u0f3a\u029f\u0003\u0002\u0002\u0002\u0f3b\u0f3c\u0007',
	'\u015c\u0002\u0002\u0f3c\u0f3e\u0005\u02f8\u017d\u0002\u0f3d\u0f3b\u0003',
	'\u0002\u0002\u0002\u0f3e\u0f3f\u0003\u0002\u0002\u0002\u0f3f\u0f3d\u0003',
	'\u0002\u0002\u0002\u0f3f\u0f40\u0003\u0002\u0002\u0002\u0f40\u02a1\u0003',
	'\u0002\u0002\u0002\u0f41\u0f44\u0005\u029c\u014f\u0002\u0f42\u0f44\u0005',
	'\u029e\u0150\u0002\u0f43\u0f41\u0003\u0002\u0002\u0002\u0f43\u0f42\u0003',
	'\u0002\u0002\u0002\u0f44\u02a3\u0003\u0002\u0002\u0002\u0f45\u0f46\u0007',
	'\u015e\u0002\u0002\u0f46\u0f4b\u0005\u01ac\u00d7\u0002\u0f47\u0f48\u0007',
	'\u015c\u0002\u0002\u0f48\u0f4a\u0005\u01ac\u00d7\u0002\u0f49\u0f47\u0003',
	'\u0002\u0002\u0002\u0f4a\u0f4d\u0003\u0002\u0002\u0002\u0f4b\u0f49\u0003',
	'\u0002\u0002\u0002\u0f4b\u0f4c\u0003\u0002\u0002\u0002\u0f4c\u0f4e\u0003',
	'\u0002\u0002\u0002\u0f4d\u0f4b\u0003\u0002\u0002\u0002\u0f4e\u0f4f\u0007',
	'\u015f\u0002\u0002\u0f4f\u02a5\u0003\u0002\u0002\u0002\u0f50\u0f55\u0005',
	'\u01ac\u00d7\u0002\u0f51\u0f52\u0007\u015c\u0002\u0002\u0f52\u0f54\u0005',
	'\u01ac\u00d7\u0002\u0f53\u0f51\u0003\u0002\u0002\u0002\u0f54\u0f57\u0003',
	'\u0002\u0002\u0002\u0f55\u0f53\u0003\u0002\u0002\u0002\u0f55\u0f56\u0003',
	'\u0002\u0002\u0002\u0f56\u02a7\u0003\u0002\u0002\u0002\u0f57\u0f55\u0003',
	'\u0002\u0002\u0002\u0f58\u0f59\u0007\u0012\u0002\u0002\u0f59\u0f5a\u0007',
	'\u0014\u0002\u0002\u0f5a\u0f5f\u0005\u01ac\u00d7\u0002\u0f5b\u0f5c\u0007',
	'\u015c\u0002\u0002\u0f5c\u0f5e\u0005\u01ac\u00d7\u0002\u0f5d\u0f5b\u0003',
	'\u0002\u0002\u0002\u0f5e\u0f61\u0003\u0002\u0002\u0002\u0f5f\u0f5d\u0003',
	'\u0002\u0002\u0002\u0f5f\u0f60\u0003\u0002\u0002\u0002\u0f60\u02a9\u0003',
	'\u0002\u0002\u0002\u0f61\u0f5f\u0003\u0002\u0002\u0002\u0f62\u0f63\u0007',
	'5\u0002\u0002\u0f63\u0f64\u0007\u0014\u0002\u0002\u0f64\u0f65\u0005',
	'\u02a2\u0152\u0002\u0f65\u02ab\u0003\u0002\u0002\u0002\u0f66\u0f67\u0007',
	'%\u0002\u0002\u0f67\u0f68\u0007\u0014\u0002\u0002\u0f68\u0f69\u0005',
	'\u02a2\u0152\u0002\u0f69\u02ad\u0003\u0002\u0002\u0002\u0f6a\u0f6b\u0007',
	'6\u0002\u0002\u0f6b\u0f6c\u0007\u0014\u0002\u0002\u0f6c\u0f6d\u0005',
	'\u02a2\u0152\u0002\u0f6d\u02af\u0003\u0002\u0002\u0002\u0f6e\u0f6f\u0007',
	'7\u0002\u0002\u0f6f\u0f72\u0007\u0014\u0002\u0002\u0f70\u0f73\u0005',
	'\u02a4\u0153\u0002\u0f71\u0f73\u0005\u02a6\u0154\u0002\u0f72\u0f70\u0003',
	'\u0002\u0002\u0002\u0f72\u0f71\u0003\u0002\u0002\u0002\u0f73\u02b1\u0003',
	'\u0002\u0002\u0002\u0f74\u0f75\u0005\u02b4\u015b\u0002\u0f75\u0f84\u0007',
	'\u015e\u0002\u0002\u0f76\u0f85\u0007\u016e\u0002\u0002\u0f77\u0f79\t',
	'\u0013\u0002\u0002\u0f78\u0f77\u0003\u0002\u0002\u0002\u0f78\u0f79\u0003',
	'\u0002\u0002\u0002\u0f79\u0f82\u0003\u0002\u0002\u0002\u0f7a\u0f7f\u0005',
	'\u0234\u011b\u0002\u0f7b\u0f7c\u0007\u015c\u0002\u0002\u0f7c\u0f7e\u0005',
	'\u0234\u011b\u0002\u0f7d\u0f7b\u0003\u0002\u0002\u0002\u0f7e\u0f81\u0003',
	'\u0002\u0002\u0002\u0f7f\u0f7d\u0003\u0002\u0002\u0002\u0f7f\u0f80\u0003',
	'\u0002\u0002\u0002\u0f80\u0f83\u0003\u0002\u0002\u0002\u0f81\u0f7f\u0003',
	'\u0002\u0002\u0002\u0f82\u0f7a\u0003\u0002\u0002\u0002\u0f82\u0f83\u0003',
	'\u0002\u0002\u0002\u0f83\u0f85\u0003\u0002\u0002\u0002\u0f84\u0f76\u0003',
	'\u0002\u0002\u0002\u0f84\u0f78\u0003\u0002\u0002\u0002\u0f85\u0f86\u0003',
	'\u0002\u0002\u0002\u0f86\u0f89\u0007\u015f\u0002\u0002\u0f87\u0f88\u0007',
	'\u00f4\u0002\u0002\u0f88\u0f8a\u0005\u023c\u011f\u0002\u0f89\u0f87\u0003',
	'\u0002\u0002\u0002\u0f89\u0f8a\u0003\u0002\u0002\u0002\u0f8a\u02b3\u0003',
	'\u0002\u0002\u0002\u0f8b\u0f8e\u0005\u031a\u018e\u0002\u0f8c\u0f8e\u0005',
	'\u0320\u0191\u0002\u0f8d\u0f8b\u0003\u0002\u0002\u0002\u0f8d\u0f8c\u0003',
	'\u0002\u0002\u0002\u0f8e\u02b5\u0003\u0002\u0002\u0002\u0f8f\u0f90\u0007',
	'\u0087\u0002\u0002\u0f90\u0f91\u0007\u015e\u0002\u0002\u0f91\u0f92\u0005',
	'\u02f8\u017d\u0002\u0f92\u0f93\u0007\u0018\u0002\u0002\u0f93\u0f94\u0005',
	'\u01d6\u00ec\u0002\u0f94\u0f95\u0007\u015f\u0002\u0002\u0f95\u02b7\u0003',
	'\u0002\u0002\u0002\u0f96\u0f97\u0007\u00a4\u0002\u0002\u0f97\u0f9d\u0005',
	'\u02f8\u017d\u0002\u0f98\u0f99\u0007\u00a5\u0002\u0002\u0f99\u0f9a\u0005',
	'\u02f8\u017d\u0002\u0f9a\u0f9b\u0007\u00a6\u0002\u0002\u0f9b\u0f9c\u0005',
	'\u02f8\u017d\u0002\u0f9c\u0f9e\u0003\u0002\u0002\u0002\u0f9d\u0f98\u0003',
	'\u0002\u0002\u0002\u0f9e\u0f9f\u0003\u0002\u0002\u0002\u0f9f\u0f9d\u0003',
	'\u0002\u0002\u0002\u0f9f\u0fa0\u0003\u0002\u0002\u0002\u0fa0\u0fa3\u0003',
	'\u0002\u0002\u0002\u0fa1\u0fa2\u0007\u00a7\u0002\u0002\u0fa2\u0fa4\u0005',
	'\u02f8\u017d\u0002\u0fa3\u0fa1\u0003\u0002\u0002\u0002\u0fa3\u0fa4\u0003',
	'\u0002\u0002\u0002\u0fa4\u0fa5\u0003\u0002\u0002\u0002\u0fa5\u0fa6\u0007',
	'\u00a8\u0002\u0002\u0fa6\u02b9\u0003\u0002\u0002\u0002\u0fa7\u0fad\u0007',
	'\u00a4\u0002\u0002\u0fa8\u0fa9\u0007\u00a5\u0002\u0002\u0fa9\u0faa\u0005',
	'\u02f8\u017d\u0002\u0faa\u0fab\u0007\u00a6\u0002\u0002\u0fab\u0fac\u0005',
	'\u02f8\u017d\u0002\u0fac\u0fae\u0003\u0002\u0002\u0002\u0fad\u0fa8\u0003',
	'\u0002\u0002\u0002\u0fae\u0faf\u0003\u0002\u0002\u0002\u0faf\u0fad\u0003',
	'\u0002\u0002\u0002\u0faf\u0fb0\u0003\u0002\u0002\u0002\u0fb0\u0fb3\u0003',
	'\u0002\u0002\u0002\u0fb1\u0fb2\u0007\u00a7\u0002\u0002\u0fb2\u0fb4\u0005',
	'\u02f8\u017d\u0002\u0fb3\u0fb1\u0003\u0002\u0002\u0002\u0fb3\u0fb4\u0003',
	'\u0002\u0002\u0002\u0fb4\u0fb5\u0003\u0002\u0002\u0002\u0fb5\u0fb6\u0007',
	'\u00a8\u0002\u0002\u0fb6\u02bb\u0003\u0002\u0002\u0002\u0fb7\u0fb8\u0007',
	'\u012f\u0002\u0002\u0fb8\u0fb9\u0007\u015e\u0002\u0002\u0fb9\u0fbc\u0005',
	'\u02f8\u017d\u0002\u0fba\u0fbb\u0007M\u0002\u0002\u0fbb\u0fbd\u0005',
	'\u02be\u0160\u0002\u0fbc\u0fba\u0003\u0002\u0002\u0002\u0fbc\u0fbd\u0003',
	'\u0002\u0002\u0002\u0fbd\u0fbe\u0003\u0002\u0002\u0002\u0fbe\u0fbf\u0007',
	'\u015f\u0002\u0002\u0fbf\u02bd\u0003\u0002\u0002\u0002\u0fc0\u0fc1\t',
	'\u0017\u0002\u0002\u0fc1\u02bf\u0003\u0002\u0002\u0002\u0fc2\u0fc3\u0007',
	'\u012e\u0002\u0002\u0fc3\u0fc4\u0007\u015e\u0002\u0002\u0fc4\u0fc5\u0005',
	'\u02c2\u0162\u0002\u0fc5\u0fc6\u0007\u0017\u0002\u0002\u0fc6\u0fc7\u0005',
	'\u02f8\u017d\u0002\u0fc7\u0fc8\u0007\u015f\u0002\u0002\u0fc8\u02c1\u0003',
	'\u0002\u0002\u0002\u0fc9\u0fca\t\u0018\u0002\u0002\u0fca\u02c3\u0003',
	'\u0002\u0002\u0002\u0fcb\u0fd8\u0005\u02d2\u016a\u0002\u0fcc\u0fd8\u0007',
	'\u017d\u0002\u0002\u0fcd\u0fd8\u0005\u02ca\u0166\u0002\u0fce\u0fd8\u0005',
	'\u02cc\u0167\u0002\u0fcf\u0fd8\u0005\u02ce\u0168\u0002\u0fd0\u0fd8\u0007',
	'\u0178\u0002\u0002\u0fd1\u0fd8\u0005\u02c6\u0164\u0002\u0fd2\u0fd8\u0007',
	'\u017a\u0002\u0002\u0fd3\u0fd8\u0007\u017b\u0002\u0002\u0fd4\u0fd8\u0005',
	'\u02c8\u0165\u0002\u0fd5\u0fd8\u0005\u0304\u0183\u0002\u0fd6\u0fd8\u0007',
	'B\u0002\u0002\u0fd7\u0fcb\u0003\u0002\u0002\u0002\u0fd7\u0fcc\u0003',
	'\u0002\u0002\u0002\u0fd7\u0fcd\u0003\u0002\u0002\u0002\u0fd7\u0fce\u0003',
	'\u0002\u0002\u0002\u0fd7\u0fcf\u0003\u0002\u0002\u0002\u0fd7\u0fd0\u0003',
	'\u0002\u0002\u0002\u0fd7\u0fd1\u0003\u0002\u0002\u0002\u0fd7\u0fd2\u0003',
	'\u0002\u0002\u0002\u0fd7\u0fd3\u0003\u0002\u0002\u0002\u0fd7\u0fd4\u0003',
	'\u0002\u0002\u0002\u0fd7\u0fd5\u0003\u0002\u0002\u0002\u0fd7\u0fd6\u0003',
	'\u0002\u0002\u0002\u0fd8\u02c5\u0003\u0002\u0002\u0002\u0fd9\u0fdb\u0007',
	'\u0178\u0002\u0002\u0fda\u0fdc\u0007\u0178\u0002\u0002\u0fdb\u0fda\u0003',
	'\u0002\u0002\u0002\u0fdc\u0fdd\u0003\u0002\u0002\u0002\u0fdd\u0fdb\u0003',
	'\u0002\u0002\u0002\u0fdd\u0fde\u0003\u0002\u0002\u0002\u0fde\u02c7\u0003',
	'\u0002\u0002\u0002\u0fdf\u0fe0\u0007\u0180\u0002\u0002\u0fe0\u0fe1\u0007',
	'\u0179\u0002\u0002\u0fe1\u02c9\u0003\u0002\u0002\u0002\u0fe2\u0fe3\u0007',
	'W\u0002\u0002\u0fe3\u0fe6\u0007\u0178\u0002\u0002\u0fe4\u0fe6\u0007',
	'\u00f0\u0002\u0002\u0fe5\u0fe2\u0003\u0002\u0002\u0002\u0fe5\u0fe4\u0003',
	'\u0002\u0002\u0002\u0fe6\u02cb\u0003\u0002\u0002\u0002\u0fe7\u0fe8\u0007',
	'Y\u0002\u0002\u0fe8\u0feb\u0007\u0178\u0002\u0002\u0fe9\u0feb\u0007',
	'\u00f1\u0002\u0002\u0fea\u0fe7\u0003\u0002\u0002\u0002\u0fea\u0fe9\u0003',
	'\u0002\u0002\u0002\u0feb\u02cd\u0003\u0002\u0002\u0002\u0fec\u0fed\u0007',
	'Z\u0002\u0002\u0fed\u0fee\u0007\u0178\u0002\u0002\u0fee\u02cf\u0003',
	'\u0002\u0002\u0002\u0fef\u0ff0\t\u0019\u0002\u0002\u0ff0\u02d1\u0003',
	'\u0002\u0002\u0002\u0ff1\u0ff2\u0005\u02d0\u0169\u0002\u0ff2\u0ff3\u0005',
	'\u02d6\u016c\u0002\u0ff3\u02d3\u0003\u0002\u0002\u0002\u0ff4\u0ff5\u0007',
	'\u015e\u0002\u0002\u0ff5\u0ff6\u0005\u02d0\u0169\u0002\u0ff6\u0ff7\u0007',
	'\u015f\u0002\u0002\u0ff7\u0ff8\u0005\u02d6\u016c\u0002\u0ff8\u1004\u0003',
	'\u0002\u0002\u0002\u0ff9\u0ffa\u0007]\u0002\u0002\u0ffa\u0ffb\u0005',
	'\u02d0\u0169\u0002\u0ffb\u0ffc\u0005\u02d6\u016c\u0002\u0ffc\u1004\u0003',
	'\u0002\u0002\u0002\u0ffd\u0ffe\u0007]\u0002\u0002\u0ffe\u0fff\u0007',
	'\u015e\u0002\u0002\u0fff\u1000\u0005\u02f8\u017d\u0002\u1000\u1001\u0007',
	'\u015f\u0002\u0002\u1001\u1002\u0005\u02d6\u016c\u0002\u1002\u1004\u0003',
	'\u0002\u0002\u0002\u1003\u0ff4\u0003\u0002\u0002\u0002\u1003\u0ff9\u0003',
	'\u0002\u0002\u0002\u1003\u0ffd\u0003\u0002\u0002\u0002\u1004\u02d5\u0003',
	'\u0002\u0002\u0002\u1005\u1006\u0007\u010c\u0002\u0002\u1006\u1007\u0007',
	'M\u0002\u0002\u1007\u1012\u0007\u010f\u0002\u0002\u1008\u1009\u0007',
	'\u0111\u0002\u0002\u1009\u100a\u0007M\u0002\u0002\u100a\u1012\u0007',
	'\u0115\u0002\u0002\u100b\u1012\u0007\u010c\u0002\u0002\u100c\u1012\u0007',
	'\u010f\u0002\u0002\u100d\u1012\u0007\u0111\u0002\u0002\u100e\u1012\u0007',
	'\u0113\u0002\u0002\u100f\u1012\u0007\u0114\u0002\u0002\u1010\u1012\u0007',
	'\u0115\u0002\u0002\u1011\u1005\u0003\u0002\u0002\u0002\u1011\u1008\u0003',
	'\u0002\u0002\u0002\u1011\u100b\u0003\u0002\u0002\u0002\u1011\u100c\u0003',
	'\u0002\u0002\u0002\u1011\u100d\u0003\u0002\u0002\u0002\u1011\u100e\u0003',
	'\u0002\u0002\u0002\u1011\u100f\u0003\u0002\u0002\u0002\u1011\u1010\u0003',
	'\u0002\u0002\u0002\u1012\u02d7\u0003\u0002\u0002\u0002\u1013\u101f\u0005',
	'\u02c4\u0163\u0002\u1014\u101f\u0005\u02d4\u016b\u0002\u1015\u101f\u0005',
	'\u02b6\u015c\u0002\u1016\u101f\u0005\u02c0\u0161\u0002\u1017\u101f\u0005',
	'\u02bc\u015f\u0002\u1018\u101f\u0005\u02b8\u015d\u0002\u1019\u101f\u0005',
	'\u02ba\u015e\u0002\u101a\u101f\u0005\u02fa\u017e\u0002\u101b\u101f\u0005',
	'\u02b2\u015a\u0002\u101c\u101f\u0005\u024a\u0126\u0002\u101d\u101f\u0005',
	'\u029c\u014f\u0002\u101e\u1013\u0003\u0002\u0002\u0002\u101e\u1014\u0003',
	'\u0002\u0002\u0002\u101e\u1015\u0003\u0002\u0002\u0002\u101e\u1016\u0003',
	'\u0002\u0002\u0002\u101e\u1017\u0003\u0002\u0002\u0002\u101e\u1018\u0003',
	'\u0002\u0002\u0002\u101e\u1019\u0003\u0002\u0002\u0002\u101e\u101a\u0003',
	'\u0002\u0002\u0002\u101e\u101b\u0003\u0002\u0002\u0002\u101e\u101c\u0003',
	'\u0002\u0002\u0002\u101e\u101d\u0003\u0002\u0002\u0002\u101f\u02d9\u0003',
	'\u0002\u0002\u0002\u1020\u1021\t\u001a\u0002\u0002\u1021\u02db\u0003',
	'\u0002\u0002\u0002\u1022\u102c\u0007B\u0002\u0002\u1023\u102c\u0007',
	'\u0003\u0002\u0002\u1024\u102c\u0007\u0004\u0002\u0002\u1025\u1026\u0007',
	'\t\u0002\u0002\u1026\u102c\u0007B\u0002\u0002\u1027\u1028\u0007\t\u0002',
	'\u0002\u1028\u102c\u0007\u0003\u0002\u0002\u1029\u102a\u0007\t\u0002',
	'\u0002\u102a\u102c\u0007\u0004\u0002\u0002\u102b\u1022\u0003\u0002\u0002',
	'\u0002\u102b\u1023\u0003\u0002\u0002\u0002\u102b\u1024\u0003\u0002\u0002',
	'\u0002\u102b\u1025\u0003\u0002\u0002\u0002\u102b\u1027\u0003\u0002\u0002',
	'\u0002\u102b\u1029\u0003\u0002\u0002\u0002\u102c\u02dd\u0003\u0002\u0002',
	'\u0002\u102d\u102e\u0007\u0175\u0002\u0002\u102e\u02df\u0003\u0002\u0002',
	'\u0002\u102f\u1030\t\u001b\u0002\u0002\u1030\u02e1\u0003\u0002\u0002',
	'\u0002\u1031\u1032\t\u001c\u0002\u0002\u1032\u02e3\u0003\u0002\u0002',
	'\u0002\u1033\u1034\u0007\u0174\u0002\u0002\u1034\u02e5\u0003\u0002\u0002',
	'\u0002\u1035\u1036\u0007\u0171\u0002\u0002\u1036\u02e7\u0003\u0002\u0002',
	'\u0002\u1037\u1038\u0007\u0173\u0002\u0002\u1038\u02e9\u0003\u0002\u0002',
	'\u0002\u1039\u103a\t\u001d\u0002\u0002\u103a\u02eb\u0003\u0002\u0002',
	'\u0002\u103b\u1041\u0005\u02ea\u0176\u0002\u103c\u1041\u0007\u0167\u0002',
	'\u0002\u103d\u1041\u0007\u0168\u0002\u0002\u103e\u1041\u0007\u0169\u0002',
	'\u0002\u103f\u1041\u0007\u016a\u0002\u0002\u1040\u103b\u0003\u0002\u0002',
	'\u0002\u1040\u103c\u0003\u0002\u0002\u0002\u1040\u103d\u0003\u0002\u0002',
	'\u0002\u1040\u103e\u0003\u0002\u0002\u0002\u1040\u103f\u0003\u0002\u0002',
	'\u0002\u1041\u02ed\u0003\u0002\u0002\u0002\u1042\u1043\u0007A\u0002',
	'\u0002\u1043\u1044\u0007\u001a\u0002\u0002\u1044\u1045\u0007\u0017\u0002',
	'\u0002\u1045\u02ef\u0003\u0002\u0002\u0002\u1046\u104e\u0007\u0164\u0002',
	'\u0002\u1047\u104e\u0007\u0165\u0002\u0002\u1048\u104e\u0007\u0166\u0002',
	'\u0002\u1049\u104a\u0007A\u0002\u0002\u104a\u104b\u0007\t\u0002\u0002',
	'\u104b\u104c\u0007\u001a\u0002\u0002\u104c\u104e\u0007\u0017\u0002\u0002',
	'\u104d\u1046\u0003\u0002\u0002\u0002\u104d\u1047\u0003\u0002\u0002\u0002',
	'\u104d\u1048\u0003\u0002\u0002\u0002\u104d\u1049\u0003\u0002\u0002\u0002',
	'\u104e\u02f1\u0003\u0002\u0002\u0002\u104f\u1050\u0007\t\u0002\u0002',
	'\u1050\u02f3\u0003\u0002\u0002\u0002\u1051\u1052\u0007\u0007\u0002\u0002',
	'\u1052\u02f5\u0003\u0002\u0002\u0002\u1053\u1054\u0007\b\u0002\u0002',
	'\u1054\u02f7\u0003\u0002\u0002\u0002\u1055\u1056\b\u017d\u0001\u0002',
	'\u1056\u105f\u0005\u02d8\u016d\u0002\u1057\u1058\u0007\u0160\u0002\u0002',
	'\u1058\u1059\u0005\u02f8\u017d\u0002\u1059\u105a\u0007\u0161\u0002\u0002',
	'\u105a\u105e\u0003\u0002\u0002\u0002\u105b\u105c\u0007\u015a\u0002\u0002',
	'\u105c\u105e\u0005\u0318\u018d\u0002\u105d\u1057\u0003\u0002\u0002\u0002',
	'\u105d\u105b\u0003\u0002\u0002\u0002\u105e\u1061\u0003\u0002\u0002\u0002',
	'\u105f\u105d\u0003\u0002\u0002\u0002\u105f\u1060\u0003\u0002\u0002\u0002',
	'\u1060\u106f\u0003\u0002\u0002\u0002\u1061\u105f\u0003\u0002\u0002\u0002',
	'\u1062\u1063\u0005\u02da\u016e\u0002\u1063\u1064\u0005\u02f8\u017d\u0011',
	'\u1064\u106f\u0003\u0002\u0002\u0002\u1065\u1066\u0007\r\u0002\u0002',
	'\u1066\u106f\u0005\u02fa\u017e\u0002\u1067\u1068\u0005\u02f2\u017a\u0002',
	'\u1068\u1069\u0005\u02f8\u017d\u0006\u1069\u106f\u0003\u0002\u0002\u0002',
	'\u106a\u106b\u0007\u015e\u0002\u0002\u106b\u106c\u0005\u02f8\u017d\u0002',
	'\u106c\u106d\u0007\u015f\u0002\u0002\u106d\u106f\u0003\u0002\u0002\u0002',
	'\u106e\u1055\u0003\u0002\u0002\u0002\u106e\u1062\u0003\u0002\u0002\u0002',
	'\u106e\u1065\u0003\u0002\u0002\u0002\u106e\u1067\u0003\u0002\u0002\u0002',
	'\u106e\u106a\u0003\u0002\u0002\u0002\u106f\u109e\u0003\u0002\u0002\u0002',
	'\u1070\u1071\f\u000f\u0002\u0002\u1071\u1072\u0005\u02de\u0170\u0002',
	'\u1072\u1073\u0005\u02f8\u017d\u0010\u1073\u109d\u0003\u0002\u0002\u0002',
	'\u1074\u1075\f\u000e\u0002\u0002\u1075\u1076\u0005\u02e0\u0171\u0002',
	'\u1076\u1077\u0005\u02f8\u017d\u000f\u1077\u109d\u0003\u0002\u0002\u0002',
	'\u1078\u1079\f\r\u0002\u0002\u1079\u107a\u0005\u02e2\u0172\u0002\u107a',
	'\u107b\u0005\u02f8\u017d\u000e\u107b\u109d\u0003\u0002\u0002\u0002\u107c',
	'\u107d\f\f\u0002\u0002\u107d\u107e\u0005\u02e4\u0173\u0002\u107e\u107f',
	'\u0005\u02f8\u017d\r\u107f\u109d\u0003\u0002\u0002\u0002\u1080\u1081',
	'\f\u000b\u0002\u0002\u1081\u1082\u0005\u02e6\u0174\u0002\u1082\u1083',
	'\u0005\u02f8\u017d\f\u1083\u109d\u0003\u0002\u0002\u0002\u1084\u1085',
	'\f\n\u0002\u0002\u1085\u1086\u0005\u02e8\u0175\u0002\u1086\u1087\u0005',
	'\u02f8\u017d\u000b\u1087\u109d\u0003\u0002\u0002\u0002\u1088\u108b\f',
	'\u0007\u0002\u0002\u1089\u108c\u0005\u02f0\u0179\u0002\u108a\u108c\u0005',
	'\u02ee\u0178\u0002\u108b\u1089\u0003\u0002\u0002\u0002\u108b\u108a\u0003',
	'\u0002\u0002\u0002\u108c\u108d\u0003\u0002\u0002\u0002\u108d\u108e\u0005',
	'\u02f8\u017d\b\u108e\u109d\u0003\u0002\u0002\u0002\u108f\u1090\f\u0005',
	'\u0002\u0002\u1090\u1091\u0005\u02f4\u017b\u0002\u1091\u1092\u0005\u02f8',
	'\u017d\u0006\u1092\u109d\u0003\u0002\u0002\u0002\u1093\u1094\f\u0004',
	'\u0002\u0002\u1094\u1095\u0005\u02f6\u017c\u0002\u1095\u1096\u0005\u02f8',
	'\u017d\u0005\u1096\u109d\u0003\u0002\u0002\u0002\u1097\u1098\f\u0010',
	'\u0002\u0002\u1098\u1099\u0007A\u0002\u0002\u1099\u109d\u0005\u02dc',
	'\u016f\u0002\u109a\u109b\f\t\u0002\u0002\u109b\u109d\u0005\u02fc\u017f',
	'\u0002\u109c\u1070\u0003\u0002\u0002\u0002\u109c\u1074\u0003\u0002\u0002',
	'\u0002\u109c\u1078\u0003\u0002\u0002\u0002\u109c\u107c\u0003\u0002\u0002',
	'\u0002\u109c\u1080\u0003\u0002\u0002\u0002\u109c\u1084\u0003\u0002\u0002',
	'\u0002\u109c\u1088\u0003\u0002\u0002\u0002\u109c\u108f\u0003\u0002\u0002',
	'\u0002\u109c\u1093\u0003\u0002\u0002\u0002\u109c\u1097\u0003\u0002\u0002',
	'\u0002\u109c\u109a\u0003\u0002\u0002\u0002\u109d\u10a0\u0003\u0002\u0002',
	'\u0002\u109e\u109c\u0003\u0002\u0002\u0002\u109e\u109f\u0003\u0002\u0002',
	'\u0002\u109f\u02f9\u0003\u0002\u0002\u0002\u10a0\u109e\u0003\u0002\u0002',
	'\u0002\u10a1\u10a2\u0007\u015e\u0002\u0002\u10a2\u10a3\u0005\u01f2\u00fa',
	'\u0002\u10a3\u10a4\u0007\u015f\u0002\u0002\u10a4\u02fb\u0003\u0002\u0002',
	'\u0002\u10a5\u10a6\u0005\u02ec\u0177\u0002\u10a6\u10a7\u0005\u02f8\u017d',
	'\u0002\u10a7\u10ac\u0003\u0002\u0002\u0002\u10a8\u10ac\u0005\u02fe\u0180',
	'\u0002\u10a9\u10aa\u0007\t\u0002\u0002\u10aa\u10ac\u0005\u0302\u0182',
	'\u0002\u10ab\u10a5\u0003\u0002\u0002\u0002\u10ab\u10a8\u0003\u0002\u0002',
	'\u0002\u10ab\u10a9\u0003\u0002\u0002\u0002\u10ac\u02fd\u0003\u0002\u0002',
	'\u0002\u10ad\u10ae\u0007\u00b6\u0002\u0002\u10ae\u10bb\u0005\u0300\u0181',
	'\u0002\u10af\u10b0\u0007\u00ce\u0002\u0002\u10b0\u10b1\u0005\u02f8\u017d',
	'\u0002\u10b1\u10b2\u0007\u0007\u0002\u0002\u10b2\u10b3\u0005\u02f8\u017d',
	'\u0002\u10b3\u10bb\u0003\u0002\u0002\u0002\u10b4\u10b5\u0007\n\u0002',
	'\u0002\u10b5\u10b6\u0007\u000b\u0002\u0002\u10b6\u10bb\u0005\u029c\u014f',
	'\u0002\u10b7\u10b8\u0007\n\u0002\u0002\u10b8\u10b9\u0007\u0005\u0002',
	'\u0002\u10b9\u10bb\u0005\u029c\u014f\u0002\u10ba\u10ad\u0003\u0002\u0002',
	'\u0002\u10ba\u10af\u0003\u0002\u0002\u0002\u10ba\u10b4\u0003\u0002\u0002',
	'\u0002\u10ba\u10b7\u0003\u0002\u0002\u0002\u10bb\u02ff\u0003\u0002\u0002',
	'\u0002\u10bc\u10bf\u0005\u02fa\u017e\u0002\u10bd\u10bf\u0005\u029c\u014f',
	'\u0002\u10be\u10bc\u0003\u0002\u0002\u0002\u10be\u10bd\u0003\u0002\u0002',
	'\u0002\u10bf\u0301\u0003\u0002\u0002\u0002\u10c0\u10c1\u0005\u02ea\u0176',
	'\u0002\u10c1\u10c2\u0005\u02f8\u017d\u0002\u10c2\u10c5\u0003\u0002\u0002',
	'\u0002\u10c3\u10c5\u0005\u02fe\u0180\u0002\u10c4\u10c0\u0003\u0002\u0002',
	'\u0002\u10c4\u10c3\u0003\u0002\u0002\u0002\u10c5\u0303\u0003\u0002\u0002',
	'\u0002\u10c6\u10c7\t\u001e\u0002\u0002\u10c7\u0305\u0003\u0002\u0002',
	'\u0002\u10c8\u10c9\t\u001e\u0002\u0002\u10c9\u0307\u0003\u0002\u0002',
	'\u0002\u10ca\u10cc\u0005\u0270\u0139\u0002\u10cb\u10cd\u0005\u030a\u0186',
	'\u0002\u10cc\u10cb\u0003\u0002\u0002\u0002\u10cc\u10cd\u0003\u0002\u0002',
	'\u0002\u10cd\u0309\u0003\u0002\u0002\u0002\u10ce\u10cf\u0007%\u0002',
	'\u0002\u10cf\u10d0\u0007\u015e\u0002\u0002\u10d0\u10d5\u0005\u030c\u0187',
	'\u0002\u10d1\u10d2\u0007\u015c\u0002\u0002\u10d2\u10d4\u0005\u030c\u0187',
	'\u0002\u10d3\u10d1\u0003\u0002\u0002\u0002\u10d4\u10d7\u0003\u0002\u0002',
	'\u0002\u10d5\u10d3\u0003\u0002\u0002\u0002\u10d5\u10d6\u0003\u0002\u0002',
	'\u0002\u10d6\u10d8\u0003\u0002\u0002\u0002\u10d7\u10d5\u0003\u0002\u0002',
	'\u0002\u10d8\u10d9\u0007\u015f\u0002\u0002\u10d9\u030b\u0003\u0002\u0002',
	'\u0002\u10da\u10dd\u0005\u0318\u018d\u0002\u10db\u10dc\u0007\u0164\u0002',
	'\u0002\u10dc\u10de\u0005\u02c4\u0163\u0002\u10dd\u10db\u0003\u0002\u0002',
	'\u0002\u10dd\u10de\u0003\u0002\u0002\u0002\u10de\u030d\u0003\u0002\u0002',
	'\u0002\u10df\u10e0\u0007%\u0002\u0002\u10e0\u10e1\u0007\u015e\u0002',
	'\u0002\u10e1\u10e6\u0005\u0310\u0189\u0002\u10e2\u10e3\u0007\u015c\u0002',
	'\u0002\u10e3\u10e5\u0005\u0310\u0189\u0002\u10e4\u10e2\u0003\u0002\u0002',
	'\u0002\u10e5\u10e8\u0003\u0002\u0002\u0002\u10e6\u10e4\u0003\u0002\u0002',
	'\u0002\u10e6\u10e7\u0003\u0002\u0002\u0002\u10e7\u10e9\u0003\u0002\u0002',
	'\u0002\u10e8\u10e6\u0003\u0002\u0002\u0002\u10e9\u10ea\u0007\u015f\u0002',
	'\u0002\u10ea\u030f\u0003\u0002\u0002\u0002\u10eb\u10ec\u0005\u0318\u018d',
	'\u0002\u10ec\u10ed\u0005\u0312\u018a\u0002\u10ed\u10ee\u0005\u02c4\u0163',
	'\u0002\u10ee\u0311\u0003\u0002\u0002\u0002\u10ef\u10f0\t\u001f\u0002',
	'\u0002\u10f0\u0313\u0003\u0002\u0002\u0002\u10f1\u10f2\t \u0002\u0002',
	'\u10f2\u0315\u0003\u0002\u0002\u0002\u10f3\u10f7\u0005\u0314\u018b\u0002',
	'\u10f4\u10f7\u0007\u0178\u0002\u0002\u10f5\u10f7\u0005\u031a\u018e\u0002',
	'\u10f6\u10f3\u0003\u0002\u0002\u0002\u10f6\u10f4\u0003\u0002\u0002\u0002',
	'\u10f6\u10f5\u0003\u0002\u0002\u0002\u10f7\u0317\u0003\u0002\u0002\u0002',
	'\u10f8\u10fb\u0007\u017e\u0002\u0002\u10f9\u10fb\u0005\u031e\u0190\u0002',
	'\u10fa\u10f8\u0003\u0002\u0002\u0002\u10fa\u10f9\u0003\u0002\u0002\u0002',
	'\u10fb\u0319\u0003\u0002\u0002\u0002\u10fc\u10fd\u0005\u0318\u018d\u0002',
	'\u10fd\u10fe\u0007\u015a\u0002\u0002\u10fe\u10ff\u0005\u0318\u018d\u0002',
	'\u10ff\u1102\u0003\u0002\u0002\u0002\u1100\u1102\u0005\u0318\u018d\u0002',
	'\u1101\u10fc\u0003\u0002\u0002\u0002\u1101\u1100\u0003\u0002\u0002\u0002',
	'\u1102\u031b\u0003\u0002\u0002\u0002\u1103\u1106\u0005\u0318\u018d\u0002',
	'\u1104\u1106\u0007\u017f\u0002\u0002\u1105\u1103\u0003\u0002\u0002\u0002',
	'\u1105\u1104\u0003\u0002\u0002\u0002\u1106\u031d\u0003\u0002\u0002\u0002',
	'\u1107\u1108\t!\u0002\u0002\u1108\u031f\u0003\u0002\u0002\u0002\u1109',
	'\u110a\t"\u0002\u0002\u110a\u0321\u0003\u0002\u0002\u0002\u110b\u111a',
	'\u0005\u032c\u0197\u0002\u110c\u111a\u0005\u033c\u019f\u0002\u110d\u111a',
	'\u0005\u0344\u01a3\u0002\u110e\u111a\u0005\u0340\u01a1\u0002\u110f\u111a',
	'\u0005\u0342\u01a2\u0002\u1110\u111a\u0005\u035a\u01ae\u0002\u1111\u111a',
	'\u0005\u035c\u01af\u0002\u1112\u111a\u0005\u0360\u01b1\u0002\u1113\u111a',
	'\u0005\u0366\u01b4\u0002\u1114\u111a\u0005\u0368\u01b5\u0002\u1115\u111a',
	'\u0005\u036a\u01b6\u0002\u1116\u111a\u0005\u036c\u01b7\u0002\u1117\u111a',
	'\u0005\u036e\u01b8\u0002\u1118\u111a\u0005\u0370\u01b9\u0002\u1119\u110b',
	'\u0003\u0002\u0002\u0002\u1119\u110c\u0003\u0002\u0002\u0002\u1119\u110d',
	'\u0003\u0002\u0002\u0002\u1119\u110e\u0003\u0002\u0002\u0002\u1119\u110f',
	'\u0003\u0002\u0002\u0002\u1119\u1110\u0003\u0002\u0002\u0002\u1119\u1111',
	'\u0003\u0002\u0002\u0002\u1119\u1112\u0003\u0002\u0002\u0002\u1119\u1113',
	'\u0003\u0002\u0002\u0002\u1119\u1114\u0003\u0002\u0002\u0002\u1119\u1115',
	'\u0003\u0002\u0002\u0002\u1119\u1116\u0003\u0002\u0002\u0002\u1119\u1117',
	'\u0003\u0002\u0002\u0002\u1119\u1118\u0003\u0002\u0002\u0002\u111a\u0323',
	'\u0003\u0002\u0002\u0002\u111b\u111c\u0007\u013d\u0002\u0002\u111c\u111d',
	'\u0007\u0164\u0002\u0002\u111d\u1123\u0007\u017d\u0002\u0002\u111e\u111f',
	'\u0007\u0140\u0002\u0002\u111f\u1120\u0007\u0142\u0002\u0002\u1120\u1121',
	'\u0007\u0164\u0002\u0002\u1121\u1123\u0005\u0346\u01a4\u0002\u1122\u111b',
	'\u0003\u0002\u0002\u0002\u1122\u111e\u0003\u0002\u0002\u0002\u1123\u0325',
	'\u0003\u0002\u0002\u0002\u1124\u1129\u0005\u0324\u0193\u0002\u1125\u1126',
	'\u0007\u015c\u0002\u0002\u1126\u1128\u0005\u0324\u0193\u0002\u1127\u1125',
	'\u0003\u0002\u0002\u0002\u1128\u112b\u0003\u0002\u0002\u0002\u1129\u1127',
	'\u0003\u0002\u0002\u0002\u1129\u112a\u0003\u0002\u0002\u0002\u112a\u0327',
	'\u0003\u0002\u0002\u0002\u112b\u1129\u0003\u0002\u0002\u0002\u112c\u1130',
	'\u0007\u013d\u0002\u0002\u112d\u112e\u0007\u0140\u0002\u0002\u112e\u1130',
	'\u0007\u0142\u0002\u0002\u112f\u112c\u0003\u0002\u0002\u0002\u112f\u112d',
	'\u0003\u0002\u0002\u0002\u1130\u0329\u0003\u0002\u0002\u0002\u1131\u1136',
	'\u0005\u0328\u0195\u0002\u1132\u1133\u0007\u015c\u0002\u0002\u1133\u1135',
	'\u0005\u0328\u0195\u0002\u1134\u1132\u0003\u0002\u0002\u0002\u1135\u1138',
	'\u0003\u0002\u0002\u0002\u1136\u1134\u0003\u0002\u0002\u0002\u1136\u1137',
	'\u0003\u0002\u0002\u0002\u1137\u032b\u0003\u0002\u0002\u0002\u1138\u1136',
	'\u0003\u0002\u0002\u0002\u1139\u113a\u0007C\u0002\u0002\u113a\u113b',
	'\u0007\u013b\u0002\u0002\u113b\u113e\u0007\u013c\u0002\u0002\u113c\u113f',
	'\u0005\u032e\u0198\u0002\u113d\u113f\u0005\u0330\u0199\u0002\u113e\u113c',
	'\u0003\u0002\u0002\u0002\u113e\u113d\u0003\u0002\u0002\u0002\u113f\u032d',
	'\u0003\u0002\u0002\u0002\u1140\u1141\u0005\u0318\u018d\u0002\u1141\u1142',
	'\u0007\n\u0002\u0002\u1142\u1143\u0005\u0318\u018d\u0002\u1143\u032f',
	'\u0003\u0002\u0002\u0002\u1144\u1147\u0005\u0318\u018d\u0002\u1145\u1146',
	'\u0007\u0097\u0002\u0002\u1146\u1148\u0005\u0326\u0194\u0002\u1147\u1145',
	'\u0003\u0002\u0002\u0002\u1147\u1148\u0003\u0002\u0002\u0002\u1148\u0331',
	'\u0003\u0002\u0002\u0002\u1149\u114a\u0007\u0097\u0002\u0002\u114a\u114b',
	'\u0007\u0089\u0002\u0002\u114b\u0333\u0003\u0002\u0002\u0002\u114c\u114e',
	'\u0007\u013f\u0002\u0002\u114d\u114f\u0005\u0332\u019a\u0002\u114e\u114d',
	'\u0003\u0002\u0002\u0002\u114e\u114f\u0003\u0002\u0002\u0002\u114f\u0335',
	'\u0003\u0002\u0002\u0002\u1150\u1151\u0007\u007f\u0002\u0002\u1151\u0337',
	'\u0003\u0002\u0002\u0002\u1152\u1153\u0007\u0080\u0002\u0002\u1153\u0339',
	'\u0003\u0002\u0002\u0002\u1154\u1155\u0007\u014c\u0002\u0002\u1155\u033b',
	'\u0003\u0002\u0002\u0002\u1156\u1157\u0007E\u0002\u0002\u1157\u1158',
	'\u0007\u013b\u0002\u0002\u1158\u1159\u0007\u013c\u0002\u0002\u1159\u116b',
	'\u0005\u0318\u018d\u0002\u115a\u116c\u0007\u0127\u0002\u0002\u115b\u116c',
	'\u0007\u0080\u0002\u0002\u115c\u115d\u0007\u009d\u0002\u0002\u115d\u116c',
	'\u0005\u0326\u0194\u0002\u115e\u115f\u0007\u009e\u0002\u0002\u115f\u116c',
	'\u0005\u032a\u0196\u0002\u1160\u116c\u0005\u033e\u01a0\u0002\u1161\u1163',
	'\u0005\u0334\u019b\u0002\u1162\u1164\u0005\u0336\u019c\u0002\u1163\u1162',
	'\u0003\u0002\u0002\u0002\u1163\u1164\u0003\u0002\u0002\u0002\u1164\u116a',
	'\u0003\u0002\u0002\u0002\u1165\u1167\u0005\u0336\u019c\u0002\u1166\u1168',
	'\u0005\u0334\u019b\u0002\u1167\u1166\u0003\u0002\u0002\u0002\u1167\u1168',
	'\u0003\u0002\u0002\u0002\u1168\u116a\u0003\u0002\u0002\u0002\u1169\u1161',
	'\u0003\u0002\u0002\u0002\u1169\u1165\u0003\u0002\u0002\u0002\u116a\u116c',
	'\u0003\u0002\u0002\u0002\u116b\u115a\u0003\u0002\u0002\u0002\u116b\u115b',
	'\u0003\u0002\u0002\u0002\u116b\u115c\u0003\u0002\u0002\u0002\u116b\u115e',
	'\u0003\u0002\u0002\u0002\u116b\u1160\u0003\u0002\u0002\u0002\u116b\u1169',
	'\u0003\u0002\u0002\u0002\u116c\u033d\u0003\u0002\u0002\u0002\u116d\u116e',
	'\u0007L\u0002\u0002\u116e\u116f\u0007M\u0002\u0002\u116f\u1170\u0005',
	'\u0318\u018d\u0002\u1170\u033f\u0003\u0002\u0002\u0002\u1171\u1174\u0005',
	'\u0336\u019c\u0002\u1172\u1174\u0005\u0338\u019d\u0002\u1173\u1171\u0003',
	'\u0002\u0002\u0002\u1173\u1172\u0003\u0002\u0002\u0002\u1174\u1175\u0003',
	'\u0002\u0002\u0002\u1175\u1176\u0007\u0149\u0002\u0002\u1176\u1177\u0007',
	'\u014a\u0002\u0002\u1177\u0341\u0003\u0002\u0002\u0002\u1178\u1184\u0007',
	'\u0089\u0002\u0002\u1179\u117a\u0007\u014b\u0002\u0002\u117a\u117b\u0007',
	'\u013b\u0002\u0002\u117b\u117c\u0007\u013c\u0002\u0002\u117c\u117d\u0007',
	'\u0097\u0002\u0002\u117d\u1185\u0005\u0318\u018d\u0002\u117e\u117f\u0007',
	'\u013b\u0002\u0002\u117f\u1180\u0007\u013c\u0002\u0002\u1180\u1181\u0005',
	'\u0318\u018d\u0002\u1181\u1182\u0007\u0097\u0002\u0002\u1182\u1183\u0005',
	'\u0318\u018d\u0002\u1183\u1185\u0003\u0002\u0002\u0002\u1184\u1179\u0003',
	'\u0002\u0002\u0002\u1184\u117e\u0003\u0002\u0002\u0002\u1185\u0343\u0003',
	'\u0002\u0002\u0002\u1186\u1187\u0007K\u0002\u0002\u1187\u1188\u0007',
	'\u013b\u0002\u0002\u1188\u1189\u0007\u013c\u0002\u0002\u1189\u118a\u0005',
	'\u0318\u018d\u0002\u118a\u0345\u0003\u0002\u0002\u0002\u118b\u1190\u0005',
	'\u0318\u018d\u0002\u118c\u118d\u0007\u015a\u0002\u0002\u118d\u118f\u0005',
	'\u0318\u018d\u0002\u118e\u118c\u0003\u0002\u0002\u0002\u118f\u1192\u0003',
	'\u0002\u0002\u0002\u1190\u118e\u0003\u0002\u0002\u0002\u1190\u1191\u0003',
	'\u0002\u0002\u0002\u1191\u0347\u0003\u0002\u0002\u0002\u1192\u1190\u0003',
	'\u0002\u0002\u0002\u1193\u1194\u0005\u0350\u01a9\u0002\u1194\u0349\u0003',
	'\u0002\u0002\u0002\u1195\u1196\u0005\u0348\u01a5\u0002\u1196\u1197\u0007',
	'\u0002\u0002\u0003\u1197\u034b\u0003\u0002\u0002\u0002\u1198\u119d\u0005',
	'\u034e\u01a8\u0002\u1199\u119a\u0007\b\u0002\u0002\u119a\u119c\u0005',
	'\u034e\u01a8\u0002\u119b\u1199\u0003\u0002\u0002\u0002\u119c\u119f\u0003',
	'\u0002\u0002\u0002\u119d\u119b\u0003\u0002\u0002\u0002\u119d\u119e\u0003',
	'\u0002\u0002\u0002\u119e\u034d\u0003\u0002\u0002\u0002\u119f\u119d\u0003',
	'\u0002\u0002\u0002\u11a0\u11a5\u0005\u0350\u01a9\u0002\u11a1\u11a2\u0007',
	'\u0007\u0002\u0002\u11a2\u11a4\u0005\u0350\u01a9\u0002\u11a3\u11a1\u0003',
	'\u0002\u0002\u0002\u11a4\u11a7\u0003\u0002\u0002\u0002\u11a5\u11a3\u0003',
	'\u0002\u0002\u0002\u11a5\u11a6\u0003\u0002\u0002\u0002\u11a6\u034f\u0003',
	'\u0002\u0002\u0002\u11a7\u11a5\u0003\u0002\u0002\u0002\u11a8\u11a9\u0005',
	'\u0318\u018d\u0002\u11a9\u11aa\u0005\u0354\u01ab\u0002\u11aa\u11ab\u0005',
	'\u0352\u01aa\u0002\u11ab\u0351\u0003\u0002\u0002\u0002\u11ac\u11ad\t',
	'\u0019\u0002\u0002\u11ad\u0353\u0003\u0002\u0002\u0002\u11ae\u11af\u0007',
	'\u016a\u0002\u0002\u11af\u0355\u0003\u0002\u0002\u0002\u11b0\u11b5\u0007',
	'w\u0002\u0002\u11b1\u11b2\u0007\u0143\u0002\u0002\u11b2\u11b3\u0007',
	'M\u0002\u0002\u11b3\u11b5\u0005\u0346\u01a4\u0002\u11b4\u11b0\u0003',
	'\u0002\u0002\u0002\u11b4\u11b1\u0003\u0002\u0002\u0002\u11b5\u0357\u0003',
	'\u0002\u0002\u0002\u11b6\u11b7\u0005\u0356\u01ac\u0002\u11b7\u11b8\u0007',
	'\u0002\u0002\u0003\u11b8\u0359\u0003\u0002\u0002\u0002\u11b9\u11ba\u0007',
	'C\u0002\u0002\u11ba\u11bb\u0007\u00d4\u0002\u0002\u11bb\u11bc\u0005',
	'\u0318\u018d\u0002\u11bc\u11bd\u0007\u015a\u0002\u0002\u11bd\u11be\u0005',
	'\u0318\u018d\u0002\u11be\u11bf\u0005\u035e\u01b0\u0002\u11bf\u035b\u0003',
	'\u0002\u0002\u0002\u11c0\u11c1\u0007E\u0002\u0002\u11c1\u11c2\u0007',
	'\u00d4\u0002\u0002\u11c2\u11c3\u0005\u0318\u018d\u0002\u11c3\u11c4\u0007',
	'\u015a\u0002\u0002\u11c4\u11d4\u0005\u0318\u018d\u0002\u11c5\u11d5\u0005',
	'\u035e\u01b0\u0002\u11c6\u11c7\u0007\u0088\u0002\u0002\u11c7\u11c8\u0007',
	'M\u0002\u0002\u11c8\u11c9\u0007\u0142\u0002\u0002\u11c9\u11d5\u0005',
	'\u0346\u01a4\u0002\u11ca\u11cb\u0007K\u0002\u0002\u11cb\u11cc\u0007',
	'\u0017\u0002\u0002\u11cc\u11cd\u0007\u0142\u0002\u0002\u11cd\u11d5\u0005',
	'\u0346\u01a4\u0002\u11ce\u11cf\u0007\u0088\u0002\u0002\u11cf\u11d0\u0007',
	'M\u0002\u0002\u11d0\u11d5\u0007\u014c\u0002\u0002\u11d1\u11d2\u0007',
	'K\u0002\u0002\u11d2\u11d3\u0007\u0017\u0002\u0002\u11d3\u11d5\u0007',
	'\u014c\u0002\u0002\u11d4\u11c5\u0003\u0002\u0002\u0002\u11d4\u11c6\u0003',
	'\u0002\u0002\u0002\u11d4\u11ca\u0003\u0002\u0002\u0002\u11d4\u11ce\u0003',
	'\u0002\u0002\u0002\u11d4\u11d1\u0003\u0002\u0002\u0002\u11d5\u035d\u0003',
	'\u0002\u0002\u0002\u11d6\u11d7\u0007\u00a5\u0002\u0002\u11d7\u11d8\u0005',
	'\u0348\u01a5\u0002\u11d8\u11d9\u0007\u0144\u0002\u0002\u11d9\u11da\u0005',
	'\u0356\u01ac\u0002\u11da\u035f\u0003\u0002\u0002\u0002\u11db\u11dc\u0007',
	'K\u0002\u0002\u11dc\u11dd\u0007\u00d4\u0002\u0002\u11dd\u11de\u0005',
	'\u0318\u018d\u0002\u11de\u11df\u0007\u015a\u0002\u0002\u11df\u11e0\u0005',
	'\u0318\u018d\u0002\u11e0\u0361\u0003\u0002\u0002\u0002\u11e1\u11e2\u0007',
	'\u0145\u0002\u0002\u11e2\u11e3\u0007\u0164\u0002\u0002\u11e3\u11ee\u0007',
	'\u017d\u0002\u0002\u11e4\u11e5\u0007\u013d\u0002\u0002\u11e5\u11e6\u0007',
	'\u0164\u0002\u0002\u11e6\u11ee\u0007\u017d\u0002\u0002\u11e7\u11e8\u0007',
	'\u0146\u0002\u0002\u11e8\u11e9\u0007\u0164\u0002\u0002\u11e9\u11ee\u0007',
	'\u0178\u0002\u0002\u11ea\u11eb\u0007\u0147\u0002\u0002\u11eb\u11ec\u0007',
	'\u0164\u0002\u0002\u11ec\u11ee\u0005\u0346\u01a4\u0002\u11ed\u11e1\u0003',
	'\u0002\u0002\u0002\u11ed\u11e4\u0003\u0002\u0002\u0002\u11ed\u11e7\u0003',
	'\u0002\u0002\u0002\u11ed\u11ea\u0003\u0002\u0002\u0002\u11ee\u0363\u0003',
	'\u0002\u0002\u0002\u11ef\u11f4\u0005\u0362\u01b2\u0002\u11f0\u11f1\u0007',
	'\u015c\u0002\u0002\u11f1\u11f3\u0005\u0362\u01b2\u0002\u11f2\u11f0\u0003',
	'\u0002\u0002\u0002\u11f3\u11f6\u0003\u0002\u0002\u0002\u11f4\u11f2\u0003',
	'\u0002\u0002\u0002\u11f4\u11f5\u0003\u0002\u0002\u0002\u11f5\u0365\u0003',
	'\u0002\u0002\u0002\u11f6\u11f4\u0003\u0002\u0002\u0002\u11f7\u11f8\u0007',
	'C\u0002\u0002\u11f8\u11f9\u0007\u0142\u0002\u0002\u11f9\u11fa\u0005',
	'\u0318\u018d\u0002\u11fa\u11fb\u0007\u015a\u0002\u0002\u11fb\u11fc\u0005',
	'\u0346\u01a4\u0002\u11fc\u11fd\u0007\u0097\u0002\u0002\u11fd\u11fe\u0005',
	'\u0364\u01b3\u0002\u11fe\u0367\u0003\u0002\u0002\u0002\u11ff\u1200\u0007',
	'E\u0002\u0002\u1200\u1201\u0007\u0142\u0002\u0002\u1201\u1202\u0005',
	'\u0318\u018d\u0002\u1202\u1203\u0007\u015a\u0002\u0002\u1203\u120e\u0005',
	'\u0346\u01a4\u0002\u1204\u1205\u0007\u009d\u0002\u0002\u1205\u120f\u0005',
	'\u0364\u01b3\u0002\u1206\u1207\u0007\u009e\u0002\u0002\u1207\u120f\u0007',
	'\u0146\u0002\u0002\u1208\u1209\u0007\u0088\u0002\u0002\u1209\u120a\u0007',
	'\u00d4\u0002\u0002\u120a\u120f\u0005\u0318\u018d\u0002\u120b\u120c\u0007',
	'K\u0002\u0002\u120c\u120d\u0007\u00d4\u0002\u0002\u120d\u120f\u0005',
	'\u0318\u018d\u0002\u120e\u1204\u0003\u0002\u0002\u0002\u120e\u1206\u0003',
	'\u0002\u0002\u0002\u120e\u1208\u0003\u0002\u0002\u0002\u120e\u120b\u0003',
	'\u0002\u0002\u0002\u120f\u0369\u0003\u0002\u0002\u0002\u1210\u1211\u0007',
	'K\u0002\u0002\u1211\u1212\u0007\u0142\u0002\u0002\u1212\u1213\u0005',
	'\u0318\u018d\u0002\u1213\u1214\u0007\u015a\u0002\u0002\u1214\u1215\u0005',
	'\u0346\u01a4\u0002\u1215\u036b\u0003\u0002\u0002\u0002\u1216\u1217\u0007',
	'C\u0002\u0002\u1217\u1218\t#\u0002\u0002\u1218\u1219\u0007\u0148\u0002',
	'\u0002\u1219\u121a\u0007\u0178\u0002\u0002\u121a\u121b\u0007\u00b6\u0002',
	'\u0002\u121b\u121f\u0005\u0318\u018d\u0002\u121c\u121d\u0007M\u0002',
	'\u0002\u121d\u1220\u0005\u0346\u01a4\u0002\u121e\u1220\u0005\u033a\u019e',
	'\u0002\u121f\u121c\u0003\u0002\u0002\u0002\u121f\u121e\u0003\u0002\u0002',
	'\u0002\u1220\u1224\u0003\u0002\u0002\u0002\u1221\u1222\u0007\u0097\u0002',
	'\u0002\u1222\u1223\u0007\u0012\u0002\u0002\u1223\u1225\u0007\u017d\u0002',
	'\u0002\u1224\u1221\u0003\u0002\u0002\u0002\u1224\u1225\u0003\u0002\u0002',
	'\u0002\u1225\u036d\u0003\u0002\u0002\u0002\u1226\u1227\u0007E\u0002',
	'\u0002\u1227\u1228\t#\u0002\u0002\u1228\u1229\u0007\u0148\u0002\u0002',
	'\u1229\u122a\u0007\u0178\u0002\u0002\u122a\u122b\u0007\u00b6\u0002\u0002',
	'\u122b\u122f\u0005\u0318\u018d\u0002\u122c\u122d\u0007M\u0002\u0002',
	'\u122d\u1230\u0005\u0346\u01a4\u0002\u122e\u1230\u0005\u033a\u019e\u0002',
	'\u122f\u122c\u0003\u0002\u0002\u0002\u122f\u122e\u0003\u0002\u0002\u0002',
	'\u1230\u1234\u0003\u0002\u0002\u0002\u1231\u1232\u0007\u0097\u0002\u0002',
	'\u1232\u1233\u0007\u0012\u0002\u0002\u1233\u1235\u0007\u017d\u0002\u0002',
	'\u1234\u1231\u0003\u0002\u0002\u0002\u1234\u1235\u0003\u0002\u0002\u0002',
	'\u1235\u036f\u0003\u0002\u0002\u0002\u1236\u1237\u0007K\u0002\u0002',
	'\u1237\u1238\t#\u0002\u0002\u1238\u1239\u0007\u0148\u0002\u0002\u1239',
	'\u123a\u0007\u0178\u0002\u0002\u123a\u123b\u0007\u00b6\u0002\u0002\u123b',
	'\u123c\u0005\u0318\u018d\u0002\u123c\u0371\u0003\u0002\u0002\u0002\u0216',
	'\u0376\u0378\u0383\u0389\u038f\u039a\u039d\u039f\u03b1\u03b6\u03bb\u03c1',
	'\u03c5\u03d2\u03d6\u03da\u03df\u03e6\u03ec\u03f0\u03f2\u03f6\u03fd\u03ff',
	'\u0405\u0410\u0418\u041c\u0449\u0464\u0468\u046b\u0470\u047e\u0487\u048b',
	'\u0492\u0495\u0499\u049f\u04a2\u04a5\u04a8\u04ab\u04b1\u04bc\u04be\u04c3',
	'\u04c5\u04cf\u04d4\u04d8\u04db\u04e6\u04f6\u0505\u0509\u0519\u0526\u052a',
	'\u052f\u054a\u054f\u0554\u055c\u0562\u0566\u0569\u056c\u0572\u0579\u0583',
	'\u0587\u058c\u0590\u0596\u059d\u05a4\u05ac\u05b3\u05b7\u05ba\u05c2\u05c5',
	'\u05cd\u05d0\u05d4\u05de\u05e3\u05e9\u05f6\u0606\u0616\u0626\u062d\u0639',
	'\u063d\u0642\u0647\u064a\u064d\u0651\u0654\u0657\u066d\u0670\u0677\u0684',
	'\u0689\u0692\u0699\u069f\u06a7\u06ad\u06bd\u06c0\u06ca\u06d2\u06d6\u06d9',
	'\u06dd\u06e1\u06e4\u06e9\u06ee\u06f4\u06ff\u0701\u0705\u070b\u0711\u0716',
	'\u071c\u0721\u0728\u072d\u0735\u073a\u0741\u0747\u074f\u0756\u075b\u0763',
	'\u076a\u076d\u0770\u0772\u0780\u0782\u0788\u0797\u07a8\u07ad\u07b1\u07b5',
	'\u07bc\u07c3\u07c9\u07cd\u07d0\u07d7\u07ee\u07f3\u07f7\u07ff\u0807\u080b',
	'\u0811\u0816\u081d\u0820\u0826\u082d\u0835\u083e\u0847\u085b\u0861\u0864',
	'\u0866\u086d\u0877\u087f\u0883\u0887\u0894\u089d\u08a3\u08a7\u08ae\u08b1',
	'\u08b4\u08b7\u08c0\u08c4\u08c7\u08ca\u08cd\u08d0\u08d3\u08e1\u08e9\u08ef',
	'\u08f3\u0905\u0915\u0925\u0929\u0938\u093e\u0941\u0944\u0947\u094a\u094e',
	'\u095c\u0964\u0967\u0970\u0977\u097b\u0982\u09a1\u09a9\u09b9\u09c9\u09d1',
	'\u09d9\u09e1\u09ec\u09f0\u09f8\u0a01\u0a04\u0a0d\u0a11\u0a13\u0a17\u0a1b',
	'\u0a21\u0a25\u0a2f\u0a38\u0a43\u0a47\u0a4e\u0a5a\u0a61\u0a69\u0a6d\u0a70',
	'\u0a77\u0a7d\u0a81\u0a84\u0a8a\u0a8e\u0a92\u0a97\u0a9b\u0a9f\u0aa3\u0aa7',
	'\u0aaf\u0ab3\u0ab9\u0abd\u0ac1\u0ac5\u0acd\u0ad1\u0ad5\u0add\u0ae2\u0ae7',
	'\u0af4\u0afd\u0b05\u0b0f\u0b21\u0b24\u0b2e\u0b4a\u0b50\u0b56\u0b5c\u0b5e',
	'\u0b61\u0b67\u0b6f\u0b7e\u0b85\u0b8a\u0b8d\u0b91\u0b94\u0b97\u0b9a\u0b9d',
	'\u0ba3\u0ba7\u0baa\u0bad\u0bb0\u0bb3\u0bb6\u0bbd\u0bc0\u0bc7\u0bca\u0bcd',
	'\u0bd0\u0bd3\u0bd6\u0bd9\u0bdc\u0bdf\u0be2\u0be6\u0be9\u0bec\u0bef\u0bf2',
	'\u0bf5\u0bf8\u0bfb\u0bfe\u0c01\u0c03\u0c09\u0c0e\u0c15\u0c17\u0c1a\u0c1f',
	'\u0c22\u0c26\u0c2b\u0c32\u0c38\u0c44\u0c4b\u0c51\u0c5a\u0c5d\u0c61\u0c67',
	'\u0c71\u0c75\u0c80\u0c86\u0c89\u0c93\u0c95\u0c99\u0ca0\u0cb6\u0cbd\u0cc1',
	'\u0cc4\u0cc9\u0ccc\u0cd3\u0cda\u0cdd\u0ce5\u0ceb\u0ced\u0cef\u0cf2\u0cf5',
	'\u0cfa\u0d04\u0d09\u0d0b\u0d11\u0d14\u0d17\u0d1f\u0d25\u0d27\u0d29\u0d2c',
	'\u0d2f\u0d33\u0d3a\u0d43\u0d4d\u0d50\u0d53\u0d56\u0d5a\u0d64\u0d6e\u0d76',
	'\u0d7e\u0d85\u0d8e\u0d96\u0da2\u0da5\u0dab\u0db2\u0db9\u0dc0\u0dc7\u0dd0',
	'\u0dd4\u0ddb\u0de0\u0de4\u0df7\u0dfc\u0e01\u0e07\u0e14\u0e17\u0e1a\u0e26',
	'\u0e29\u0e2c\u0e34\u0e3d\u0e42\u0e44\u0e55\u0e58\u0e65\u0e69\u0e6d\u0e70',
	'\u0e73\u0e76\u0e7a\u0e7d\u0e80\u0e87\u0e8c\u0e94\u0e9a\u0e9f\u0ea3\u0ea8',
	'\u0eaf\u0ebd\u0ec0\u0ec4\u0ed3\u0edd\u0ee6\u0ee9\u0ef4\u0f00\u0f0a\u0f14',
	'\u0f19\u0f1d\u0f21\u0f27\u0f39\u0f3f\u0f43\u0f4b\u0f55\u0f5f\u0f72\u0f78',
	'\u0f7f\u0f82\u0f84\u0f89\u0f8d\u0f9f\u0fa3\u0faf\u0fb3\u0fbc\u0fd7\u0fdd',
	'\u0fe5\u0fea\u1003\u1011\u101e\u102b\u1040\u104d\u105d\u105f\u106e\u108b',
	'\u109c\u109e\u10ab\u10ba\u10be\u10c4\u10cc\u10d5\u10dd\u10e6\u10f6\u10fa',
	'\u1101\u1105\u1119\u1122\u1129\u112f\u1136\u113e\u1147\u114e\u1163\u1167',
	'\u1169\u116b\u1173\u1184\u1190\u119d\u11a5\u11b4\u11d4\u11ed\u11f4\u120e',
	'\u121f\u1224\u122f\u1234',
].join('');

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
	return new antlr4.dfa.DFA(ds, index);
});

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	"'.'",
	"':'",
	"','",
	"';'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	null,
	"'<=>'",
	null,
	"'<='",
	"'<'",
	"'>='",
	"'>'",
	"'/'",
	"'+'",
	"'-'",
	"'*'",
	"'%'",
	"'DIV'",
	"'&'",
	"'~'",
	"'|'",
	"'||'",
	"'^'",
	"'?'",
	"'$'",
];

var symbolicNames = [
	null,
	'KW_TRUE',
	'KW_FALSE',
	'KW_ALL',
	'KW_NONE',
	'KW_AND',
	'KW_OR',
	'KW_NOT',
	'KW_LIKE',
	'KW_ANY',
	'KW_IF',
	'KW_EXISTS',
	'KW_ASC',
	'KW_DESC',
	'KW_NULLS',
	'KW_LAST',
	'KW_ORDER',
	'KW_GROUP',
	'KW_BY',
	'KW_HAVING',
	'KW_WHERE',
	'KW_FROM',
	'KW_AS',
	'KW_SELECT',
	'KW_DISTINCT',
	'KW_INSERT',
	'KW_OVERWRITE',
	'KW_OUTER',
	'KW_UNIQUEJOIN',
	'KW_PRESERVE',
	'KW_JOIN',
	'KW_LEFT',
	'KW_RIGHT',
	'KW_FULL',
	'KW_ON',
	'KW_PARTITION',
	'KW_PARTITIONS',
	'KW_TABLE',
	'KW_TABLES',
	'KW_COLUMNS',
	'KW_INDEX',
	'KW_INDEXES',
	'KW_REBUILD',
	'KW_FUNCTIONS',
	'KW_SHOW',
	'KW_MSCK',
	'KW_REPAIR',
	'KW_DIRECTORY',
	'KW_LOCAL',
	'KW_TRANSFORM',
	'KW_USING',
	'KW_CLUSTER',
	'KW_DISTRIBUTE',
	'KW_SORT',
	'KW_UNION',
	'KW_EXCEPT',
	'KW_LOAD',
	'KW_EXPORT',
	'KW_IMPORT',
	'KW_REPLICATION',
	'KW_METADATA',
	'KW_DATA',
	'KW_INPATH',
	'KW_IS',
	'KW_NULL',
	'KW_CREATE',
	'KW_EXTERNAL',
	'KW_ALTER',
	'KW_CHANGE',
	'KW_COLUMN',
	'KW_FIRST',
	'KW_AFTER',
	'KW_DESCRIBE',
	'KW_DROP',
	'KW_RENAME',
	'KW_TO',
	'KW_COMMENT',
	'KW_BOOLEAN',
	'KW_TINYINT',
	'KW_SMALLINT',
	'KW_INT',
	'KW_BIGINT',
	'KW_FLOAT',
	'KW_DOUBLE',
	'KW_PRECISION',
	'KW_DATE',
	'KW_DATETIME',
	'KW_TIMESTAMP',
	'KW_TIMESTAMPLOCALTZ',
	'KW_TIME',
	'KW_ZONE',
	'KW_INTERVAL',
	'KW_DECIMAL',
	'KW_STRING',
	'KW_CHAR',
	'KW_VARCHAR',
	'KW_ARRAY',
	'KW_STRUCT',
	'KW_MAP',
	'KW_UNIONTYPE',
	'KW_REDUCE',
	'KW_PARTITIONED',
	'KW_CLUSTERED',
	'KW_SORTED',
	'KW_INTO',
	'KW_BUCKETS',
	'KW_ROW',
	'KW_ROWS',
	'KW_FORMAT',
	'KW_DELIMITED',
	'KW_FIELDS',
	'KW_TERMINATED',
	'KW_ESCAPED',
	'KW_COLLECTION',
	'KW_ITEMS',
	'KW_KEYS',
	'KW_KEY_TYPE',
	'KW_KILL',
	'KW_LINES',
	'KW_STORED',
	'KW_FILEFORMAT',
	'KW_INPUTFORMAT',
	'KW_OUTPUTFORMAT',
	'KW_INPUTDRIVER',
	'KW_OUTPUTDRIVER',
	'KW_ENABLE',
	'KW_DISABLE',
	'KW_LOCATION',
	'KW_TABLESAMPLE',
	'KW_BUCKET',
	'KW_OUT',
	'KW_OF',
	'KW_PERCENT',
	'KW_CAST',
	'KW_ADD',
	'KW_REPLACE',
	'KW_RLIKE',
	'KW_REGEXP',
	'KW_TEMPORARY',
	'KW_FUNCTION',
	'KW_MACRO',
	'KW_FILE',
	'KW_JAR',
	'KW_EXPLAIN',
	'KW_EXTENDED',
	'KW_FORMATTED',
	'KW_DEPENDENCY',
	'KW_LOGICAL',
	'KW_SERDE',
	'KW_WITH',
	'KW_DEFERRED',
	'KW_SERDEPROPERTIES',
	'KW_DBPROPERTIES',
	'KW_LIMIT',
	'KW_OFFSET',
	'KW_SET',
	'KW_UNSET',
	'KW_TBLPROPERTIES',
	'KW_IDXPROPERTIES',
	'KW_VALUE_TYPE',
	'KW_ELEM_TYPE',
	'KW_DEFINED',
	'KW_CASE',
	'KW_WHEN',
	'KW_THEN',
	'KW_ELSE',
	'KW_END',
	'KW_MAPJOIN',
	'KW_STREAMTABLE',
	'KW_CLUSTERSTATUS',
	'KW_UTC',
	'KW_UTCTIMESTAMP',
	'KW_LONG',
	'KW_DELETE',
	'KW_PLUS',
	'KW_MINUS',
	'KW_FETCH',
	'KW_INTERSECT',
	'KW_VIEW',
	'KW_VIEWS',
	'KW_IN',
	'KW_DATABASE',
	'KW_DATABASES',
	'KW_MATERIALIZED',
	'KW_SCHEMA',
	'KW_SCHEMAS',
	'KW_GRANT',
	'KW_REVOKE',
	'KW_SSL',
	'KW_UNDO',
	'KW_LOCK',
	'KW_LOCKS',
	'KW_UNLOCK',
	'KW_SHARED',
	'KW_EXCLUSIVE',
	'KW_PROCEDURE',
	'KW_UNSIGNED',
	'KW_WHILE',
	'KW_READ',
	'KW_READS',
	'KW_PURGE',
	'KW_RANGE',
	'KW_ANALYZE',
	'KW_BEFORE',
	'KW_BETWEEN',
	'KW_BOTH',
	'KW_BINARY',
	'KW_CROSS',
	'KW_CONTINUE',
	'KW_CURSOR',
	'KW_TRIGGER',
	'KW_RECORDREADER',
	'KW_RECORDWRITER',
	'KW_SEMI',
	'KW_LATERAL',
	'KW_TOUCH',
	'KW_ARCHIVE',
	'KW_UNARCHIVE',
	'KW_COMPUTE',
	'KW_STATISTICS',
	'KW_USE',
	'KW_OPTIONS',
	'KW_OPTION',
	'KW_CONCATENATE',
	'KW_SHOW_DATABASE',
	'KW_UPDATE',
	'KW_RESTRICT',
	'KW_CASCADE',
	'KW_SKEWED',
	'KW_ROLLUP',
	'KW_CUBE',
	'KW_DIRECTORIES',
	'KW_FOR',
	'KW_WINDOW',
	'KW_UNBOUNDED',
	'KW_PRECEDING',
	'KW_FOLLOWING',
	'KW_CURRENT',
	'KW_CURRENT_DATE',
	'KW_CURRENT_TIMESTAMP',
	'KW_LESS',
	'KW_MORE',
	'KW_OVER',
	'KW_GROUPING',
	'KW_SETS',
	'KW_TRUNCATE',
	'KW_NOSCAN',
	'KW_USER',
	'KW_ROLE',
	'KW_ROLES',
	'KW_INNER',
	'KW_EXCHANGE',
	'KW_URI',
	'KW_SERVER',
	'KW_ADMIN',
	'KW_OWNER',
	'KW_PRINCIPALS',
	'KW_COMPACT',
	'KW_COMPACTIONS',
	'KW_TRANSACTIONS',
	'KW_REWRITE',
	'KW_AUTHORIZATION',
	'KW_REOPTIMIZATION',
	'KW_CONF',
	'KW_VALUES',
	'KW_RELOAD',
	'KW_YEAR',
	'KW_QUERY',
	'KW_QUARTER',
	'KW_MONTH',
	'KW_WEEK',
	'KW_DAY',
	'KW_DOW',
	'KW_HOUR',
	'KW_MINUTE',
	'KW_SECOND',
	'KW_START',
	'KW_TRANSACTION',
	'KW_COMMIT',
	'KW_ROLLBACK',
	'KW_WORK',
	'KW_ONLY',
	'KW_WRITE',
	'KW_ISOLATION',
	'KW_LEVEL',
	'KW_SNAPSHOT',
	'KW_AUTOCOMMIT',
	'KW_CACHE',
	'KW_PRIMARY',
	'KW_FOREIGN',
	'KW_REFERENCES',
	'KW_CONSTRAINT',
	'KW_ENFORCED',
	'KW_VALIDATE',
	'KW_NOVALIDATE',
	'KW_RELY',
	'KW_NORELY',
	'KW_UNIQUE',
	'KW_KEY',
	'KW_ABORT',
	'KW_EXTRACT',
	'KW_FLOOR',
	'KW_MERGE',
	'KW_MATCHED',
	'KW_REPL',
	'KW_DUMP',
	'KW_STATUS',
	'KW_VECTORIZATION',
	'KW_SUMMARY',
	'KW_OPERATOR',
	'KW_EXPRESSION',
	'KW_DETAIL',
	'KW_WAIT',
	'KW_RESOURCE',
	'KW_PLAN',
	'KW_QUERY_PARALLELISM',
	'KW_PLANS',
	'KW_ACTIVATE',
	'KW_DEFAULT',
	'KW_CHECK',
	'KW_POOL',
	'KW_MOVE',
	'KW_DO',
	'KW_ALLOC_FRACTION',
	'KW_SCHEDULING_POLICY',
	'KW_PATH',
	'KW_MAPPING',
	'KW_WORKLOAD',
	'KW_MANAGEMENT',
	'KW_ACTIVE',
	'KW_UNMANAGED',
	'KW_APPLICATION',
	'KW_SYNC',
	'KW_SEQUENCEFILE',
	'KW_TEXTFILE',
	'KW_RCFILE',
	'KW_ORC',
	'KW_PARQUET',
	'KW_DELTA',
	'KW_AVRO',
	'KW_CSV',
	'KW_JSON',
	'KW_JSONFILE',
	'KW_BLOOMFILTER',
	'DOT',
	'COLON',
	'COMMA',
	'SEMICOLON',
	'LPAREN',
	'RPAREN',
	'LSQUARE',
	'RSQUARE',
	'LCURLY',
	'RCURLY',
	'EQUAL',
	'EQUAL_NS',
	'NOTEQUAL',
	'LESSTHANOREQUALTO',
	'LESSTHAN',
	'GREATERTHANOREQUALTO',
	'GREATERTHAN',
	'DIVIDE',
	'PLUS',
	'MINUS',
	'STAR',
	'MOD',
	'DIV',
	'AMPERSAND',
	'TILDE',
	'BITWISEOR',
	'CONCATENATE',
	'BITWISEXOR',
	'QUESTION',
	'DOLLAR',
	'StringLiteral',
	'CharSetLiteral',
	'IntegralLiteral',
	'NumberLiteral',
	'ByteLengthLiteral',
	'Number',
	'Identifier',
	'QuotedIdentifier',
	'CharSetName',
	'WS',
	'LINE_COMMENT',
	'QUERY_HINT',
	'SHOW_HINT',
	'HIDDEN_HINT',
];

var ruleNames = [
	'statements',
	'statementSeparator',
	'empty',
	'statement',
	'explainStatement',
	'explainOption',
	'vectorizationOnly',
	'vectorizatonDetail',
	'execStatement',
	'loadStatement',
	'replicationClause',
	'exportStatement',
	'importStatement',
	'replDumpStatement',
	'replLoadStatement',
	'replConfigs',
	'replConfigsList',
	'replStatusStatement',
	'ddlStatement',
	'ifExists',
	'restrictOrCascade',
	'ifNotExists',
	'rewriteEnabled',
	'rewriteDisabled',
	'storedAsDirs',
	'orReplace',
	'createDatabaseStatement',
	'dbLocation',
	'dbProperties',
	'dbPropertiesList',
	'switchDatabaseStatement',
	'dropDatabaseStatement',
	'databaseComment',
	'createTableStatement',
	'truncateTableStatement',
	'dropTableStatement',
	'alterStatement',
	'alterTableStatementSuffix',
	'alterTblPartitionStatementSuffix',
	'alterStatementPartitionKeyType',
	'alterViewStatementSuffix',
	'alterMaterializedViewStatementSuffix',
	'alterDatabaseStatementSuffix',
	'alterDatabaseSuffixProperties',
	'alterDatabaseSuffixSetOwner',
	'alterDatabaseSuffixSetLocation',
	'alterStatementSuffixRename',
	'alterStatementSuffixAddCol',
	'alterStatementSuffixAddConstraint',
	'alterStatementSuffixUpdateColumns',
	'alterStatementSuffixDropConstraint',
	'alterStatementSuffixRenameCol',
	'alterStatementSuffixUpdateStatsCol',
	'alterStatementSuffixUpdateStats',
	'alterStatementChangeColPosition',
	'alterStatementSuffixAddPartitions',
	'alterStatementSuffixAddPartitionsElement',
	'alterStatementSuffixTouch',
	'alterStatementSuffixArchive',
	'alterStatementSuffixUnArchive',
	'partitionLocation',
	'alterStatementSuffixDropPartitions',
	'alterStatementSuffixProperties',
	'alterViewSuffixProperties',
	'alterMaterializedViewSuffixRewrite',
	'alterMaterializedViewSuffixRebuild',
	'alterStatementSuffixSerdeProperties',
	'alterIndexStatementSuffix',
	'alterStatementSuffixFileFormat',
	'alterStatementSuffixClusterbySortby',
	'alterTblPartitionStatementSuffixSkewedLocation',
	'skewedLocations',
	'skewedLocationsList',
	'skewedLocationMap',
	'alterStatementSuffixLocation',
	'alterStatementSuffixSkewedby',
	'alterStatementSuffixExchangePartition',
	'alterStatementSuffixRenamePart',
	'alterStatementSuffixStatsPart',
	'alterStatementSuffixMergeFiles',
	'alterStatementSuffixBucketNum',
	'createIndexStatement',
	'createIndexMainStatement',
	'dropIndexStatement',
	'createBloomfilterIndexStatement',
	'createBloomfilterIndexMainStatement',
	'bloomfilterColumnParenthesesList',
	'bloomfilterColumnNameList',
	'bloomfilterColumnName',
	'bloomfilterIndexOptions',
	'dropBloomfilterIndexStatement',
	'dropBloomfilterIndexMainStatement',
	'tablePartitionPrefix',
	'blocking',
	'alterStatementSuffixCompact',
	'alterStatementSuffixSetOwner',
	'fileFormat',
	'inputFileFormat',
	'tabTypeExpr',
	'partTypeExpr',
	'tabPartColTypeExpr',
	'descStatement',
	'analyzeStatement',
	'showStatement',
	'lockStatement',
	'lockDatabase',
	'lockMode',
	'unlockStatement',
	'unlockDatabase',
	'createRoleStatement',
	'dropRoleStatement',
	'grantPrivileges',
	'revokePrivileges',
	'grantRole',
	'revokeRole',
	'showRoleGrants',
	'showRoles',
	'showCurrentRole',
	'setRole',
	'showGrants',
	'showRolePrincipals',
	'privilegeIncludeColObject',
	'privilegeObject',
	'privObject',
	'privObjectCols',
	'privilegeList',
	'privlegeDef',
	'privilegeType',
	'principalSpecification',
	'principalName',
	'withGrantOption',
	'grantOptionFor',
	'adminOptionFor',
	'withAdminOption',
	'metastoreCheck',
	'resourceList',
	'resource',
	'resourceType',
	'createFunctionStatement',
	'dropFunctionStatement',
	'reloadFunctionStatement',
	'createMacroStatement',
	'dropMacroStatement',
	'createViewStatement',
	'createMaterializedViewStatement',
	'viewPartition',
	'dropViewStatement',
	'dropMaterializedViewStatement',
	'showFunctionIdentifier',
	'showStmtIdentifier',
	'tableComment',
	'tableUsingDataSource',
	'tableDataSource',
	'tablePartition',
	'tableBuckets',
	'tableSkewed',
	'rowFormat',
	'recordReader',
	'recordWriter',
	'rowFormatSerde',
	'rowFormatDelimited',
	'tableRowFormat',
	'tablePropertiesPrefixed',
	'tableProperties',
	'tablePropertiesList',
	'keyValueProperty',
	'keyValue',
	'keyProperty',
	'tableRowFormatFieldIdentifier',
	'tableRowFormatFieldIdentifierEcapedBy',
	'tableRowFormatCollItemsIdentifier',
	'tableRowFormatMapKeysIdentifier',
	'tableRowFormatLinesIdentifier',
	'tableRowNullFormat',
	'tableFileFormat',
	'tableFileFormatStoredBy',
	'tableFileFormatStoredAs',
	'tableFileFormatStoredAsFormat',
	'tableInputOutputFileFormat',
	'tableInputLiteral',
	'tableOutputLiteral',
	'tableLocation',
	'columnNameTypeList',
	'columnNameTypeOrConstraintList',
	'columnNameColonTypeList',
	'columnNameList',
	'columnName',
	'extColumnName',
	'columnNameOrderList',
	'columnParenthesesList',
	'enableValidateSpecification',
	'enableSpecification',
	'validateSpecification',
	'enforcedSpecification',
	'relySpecification',
	'createConstraint',
	'alterConstraintWithName',
	'tableLevelConstraint',
	'pkUkConstraint',
	'checkConstraint',
	'createForeignKey',
	'alterForeignKeyWithName',
	'skewedValueElement',
	'skewedColumnValuePairList',
	'skewedColumnValuePair',
	'skewedColumnValues',
	'skewedColumnValue',
	'skewedValueLocationElement',
	'orderSpecification',
	'nullOrdering',
	'columnNameOrder',
	'columnNameCommentList',
	'columnNameComment',
	'columnRefOrder',
	'columnNameType',
	'columnNameTypeOrConstraint',
	'tableConstraint',
	'columnNameTypeConstraint',
	'partitionedColumnNameTypeConstraint',
	'columnConstraint',
	'foreignKeyConstraint',
	'colConstraint',
	'alterColumnConstraint',
	'alterForeignKeyConstraint',
	'alterColConstraint',
	'columnConstraintType',
	'defaultVal',
	'tableConstraintType',
	'constraintOptsCreate',
	'constraintOptsAlter',
	'columnNameColonType',
	'colType',
	'colTypeList',
	'type_db_col',
	'primitiveType',
	'listType',
	'structType',
	'mapType',
	'unionType',
	'setOperator',
	'queryStatementExpression',
	'queryStatementExpressionBody',
	'withClause',
	'cteStatement',
	'fromStatement',
	'singleFromStatement',
	'regularBody',
	'atomSelectStatement',
	'selectStatement',
	'setOpSelectStatement',
	'selectStatementWithCTE',
	'body',
	'insertClause',
	'destination',
	'limitClause',
	'deleteStatement',
	'columnAssignmentClause',
	'setColumnsClause',
	'updateStatement',
	'sqlTransactionStatement',
	'startTransactionStatement',
	'transactionMode',
	'transactionAccessMode',
	'isolationLevel',
	'levelOfIsolation',
	'commitStatement',
	'rollbackStatement',
	'setAutoCommitStatement',
	'abortTransactionStatement',
	'mergeStatement',
	'whenClauses',
	'whenNotMatchedClause',
	'whenMatchedAndClause',
	'whenMatchedThenClause',
	'updateOrDelete',
	'killQueryStatement',
	'selectClause',
	'selectList',
	'selectTrfmClause',
	'selectItem',
	'trfmClause',
	'selectExpression',
	'selectExpressionList',
	'window_clause',
	'window_defn',
	'window_specification',
	'window_frame',
	'window_range_expression',
	'window_value_expression',
	'window_frame_start_boundary',
	'window_frame_boundary',
	'tableAllColumns',
	'tableOrColumn',
	'expressionList',
	'aliasList',
	'fromClause',
	'fromSource',
	'atomjoinSource',
	'joinSource',
	'joinSourcePart',
	'uniqueJoinSource',
	'uniqueJoinExpr',
	'uniqueJoinToken',
	'joinToken',
	'lateralView',
	'tableAlias',
	'tableBucketSample',
	'splitSample',
	'tableSample',
	'tableSource',
	'uniqueJoinTableSource',
	'tableName',
	'viewName',
	'subQuerySource',
	'partitioningSpec',
	'partitionTableFunctionSource',
	'partitionedTableFunction',
	'whereClause',
	'searchCondition',
	'valuesClause',
	'valuesTableConstructor',
	'valueRowConstructor',
	'virtualTableSource',
	'groupByClause',
	'groupby_expression',
	'groupByEmpty',
	'rollupStandard',
	'rollupOldSyntax',
	'groupingSetExpression',
	'groupingSetExpressionMultiple',
	'groupingExpressionSingle',
	'havingClause',
	'havingCondition',
	'expressionsInParenthesis',
	'expressionsNotInParenthesis',
	'expressionPart',
	'expressions',
	'columnRefOrderInParenthesis',
	'columnRefOrderNotInParenthesis',
	'orderByClause',
	'clusterByClause',
	'partitionByClause',
	'distributeByClause',
	'sortByClause',
	'functionStatement',
	'functionName',
	'castExpression',
	'caseExpression',
	'whenExpression',
	'floorExpression',
	'floorDateQualifiers',
	'extractExpression',
	'timeQualifiers',
	'constant',
	'stringLiteralSequence',
	'charSetStringLiteral',
	'dateLiteral',
	'timestampLiteral',
	'timestampLocalTZLiteral',
	'intervalValue',
	'intervalLiteral',
	'intervalExpression',
	'intervalQualifiers',
	'atomExpression',
	'precedenceUnaryOperator',
	'isCondition',
	'precedenceBitwiseXorOperator',
	'precedenceStarOperator',
	'precedencePlusOperator',
	'precedenceConcatenateOperator',
	'precedenceAmpersandOperator',
	'precedenceBitwiseOrOperator',
	'precedenceRegexpOperator',
	'precedenceSimilarOperator',
	'precedenceDistinctOperator',
	'precedenceEqualOperator',
	'precedenceNotOperator',
	'precedenceAndOperator',
	'precedenceOrOperator',
	'expression',
	'subQueryExpression',
	'precedenceSimilarExpressionPart',
	'precedenceSimilarExpressionAtom',
	'precedenceSimilarExpressionIn',
	'precedenceSimilarExpressionPartNot',
	'booleanValue',
	'booleanValueTok',
	'tableOrPartition',
	'partitionSpec',
	'partitionVal',
	'dropPartitionSpec',
	'dropPartitionVal',
	'dropPartitionOperator',
	'sysFuncNames',
	'descFuncNames',
	'identifier',
	'functionIdentifier',
	'principalIdentifier',
	'nonReserved',
	'sql11ReservedKeywordsUsedAsFunctionName',
	'resourcePlanDdlStatements',
	'rpAssign',
	'rpAssignList',
	'rpUnassign',
	'rpUnassignList',
	'createResourcePlanStatement',
	'createResourcePlanStatementLikeExisting',
	'createNewResourcePlanStatement',
	'withReplace',
	'activate',
	'enable',
	'disable',
	'unmanaged',
	'alterResourcePlanStatement',
	'alterResourcePlanRenameSuffix',
	'globalWmStatement',
	'replaceResourcePlanStatement',
	'dropResourcePlanStatement',
	'poolPath',
	'triggerExpression',
	'triggerExpressionStandalone',
	'triggerOrExpression',
	'triggerAndExpression',
	'triggerAtomExpression',
	'triggerLiteral',
	'comparisionOperator',
	'triggerActionExpression',
	'triggerActionExpressionStandalone',
	'createTriggerStatement',
	'alterTriggerStatement',
	'triggerConditionExpression',
	'dropTriggerStatement',
	'poolAssign',
	'poolAssignList',
	'createPoolStatement',
	'alterPoolStatement',
	'dropPoolStatement',
	'createMappingStatement',
	'alterMappingStatement',
	'dropMappingStatement',
];

function HiveParser(input) {
	antlr4.Parser.call(this, input);
	this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
	this.ruleNames = ruleNames;
	this.literalNames = literalNames;
	this.symbolicNames = symbolicNames;
	return this;
}

HiveParser.prototype = Object.create(antlr4.Parser.prototype);
HiveParser.prototype.constructor = HiveParser;

Object.defineProperty(HiveParser.prototype, 'atn', {
	get: function () {
		return atn;
	},
});

HiveParser.EOF = antlr4.Token.EOF;
HiveParser.KW_TRUE = 1;
HiveParser.KW_FALSE = 2;
HiveParser.KW_ALL = 3;
HiveParser.KW_NONE = 4;
HiveParser.KW_AND = 5;
HiveParser.KW_OR = 6;
HiveParser.KW_NOT = 7;
HiveParser.KW_LIKE = 8;
HiveParser.KW_ANY = 9;
HiveParser.KW_IF = 10;
HiveParser.KW_EXISTS = 11;
HiveParser.KW_ASC = 12;
HiveParser.KW_DESC = 13;
HiveParser.KW_NULLS = 14;
HiveParser.KW_LAST = 15;
HiveParser.KW_ORDER = 16;
HiveParser.KW_GROUP = 17;
HiveParser.KW_BY = 18;
HiveParser.KW_HAVING = 19;
HiveParser.KW_WHERE = 20;
HiveParser.KW_FROM = 21;
HiveParser.KW_AS = 22;
HiveParser.KW_SELECT = 23;
HiveParser.KW_DISTINCT = 24;
HiveParser.KW_INSERT = 25;
HiveParser.KW_OVERWRITE = 26;
HiveParser.KW_OUTER = 27;
HiveParser.KW_UNIQUEJOIN = 28;
HiveParser.KW_PRESERVE = 29;
HiveParser.KW_JOIN = 30;
HiveParser.KW_LEFT = 31;
HiveParser.KW_RIGHT = 32;
HiveParser.KW_FULL = 33;
HiveParser.KW_ON = 34;
HiveParser.KW_PARTITION = 35;
HiveParser.KW_PARTITIONS = 36;
HiveParser.KW_TABLE = 37;
HiveParser.KW_TABLES = 38;
HiveParser.KW_COLUMNS = 39;
HiveParser.KW_INDEX = 40;
HiveParser.KW_INDEXES = 41;
HiveParser.KW_REBUILD = 42;
HiveParser.KW_FUNCTIONS = 43;
HiveParser.KW_SHOW = 44;
HiveParser.KW_MSCK = 45;
HiveParser.KW_REPAIR = 46;
HiveParser.KW_DIRECTORY = 47;
HiveParser.KW_LOCAL = 48;
HiveParser.KW_TRANSFORM = 49;
HiveParser.KW_USING = 50;
HiveParser.KW_CLUSTER = 51;
HiveParser.KW_DISTRIBUTE = 52;
HiveParser.KW_SORT = 53;
HiveParser.KW_UNION = 54;
HiveParser.KW_EXCEPT = 55;
HiveParser.KW_LOAD = 56;
HiveParser.KW_EXPORT = 57;
HiveParser.KW_IMPORT = 58;
HiveParser.KW_REPLICATION = 59;
HiveParser.KW_METADATA = 60;
HiveParser.KW_DATA = 61;
HiveParser.KW_INPATH = 62;
HiveParser.KW_IS = 63;
HiveParser.KW_NULL = 64;
HiveParser.KW_CREATE = 65;
HiveParser.KW_EXTERNAL = 66;
HiveParser.KW_ALTER = 67;
HiveParser.KW_CHANGE = 68;
HiveParser.KW_COLUMN = 69;
HiveParser.KW_FIRST = 70;
HiveParser.KW_AFTER = 71;
HiveParser.KW_DESCRIBE = 72;
HiveParser.KW_DROP = 73;
HiveParser.KW_RENAME = 74;
HiveParser.KW_TO = 75;
HiveParser.KW_COMMENT = 76;
HiveParser.KW_BOOLEAN = 77;
HiveParser.KW_TINYINT = 78;
HiveParser.KW_SMALLINT = 79;
HiveParser.KW_INT = 80;
HiveParser.KW_BIGINT = 81;
HiveParser.KW_FLOAT = 82;
HiveParser.KW_DOUBLE = 83;
HiveParser.KW_PRECISION = 84;
HiveParser.KW_DATE = 85;
HiveParser.KW_DATETIME = 86;
HiveParser.KW_TIMESTAMP = 87;
HiveParser.KW_TIMESTAMPLOCALTZ = 88;
HiveParser.KW_TIME = 89;
HiveParser.KW_ZONE = 90;
HiveParser.KW_INTERVAL = 91;
HiveParser.KW_DECIMAL = 92;
HiveParser.KW_STRING = 93;
HiveParser.KW_CHAR = 94;
HiveParser.KW_VARCHAR = 95;
HiveParser.KW_ARRAY = 96;
HiveParser.KW_STRUCT = 97;
HiveParser.KW_MAP = 98;
HiveParser.KW_UNIONTYPE = 99;
HiveParser.KW_REDUCE = 100;
HiveParser.KW_PARTITIONED = 101;
HiveParser.KW_CLUSTERED = 102;
HiveParser.KW_SORTED = 103;
HiveParser.KW_INTO = 104;
HiveParser.KW_BUCKETS = 105;
HiveParser.KW_ROW = 106;
HiveParser.KW_ROWS = 107;
HiveParser.KW_FORMAT = 108;
HiveParser.KW_DELIMITED = 109;
HiveParser.KW_FIELDS = 110;
HiveParser.KW_TERMINATED = 111;
HiveParser.KW_ESCAPED = 112;
HiveParser.KW_COLLECTION = 113;
HiveParser.KW_ITEMS = 114;
HiveParser.KW_KEYS = 115;
HiveParser.KW_KEY_TYPE = 116;
HiveParser.KW_KILL = 117;
HiveParser.KW_LINES = 118;
HiveParser.KW_STORED = 119;
HiveParser.KW_FILEFORMAT = 120;
HiveParser.KW_INPUTFORMAT = 121;
HiveParser.KW_OUTPUTFORMAT = 122;
HiveParser.KW_INPUTDRIVER = 123;
HiveParser.KW_OUTPUTDRIVER = 124;
HiveParser.KW_ENABLE = 125;
HiveParser.KW_DISABLE = 126;
HiveParser.KW_LOCATION = 127;
HiveParser.KW_TABLESAMPLE = 128;
HiveParser.KW_BUCKET = 129;
HiveParser.KW_OUT = 130;
HiveParser.KW_OF = 131;
HiveParser.KW_PERCENT = 132;
HiveParser.KW_CAST = 133;
HiveParser.KW_ADD = 134;
HiveParser.KW_REPLACE = 135;
HiveParser.KW_RLIKE = 136;
HiveParser.KW_REGEXP = 137;
HiveParser.KW_TEMPORARY = 138;
HiveParser.KW_FUNCTION = 139;
HiveParser.KW_MACRO = 140;
HiveParser.KW_FILE = 141;
HiveParser.KW_JAR = 142;
HiveParser.KW_EXPLAIN = 143;
HiveParser.KW_EXTENDED = 144;
HiveParser.KW_FORMATTED = 145;
HiveParser.KW_DEPENDENCY = 146;
HiveParser.KW_LOGICAL = 147;
HiveParser.KW_SERDE = 148;
HiveParser.KW_WITH = 149;
HiveParser.KW_DEFERRED = 150;
HiveParser.KW_SERDEPROPERTIES = 151;
HiveParser.KW_DBPROPERTIES = 152;
HiveParser.KW_LIMIT = 153;
HiveParser.KW_OFFSET = 154;
HiveParser.KW_SET = 155;
HiveParser.KW_UNSET = 156;
HiveParser.KW_TBLPROPERTIES = 157;
HiveParser.KW_IDXPROPERTIES = 158;
HiveParser.KW_VALUE_TYPE = 159;
HiveParser.KW_ELEM_TYPE = 160;
HiveParser.KW_DEFINED = 161;
HiveParser.KW_CASE = 162;
HiveParser.KW_WHEN = 163;
HiveParser.KW_THEN = 164;
HiveParser.KW_ELSE = 165;
HiveParser.KW_END = 166;
HiveParser.KW_MAPJOIN = 167;
HiveParser.KW_STREAMTABLE = 168;
HiveParser.KW_CLUSTERSTATUS = 169;
HiveParser.KW_UTC = 170;
HiveParser.KW_UTCTIMESTAMP = 171;
HiveParser.KW_LONG = 172;
HiveParser.KW_DELETE = 173;
HiveParser.KW_PLUS = 174;
HiveParser.KW_MINUS = 175;
HiveParser.KW_FETCH = 176;
HiveParser.KW_INTERSECT = 177;
HiveParser.KW_VIEW = 178;
HiveParser.KW_VIEWS = 179;
HiveParser.KW_IN = 180;
HiveParser.KW_DATABASE = 181;
HiveParser.KW_DATABASES = 182;
HiveParser.KW_MATERIALIZED = 183;
HiveParser.KW_SCHEMA = 184;
HiveParser.KW_SCHEMAS = 185;
HiveParser.KW_GRANT = 186;
HiveParser.KW_REVOKE = 187;
HiveParser.KW_SSL = 188;
HiveParser.KW_UNDO = 189;
HiveParser.KW_LOCK = 190;
HiveParser.KW_LOCKS = 191;
HiveParser.KW_UNLOCK = 192;
HiveParser.KW_SHARED = 193;
HiveParser.KW_EXCLUSIVE = 194;
HiveParser.KW_PROCEDURE = 195;
HiveParser.KW_UNSIGNED = 196;
HiveParser.KW_WHILE = 197;
HiveParser.KW_READ = 198;
HiveParser.KW_READS = 199;
HiveParser.KW_PURGE = 200;
HiveParser.KW_RANGE = 201;
HiveParser.KW_ANALYZE = 202;
HiveParser.KW_BEFORE = 203;
HiveParser.KW_BETWEEN = 204;
HiveParser.KW_BOTH = 205;
HiveParser.KW_BINARY = 206;
HiveParser.KW_CROSS = 207;
HiveParser.KW_CONTINUE = 208;
HiveParser.KW_CURSOR = 209;
HiveParser.KW_TRIGGER = 210;
HiveParser.KW_RECORDREADER = 211;
HiveParser.KW_RECORDWRITER = 212;
HiveParser.KW_SEMI = 213;
HiveParser.KW_LATERAL = 214;
HiveParser.KW_TOUCH = 215;
HiveParser.KW_ARCHIVE = 216;
HiveParser.KW_UNARCHIVE = 217;
HiveParser.KW_COMPUTE = 218;
HiveParser.KW_STATISTICS = 219;
HiveParser.KW_USE = 220;
HiveParser.KW_OPTIONS = 221;
HiveParser.KW_OPTION = 222;
HiveParser.KW_CONCATENATE = 223;
HiveParser.KW_SHOW_DATABASE = 224;
HiveParser.KW_UPDATE = 225;
HiveParser.KW_RESTRICT = 226;
HiveParser.KW_CASCADE = 227;
HiveParser.KW_SKEWED = 228;
HiveParser.KW_ROLLUP = 229;
HiveParser.KW_CUBE = 230;
HiveParser.KW_DIRECTORIES = 231;
HiveParser.KW_FOR = 232;
HiveParser.KW_WINDOW = 233;
HiveParser.KW_UNBOUNDED = 234;
HiveParser.KW_PRECEDING = 235;
HiveParser.KW_FOLLOWING = 236;
HiveParser.KW_CURRENT = 237;
HiveParser.KW_CURRENT_DATE = 238;
HiveParser.KW_CURRENT_TIMESTAMP = 239;
HiveParser.KW_LESS = 240;
HiveParser.KW_MORE = 241;
HiveParser.KW_OVER = 242;
HiveParser.KW_GROUPING = 243;
HiveParser.KW_SETS = 244;
HiveParser.KW_TRUNCATE = 245;
HiveParser.KW_NOSCAN = 246;
HiveParser.KW_USER = 247;
HiveParser.KW_ROLE = 248;
HiveParser.KW_ROLES = 249;
HiveParser.KW_INNER = 250;
HiveParser.KW_EXCHANGE = 251;
HiveParser.KW_URI = 252;
HiveParser.KW_SERVER = 253;
HiveParser.KW_ADMIN = 254;
HiveParser.KW_OWNER = 255;
HiveParser.KW_PRINCIPALS = 256;
HiveParser.KW_COMPACT = 257;
HiveParser.KW_COMPACTIONS = 258;
HiveParser.KW_TRANSACTIONS = 259;
HiveParser.KW_REWRITE = 260;
HiveParser.KW_AUTHORIZATION = 261;
HiveParser.KW_REOPTIMIZATION = 262;
HiveParser.KW_CONF = 263;
HiveParser.KW_VALUES = 264;
HiveParser.KW_RELOAD = 265;
HiveParser.KW_YEAR = 266;
HiveParser.KW_QUERY = 267;
HiveParser.KW_QUARTER = 268;
HiveParser.KW_MONTH = 269;
HiveParser.KW_WEEK = 270;
HiveParser.KW_DAY = 271;
HiveParser.KW_DOW = 272;
HiveParser.KW_HOUR = 273;
HiveParser.KW_MINUTE = 274;
HiveParser.KW_SECOND = 275;
HiveParser.KW_START = 276;
HiveParser.KW_TRANSACTION = 277;
HiveParser.KW_COMMIT = 278;
HiveParser.KW_ROLLBACK = 279;
HiveParser.KW_WORK = 280;
HiveParser.KW_ONLY = 281;
HiveParser.KW_WRITE = 282;
HiveParser.KW_ISOLATION = 283;
HiveParser.KW_LEVEL = 284;
HiveParser.KW_SNAPSHOT = 285;
HiveParser.KW_AUTOCOMMIT = 286;
HiveParser.KW_CACHE = 287;
HiveParser.KW_PRIMARY = 288;
HiveParser.KW_FOREIGN = 289;
HiveParser.KW_REFERENCES = 290;
HiveParser.KW_CONSTRAINT = 291;
HiveParser.KW_ENFORCED = 292;
HiveParser.KW_VALIDATE = 293;
HiveParser.KW_NOVALIDATE = 294;
HiveParser.KW_RELY = 295;
HiveParser.KW_NORELY = 296;
HiveParser.KW_UNIQUE = 297;
HiveParser.KW_KEY = 298;
HiveParser.KW_ABORT = 299;
HiveParser.KW_EXTRACT = 300;
HiveParser.KW_FLOOR = 301;
HiveParser.KW_MERGE = 302;
HiveParser.KW_MATCHED = 303;
HiveParser.KW_REPL = 304;
HiveParser.KW_DUMP = 305;
HiveParser.KW_STATUS = 306;
HiveParser.KW_VECTORIZATION = 307;
HiveParser.KW_SUMMARY = 308;
HiveParser.KW_OPERATOR = 309;
HiveParser.KW_EXPRESSION = 310;
HiveParser.KW_DETAIL = 311;
HiveParser.KW_WAIT = 312;
HiveParser.KW_RESOURCE = 313;
HiveParser.KW_PLAN = 314;
HiveParser.KW_QUERY_PARALLELISM = 315;
HiveParser.KW_PLANS = 316;
HiveParser.KW_ACTIVATE = 317;
HiveParser.KW_DEFAULT = 318;
HiveParser.KW_CHECK = 319;
HiveParser.KW_POOL = 320;
HiveParser.KW_MOVE = 321;
HiveParser.KW_DO = 322;
HiveParser.KW_ALLOC_FRACTION = 323;
HiveParser.KW_SCHEDULING_POLICY = 324;
HiveParser.KW_PATH = 325;
HiveParser.KW_MAPPING = 326;
HiveParser.KW_WORKLOAD = 327;
HiveParser.KW_MANAGEMENT = 328;
HiveParser.KW_ACTIVE = 329;
HiveParser.KW_UNMANAGED = 330;
HiveParser.KW_APPLICATION = 331;
HiveParser.KW_SYNC = 332;
HiveParser.KW_SEQUENCEFILE = 333;
HiveParser.KW_TEXTFILE = 334;
HiveParser.KW_RCFILE = 335;
HiveParser.KW_ORC = 336;
HiveParser.KW_PARQUET = 337;
HiveParser.KW_DELTA = 338;
HiveParser.KW_AVRO = 339;
HiveParser.KW_CSV = 340;
HiveParser.KW_JSON = 341;
HiveParser.KW_JSONFILE = 342;
HiveParser.KW_BLOOMFILTER = 343;
HiveParser.DOT = 344;
HiveParser.COLON = 345;
HiveParser.COMMA = 346;
HiveParser.SEMICOLON = 347;
HiveParser.LPAREN = 348;
HiveParser.RPAREN = 349;
HiveParser.LSQUARE = 350;
HiveParser.RSQUARE = 351;
HiveParser.LCURLY = 352;
HiveParser.RCURLY = 353;
HiveParser.EQUAL = 354;
HiveParser.EQUAL_NS = 355;
HiveParser.NOTEQUAL = 356;
HiveParser.LESSTHANOREQUALTO = 357;
HiveParser.LESSTHAN = 358;
HiveParser.GREATERTHANOREQUALTO = 359;
HiveParser.GREATERTHAN = 360;
HiveParser.DIVIDE = 361;
HiveParser.PLUS = 362;
HiveParser.MINUS = 363;
HiveParser.STAR = 364;
HiveParser.MOD = 365;
HiveParser.DIV = 366;
HiveParser.AMPERSAND = 367;
HiveParser.TILDE = 368;
HiveParser.BITWISEOR = 369;
HiveParser.CONCATENATE = 370;
HiveParser.BITWISEXOR = 371;
HiveParser.QUESTION = 372;
HiveParser.DOLLAR = 373;
HiveParser.StringLiteral = 374;
HiveParser.CharSetLiteral = 375;
HiveParser.IntegralLiteral = 376;
HiveParser.NumberLiteral = 377;
HiveParser.ByteLengthLiteral = 378;
HiveParser.Number = 379;
HiveParser.Identifier = 380;
HiveParser.QuotedIdentifier = 381;
HiveParser.CharSetName = 382;
HiveParser.WS = 383;
HiveParser.LINE_COMMENT = 384;
HiveParser.QUERY_HINT = 385;
HiveParser.SHOW_HINT = 386;
HiveParser.HIDDEN_HINT = 387;

HiveParser.RULE_statements = 0;
HiveParser.RULE_statementSeparator = 1;
HiveParser.RULE_empty = 2;
HiveParser.RULE_statement = 3;
HiveParser.RULE_explainStatement = 4;
HiveParser.RULE_explainOption = 5;
HiveParser.RULE_vectorizationOnly = 6;
HiveParser.RULE_vectorizatonDetail = 7;
HiveParser.RULE_execStatement = 8;
HiveParser.RULE_loadStatement = 9;
HiveParser.RULE_replicationClause = 10;
HiveParser.RULE_exportStatement = 11;
HiveParser.RULE_importStatement = 12;
HiveParser.RULE_replDumpStatement = 13;
HiveParser.RULE_replLoadStatement = 14;
HiveParser.RULE_replConfigs = 15;
HiveParser.RULE_replConfigsList = 16;
HiveParser.RULE_replStatusStatement = 17;
HiveParser.RULE_ddlStatement = 18;
HiveParser.RULE_ifExists = 19;
HiveParser.RULE_restrictOrCascade = 20;
HiveParser.RULE_ifNotExists = 21;
HiveParser.RULE_rewriteEnabled = 22;
HiveParser.RULE_rewriteDisabled = 23;
HiveParser.RULE_storedAsDirs = 24;
HiveParser.RULE_orReplace = 25;
HiveParser.RULE_createDatabaseStatement = 26;
HiveParser.RULE_dbLocation = 27;
HiveParser.RULE_dbProperties = 28;
HiveParser.RULE_dbPropertiesList = 29;
HiveParser.RULE_switchDatabaseStatement = 30;
HiveParser.RULE_dropDatabaseStatement = 31;
HiveParser.RULE_databaseComment = 32;
HiveParser.RULE_createTableStatement = 33;
HiveParser.RULE_truncateTableStatement = 34;
HiveParser.RULE_dropTableStatement = 35;
HiveParser.RULE_alterStatement = 36;
HiveParser.RULE_alterTableStatementSuffix = 37;
HiveParser.RULE_alterTblPartitionStatementSuffix = 38;
HiveParser.RULE_alterStatementPartitionKeyType = 39;
HiveParser.RULE_alterViewStatementSuffix = 40;
HiveParser.RULE_alterMaterializedViewStatementSuffix = 41;
HiveParser.RULE_alterDatabaseStatementSuffix = 42;
HiveParser.RULE_alterDatabaseSuffixProperties = 43;
HiveParser.RULE_alterDatabaseSuffixSetOwner = 44;
HiveParser.RULE_alterDatabaseSuffixSetLocation = 45;
HiveParser.RULE_alterStatementSuffixRename = 46;
HiveParser.RULE_alterStatementSuffixAddCol = 47;
HiveParser.RULE_alterStatementSuffixAddConstraint = 48;
HiveParser.RULE_alterStatementSuffixUpdateColumns = 49;
HiveParser.RULE_alterStatementSuffixDropConstraint = 50;
HiveParser.RULE_alterStatementSuffixRenameCol = 51;
HiveParser.RULE_alterStatementSuffixUpdateStatsCol = 52;
HiveParser.RULE_alterStatementSuffixUpdateStats = 53;
HiveParser.RULE_alterStatementChangeColPosition = 54;
HiveParser.RULE_alterStatementSuffixAddPartitions = 55;
HiveParser.RULE_alterStatementSuffixAddPartitionsElement = 56;
HiveParser.RULE_alterStatementSuffixTouch = 57;
HiveParser.RULE_alterStatementSuffixArchive = 58;
HiveParser.RULE_alterStatementSuffixUnArchive = 59;
HiveParser.RULE_partitionLocation = 60;
HiveParser.RULE_alterStatementSuffixDropPartitions = 61;
HiveParser.RULE_alterStatementSuffixProperties = 62;
HiveParser.RULE_alterViewSuffixProperties = 63;
HiveParser.RULE_alterMaterializedViewSuffixRewrite = 64;
HiveParser.RULE_alterMaterializedViewSuffixRebuild = 65;
HiveParser.RULE_alterStatementSuffixSerdeProperties = 66;
HiveParser.RULE_alterIndexStatementSuffix = 67;
HiveParser.RULE_alterStatementSuffixFileFormat = 68;
HiveParser.RULE_alterStatementSuffixClusterbySortby = 69;
HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation = 70;
HiveParser.RULE_skewedLocations = 71;
HiveParser.RULE_skewedLocationsList = 72;
HiveParser.RULE_skewedLocationMap = 73;
HiveParser.RULE_alterStatementSuffixLocation = 74;
HiveParser.RULE_alterStatementSuffixSkewedby = 75;
HiveParser.RULE_alterStatementSuffixExchangePartition = 76;
HiveParser.RULE_alterStatementSuffixRenamePart = 77;
HiveParser.RULE_alterStatementSuffixStatsPart = 78;
HiveParser.RULE_alterStatementSuffixMergeFiles = 79;
HiveParser.RULE_alterStatementSuffixBucketNum = 80;
HiveParser.RULE_createIndexStatement = 81;
HiveParser.RULE_createIndexMainStatement = 82;
HiveParser.RULE_dropIndexStatement = 83;
HiveParser.RULE_createBloomfilterIndexStatement = 84;
HiveParser.RULE_createBloomfilterIndexMainStatement = 85;
HiveParser.RULE_bloomfilterColumnParenthesesList = 86;
HiveParser.RULE_bloomfilterColumnNameList = 87;
HiveParser.RULE_bloomfilterColumnName = 88;
HiveParser.RULE_bloomfilterIndexOptions = 89;
HiveParser.RULE_dropBloomfilterIndexStatement = 90;
HiveParser.RULE_dropBloomfilterIndexMainStatement = 91;
HiveParser.RULE_tablePartitionPrefix = 92;
HiveParser.RULE_blocking = 93;
HiveParser.RULE_alterStatementSuffixCompact = 94;
HiveParser.RULE_alterStatementSuffixSetOwner = 95;
HiveParser.RULE_fileFormat = 96;
HiveParser.RULE_inputFileFormat = 97;
HiveParser.RULE_tabTypeExpr = 98;
HiveParser.RULE_partTypeExpr = 99;
HiveParser.RULE_tabPartColTypeExpr = 100;
HiveParser.RULE_descStatement = 101;
HiveParser.RULE_analyzeStatement = 102;
HiveParser.RULE_showStatement = 103;
HiveParser.RULE_lockStatement = 104;
HiveParser.RULE_lockDatabase = 105;
HiveParser.RULE_lockMode = 106;
HiveParser.RULE_unlockStatement = 107;
HiveParser.RULE_unlockDatabase = 108;
HiveParser.RULE_createRoleStatement = 109;
HiveParser.RULE_dropRoleStatement = 110;
HiveParser.RULE_grantPrivileges = 111;
HiveParser.RULE_revokePrivileges = 112;
HiveParser.RULE_grantRole = 113;
HiveParser.RULE_revokeRole = 114;
HiveParser.RULE_showRoleGrants = 115;
HiveParser.RULE_showRoles = 116;
HiveParser.RULE_showCurrentRole = 117;
HiveParser.RULE_setRole = 118;
HiveParser.RULE_showGrants = 119;
HiveParser.RULE_showRolePrincipals = 120;
HiveParser.RULE_privilegeIncludeColObject = 121;
HiveParser.RULE_privilegeObject = 122;
HiveParser.RULE_privObject = 123;
HiveParser.RULE_privObjectCols = 124;
HiveParser.RULE_privilegeList = 125;
HiveParser.RULE_privlegeDef = 126;
HiveParser.RULE_privilegeType = 127;
HiveParser.RULE_principalSpecification = 128;
HiveParser.RULE_principalName = 129;
HiveParser.RULE_withGrantOption = 130;
HiveParser.RULE_grantOptionFor = 131;
HiveParser.RULE_adminOptionFor = 132;
HiveParser.RULE_withAdminOption = 133;
HiveParser.RULE_metastoreCheck = 134;
HiveParser.RULE_resourceList = 135;
HiveParser.RULE_resource = 136;
HiveParser.RULE_resourceType = 137;
HiveParser.RULE_createFunctionStatement = 138;
HiveParser.RULE_dropFunctionStatement = 139;
HiveParser.RULE_reloadFunctionStatement = 140;
HiveParser.RULE_createMacroStatement = 141;
HiveParser.RULE_dropMacroStatement = 142;
HiveParser.RULE_createViewStatement = 143;
HiveParser.RULE_createMaterializedViewStatement = 144;
HiveParser.RULE_viewPartition = 145;
HiveParser.RULE_dropViewStatement = 146;
HiveParser.RULE_dropMaterializedViewStatement = 147;
HiveParser.RULE_showFunctionIdentifier = 148;
HiveParser.RULE_showStmtIdentifier = 149;
HiveParser.RULE_tableComment = 150;
HiveParser.RULE_tableUsingDataSource = 151;
HiveParser.RULE_tableDataSource = 152;
HiveParser.RULE_tablePartition = 153;
HiveParser.RULE_tableBuckets = 154;
HiveParser.RULE_tableSkewed = 155;
HiveParser.RULE_rowFormat = 156;
HiveParser.RULE_recordReader = 157;
HiveParser.RULE_recordWriter = 158;
HiveParser.RULE_rowFormatSerde = 159;
HiveParser.RULE_rowFormatDelimited = 160;
HiveParser.RULE_tableRowFormat = 161;
HiveParser.RULE_tablePropertiesPrefixed = 162;
HiveParser.RULE_tableProperties = 163;
HiveParser.RULE_tablePropertiesList = 164;
HiveParser.RULE_keyValueProperty = 165;
HiveParser.RULE_keyValue = 166;
HiveParser.RULE_keyProperty = 167;
HiveParser.RULE_tableRowFormatFieldIdentifier = 168;
HiveParser.RULE_tableRowFormatFieldIdentifierEcapedBy = 169;
HiveParser.RULE_tableRowFormatCollItemsIdentifier = 170;
HiveParser.RULE_tableRowFormatMapKeysIdentifier = 171;
HiveParser.RULE_tableRowFormatLinesIdentifier = 172;
HiveParser.RULE_tableRowNullFormat = 173;
HiveParser.RULE_tableFileFormat = 174;
HiveParser.RULE_tableFileFormatStoredBy = 175;
HiveParser.RULE_tableFileFormatStoredAs = 176;
HiveParser.RULE_tableFileFormatStoredAsFormat = 177;
HiveParser.RULE_tableInputOutputFileFormat = 178;
HiveParser.RULE_tableInputLiteral = 179;
HiveParser.RULE_tableOutputLiteral = 180;
HiveParser.RULE_tableLocation = 181;
HiveParser.RULE_columnNameTypeList = 182;
HiveParser.RULE_columnNameTypeOrConstraintList = 183;
HiveParser.RULE_columnNameColonTypeList = 184;
HiveParser.RULE_columnNameList = 185;
HiveParser.RULE_columnName = 186;
HiveParser.RULE_extColumnName = 187;
HiveParser.RULE_columnNameOrderList = 188;
HiveParser.RULE_columnParenthesesList = 189;
HiveParser.RULE_enableValidateSpecification = 190;
HiveParser.RULE_enableSpecification = 191;
HiveParser.RULE_validateSpecification = 192;
HiveParser.RULE_enforcedSpecification = 193;
HiveParser.RULE_relySpecification = 194;
HiveParser.RULE_createConstraint = 195;
HiveParser.RULE_alterConstraintWithName = 196;
HiveParser.RULE_tableLevelConstraint = 197;
HiveParser.RULE_pkUkConstraint = 198;
HiveParser.RULE_checkConstraint = 199;
HiveParser.RULE_createForeignKey = 200;
HiveParser.RULE_alterForeignKeyWithName = 201;
HiveParser.RULE_skewedValueElement = 202;
HiveParser.RULE_skewedColumnValuePairList = 203;
HiveParser.RULE_skewedColumnValuePair = 204;
HiveParser.RULE_skewedColumnValues = 205;
HiveParser.RULE_skewedColumnValue = 206;
HiveParser.RULE_skewedValueLocationElement = 207;
HiveParser.RULE_orderSpecification = 208;
HiveParser.RULE_nullOrdering = 209;
HiveParser.RULE_columnNameOrder = 210;
HiveParser.RULE_columnNameCommentList = 211;
HiveParser.RULE_columnNameComment = 212;
HiveParser.RULE_columnRefOrder = 213;
HiveParser.RULE_columnNameType = 214;
HiveParser.RULE_columnNameTypeOrConstraint = 215;
HiveParser.RULE_tableConstraint = 216;
HiveParser.RULE_columnNameTypeConstraint = 217;
HiveParser.RULE_partitionedColumnNameTypeConstraint = 218;
HiveParser.RULE_columnConstraint = 219;
HiveParser.RULE_foreignKeyConstraint = 220;
HiveParser.RULE_colConstraint = 221;
HiveParser.RULE_alterColumnConstraint = 222;
HiveParser.RULE_alterForeignKeyConstraint = 223;
HiveParser.RULE_alterColConstraint = 224;
HiveParser.RULE_columnConstraintType = 225;
HiveParser.RULE_defaultVal = 226;
HiveParser.RULE_tableConstraintType = 227;
HiveParser.RULE_constraintOptsCreate = 228;
HiveParser.RULE_constraintOptsAlter = 229;
HiveParser.RULE_columnNameColonType = 230;
HiveParser.RULE_colType = 231;
HiveParser.RULE_colTypeList = 232;
HiveParser.RULE_type_db_col = 233;
HiveParser.RULE_primitiveType = 234;
HiveParser.RULE_listType = 235;
HiveParser.RULE_structType = 236;
HiveParser.RULE_mapType = 237;
HiveParser.RULE_unionType = 238;
HiveParser.RULE_setOperator = 239;
HiveParser.RULE_queryStatementExpression = 240;
HiveParser.RULE_queryStatementExpressionBody = 241;
HiveParser.RULE_withClause = 242;
HiveParser.RULE_cteStatement = 243;
HiveParser.RULE_fromStatement = 244;
HiveParser.RULE_singleFromStatement = 245;
HiveParser.RULE_regularBody = 246;
HiveParser.RULE_atomSelectStatement = 247;
HiveParser.RULE_selectStatement = 248;
HiveParser.RULE_setOpSelectStatement = 249;
HiveParser.RULE_selectStatementWithCTE = 250;
HiveParser.RULE_body = 251;
HiveParser.RULE_insertClause = 252;
HiveParser.RULE_destination = 253;
HiveParser.RULE_limitClause = 254;
HiveParser.RULE_deleteStatement = 255;
HiveParser.RULE_columnAssignmentClause = 256;
HiveParser.RULE_setColumnsClause = 257;
HiveParser.RULE_updateStatement = 258;
HiveParser.RULE_sqlTransactionStatement = 259;
HiveParser.RULE_startTransactionStatement = 260;
HiveParser.RULE_transactionMode = 261;
HiveParser.RULE_transactionAccessMode = 262;
HiveParser.RULE_isolationLevel = 263;
HiveParser.RULE_levelOfIsolation = 264;
HiveParser.RULE_commitStatement = 265;
HiveParser.RULE_rollbackStatement = 266;
HiveParser.RULE_setAutoCommitStatement = 267;
HiveParser.RULE_abortTransactionStatement = 268;
HiveParser.RULE_mergeStatement = 269;
HiveParser.RULE_whenClauses = 270;
HiveParser.RULE_whenNotMatchedClause = 271;
HiveParser.RULE_whenMatchedAndClause = 272;
HiveParser.RULE_whenMatchedThenClause = 273;
HiveParser.RULE_updateOrDelete = 274;
HiveParser.RULE_killQueryStatement = 275;
HiveParser.RULE_selectClause = 276;
HiveParser.RULE_selectList = 277;
HiveParser.RULE_selectTrfmClause = 278;
HiveParser.RULE_selectItem = 279;
HiveParser.RULE_trfmClause = 280;
HiveParser.RULE_selectExpression = 281;
HiveParser.RULE_selectExpressionList = 282;
HiveParser.RULE_window_clause = 283;
HiveParser.RULE_window_defn = 284;
HiveParser.RULE_window_specification = 285;
HiveParser.RULE_window_frame = 286;
HiveParser.RULE_window_range_expression = 287;
HiveParser.RULE_window_value_expression = 288;
HiveParser.RULE_window_frame_start_boundary = 289;
HiveParser.RULE_window_frame_boundary = 290;
HiveParser.RULE_tableAllColumns = 291;
HiveParser.RULE_tableOrColumn = 292;
HiveParser.RULE_expressionList = 293;
HiveParser.RULE_aliasList = 294;
HiveParser.RULE_fromClause = 295;
HiveParser.RULE_fromSource = 296;
HiveParser.RULE_atomjoinSource = 297;
HiveParser.RULE_joinSource = 298;
HiveParser.RULE_joinSourcePart = 299;
HiveParser.RULE_uniqueJoinSource = 300;
HiveParser.RULE_uniqueJoinExpr = 301;
HiveParser.RULE_uniqueJoinToken = 302;
HiveParser.RULE_joinToken = 303;
HiveParser.RULE_lateralView = 304;
HiveParser.RULE_tableAlias = 305;
HiveParser.RULE_tableBucketSample = 306;
HiveParser.RULE_splitSample = 307;
HiveParser.RULE_tableSample = 308;
HiveParser.RULE_tableSource = 309;
HiveParser.RULE_uniqueJoinTableSource = 310;
HiveParser.RULE_tableName = 311;
HiveParser.RULE_viewName = 312;
HiveParser.RULE_subQuerySource = 313;
HiveParser.RULE_partitioningSpec = 314;
HiveParser.RULE_partitionTableFunctionSource = 315;
HiveParser.RULE_partitionedTableFunction = 316;
HiveParser.RULE_whereClause = 317;
HiveParser.RULE_searchCondition = 318;
HiveParser.RULE_valuesClause = 319;
HiveParser.RULE_valuesTableConstructor = 320;
HiveParser.RULE_valueRowConstructor = 321;
HiveParser.RULE_virtualTableSource = 322;
HiveParser.RULE_groupByClause = 323;
HiveParser.RULE_groupby_expression = 324;
HiveParser.RULE_groupByEmpty = 325;
HiveParser.RULE_rollupStandard = 326;
HiveParser.RULE_rollupOldSyntax = 327;
HiveParser.RULE_groupingSetExpression = 328;
HiveParser.RULE_groupingSetExpressionMultiple = 329;
HiveParser.RULE_groupingExpressionSingle = 330;
HiveParser.RULE_havingClause = 331;
HiveParser.RULE_havingCondition = 332;
HiveParser.RULE_expressionsInParenthesis = 333;
HiveParser.RULE_expressionsNotInParenthesis = 334;
HiveParser.RULE_expressionPart = 335;
HiveParser.RULE_expressions = 336;
HiveParser.RULE_columnRefOrderInParenthesis = 337;
HiveParser.RULE_columnRefOrderNotInParenthesis = 338;
HiveParser.RULE_orderByClause = 339;
HiveParser.RULE_clusterByClause = 340;
HiveParser.RULE_partitionByClause = 341;
HiveParser.RULE_distributeByClause = 342;
HiveParser.RULE_sortByClause = 343;
HiveParser.RULE_functionStatement = 344;
HiveParser.RULE_functionName = 345;
HiveParser.RULE_castExpression = 346;
HiveParser.RULE_caseExpression = 347;
HiveParser.RULE_whenExpression = 348;
HiveParser.RULE_floorExpression = 349;
HiveParser.RULE_floorDateQualifiers = 350;
HiveParser.RULE_extractExpression = 351;
HiveParser.RULE_timeQualifiers = 352;
HiveParser.RULE_constant = 353;
HiveParser.RULE_stringLiteralSequence = 354;
HiveParser.RULE_charSetStringLiteral = 355;
HiveParser.RULE_dateLiteral = 356;
HiveParser.RULE_timestampLiteral = 357;
HiveParser.RULE_timestampLocalTZLiteral = 358;
HiveParser.RULE_intervalValue = 359;
HiveParser.RULE_intervalLiteral = 360;
HiveParser.RULE_intervalExpression = 361;
HiveParser.RULE_intervalQualifiers = 362;
HiveParser.RULE_atomExpression = 363;
HiveParser.RULE_precedenceUnaryOperator = 364;
HiveParser.RULE_isCondition = 365;
HiveParser.RULE_precedenceBitwiseXorOperator = 366;
HiveParser.RULE_precedenceStarOperator = 367;
HiveParser.RULE_precedencePlusOperator = 368;
HiveParser.RULE_precedenceConcatenateOperator = 369;
HiveParser.RULE_precedenceAmpersandOperator = 370;
HiveParser.RULE_precedenceBitwiseOrOperator = 371;
HiveParser.RULE_precedenceRegexpOperator = 372;
HiveParser.RULE_precedenceSimilarOperator = 373;
HiveParser.RULE_precedenceDistinctOperator = 374;
HiveParser.RULE_precedenceEqualOperator = 375;
HiveParser.RULE_precedenceNotOperator = 376;
HiveParser.RULE_precedenceAndOperator = 377;
HiveParser.RULE_precedenceOrOperator = 378;
HiveParser.RULE_expression = 379;
HiveParser.RULE_subQueryExpression = 380;
HiveParser.RULE_precedenceSimilarExpressionPart = 381;
HiveParser.RULE_precedenceSimilarExpressionAtom = 382;
HiveParser.RULE_precedenceSimilarExpressionIn = 383;
HiveParser.RULE_precedenceSimilarExpressionPartNot = 384;
HiveParser.RULE_booleanValue = 385;
HiveParser.RULE_booleanValueTok = 386;
HiveParser.RULE_tableOrPartition = 387;
HiveParser.RULE_partitionSpec = 388;
HiveParser.RULE_partitionVal = 389;
HiveParser.RULE_dropPartitionSpec = 390;
HiveParser.RULE_dropPartitionVal = 391;
HiveParser.RULE_dropPartitionOperator = 392;
HiveParser.RULE_sysFuncNames = 393;
HiveParser.RULE_descFuncNames = 394;
HiveParser.RULE_identifier = 395;
HiveParser.RULE_functionIdentifier = 396;
HiveParser.RULE_principalIdentifier = 397;
HiveParser.RULE_nonReserved = 398;
HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName = 399;
HiveParser.RULE_resourcePlanDdlStatements = 400;
HiveParser.RULE_rpAssign = 401;
HiveParser.RULE_rpAssignList = 402;
HiveParser.RULE_rpUnassign = 403;
HiveParser.RULE_rpUnassignList = 404;
HiveParser.RULE_createResourcePlanStatement = 405;
HiveParser.RULE_createResourcePlanStatementLikeExisting = 406;
HiveParser.RULE_createNewResourcePlanStatement = 407;
HiveParser.RULE_withReplace = 408;
HiveParser.RULE_activate = 409;
HiveParser.RULE_enable = 410;
HiveParser.RULE_disable = 411;
HiveParser.RULE_unmanaged = 412;
HiveParser.RULE_alterResourcePlanStatement = 413;
HiveParser.RULE_alterResourcePlanRenameSuffix = 414;
HiveParser.RULE_globalWmStatement = 415;
HiveParser.RULE_replaceResourcePlanStatement = 416;
HiveParser.RULE_dropResourcePlanStatement = 417;
HiveParser.RULE_poolPath = 418;
HiveParser.RULE_triggerExpression = 419;
HiveParser.RULE_triggerExpressionStandalone = 420;
HiveParser.RULE_triggerOrExpression = 421;
HiveParser.RULE_triggerAndExpression = 422;
HiveParser.RULE_triggerAtomExpression = 423;
HiveParser.RULE_triggerLiteral = 424;
HiveParser.RULE_comparisionOperator = 425;
HiveParser.RULE_triggerActionExpression = 426;
HiveParser.RULE_triggerActionExpressionStandalone = 427;
HiveParser.RULE_createTriggerStatement = 428;
HiveParser.RULE_alterTriggerStatement = 429;
HiveParser.RULE_triggerConditionExpression = 430;
HiveParser.RULE_dropTriggerStatement = 431;
HiveParser.RULE_poolAssign = 432;
HiveParser.RULE_poolAssignList = 433;
HiveParser.RULE_createPoolStatement = 434;
HiveParser.RULE_alterPoolStatement = 435;
HiveParser.RULE_dropPoolStatement = 436;
HiveParser.RULE_createMappingStatement = 437;
HiveParser.RULE_alterMappingStatement = 438;
HiveParser.RULE_dropMappingStatement = 439;

function StatementsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_statements;
	return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.EOF = function () {
	return this.getToken(HiveParser.EOF, 0);
};

StatementsContext.prototype.statement = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(StatementContext);
	} else {
		return this.getTypedRuleContext(StatementContext, i);
	}
};

StatementsContext.prototype.statementSeparator = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(StatementSeparatorContext);
	} else {
		return this.getTypedRuleContext(StatementSeparatorContext, i);
	}
};

StatementsContext.prototype.empty = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(EmptyContext);
	} else {
		return this.getTypedRuleContext(EmptyContext, i);
	}
};

StatementsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitStatements(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.StatementsContext = StatementsContext;

HiveParser.prototype.statements = function () {
	var localctx = new StatementsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 0, HiveParser.RULE_statements);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 886;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_FROM) |
						(1 << HiveParser.KW_SELECT) |
						(1 << HiveParser.KW_INSERT))) !==
					0) ||
			(((_la - 44) & ~0x1f) == 0 &&
				((1 << (_la - 44)) &
					((1 << (HiveParser.KW_SHOW - 44)) |
						(1 << (HiveParser.KW_MSCK - 44)) |
						(1 << (HiveParser.KW_LOAD - 44)) |
						(1 << (HiveParser.KW_EXPORT - 44)) |
						(1 << (HiveParser.KW_IMPORT - 44)) |
						(1 << (HiveParser.KW_CREATE - 44)) |
						(1 << (HiveParser.KW_ALTER - 44)) |
						(1 << (HiveParser.KW_DESCRIBE - 44)) |
						(1 << (HiveParser.KW_DROP - 44)))) !==
					0) ||
			(((_la - 98) & ~0x1f) == 0 &&
				((1 << (_la - 98)) &
					((1 << (HiveParser.KW_MAP - 98)) |
						(1 << (HiveParser.KW_REDUCE - 98)) |
						(1 << (HiveParser.KW_KILL - 98)) |
						(1 << (HiveParser.KW_ENABLE - 98)) |
						(1 << (HiveParser.KW_DISABLE - 98)))) !==
					0) ||
			(((_la - 135) & ~0x1f) == 0 &&
				((1 << (_la - 135)) &
					((1 << (HiveParser.KW_REPLACE - 135)) |
						(1 << (HiveParser.KW_EXPLAIN - 135)) |
						(1 << (HiveParser.KW_WITH - 135)) |
						(1 << (HiveParser.KW_SET - 135)))) !==
					0) ||
			(((_la - 173) & ~0x1f) == 0 &&
				((1 << (_la - 173)) &
					((1 << (HiveParser.KW_DELETE - 173)) |
						(1 << (HiveParser.KW_GRANT - 173)) |
						(1 << (HiveParser.KW_REVOKE - 173)) |
						(1 << (HiveParser.KW_LOCK - 173)) |
						(1 << (HiveParser.KW_UNLOCK - 173)) |
						(1 << (HiveParser.KW_ANALYZE - 173)))) !==
					0) ||
			(((_la - 220) & ~0x1f) == 0 &&
				((1 << (_la - 220)) &
					((1 << (HiveParser.KW_USE - 220)) |
						(1 << (HiveParser.KW_UPDATE - 220)) |
						(1 << (HiveParser.KW_TRUNCATE - 220)))) !==
					0) ||
			(((_la - 265) & ~0x1f) == 0 &&
				((1 << (_la - 265)) &
					((1 << (HiveParser.KW_RELOAD - 265)) |
						(1 << (HiveParser.KW_START - 265)) |
						(1 << (HiveParser.KW_COMMIT - 265)) |
						(1 << (HiveParser.KW_ROLLBACK - 265)))) !==
					0) ||
			(((_la - 299) & ~0x1f) == 0 &&
				((1 << (_la - 299)) &
					((1 << (HiveParser.KW_ABORT - 299)) |
						(1 << (HiveParser.KW_MERGE - 299)) |
						(1 << (HiveParser.KW_REPL - 299)))) !==
					0) ||
			_la === HiveParser.SEMICOLON ||
			_la === HiveParser.LPAREN
		) {
			this.state = 884;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case HiveParser.KW_DESC:
				case HiveParser.KW_FROM:
				case HiveParser.KW_SELECT:
				case HiveParser.KW_INSERT:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_IMPORT:
				case HiveParser.KW_CREATE:
				case HiveParser.KW_ALTER:
				case HiveParser.KW_DESCRIBE:
				case HiveParser.KW_DROP:
				case HiveParser.KW_MAP:
				case HiveParser.KW_REDUCE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_ENABLE:
				case HiveParser.KW_DISABLE:
				case HiveParser.KW_REPLACE:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_WITH:
				case HiveParser.KW_SET:
				case HiveParser.KW_DELETE:
				case HiveParser.KW_GRANT:
				case HiveParser.KW_REVOKE:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_USE:
				case HiveParser.KW_UPDATE:
				case HiveParser.KW_TRUNCATE:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_START:
				case HiveParser.KW_COMMIT:
				case HiveParser.KW_ROLLBACK:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_MERGE:
				case HiveParser.KW_REPL:
				case HiveParser.LPAREN:
					this.state = 880;
					this.statement();
					this.state = 881;
					this.statementSeparator();
					break;
				case HiveParser.SEMICOLON:
					this.state = 883;
					this.empty();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 888;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 889;
		this.match(HiveParser.EOF);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StatementSeparatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_statementSeparator;
	return this;
}

StatementSeparatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementSeparatorContext.prototype.constructor = StatementSeparatorContext;

StatementSeparatorContext.prototype.SEMICOLON = function () {
	return this.getToken(HiveParser.SEMICOLON, 0);
};

StatementSeparatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitStatementSeparator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.StatementSeparatorContext = StatementSeparatorContext;

HiveParser.prototype.statementSeparator = function () {
	var localctx = new StatementSeparatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 2, HiveParser.RULE_statementSeparator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 891;
		this.match(HiveParser.SEMICOLON);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function EmptyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_empty;
	return this;
}

EmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyContext.prototype.constructor = EmptyContext;

EmptyContext.prototype.statementSeparator = function () {
	return this.getTypedRuleContext(StatementSeparatorContext, 0);
};

EmptyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitEmpty(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.EmptyContext = EmptyContext;

HiveParser.prototype.empty = function () {
	var localctx = new EmptyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 4, HiveParser.RULE_empty);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 893;
		this.statementSeparator();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_statement;
	return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.explainStatement = function () {
	return this.getTypedRuleContext(ExplainStatementContext, 0);
};

StatementContext.prototype.execStatement = function () {
	return this.getTypedRuleContext(ExecStatementContext, 0);
};

StatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.StatementContext = StatementContext;

HiveParser.prototype.statement = function () {
	var localctx = new StatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 6, HiveParser.RULE_statement);
	try {
		this.state = 897;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_EXPLAIN:
				this.enterOuterAlt(localctx, 1);
				this.state = 895;
				this.explainStatement();
				break;
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.LPAREN:
				this.enterOuterAlt(localctx, 2);
				this.state = 896;
				this.execStatement();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExplainStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_explainStatement;
	return this;
}

ExplainStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainStatementContext.prototype.constructor = ExplainStatementContext;

ExplainStatementContext.prototype.KW_EXPLAIN = function () {
	return this.getToken(HiveParser.KW_EXPLAIN, 0);
};

ExplainStatementContext.prototype.execStatement = function () {
	return this.getTypedRuleContext(ExecStatementContext, 0);
};

ExplainStatementContext.prototype.KW_REWRITE = function () {
	return this.getToken(HiveParser.KW_REWRITE, 0);
};

ExplainStatementContext.prototype.queryStatementExpression = function () {
	return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
};

ExplainStatementContext.prototype.explainOption = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExplainOptionContext);
	} else {
		return this.getTypedRuleContext(ExplainOptionContext, i);
	}
};

ExplainStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExplainStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExplainStatementContext = ExplainStatementContext;

HiveParser.prototype.explainStatement = function () {
	var localctx = new ExplainStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 8, HiveParser.RULE_explainStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 899;
		this.match(HiveParser.KW_EXPLAIN);
		this.state = 909;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_EXTENDED:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_AUTHORIZATION:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.LPAREN:
				this.state = 903;
				this._errHandler.sync(this);
				var _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
				while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						this.state = 900;
						this.explainOption();
					}
					this.state = 905;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
				}

				this.state = 906;
				this.execStatement();
				break;
			case HiveParser.KW_REWRITE:
				this.state = 907;
				this.match(HiveParser.KW_REWRITE);
				this.state = 908;
				this.queryStatementExpression();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExplainOptionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_explainOption;
	return this;
}

ExplainOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainOptionContext.prototype.constructor = ExplainOptionContext;

ExplainOptionContext.prototype.KW_EXTENDED = function () {
	return this.getToken(HiveParser.KW_EXTENDED, 0);
};

ExplainOptionContext.prototype.KW_FORMATTED = function () {
	return this.getToken(HiveParser.KW_FORMATTED, 0);
};

ExplainOptionContext.prototype.KW_DEPENDENCY = function () {
	return this.getToken(HiveParser.KW_DEPENDENCY, 0);
};

ExplainOptionContext.prototype.KW_LOGICAL = function () {
	return this.getToken(HiveParser.KW_LOGICAL, 0);
};

ExplainOptionContext.prototype.KW_AUTHORIZATION = function () {
	return this.getToken(HiveParser.KW_AUTHORIZATION, 0);
};

ExplainOptionContext.prototype.KW_ANALYZE = function () {
	return this.getToken(HiveParser.KW_ANALYZE, 0);
};

ExplainOptionContext.prototype.KW_REOPTIMIZATION = function () {
	return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
};

ExplainOptionContext.prototype.KW_VECTORIZATION = function () {
	return this.getToken(HiveParser.KW_VECTORIZATION, 0);
};

ExplainOptionContext.prototype.vectorizationOnly = function () {
	return this.getTypedRuleContext(VectorizationOnlyContext, 0);
};

ExplainOptionContext.prototype.vectorizatonDetail = function () {
	return this.getTypedRuleContext(VectorizatonDetailContext, 0);
};

ExplainOptionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExplainOption(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExplainOptionContext = ExplainOptionContext;

HiveParser.prototype.explainOption = function () {
	var localctx = new ExplainOptionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 10, HiveParser.RULE_explainOption);
	var _la = 0; // Token type
	try {
		this.state = 925;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_EXTENDED:
				this.enterOuterAlt(localctx, 1);
				this.state = 911;
				this.match(HiveParser.KW_EXTENDED);
				break;
			case HiveParser.KW_FORMATTED:
				this.enterOuterAlt(localctx, 2);
				this.state = 912;
				this.match(HiveParser.KW_FORMATTED);
				break;
			case HiveParser.KW_DEPENDENCY:
				this.enterOuterAlt(localctx, 3);
				this.state = 913;
				this.match(HiveParser.KW_DEPENDENCY);
				break;
			case HiveParser.KW_LOGICAL:
				this.enterOuterAlt(localctx, 4);
				this.state = 914;
				this.match(HiveParser.KW_LOGICAL);
				break;
			case HiveParser.KW_AUTHORIZATION:
				this.enterOuterAlt(localctx, 5);
				this.state = 915;
				this.match(HiveParser.KW_AUTHORIZATION);
				break;
			case HiveParser.KW_ANALYZE:
				this.enterOuterAlt(localctx, 6);
				this.state = 916;
				this.match(HiveParser.KW_ANALYZE);
				break;
			case HiveParser.KW_REOPTIMIZATION:
				this.enterOuterAlt(localctx, 7);
				this.state = 917;
				this.match(HiveParser.KW_REOPTIMIZATION);
				break;
			case HiveParser.KW_VECTORIZATION:
				this.enterOuterAlt(localctx, 8);
				this.state = 918;
				this.match(HiveParser.KW_VECTORIZATION);
				this.state = 920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ONLY) {
					this.state = 919;
					this.vectorizationOnly();
				}

				this.state = 923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					((_la - 308) & ~0x1f) == 0 &&
					((1 << (_la - 308)) &
						((1 << (HiveParser.KW_SUMMARY - 308)) |
							(1 << (HiveParser.KW_OPERATOR - 308)) |
							(1 << (HiveParser.KW_EXPRESSION - 308)) |
							(1 << (HiveParser.KW_DETAIL - 308)))) !==
						0
				) {
					this.state = 922;
					this.vectorizatonDetail();
				}

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function VectorizationOnlyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_vectorizationOnly;
	return this;
}

VectorizationOnlyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VectorizationOnlyContext.prototype.constructor = VectorizationOnlyContext;

VectorizationOnlyContext.prototype.KW_ONLY = function () {
	return this.getToken(HiveParser.KW_ONLY, 0);
};

VectorizationOnlyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitVectorizationOnly(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.VectorizationOnlyContext = VectorizationOnlyContext;

HiveParser.prototype.vectorizationOnly = function () {
	var localctx = new VectorizationOnlyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 12, HiveParser.RULE_vectorizationOnly);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 927;
		this.match(HiveParser.KW_ONLY);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function VectorizatonDetailContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_vectorizatonDetail;
	return this;
}

VectorizatonDetailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VectorizatonDetailContext.prototype.constructor = VectorizatonDetailContext;

VectorizatonDetailContext.prototype.KW_SUMMARY = function () {
	return this.getToken(HiveParser.KW_SUMMARY, 0);
};

VectorizatonDetailContext.prototype.KW_OPERATOR = function () {
	return this.getToken(HiveParser.KW_OPERATOR, 0);
};

VectorizatonDetailContext.prototype.KW_EXPRESSION = function () {
	return this.getToken(HiveParser.KW_EXPRESSION, 0);
};

VectorizatonDetailContext.prototype.KW_DETAIL = function () {
	return this.getToken(HiveParser.KW_DETAIL, 0);
};

VectorizatonDetailContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitVectorizatonDetail(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.VectorizatonDetailContext = VectorizatonDetailContext;

HiveParser.prototype.vectorizatonDetail = function () {
	var localctx = new VectorizatonDetailContext(this, this._ctx, this.state);
	this.enterRule(localctx, 14, HiveParser.RULE_vectorizatonDetail);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 929;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 308) & ~0x1f) == 0 &&
				((1 << (_la - 308)) &
					((1 << (HiveParser.KW_SUMMARY - 308)) |
						(1 << (HiveParser.KW_OPERATOR - 308)) |
						(1 << (HiveParser.KW_EXPRESSION - 308)) |
						(1 << (HiveParser.KW_DETAIL - 308)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExecStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_execStatement;
	return this;
}

ExecStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecStatementContext.prototype.constructor = ExecStatementContext;

ExecStatementContext.prototype.queryStatementExpression = function () {
	return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
};

ExecStatementContext.prototype.loadStatement = function () {
	return this.getTypedRuleContext(LoadStatementContext, 0);
};

ExecStatementContext.prototype.exportStatement = function () {
	return this.getTypedRuleContext(ExportStatementContext, 0);
};

ExecStatementContext.prototype.importStatement = function () {
	return this.getTypedRuleContext(ImportStatementContext, 0);
};

ExecStatementContext.prototype.replDumpStatement = function () {
	return this.getTypedRuleContext(ReplDumpStatementContext, 0);
};

ExecStatementContext.prototype.replLoadStatement = function () {
	return this.getTypedRuleContext(ReplLoadStatementContext, 0);
};

ExecStatementContext.prototype.replStatusStatement = function () {
	return this.getTypedRuleContext(ReplStatusStatementContext, 0);
};

ExecStatementContext.prototype.ddlStatement = function () {
	return this.getTypedRuleContext(DdlStatementContext, 0);
};

ExecStatementContext.prototype.deleteStatement = function () {
	return this.getTypedRuleContext(DeleteStatementContext, 0);
};

ExecStatementContext.prototype.updateStatement = function () {
	return this.getTypedRuleContext(UpdateStatementContext, 0);
};

ExecStatementContext.prototype.sqlTransactionStatement = function () {
	return this.getTypedRuleContext(SqlTransactionStatementContext, 0);
};

ExecStatementContext.prototype.mergeStatement = function () {
	return this.getTypedRuleContext(MergeStatementContext, 0);
};

ExecStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExecStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExecStatementContext = ExecStatementContext;

HiveParser.prototype.execStatement = function () {
	var localctx = new ExecStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 16, HiveParser.RULE_execStatement);
	try {
		this.state = 943;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 931;
				this.queryStatementExpression();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 932;
				this.loadStatement();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 933;
				this.exportStatement();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 934;
				this.importStatement();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 935;
				this.replDumpStatement();
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 936;
				this.replLoadStatement();
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 937;
				this.replStatusStatement();
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 938;
				this.ddlStatement();
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 939;
				this.deleteStatement();
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 940;
				this.updateStatement();
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 941;
				this.sqlTransactionStatement();
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 942;
				this.mergeStatement();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LoadStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_loadStatement;
	return this;
}

LoadStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadStatementContext.prototype.constructor = LoadStatementContext;

LoadStatementContext.prototype.KW_LOAD = function () {
	return this.getToken(HiveParser.KW_LOAD, 0);
};

LoadStatementContext.prototype.KW_DATA = function () {
	return this.getToken(HiveParser.KW_DATA, 0);
};

LoadStatementContext.prototype.KW_INPATH = function () {
	return this.getToken(HiveParser.KW_INPATH, 0);
};

LoadStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

LoadStatementContext.prototype.KW_INTO = function () {
	return this.getToken(HiveParser.KW_INTO, 0);
};

LoadStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

LoadStatementContext.prototype.tableOrPartition = function () {
	return this.getTypedRuleContext(TableOrPartitionContext, 0);
};

LoadStatementContext.prototype.KW_LOCAL = function () {
	return this.getToken(HiveParser.KW_LOCAL, 0);
};

LoadStatementContext.prototype.KW_OVERWRITE = function () {
	return this.getToken(HiveParser.KW_OVERWRITE, 0);
};

LoadStatementContext.prototype.inputFileFormat = function () {
	return this.getTypedRuleContext(InputFileFormatContext, 0);
};

LoadStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitLoadStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.LoadStatementContext = LoadStatementContext;

HiveParser.prototype.loadStatement = function () {
	var localctx = new LoadStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 18, HiveParser.RULE_loadStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 945;
		this.match(HiveParser.KW_LOAD);
		this.state = 946;
		this.match(HiveParser.KW_DATA);
		this.state = 948;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LOCAL) {
			this.state = 947;
			this.match(HiveParser.KW_LOCAL);
		}

		this.state = 950;
		this.match(HiveParser.KW_INPATH);
		this.state = 951;
		this.match(HiveParser.StringLiteral);
		this.state = 953;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_OVERWRITE) {
			this.state = 952;
			this.match(HiveParser.KW_OVERWRITE);
		}

		this.state = 955;
		this.match(HiveParser.KW_INTO);
		this.state = 956;
		this.match(HiveParser.KW_TABLE);
		this.state = 957;
		this.tableOrPartition();
		this.state = 959;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_INPUTFORMAT) {
			this.state = 958;
			this.inputFileFormat();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReplicationClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_replicationClause;
	return this;
}

ReplicationClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationClauseContext.prototype.constructor = ReplicationClauseContext;

ReplicationClauseContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

ReplicationClauseContext.prototype.KW_REPLICATION = function () {
	return this.getToken(HiveParser.KW_REPLICATION, 0);
};

ReplicationClauseContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ReplicationClauseContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ReplicationClauseContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ReplicationClauseContext.prototype.KW_METADATA = function () {
	return this.getToken(HiveParser.KW_METADATA, 0);
};

ReplicationClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReplicationClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReplicationClauseContext = ReplicationClauseContext;

HiveParser.prototype.replicationClause = function () {
	var localctx = new ReplicationClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 20, HiveParser.RULE_replicationClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 961;
		this.match(HiveParser.KW_FOR);
		this.state = 963;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_METADATA) {
			this.state = 962;
			this.match(HiveParser.KW_METADATA);
		}

		this.state = 965;
		this.match(HiveParser.KW_REPLICATION);
		this.state = 966;
		this.match(HiveParser.LPAREN);
		this.state = 967;
		this.match(HiveParser.StringLiteral);
		this.state = 968;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExportStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_exportStatement;
	return this;
}

ExportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportStatementContext.prototype.constructor = ExportStatementContext;

ExportStatementContext.prototype.KW_EXPORT = function () {
	return this.getToken(HiveParser.KW_EXPORT, 0);
};

ExportStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

ExportStatementContext.prototype.tableOrPartition = function () {
	return this.getTypedRuleContext(TableOrPartitionContext, 0);
};

ExportStatementContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

ExportStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ExportStatementContext.prototype.replicationClause = function () {
	return this.getTypedRuleContext(ReplicationClauseContext, 0);
};

ExportStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExportStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExportStatementContext = ExportStatementContext;

HiveParser.prototype.exportStatement = function () {
	var localctx = new ExportStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 22, HiveParser.RULE_exportStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 970;
		this.match(HiveParser.KW_EXPORT);
		this.state = 971;
		this.match(HiveParser.KW_TABLE);
		this.state = 972;
		this.tableOrPartition();
		this.state = 973;
		this.match(HiveParser.KW_TO);
		this.state = 974;
		this.match(HiveParser.StringLiteral);
		this.state = 976;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FOR) {
			this.state = 975;
			this.replicationClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ImportStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_importStatement;
	this.path = null; // Token
	return this;
}

ImportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStatementContext.prototype.constructor = ImportStatementContext;

ImportStatementContext.prototype.KW_IMPORT = function () {
	return this.getToken(HiveParser.KW_IMPORT, 0);
};

ImportStatementContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

ImportStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

ImportStatementContext.prototype.tableOrPartition = function () {
	return this.getTypedRuleContext(TableOrPartitionContext, 0);
};

ImportStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ImportStatementContext.prototype.tableLocation = function () {
	return this.getTypedRuleContext(TableLocationContext, 0);
};

ImportStatementContext.prototype.KW_EXTERNAL = function () {
	return this.getToken(HiveParser.KW_EXTERNAL, 0);
};

ImportStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitImportStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ImportStatementContext = ImportStatementContext;

HiveParser.prototype.importStatement = function () {
	var localctx = new ImportStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 24, HiveParser.RULE_importStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 978;
		this.match(HiveParser.KW_IMPORT);
		this.state = 984;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TABLE || _la === HiveParser.KW_EXTERNAL) {
			this.state = 980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_EXTERNAL) {
				this.state = 979;
				this.match(HiveParser.KW_EXTERNAL);
			}

			this.state = 982;
			this.match(HiveParser.KW_TABLE);
			this.state = 983;
			this.tableOrPartition();
		}

		this.state = 986;
		this.match(HiveParser.KW_FROM);

		this.state = 987;
		localctx.path = this.match(HiveParser.StringLiteral);
		this.state = 989;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LOCATION) {
			this.state = 988;
			this.tableLocation();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReplDumpStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_replDumpStatement;
	return this;
}

ReplDumpStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplDumpStatementContext.prototype.constructor = ReplDumpStatementContext;

ReplDumpStatementContext.prototype.KW_REPL = function () {
	return this.getToken(HiveParser.KW_REPL, 0);
};

ReplDumpStatementContext.prototype.KW_DUMP = function () {
	return this.getToken(HiveParser.KW_DUMP, 0);
};

ReplDumpStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

ReplDumpStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

ReplDumpStatementContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

ReplDumpStatementContext.prototype.Number = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.Number);
	} else {
		return this.getToken(HiveParser.Number, i);
	}
};

ReplDumpStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

ReplDumpStatementContext.prototype.replConfigs = function () {
	return this.getTypedRuleContext(ReplConfigsContext, 0);
};

ReplDumpStatementContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

ReplDumpStatementContext.prototype.KW_LIMIT = function () {
	return this.getToken(HiveParser.KW_LIMIT, 0);
};

ReplDumpStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReplDumpStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReplDumpStatementContext = ReplDumpStatementContext;

HiveParser.prototype.replDumpStatement = function () {
	var localctx = new ReplDumpStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 26, HiveParser.RULE_replDumpStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 991;
		this.match(HiveParser.KW_REPL);
		this.state = 992;
		this.match(HiveParser.KW_DUMP);
		this.state = 993;
		this.identifier();
		this.state = 996;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.DOT) {
			this.state = 994;
			this.match(HiveParser.DOT);
			this.state = 995;
			this.identifier();
		}

		this.state = 1008;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FROM) {
			this.state = 998;
			this.match(HiveParser.KW_FROM);
			this.state = 999;
			this.match(HiveParser.Number);
			this.state = 1002;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TO) {
				this.state = 1000;
				this.match(HiveParser.KW_TO);
				this.state = 1001;
				this.match(HiveParser.Number);
			}

			this.state = 1006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LIMIT) {
				this.state = 1004;
				this.match(HiveParser.KW_LIMIT);
				this.state = 1005;
				this.match(HiveParser.Number);
			}
		}

		this.state = 1012;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1010;
			this.match(HiveParser.KW_WITH);
			this.state = 1011;
			this.replConfigs();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReplLoadStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_replLoadStatement;
	return this;
}

ReplLoadStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplLoadStatementContext.prototype.constructor = ReplLoadStatementContext;

ReplLoadStatementContext.prototype.KW_REPL = function () {
	return this.getToken(HiveParser.KW_REPL, 0);
};

ReplLoadStatementContext.prototype.KW_LOAD = function () {
	return this.getToken(HiveParser.KW_LOAD, 0);
};

ReplLoadStatementContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

ReplLoadStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ReplLoadStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

ReplLoadStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

ReplLoadStatementContext.prototype.replConfigs = function () {
	return this.getTypedRuleContext(ReplConfigsContext, 0);
};

ReplLoadStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

ReplLoadStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReplLoadStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReplLoadStatementContext = ReplLoadStatementContext;

HiveParser.prototype.replLoadStatement = function () {
	var localctx = new ReplLoadStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 28, HiveParser.RULE_replLoadStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1014;
		this.match(HiveParser.KW_REPL);
		this.state = 1015;
		this.match(HiveParser.KW_LOAD);
		this.state = 1021;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_ASC) |
						(1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_NULLS) |
						(1 << HiveParser.KW_LAST) |
						(1 << HiveParser.KW_OVERWRITE))) !==
					0) ||
			(((_la - 36) & ~0x1f) == 0 &&
				((1 << (_la - 36)) &
					((1 << (HiveParser.KW_PARTITIONS - 36)) |
						(1 << (HiveParser.KW_TABLES - 36)) |
						(1 << (HiveParser.KW_COLUMNS - 36)) |
						(1 << (HiveParser.KW_INDEX - 36)) |
						(1 << (HiveParser.KW_INDEXES - 36)) |
						(1 << (HiveParser.KW_REBUILD - 36)) |
						(1 << (HiveParser.KW_FUNCTIONS - 36)) |
						(1 << (HiveParser.KW_SHOW - 36)) |
						(1 << (HiveParser.KW_MSCK - 36)) |
						(1 << (HiveParser.KW_REPAIR - 36)) |
						(1 << (HiveParser.KW_DIRECTORY - 36)) |
						(1 << (HiveParser.KW_CLUSTER - 36)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
						(1 << (HiveParser.KW_SORT - 36)) |
						(1 << (HiveParser.KW_LOAD - 36)) |
						(1 << (HiveParser.KW_EXPORT - 36)) |
						(1 << (HiveParser.KW_REPLICATION - 36)) |
						(1 << (HiveParser.KW_METADATA - 36)) |
						(1 << (HiveParser.KW_DATA - 36)) |
						(1 << (HiveParser.KW_INPATH - 36)))) !==
					0) ||
			(((_la - 68) & ~0x1f) == 0 &&
				((1 << (_la - 68)) &
					((1 << (HiveParser.KW_CHANGE - 68)) |
						(1 << (HiveParser.KW_FIRST - 68)) |
						(1 << (HiveParser.KW_AFTER - 68)) |
						(1 << (HiveParser.KW_RENAME - 68)) |
						(1 << (HiveParser.KW_COMMENT - 68)) |
						(1 << (HiveParser.KW_TINYINT - 68)) |
						(1 << (HiveParser.KW_DATETIME - 68)) |
						(1 << (HiveParser.KW_ZONE - 68)) |
						(1 << (HiveParser.KW_STRING - 68)) |
						(1 << (HiveParser.KW_STRUCT - 68)) |
						(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
					0) ||
			(((_la - 101) & ~0x1f) == 0 &&
				((1 << (_la - 101)) &
					((1 << (HiveParser.KW_PARTITIONED - 101)) |
						(1 << (HiveParser.KW_CLUSTERED - 101)) |
						(1 << (HiveParser.KW_SORTED - 101)) |
						(1 << (HiveParser.KW_BUCKETS - 101)) |
						(1 << (HiveParser.KW_FORMAT - 101)) |
						(1 << (HiveParser.KW_DELIMITED - 101)) |
						(1 << (HiveParser.KW_FIELDS - 101)) |
						(1 << (HiveParser.KW_TERMINATED - 101)) |
						(1 << (HiveParser.KW_ESCAPED - 101)) |
						(1 << (HiveParser.KW_COLLECTION - 101)) |
						(1 << (HiveParser.KW_ITEMS - 101)) |
						(1 << (HiveParser.KW_KEYS - 101)) |
						(1 << (HiveParser.KW_KEY_TYPE - 101)) |
						(1 << (HiveParser.KW_KILL - 101)) |
						(1 << (HiveParser.KW_LINES - 101)) |
						(1 << (HiveParser.KW_STORED - 101)) |
						(1 << (HiveParser.KW_FILEFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_ENABLE - 101)) |
						(1 << (HiveParser.KW_DISABLE - 101)) |
						(1 << (HiveParser.KW_LOCATION - 101)) |
						(1 << (HiveParser.KW_BUCKET - 101)))) !==
					0) ||
			(((_la - 134) & ~0x1f) == 0 &&
				((1 << (_la - 134)) &
					((1 << (HiveParser.KW_ADD - 134)) |
						(1 << (HiveParser.KW_REPLACE - 134)) |
						(1 << (HiveParser.KW_TEMPORARY - 134)) |
						(1 << (HiveParser.KW_FILE - 134)) |
						(1 << (HiveParser.KW_JAR - 134)) |
						(1 << (HiveParser.KW_EXPLAIN - 134)) |
						(1 << (HiveParser.KW_FORMATTED - 134)) |
						(1 << (HiveParser.KW_DEPENDENCY - 134)) |
						(1 << (HiveParser.KW_LOGICAL - 134)) |
						(1 << (HiveParser.KW_SERDE - 134)) |
						(1 << (HiveParser.KW_DEFERRED - 134)) |
						(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
						(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
						(1 << (HiveParser.KW_LIMIT - 134)) |
						(1 << (HiveParser.KW_OFFSET - 134)) |
						(1 << (HiveParser.KW_UNSET - 134)) |
						(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
						(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
						(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
						(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
						(1 << (HiveParser.KW_DEFINED - 134)))) !==
					0) ||
			(((_la - 167) & ~0x1f) == 0 &&
				((1 << (_la - 167)) &
					((1 << (HiveParser.KW_MAPJOIN - 167)) |
						(1 << (HiveParser.KW_STREAMTABLE - 167)) |
						(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
						(1 << (HiveParser.KW_UTC - 167)) |
						(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
						(1 << (HiveParser.KW_LONG - 167)) |
						(1 << (HiveParser.KW_PLUS - 167)) |
						(1 << (HiveParser.KW_VIEW - 167)) |
						(1 << (HiveParser.KW_VIEWS - 167)) |
						(1 << (HiveParser.KW_DATABASES - 167)) |
						(1 << (HiveParser.KW_MATERIALIZED - 167)) |
						(1 << (HiveParser.KW_SCHEMA - 167)) |
						(1 << (HiveParser.KW_SCHEMAS - 167)) |
						(1 << (HiveParser.KW_SSL - 167)) |
						(1 << (HiveParser.KW_UNDO - 167)) |
						(1 << (HiveParser.KW_LOCK - 167)) |
						(1 << (HiveParser.KW_LOCKS - 167)) |
						(1 << (HiveParser.KW_UNLOCK - 167)) |
						(1 << (HiveParser.KW_SHARED - 167)) |
						(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
						(1 << (HiveParser.KW_UNSIGNED - 167)) |
						(1 << (HiveParser.KW_WHILE - 167)) |
						(1 << (HiveParser.KW_READ - 167)))) !==
					0) ||
			(((_la - 200) & ~0x1f) == 0 &&
				((1 << (_la - 200)) &
					((1 << (HiveParser.KW_PURGE - 200)) |
						(1 << (HiveParser.KW_ANALYZE - 200)) |
						(1 << (HiveParser.KW_BEFORE - 200)) |
						(1 << (HiveParser.KW_CONTINUE - 200)) |
						(1 << (HiveParser.KW_RECORDREADER - 200)) |
						(1 << (HiveParser.KW_RECORDWRITER - 200)) |
						(1 << (HiveParser.KW_SEMI - 200)) |
						(1 << (HiveParser.KW_TOUCH - 200)) |
						(1 << (HiveParser.KW_ARCHIVE - 200)) |
						(1 << (HiveParser.KW_UNARCHIVE - 200)) |
						(1 << (HiveParser.KW_COMPUTE - 200)) |
						(1 << (HiveParser.KW_STATISTICS - 200)) |
						(1 << (HiveParser.KW_USE - 200)) |
						(1 << (HiveParser.KW_OPTION - 200)) |
						(1 << (HiveParser.KW_CONCATENATE - 200)) |
						(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
						(1 << (HiveParser.KW_RESTRICT - 200)) |
						(1 << (HiveParser.KW_CASCADE - 200)) |
						(1 << (HiveParser.KW_SKEWED - 200)) |
						(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
					0) ||
			(((_la - 244) & ~0x1f) == 0 &&
				((1 << (_la - 244)) &
					((1 << (HiveParser.KW_SETS - 244)) |
						(1 << (HiveParser.KW_NOSCAN - 244)) |
						(1 << (HiveParser.KW_ROLE - 244)) |
						(1 << (HiveParser.KW_ROLES - 244)) |
						(1 << (HiveParser.KW_URI - 244)) |
						(1 << (HiveParser.KW_SERVER - 244)) |
						(1 << (HiveParser.KW_ADMIN - 244)) |
						(1 << (HiveParser.KW_OWNER - 244)) |
						(1 << (HiveParser.KW_PRINCIPALS - 244)) |
						(1 << (HiveParser.KW_COMPACT - 244)) |
						(1 << (HiveParser.KW_COMPACTIONS - 244)) |
						(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
						(1 << (HiveParser.KW_REWRITE - 244)) |
						(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
						(1 << (HiveParser.KW_RELOAD - 244)) |
						(1 << (HiveParser.KW_YEAR - 244)) |
						(1 << (HiveParser.KW_QUERY - 244)) |
						(1 << (HiveParser.KW_QUARTER - 244)) |
						(1 << (HiveParser.KW_MONTH - 244)) |
						(1 << (HiveParser.KW_WEEK - 244)) |
						(1 << (HiveParser.KW_DAY - 244)) |
						(1 << (HiveParser.KW_DOW - 244)) |
						(1 << (HiveParser.KW_HOUR - 244)) |
						(1 << (HiveParser.KW_MINUTE - 244)) |
						(1 << (HiveParser.KW_SECOND - 244)))) !==
					0) ||
			(((_la - 277) & ~0x1f) == 0 &&
				((1 << (_la - 277)) &
					((1 << (HiveParser.KW_TRANSACTION - 277)) |
						(1 << (HiveParser.KW_WORK - 277)) |
						(1 << (HiveParser.KW_WRITE - 277)) |
						(1 << (HiveParser.KW_ISOLATION - 277)) |
						(1 << (HiveParser.KW_LEVEL - 277)) |
						(1 << (HiveParser.KW_SNAPSHOT - 277)) |
						(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
						(1 << (HiveParser.KW_CACHE - 277)) |
						(1 << (HiveParser.KW_ENFORCED - 277)) |
						(1 << (HiveParser.KW_VALIDATE - 277)) |
						(1 << (HiveParser.KW_NOVALIDATE - 277)) |
						(1 << (HiveParser.KW_RELY - 277)) |
						(1 << (HiveParser.KW_NORELY - 277)) |
						(1 << (HiveParser.KW_KEY - 277)) |
						(1 << (HiveParser.KW_ABORT - 277)) |
						(1 << (HiveParser.KW_MATCHED - 277)) |
						(1 << (HiveParser.KW_REPL - 277)) |
						(1 << (HiveParser.KW_DUMP - 277)) |
						(1 << (HiveParser.KW_STATUS - 277)) |
						(1 << (HiveParser.KW_VECTORIZATION - 277)) |
						(1 << (HiveParser.KW_SUMMARY - 277)))) !==
					0) ||
			(((_la - 309) & ~0x1f) == 0 &&
				((1 << (_la - 309)) &
					((1 << (HiveParser.KW_OPERATOR - 309)) |
						(1 << (HiveParser.KW_EXPRESSION - 309)) |
						(1 << (HiveParser.KW_DETAIL - 309)) |
						(1 << (HiveParser.KW_WAIT - 309)) |
						(1 << (HiveParser.KW_RESOURCE - 309)) |
						(1 << (HiveParser.KW_PLAN - 309)) |
						(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
						(1 << (HiveParser.KW_PLANS - 309)) |
						(1 << (HiveParser.KW_ACTIVATE - 309)) |
						(1 << (HiveParser.KW_DEFAULT - 309)) |
						(1 << (HiveParser.KW_CHECK - 309)) |
						(1 << (HiveParser.KW_POOL - 309)) |
						(1 << (HiveParser.KW_MOVE - 309)) |
						(1 << (HiveParser.KW_DO - 309)) |
						(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
						(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
						(1 << (HiveParser.KW_PATH - 309)) |
						(1 << (HiveParser.KW_MAPPING - 309)) |
						(1 << (HiveParser.KW_WORKLOAD - 309)) |
						(1 << (HiveParser.KW_MANAGEMENT - 309)) |
						(1 << (HiveParser.KW_ACTIVE - 309)) |
						(1 << (HiveParser.KW_UNMANAGED - 309)) |
						(1 << (HiveParser.KW_DELTA - 309)) |
						(1 << (HiveParser.KW_CSV - 309)))) !==
					0) ||
			_la === HiveParser.KW_JSON ||
			_la === HiveParser.KW_BLOOMFILTER ||
			_la === HiveParser.Identifier
		) {
			this.state = 1016;
			this.identifier();
			this.state = 1019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.DOT) {
				this.state = 1017;
				this.match(HiveParser.DOT);
				this.state = 1018;
				this.identifier();
			}
		}

		this.state = 1023;
		this.match(HiveParser.KW_FROM);
		this.state = 1024;
		this.match(HiveParser.StringLiteral);
		this.state = 1027;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1025;
			this.match(HiveParser.KW_WITH);
			this.state = 1026;
			this.replConfigs();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReplConfigsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_replConfigs;
	return this;
}

ReplConfigsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplConfigsContext.prototype.constructor = ReplConfigsContext;

ReplConfigsContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ReplConfigsContext.prototype.replConfigsList = function () {
	return this.getTypedRuleContext(ReplConfigsListContext, 0);
};

ReplConfigsContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ReplConfigsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReplConfigs(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReplConfigsContext = ReplConfigsContext;

HiveParser.prototype.replConfigs = function () {
	var localctx = new ReplConfigsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 30, HiveParser.RULE_replConfigs);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1029;
		this.match(HiveParser.LPAREN);
		this.state = 1030;
		this.replConfigsList();
		this.state = 1031;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReplConfigsListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_replConfigsList;
	return this;
}

ReplConfigsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplConfigsListContext.prototype.constructor = ReplConfigsListContext;

ReplConfigsListContext.prototype.keyValueProperty = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(KeyValuePropertyContext);
	} else {
		return this.getTypedRuleContext(KeyValuePropertyContext, i);
	}
};

ReplConfigsListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ReplConfigsListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReplConfigsList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReplConfigsListContext = ReplConfigsListContext;

HiveParser.prototype.replConfigsList = function () {
	var localctx = new ReplConfigsListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 32, HiveParser.RULE_replConfigsList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1033;
		this.keyValueProperty();
		this.state = 1038;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 1034;
			this.match(HiveParser.COMMA);
			this.state = 1035;
			this.keyValueProperty();
			this.state = 1040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReplStatusStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_replStatusStatement;
	return this;
}

ReplStatusStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplStatusStatementContext.prototype.constructor = ReplStatusStatementContext;

ReplStatusStatementContext.prototype.KW_REPL = function () {
	return this.getToken(HiveParser.KW_REPL, 0);
};

ReplStatusStatementContext.prototype.KW_STATUS = function () {
	return this.getToken(HiveParser.KW_STATUS, 0);
};

ReplStatusStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

ReplStatusStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

ReplStatusStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

ReplStatusStatementContext.prototype.replConfigs = function () {
	return this.getTypedRuleContext(ReplConfigsContext, 0);
};

ReplStatusStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReplStatusStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReplStatusStatementContext = ReplStatusStatementContext;

HiveParser.prototype.replStatusStatement = function () {
	var localctx = new ReplStatusStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 34, HiveParser.RULE_replStatusStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1041;
		this.match(HiveParser.KW_REPL);
		this.state = 1042;
		this.match(HiveParser.KW_STATUS);
		this.state = 1043;
		this.identifier();
		this.state = 1046;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.DOT) {
			this.state = 1044;
			this.match(HiveParser.DOT);
			this.state = 1045;
			this.identifier();
		}

		this.state = 1050;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1048;
			this.match(HiveParser.KW_WITH);
			this.state = 1049;
			this.replConfigs();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DdlStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_ddlStatement;
	return this;
}

DdlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DdlStatementContext.prototype.constructor = DdlStatementContext;

DdlStatementContext.prototype.createDatabaseStatement = function () {
	return this.getTypedRuleContext(CreateDatabaseStatementContext, 0);
};

DdlStatementContext.prototype.switchDatabaseStatement = function () {
	return this.getTypedRuleContext(SwitchDatabaseStatementContext, 0);
};

DdlStatementContext.prototype.dropDatabaseStatement = function () {
	return this.getTypedRuleContext(DropDatabaseStatementContext, 0);
};

DdlStatementContext.prototype.createTableStatement = function () {
	return this.getTypedRuleContext(CreateTableStatementContext, 0);
};

DdlStatementContext.prototype.dropTableStatement = function () {
	return this.getTypedRuleContext(DropTableStatementContext, 0);
};

DdlStatementContext.prototype.truncateTableStatement = function () {
	return this.getTypedRuleContext(TruncateTableStatementContext, 0);
};

DdlStatementContext.prototype.alterStatement = function () {
	return this.getTypedRuleContext(AlterStatementContext, 0);
};

DdlStatementContext.prototype.descStatement = function () {
	return this.getTypedRuleContext(DescStatementContext, 0);
};

DdlStatementContext.prototype.showStatement = function () {
	return this.getTypedRuleContext(ShowStatementContext, 0);
};

DdlStatementContext.prototype.metastoreCheck = function () {
	return this.getTypedRuleContext(MetastoreCheckContext, 0);
};

DdlStatementContext.prototype.createViewStatement = function () {
	return this.getTypedRuleContext(CreateViewStatementContext, 0);
};

DdlStatementContext.prototype.createMaterializedViewStatement = function () {
	return this.getTypedRuleContext(CreateMaterializedViewStatementContext, 0);
};

DdlStatementContext.prototype.dropViewStatement = function () {
	return this.getTypedRuleContext(DropViewStatementContext, 0);
};

DdlStatementContext.prototype.dropMaterializedViewStatement = function () {
	return this.getTypedRuleContext(DropMaterializedViewStatementContext, 0);
};

DdlStatementContext.prototype.createFunctionStatement = function () {
	return this.getTypedRuleContext(CreateFunctionStatementContext, 0);
};

DdlStatementContext.prototype.createMacroStatement = function () {
	return this.getTypedRuleContext(CreateMacroStatementContext, 0);
};

DdlStatementContext.prototype.dropFunctionStatement = function () {
	return this.getTypedRuleContext(DropFunctionStatementContext, 0);
};

DdlStatementContext.prototype.reloadFunctionStatement = function () {
	return this.getTypedRuleContext(ReloadFunctionStatementContext, 0);
};

DdlStatementContext.prototype.dropMacroStatement = function () {
	return this.getTypedRuleContext(DropMacroStatementContext, 0);
};

DdlStatementContext.prototype.analyzeStatement = function () {
	return this.getTypedRuleContext(AnalyzeStatementContext, 0);
};

DdlStatementContext.prototype.lockStatement = function () {
	return this.getTypedRuleContext(LockStatementContext, 0);
};

DdlStatementContext.prototype.unlockStatement = function () {
	return this.getTypedRuleContext(UnlockStatementContext, 0);
};

DdlStatementContext.prototype.lockDatabase = function () {
	return this.getTypedRuleContext(LockDatabaseContext, 0);
};

DdlStatementContext.prototype.unlockDatabase = function () {
	return this.getTypedRuleContext(UnlockDatabaseContext, 0);
};

DdlStatementContext.prototype.createRoleStatement = function () {
	return this.getTypedRuleContext(CreateRoleStatementContext, 0);
};

DdlStatementContext.prototype.dropRoleStatement = function () {
	return this.getTypedRuleContext(DropRoleStatementContext, 0);
};

DdlStatementContext.prototype.grantPrivileges = function () {
	return this.getTypedRuleContext(GrantPrivilegesContext, 0);
};

DdlStatementContext.prototype.revokePrivileges = function () {
	return this.getTypedRuleContext(RevokePrivilegesContext, 0);
};

DdlStatementContext.prototype.showGrants = function () {
	return this.getTypedRuleContext(ShowGrantsContext, 0);
};

DdlStatementContext.prototype.showRoleGrants = function () {
	return this.getTypedRuleContext(ShowRoleGrantsContext, 0);
};

DdlStatementContext.prototype.showRolePrincipals = function () {
	return this.getTypedRuleContext(ShowRolePrincipalsContext, 0);
};

DdlStatementContext.prototype.showRoles = function () {
	return this.getTypedRuleContext(ShowRolesContext, 0);
};

DdlStatementContext.prototype.grantRole = function () {
	return this.getTypedRuleContext(GrantRoleContext, 0);
};

DdlStatementContext.prototype.revokeRole = function () {
	return this.getTypedRuleContext(RevokeRoleContext, 0);
};

DdlStatementContext.prototype.setRole = function () {
	return this.getTypedRuleContext(SetRoleContext, 0);
};

DdlStatementContext.prototype.showCurrentRole = function () {
	return this.getTypedRuleContext(ShowCurrentRoleContext, 0);
};

DdlStatementContext.prototype.abortTransactionStatement = function () {
	return this.getTypedRuleContext(AbortTransactionStatementContext, 0);
};

DdlStatementContext.prototype.killQueryStatement = function () {
	return this.getTypedRuleContext(KillQueryStatementContext, 0);
};

DdlStatementContext.prototype.resourcePlanDdlStatements = function () {
	return this.getTypedRuleContext(ResourcePlanDdlStatementsContext, 0);
};

DdlStatementContext.prototype.createIndexStatement = function () {
	return this.getTypedRuleContext(CreateIndexStatementContext, 0);
};

DdlStatementContext.prototype.dropIndexStatement = function () {
	return this.getTypedRuleContext(DropIndexStatementContext, 0);
};

DdlStatementContext.prototype.createBloomfilterIndexStatement = function () {
	return this.getTypedRuleContext(CreateBloomfilterIndexStatementContext, 0);
};

DdlStatementContext.prototype.dropBloomfilterIndexStatement = function () {
	return this.getTypedRuleContext(DropBloomfilterIndexStatementContext, 0);
};

DdlStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDdlStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DdlStatementContext = DdlStatementContext;

HiveParser.prototype.ddlStatement = function () {
	var localctx = new DdlStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 36, HiveParser.RULE_ddlStatement);
	try {
		this.state = 1095;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1052;
				this.createDatabaseStatement();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1053;
				this.switchDatabaseStatement();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1054;
				this.dropDatabaseStatement();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 1055;
				this.createTableStatement();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 1056;
				this.dropTableStatement();
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 1057;
				this.truncateTableStatement();
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 1058;
				this.alterStatement();
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 1059;
				this.descStatement();
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 1060;
				this.showStatement();
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 1061;
				this.metastoreCheck();
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 1062;
				this.createViewStatement();
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 1063;
				this.createMaterializedViewStatement();
				break;

			case 13:
				this.enterOuterAlt(localctx, 13);
				this.state = 1064;
				this.dropViewStatement();
				break;

			case 14:
				this.enterOuterAlt(localctx, 14);
				this.state = 1065;
				this.dropMaterializedViewStatement();
				break;

			case 15:
				this.enterOuterAlt(localctx, 15);
				this.state = 1066;
				this.createFunctionStatement();
				break;

			case 16:
				this.enterOuterAlt(localctx, 16);
				this.state = 1067;
				this.createMacroStatement();
				break;

			case 17:
				this.enterOuterAlt(localctx, 17);
				this.state = 1068;
				this.dropFunctionStatement();
				break;

			case 18:
				this.enterOuterAlt(localctx, 18);
				this.state = 1069;
				this.reloadFunctionStatement();
				break;

			case 19:
				this.enterOuterAlt(localctx, 19);
				this.state = 1070;
				this.dropMacroStatement();
				break;

			case 20:
				this.enterOuterAlt(localctx, 20);
				this.state = 1071;
				this.analyzeStatement();
				break;

			case 21:
				this.enterOuterAlt(localctx, 21);
				this.state = 1072;
				this.lockStatement();
				break;

			case 22:
				this.enterOuterAlt(localctx, 22);
				this.state = 1073;
				this.unlockStatement();
				break;

			case 23:
				this.enterOuterAlt(localctx, 23);
				this.state = 1074;
				this.lockDatabase();
				break;

			case 24:
				this.enterOuterAlt(localctx, 24);
				this.state = 1075;
				this.unlockDatabase();
				break;

			case 25:
				this.enterOuterAlt(localctx, 25);
				this.state = 1076;
				this.createRoleStatement();
				break;

			case 26:
				this.enterOuterAlt(localctx, 26);
				this.state = 1077;
				this.dropRoleStatement();
				break;

			case 27:
				this.enterOuterAlt(localctx, 27);
				this.state = 1078;
				this.grantPrivileges();
				break;

			case 28:
				this.enterOuterAlt(localctx, 28);
				this.state = 1079;
				this.revokePrivileges();
				break;

			case 29:
				this.enterOuterAlt(localctx, 29);
				this.state = 1080;
				this.showGrants();
				break;

			case 30:
				this.enterOuterAlt(localctx, 30);
				this.state = 1081;
				this.showRoleGrants();
				break;

			case 31:
				this.enterOuterAlt(localctx, 31);
				this.state = 1082;
				this.showRolePrincipals();
				break;

			case 32:
				this.enterOuterAlt(localctx, 32);
				this.state = 1083;
				this.showRoles();
				break;

			case 33:
				this.enterOuterAlt(localctx, 33);
				this.state = 1084;
				this.grantRole();
				break;

			case 34:
				this.enterOuterAlt(localctx, 34);
				this.state = 1085;
				this.revokeRole();
				break;

			case 35:
				this.enterOuterAlt(localctx, 35);
				this.state = 1086;
				this.setRole();
				break;

			case 36:
				this.enterOuterAlt(localctx, 36);
				this.state = 1087;
				this.showCurrentRole();
				break;

			case 37:
				this.enterOuterAlt(localctx, 37);
				this.state = 1088;
				this.abortTransactionStatement();
				break;

			case 38:
				this.enterOuterAlt(localctx, 38);
				this.state = 1089;
				this.killQueryStatement();
				break;

			case 39:
				this.enterOuterAlt(localctx, 39);
				this.state = 1090;
				this.resourcePlanDdlStatements();
				break;

			case 40:
				this.enterOuterAlt(localctx, 40);
				this.state = 1091;
				this.createIndexStatement();
				break;

			case 41:
				this.enterOuterAlt(localctx, 41);
				this.state = 1092;
				this.dropIndexStatement();
				break;

			case 42:
				this.enterOuterAlt(localctx, 42);
				this.state = 1093;
				this.createBloomfilterIndexStatement();
				break;

			case 43:
				this.enterOuterAlt(localctx, 43);
				this.state = 1094;
				this.dropBloomfilterIndexStatement();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IfExistsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_ifExists;
	return this;
}

IfExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistsContext.prototype.constructor = IfExistsContext;

IfExistsContext.prototype.KW_IF = function () {
	return this.getToken(HiveParser.KW_IF, 0);
};

IfExistsContext.prototype.KW_EXISTS = function () {
	return this.getToken(HiveParser.KW_EXISTS, 0);
};

IfExistsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIfExists(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IfExistsContext = IfExistsContext;

HiveParser.prototype.ifExists = function () {
	var localctx = new IfExistsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 38, HiveParser.RULE_ifExists);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1097;
		this.match(HiveParser.KW_IF);
		this.state = 1098;
		this.match(HiveParser.KW_EXISTS);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RestrictOrCascadeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_restrictOrCascade;
	return this;
}

RestrictOrCascadeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RestrictOrCascadeContext.prototype.constructor = RestrictOrCascadeContext;

RestrictOrCascadeContext.prototype.KW_RESTRICT = function () {
	return this.getToken(HiveParser.KW_RESTRICT, 0);
};

RestrictOrCascadeContext.prototype.KW_CASCADE = function () {
	return this.getToken(HiveParser.KW_CASCADE, 0);
};

RestrictOrCascadeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRestrictOrCascade(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RestrictOrCascadeContext = RestrictOrCascadeContext;

HiveParser.prototype.restrictOrCascade = function () {
	var localctx = new RestrictOrCascadeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 40, HiveParser.RULE_restrictOrCascade);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1100;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IfNotExistsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_ifNotExists;
	return this;
}

IfNotExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistsContext.prototype.constructor = IfNotExistsContext;

IfNotExistsContext.prototype.KW_IF = function () {
	return this.getToken(HiveParser.KW_IF, 0);
};

IfNotExistsContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

IfNotExistsContext.prototype.KW_EXISTS = function () {
	return this.getToken(HiveParser.KW_EXISTS, 0);
};

IfNotExistsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIfNotExists(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IfNotExistsContext = IfNotExistsContext;

HiveParser.prototype.ifNotExists = function () {
	var localctx = new IfNotExistsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 42, HiveParser.RULE_ifNotExists);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1102;
		this.match(HiveParser.KW_IF);
		this.state = 1103;
		this.match(HiveParser.KW_NOT);
		this.state = 1104;
		this.match(HiveParser.KW_EXISTS);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RewriteEnabledContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rewriteEnabled;
	return this;
}

RewriteEnabledContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RewriteEnabledContext.prototype.constructor = RewriteEnabledContext;

RewriteEnabledContext.prototype.KW_ENABLE = function () {
	return this.getToken(HiveParser.KW_ENABLE, 0);
};

RewriteEnabledContext.prototype.KW_REWRITE = function () {
	return this.getToken(HiveParser.KW_REWRITE, 0);
};

RewriteEnabledContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRewriteEnabled(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RewriteEnabledContext = RewriteEnabledContext;

HiveParser.prototype.rewriteEnabled = function () {
	var localctx = new RewriteEnabledContext(this, this._ctx, this.state);
	this.enterRule(localctx, 44, HiveParser.RULE_rewriteEnabled);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1106;
		this.match(HiveParser.KW_ENABLE);
		this.state = 1107;
		this.match(HiveParser.KW_REWRITE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RewriteDisabledContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rewriteDisabled;
	return this;
}

RewriteDisabledContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RewriteDisabledContext.prototype.constructor = RewriteDisabledContext;

RewriteDisabledContext.prototype.KW_DISABLE = function () {
	return this.getToken(HiveParser.KW_DISABLE, 0);
};

RewriteDisabledContext.prototype.KW_REWRITE = function () {
	return this.getToken(HiveParser.KW_REWRITE, 0);
};

RewriteDisabledContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRewriteDisabled(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RewriteDisabledContext = RewriteDisabledContext;

HiveParser.prototype.rewriteDisabled = function () {
	var localctx = new RewriteDisabledContext(this, this._ctx, this.state);
	this.enterRule(localctx, 46, HiveParser.RULE_rewriteDisabled);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1109;
		this.match(HiveParser.KW_DISABLE);
		this.state = 1110;
		this.match(HiveParser.KW_REWRITE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StoredAsDirsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_storedAsDirs;
	return this;
}

StoredAsDirsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StoredAsDirsContext.prototype.constructor = StoredAsDirsContext;

StoredAsDirsContext.prototype.KW_STORED = function () {
	return this.getToken(HiveParser.KW_STORED, 0);
};

StoredAsDirsContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

StoredAsDirsContext.prototype.KW_DIRECTORIES = function () {
	return this.getToken(HiveParser.KW_DIRECTORIES, 0);
};

StoredAsDirsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitStoredAsDirs(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.StoredAsDirsContext = StoredAsDirsContext;

HiveParser.prototype.storedAsDirs = function () {
	var localctx = new StoredAsDirsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 48, HiveParser.RULE_storedAsDirs);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1112;
		this.match(HiveParser.KW_STORED);
		this.state = 1113;
		this.match(HiveParser.KW_AS);
		this.state = 1114;
		this.match(HiveParser.KW_DIRECTORIES);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OrReplaceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_orReplace;
	return this;
}

OrReplaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrReplaceContext.prototype.constructor = OrReplaceContext;

OrReplaceContext.prototype.KW_OR = function () {
	return this.getToken(HiveParser.KW_OR, 0);
};

OrReplaceContext.prototype.KW_REPLACE = function () {
	return this.getToken(HiveParser.KW_REPLACE, 0);
};

OrReplaceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitOrReplace(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.OrReplaceContext = OrReplaceContext;

HiveParser.prototype.orReplace = function () {
	var localctx = new OrReplaceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 50, HiveParser.RULE_orReplace);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1116;
		this.match(HiveParser.KW_OR);
		this.state = 1117;
		this.match(HiveParser.KW_REPLACE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateDatabaseStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createDatabaseStatement;
	return this;
}

CreateDatabaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseStatementContext.prototype.constructor = CreateDatabaseStatementContext;

CreateDatabaseStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateDatabaseStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreateDatabaseStatementContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

CreateDatabaseStatementContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

CreateDatabaseStatementContext.prototype.ifNotExists = function () {
	return this.getTypedRuleContext(IfNotExistsContext, 0);
};

CreateDatabaseStatementContext.prototype.databaseComment = function () {
	return this.getTypedRuleContext(DatabaseCommentContext, 0);
};

CreateDatabaseStatementContext.prototype.dbLocation = function () {
	return this.getTypedRuleContext(DbLocationContext, 0);
};

CreateDatabaseStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

CreateDatabaseStatementContext.prototype.KW_DBPROPERTIES = function () {
	return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
};

CreateDatabaseStatementContext.prototype.dbProperties = function () {
	return this.getTypedRuleContext(DbPropertiesContext, 0);
};

CreateDatabaseStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateDatabaseStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateDatabaseStatementContext = CreateDatabaseStatementContext;

HiveParser.prototype.createDatabaseStatement = function () {
	var localctx = new CreateDatabaseStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 52, HiveParser.RULE_createDatabaseStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1119;
		this.match(HiveParser.KW_CREATE);
		this.state = 1120;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1122;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 1121;
			this.ifNotExists();
		}

		this.state = 1124;
		this.identifier();
		this.state = 1126;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 1125;
			this.databaseComment();
		}

		this.state = 1129;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LOCATION) {
			this.state = 1128;
			this.dbLocation();
		}

		this.state = 1134;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1131;
			this.match(HiveParser.KW_WITH);
			this.state = 1132;
			this.match(HiveParser.KW_DBPROPERTIES);
			this.state = 1133;
			this.dbProperties();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DbLocationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dbLocation;
	return this;
}

DbLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DbLocationContext.prototype.constructor = DbLocationContext;

DbLocationContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

DbLocationContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

DbLocationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDbLocation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DbLocationContext = DbLocationContext;

HiveParser.prototype.dbLocation = function () {
	var localctx = new DbLocationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 54, HiveParser.RULE_dbLocation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1136;
		this.match(HiveParser.KW_LOCATION);
		this.state = 1137;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DbPropertiesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dbProperties;
	return this;
}

DbPropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DbPropertiesContext.prototype.constructor = DbPropertiesContext;

DbPropertiesContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

DbPropertiesContext.prototype.dbPropertiesList = function () {
	return this.getTypedRuleContext(DbPropertiesListContext, 0);
};

DbPropertiesContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

DbPropertiesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDbProperties(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DbPropertiesContext = DbPropertiesContext;

HiveParser.prototype.dbProperties = function () {
	var localctx = new DbPropertiesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 56, HiveParser.RULE_dbProperties);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1139;
		this.match(HiveParser.LPAREN);
		this.state = 1140;
		this.dbPropertiesList();
		this.state = 1141;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DbPropertiesListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dbPropertiesList;
	return this;
}

DbPropertiesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DbPropertiesListContext.prototype.constructor = DbPropertiesListContext;

DbPropertiesListContext.prototype.keyValueProperty = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(KeyValuePropertyContext);
	} else {
		return this.getTypedRuleContext(KeyValuePropertyContext, i);
	}
};

DbPropertiesListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

DbPropertiesListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDbPropertiesList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DbPropertiesListContext = DbPropertiesListContext;

HiveParser.prototype.dbPropertiesList = function () {
	var localctx = new DbPropertiesListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 58, HiveParser.RULE_dbPropertiesList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1143;
		this.keyValueProperty();
		this.state = 1148;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 1144;
			this.match(HiveParser.COMMA);
			this.state = 1145;
			this.keyValueProperty();
			this.state = 1150;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SwitchDatabaseStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_switchDatabaseStatement;
	return this;
}

SwitchDatabaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchDatabaseStatementContext.prototype.constructor = SwitchDatabaseStatementContext;

SwitchDatabaseStatementContext.prototype.KW_USE = function () {
	return this.getToken(HiveParser.KW_USE, 0);
};

SwitchDatabaseStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

SwitchDatabaseStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSwitchDatabaseStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SwitchDatabaseStatementContext = SwitchDatabaseStatementContext;

HiveParser.prototype.switchDatabaseStatement = function () {
	var localctx = new SwitchDatabaseStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 60, HiveParser.RULE_switchDatabaseStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1151;
		this.match(HiveParser.KW_USE);
		this.state = 1152;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropDatabaseStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropDatabaseStatement;
	return this;
}

DropDatabaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropDatabaseStatementContext.prototype.constructor = DropDatabaseStatementContext;

DropDatabaseStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropDatabaseStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DropDatabaseStatementContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

DropDatabaseStatementContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

DropDatabaseStatementContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

DropDatabaseStatementContext.prototype.restrictOrCascade = function () {
	return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
};

DropDatabaseStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropDatabaseStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropDatabaseStatementContext = DropDatabaseStatementContext;

HiveParser.prototype.dropDatabaseStatement = function () {
	var localctx = new DropDatabaseStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 62, HiveParser.RULE_dropDatabaseStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1154;
		this.match(HiveParser.KW_DROP);
		this.state = 1155;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1157;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 1156;
			this.ifExists();
		}

		this.state = 1159;
		this.identifier();
		this.state = 1161;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
			this.state = 1160;
			this.restrictOrCascade();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DatabaseCommentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_databaseComment;
	return this;
}

DatabaseCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatabaseCommentContext.prototype.constructor = DatabaseCommentContext;

DatabaseCommentContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

DatabaseCommentContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

DatabaseCommentContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDatabaseComment(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DatabaseCommentContext = DatabaseCommentContext;

HiveParser.prototype.databaseComment = function () {
	var localctx = new DatabaseCommentContext(this, this._ctx, this.state);
	this.enterRule(localctx, 64, HiveParser.RULE_databaseComment);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1163;
		this.match(HiveParser.KW_COMMENT);
		this.state = 1164;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateTableStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createTableStatement;
	return this;
}

CreateTableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableStatementContext.prototype.constructor = CreateTableStatementContext;

CreateTableStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateTableStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

CreateTableStatementContext.prototype.tableName = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableNameContext);
	} else {
		return this.getTypedRuleContext(TableNameContext, i);
	}
};

CreateTableStatementContext.prototype.KW_LIKE = function () {
	return this.getToken(HiveParser.KW_LIKE, 0);
};

CreateTableStatementContext.prototype.KW_TEMPORARY = function () {
	return this.getToken(HiveParser.KW_TEMPORARY, 0);
};

CreateTableStatementContext.prototype.KW_EXTERNAL = function () {
	return this.getToken(HiveParser.KW_EXTERNAL, 0);
};

CreateTableStatementContext.prototype.ifNotExists = function () {
	return this.getTypedRuleContext(IfNotExistsContext, 0);
};

CreateTableStatementContext.prototype.tableRowFormat = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableRowFormatContext);
	} else {
		return this.getTypedRuleContext(TableRowFormatContext, i);
	}
};

CreateTableStatementContext.prototype.tableFileFormat = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableFileFormatContext);
	} else {
		return this.getTypedRuleContext(TableFileFormatContext, i);
	}
};

CreateTableStatementContext.prototype.tableUsingDataSource = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableUsingDataSourceContext);
	} else {
		return this.getTypedRuleContext(TableUsingDataSourceContext, i);
	}
};

CreateTableStatementContext.prototype.tableLocation = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableLocationContext);
	} else {
		return this.getTypedRuleContext(TableLocationContext, i);
	}
};

CreateTableStatementContext.prototype.tablePropertiesPrefixed = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TablePropertiesPrefixedContext);
	} else {
		return this.getTypedRuleContext(TablePropertiesPrefixedContext, i);
	}
};

CreateTableStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

CreateTableStatementContext.prototype.columnNameTypeOrConstraintList = function () {
	return this.getTypedRuleContext(ColumnNameTypeOrConstraintListContext, 0);
};

CreateTableStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

CreateTableStatementContext.prototype.tableBuckets = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableBucketsContext);
	} else {
		return this.getTypedRuleContext(TableBucketsContext, i);
	}
};

CreateTableStatementContext.prototype.tableSkewed = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableSkewedContext);
	} else {
		return this.getTypedRuleContext(TableSkewedContext, i);
	}
};

CreateTableStatementContext.prototype.tablePartition = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TablePartitionContext);
	} else {
		return this.getTypedRuleContext(TablePartitionContext, i);
	}
};

CreateTableStatementContext.prototype.tableComment = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TableCommentContext);
	} else {
		return this.getTypedRuleContext(TableCommentContext, i);
	}
};

CreateTableStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

CreateTableStatementContext.prototype.selectStatementWithCTE = function () {
	return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
};

CreateTableStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateTableStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateTableStatementContext = CreateTableStatementContext;

HiveParser.prototype.createTableStatement = function () {
	var localctx = new CreateTableStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 66, HiveParser.RULE_createTableStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1166;
		this.match(HiveParser.KW_CREATE);
		this.state = 1168;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TEMPORARY) {
			this.state = 1167;
			this.match(HiveParser.KW_TEMPORARY);
		}

		this.state = 1171;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_EXTERNAL) {
			this.state = 1170;
			this.match(HiveParser.KW_EXTERNAL);
		}

		this.state = 1173;
		this.match(HiveParser.KW_TABLE);
		this.state = 1175;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 1174;
			this.ifNotExists();
		}

		this.state = 1177;
		this.tableName();
		this.state = 1219;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_LIKE:
				this.state = 1178;
				this.match(HiveParser.KW_LIKE);
				this.state = 1179;
				this.tableName();
				this.state = 1181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROW) {
					this.state = 1180;
					this.tableRowFormat();
				}

				this.state = 1184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_STORED) {
					this.state = 1183;
					this.tableFileFormat();
				}

				this.state = 1187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_USING) {
					this.state = 1186;
					this.tableUsingDataSource();
				}

				this.state = 1190;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LOCATION) {
					this.state = 1189;
					this.tableLocation();
				}

				this.state = 1193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TBLPROPERTIES) {
					this.state = 1192;
					this.tablePropertiesPrefixed();
				}

				break;
			case HiveParser.KW_AS:
			case HiveParser.KW_USING:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_ROW:
			case HiveParser.KW_STORED:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_SKEWED:
			case HiveParser.SEMICOLON:
			case HiveParser.LPAREN:
				this.state = 1199;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.LPAREN) {
					this.state = 1195;
					this.match(HiveParser.LPAREN);
					this.state = 1196;
					this.columnNameTypeOrConstraintList();
					this.state = 1197;
					this.match(HiveParser.RPAREN);
				}

				this.state = 1212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (
					_la === HiveParser.KW_USING ||
					_la === HiveParser.KW_COMMENT ||
					(((_la - 101) & ~0x1f) == 0 &&
						((1 << (_la - 101)) &
							((1 << (HiveParser.KW_PARTITIONED - 101)) |
								(1 << (HiveParser.KW_CLUSTERED - 101)) |
								(1 << (HiveParser.KW_ROW - 101)) |
								(1 << (HiveParser.KW_STORED - 101)) |
								(1 << (HiveParser.KW_LOCATION - 101)))) !==
							0) ||
					_la === HiveParser.KW_TBLPROPERTIES ||
					_la === HiveParser.KW_SKEWED
				) {
					this.state = 1210;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case HiveParser.KW_USING:
							this.state = 1201;
							this.tableUsingDataSource();
							break;
						case HiveParser.KW_CLUSTERED:
							this.state = 1202;
							this.tableBuckets();
							break;
						case HiveParser.KW_SKEWED:
							this.state = 1203;
							this.tableSkewed();
							break;
						case HiveParser.KW_ROW:
							this.state = 1204;
							this.tableRowFormat();
							break;
						case HiveParser.KW_STORED:
							this.state = 1205;
							this.tableFileFormat();
							break;
						case HiveParser.KW_PARTITIONED:
							this.state = 1206;
							this.tablePartition();
							break;
						case HiveParser.KW_LOCATION:
							this.state = 1207;
							this.tableLocation();
							break;
						case HiveParser.KW_TBLPROPERTIES:
							this.state = 1208;
							this.tablePropertiesPrefixed();
							break;
						case HiveParser.KW_COMMENT:
							this.state = 1209;
							this.tableComment();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 1214;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					this.state = 1215;
					this.match(HiveParser.KW_AS);
					this.state = 1216;
					this.selectStatementWithCTE();
				}

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TruncateTableStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_truncateTableStatement;
	return this;
}

TruncateTableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TruncateTableStatementContext.prototype.constructor = TruncateTableStatementContext;

TruncateTableStatementContext.prototype.KW_TRUNCATE = function () {
	return this.getToken(HiveParser.KW_TRUNCATE, 0);
};

TruncateTableStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

TruncateTableStatementContext.prototype.tablePartitionPrefix = function () {
	return this.getTypedRuleContext(TablePartitionPrefixContext, 0);
};

TruncateTableStatementContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

TruncateTableStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

TruncateTableStatementContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

TruncateTableStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

TruncateTableStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTruncateTableStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TruncateTableStatementContext = TruncateTableStatementContext;

HiveParser.prototype.truncateTableStatement = function () {
	var localctx = new TruncateTableStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 68, HiveParser.RULE_truncateTableStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1221;
		this.match(HiveParser.KW_TRUNCATE);
		this.state = 1222;
		this.match(HiveParser.KW_TABLE);
		this.state = 1223;
		this.tablePartitionPrefix();
		this.state = 1229;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COLUMNS) {
			this.state = 1224;
			this.match(HiveParser.KW_COLUMNS);
			this.state = 1225;
			this.match(HiveParser.LPAREN);
			this.state = 1226;
			this.columnNameList();
			this.state = 1227;
			this.match(HiveParser.RPAREN);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropTableStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropTableStatement;
	return this;
}

DropTableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableStatementContext.prototype.constructor = DropTableStatementContext;

DropTableStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropTableStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

DropTableStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

DropTableStatementContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

DropTableStatementContext.prototype.KW_PURGE = function () {
	return this.getToken(HiveParser.KW_PURGE, 0);
};

DropTableStatementContext.prototype.replicationClause = function () {
	return this.getTypedRuleContext(ReplicationClauseContext, 0);
};

DropTableStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropTableStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropTableStatementContext = DropTableStatementContext;

HiveParser.prototype.dropTableStatement = function () {
	var localctx = new DropTableStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 70, HiveParser.RULE_dropTableStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1231;
		this.match(HiveParser.KW_DROP);
		this.state = 1232;
		this.match(HiveParser.KW_TABLE);
		this.state = 1234;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 1233;
			this.ifExists();
		}

		this.state = 1236;
		this.tableName();
		this.state = 1238;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PURGE) {
			this.state = 1237;
			this.match(HiveParser.KW_PURGE);
		}

		this.state = 1241;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FOR) {
			this.state = 1240;
			this.replicationClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatement;
	return this;
}

AlterStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementContext.prototype.constructor = AlterStatementContext;

AlterStatementContext.prototype.KW_ALTER = function () {
	return this.getToken(HiveParser.KW_ALTER, 0);
};

AlterStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

AlterStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

AlterStatementContext.prototype.alterTableStatementSuffix = function () {
	return this.getTypedRuleContext(AlterTableStatementSuffixContext, 0);
};

AlterStatementContext.prototype.KW_VIEW = function () {
	return this.getToken(HiveParser.KW_VIEW, 0);
};

AlterStatementContext.prototype.alterViewStatementSuffix = function () {
	return this.getTypedRuleContext(AlterViewStatementSuffixContext, 0);
};

AlterStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

AlterStatementContext.prototype.KW_MATERIALIZED = function () {
	return this.getToken(HiveParser.KW_MATERIALIZED, 0);
};

AlterStatementContext.prototype.alterMaterializedViewStatementSuffix = function () {
	return this.getTypedRuleContext(AlterMaterializedViewStatementSuffixContext, 0);
};

AlterStatementContext.prototype.alterDatabaseStatementSuffix = function () {
	return this.getTypedRuleContext(AlterDatabaseStatementSuffixContext, 0);
};

AlterStatementContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

AlterStatementContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

AlterStatementContext.prototype.KW_INDEX = function () {
	return this.getToken(HiveParser.KW_INDEX, 0);
};

AlterStatementContext.prototype.alterIndexStatementSuffix = function () {
	return this.getTypedRuleContext(AlterIndexStatementSuffixContext, 0);
};

AlterStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementContext = AlterStatementContext;

HiveParser.prototype.alterStatement = function () {
	var localctx = new AlterStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 72, HiveParser.RULE_alterStatement);
	var _la = 0; // Token type
	try {
		this.state = 1268;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1243;
				this.match(HiveParser.KW_ALTER);
				this.state = 1244;
				this.match(HiveParser.KW_TABLE);
				this.state = 1245;
				this.tableName();
				this.state = 1246;
				this.alterTableStatementSuffix();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1248;
				this.match(HiveParser.KW_ALTER);
				this.state = 1249;
				this.match(HiveParser.KW_VIEW);
				this.state = 1250;
				this.tableName();
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					this.state = 1251;
					this.match(HiveParser.KW_AS);
				}

				this.state = 1254;
				this.alterViewStatementSuffix();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1256;
				this.match(HiveParser.KW_ALTER);
				this.state = 1257;
				this.match(HiveParser.KW_MATERIALIZED);
				this.state = 1258;
				this.match(HiveParser.KW_VIEW);
				this.state = 1259;
				this.tableName();
				this.state = 1260;
				this.alterMaterializedViewStatementSuffix();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 1262;
				this.match(HiveParser.KW_ALTER);
				this.state = 1263;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1264;
				this.alterDatabaseStatementSuffix();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 1265;
				this.match(HiveParser.KW_ALTER);
				this.state = 1266;
				this.match(HiveParser.KW_INDEX);
				this.state = 1267;
				this.alterIndexStatementSuffix();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterTableStatementSuffixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterTableStatementSuffix;
	return this;
}

AlterTableStatementSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableStatementSuffixContext.prototype.constructor = AlterTableStatementSuffixContext;

AlterTableStatementSuffixContext.prototype.alterStatementSuffixRename = function () {
	return this.getTypedRuleContext(AlterStatementSuffixRenameContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixDropPartitions = function () {
	return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixAddPartitions = function () {
	return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixTouch = function () {
	return this.getTypedRuleContext(AlterStatementSuffixTouchContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixArchive = function () {
	return this.getTypedRuleContext(AlterStatementSuffixArchiveContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixUnArchive = function () {
	return this.getTypedRuleContext(AlterStatementSuffixUnArchiveContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixProperties = function () {
	return this.getTypedRuleContext(AlterStatementSuffixPropertiesContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixSkewedby = function () {
	return this.getTypedRuleContext(AlterStatementSuffixSkewedbyContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixExchangePartition = function () {
	return this.getTypedRuleContext(AlterStatementSuffixExchangePartitionContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementPartitionKeyType = function () {
	return this.getTypedRuleContext(AlterStatementPartitionKeyTypeContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixDropConstraint = function () {
	return this.getTypedRuleContext(AlterStatementSuffixDropConstraintContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixAddConstraint = function () {
	return this.getTypedRuleContext(AlterStatementSuffixAddConstraintContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterTblPartitionStatementSuffix = function () {
	return this.getTypedRuleContext(AlterTblPartitionStatementSuffixContext, 0);
};

AlterTableStatementSuffixContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

AlterTableStatementSuffixContext.prototype.alterStatementSuffixSetOwner = function () {
	return this.getTypedRuleContext(AlterStatementSuffixSetOwnerContext, 0);
};

AlterTableStatementSuffixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterTableStatementSuffix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterTableStatementSuffixContext = AlterTableStatementSuffixContext;

HiveParser.prototype.alterTableStatementSuffix = function () {
	var localctx = new AlterTableStatementSuffixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 74, HiveParser.RULE_alterTableStatementSuffix);
	var _la = 0; // Token type
	try {
		this.state = 1287;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1270;
				this.alterStatementSuffixRename();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1271;
				this.alterStatementSuffixDropPartitions();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1272;
				this.alterStatementSuffixAddPartitions();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 1273;
				this.alterStatementSuffixTouch();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 1274;
				this.alterStatementSuffixArchive();
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 1275;
				this.alterStatementSuffixUnArchive();
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 1276;
				this.alterStatementSuffixProperties();
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 1277;
				this.alterStatementSuffixSkewedby();
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 1278;
				this.alterStatementSuffixExchangePartition();
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 1279;
				this.alterStatementPartitionKeyType();
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 1280;
				this.alterStatementSuffixDropConstraint();
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 1281;
				this.alterStatementSuffixAddConstraint();
				break;

			case 13:
				this.enterOuterAlt(localctx, 13);
				this.state = 1283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					this.state = 1282;
					this.partitionSpec();
				}

				this.state = 1285;
				this.alterTblPartitionStatementSuffix();
				break;

			case 14:
				this.enterOuterAlt(localctx, 14);
				this.state = 1286;
				this.alterStatementSuffixSetOwner();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterTblPartitionStatementSuffixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterTblPartitionStatementSuffix;
	return this;
}

AlterTblPartitionStatementSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTblPartitionStatementSuffixContext.prototype.constructor = AlterTblPartitionStatementSuffixContext;

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixFileFormat = function () {
	return this.getTypedRuleContext(AlterStatementSuffixFileFormatContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixLocation = function () {
	return this.getTypedRuleContext(AlterStatementSuffixLocationContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixMergeFiles = function () {
	return this.getTypedRuleContext(AlterStatementSuffixMergeFilesContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixSerdeProperties = function () {
	return this.getTypedRuleContext(AlterStatementSuffixSerdePropertiesContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixRenamePart = function () {
	return this.getTypedRuleContext(AlterStatementSuffixRenamePartContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixBucketNum = function () {
	return this.getTypedRuleContext(AlterStatementSuffixBucketNumContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterTblPartitionStatementSuffixSkewedLocation = function () {
	return this.getTypedRuleContext(AlterTblPartitionStatementSuffixSkewedLocationContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixClusterbySortby = function () {
	return this.getTypedRuleContext(AlterStatementSuffixClusterbySortbyContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixCompact = function () {
	return this.getTypedRuleContext(AlterStatementSuffixCompactContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixUpdateStatsCol = function () {
	return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsColContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixUpdateStats = function () {
	return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixRenameCol = function () {
	return this.getTypedRuleContext(AlterStatementSuffixRenameColContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixAddCol = function () {
	return this.getTypedRuleContext(AlterStatementSuffixAddColContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.alterStatementSuffixUpdateColumns = function () {
	return this.getTypedRuleContext(AlterStatementSuffixUpdateColumnsContext, 0);
};

AlterTblPartitionStatementSuffixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterTblPartitionStatementSuffix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterTblPartitionStatementSuffixContext = AlterTblPartitionStatementSuffixContext;

HiveParser.prototype.alterTblPartitionStatementSuffix = function () {
	var localctx = new AlterTblPartitionStatementSuffixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 76, HiveParser.RULE_alterTblPartitionStatementSuffix);
	try {
		this.state = 1303;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1289;
				this.alterStatementSuffixFileFormat();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1290;
				this.alterStatementSuffixLocation();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1291;
				this.alterStatementSuffixMergeFiles();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 1292;
				this.alterStatementSuffixSerdeProperties();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 1293;
				this.alterStatementSuffixRenamePart();
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 1294;
				this.alterStatementSuffixBucketNum();
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 1295;
				this.alterTblPartitionStatementSuffixSkewedLocation();
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 1296;
				this.alterStatementSuffixClusterbySortby();
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 1297;
				this.alterStatementSuffixCompact();
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 1298;
				this.alterStatementSuffixUpdateStatsCol();
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 1299;
				this.alterStatementSuffixUpdateStats();
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 1300;
				this.alterStatementSuffixRenameCol();
				break;

			case 13:
				this.enterOuterAlt(localctx, 13);
				this.state = 1301;
				this.alterStatementSuffixAddCol();
				break;

			case 14:
				this.enterOuterAlt(localctx, 14);
				this.state = 1302;
				this.alterStatementSuffixUpdateColumns();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementPartitionKeyTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementPartitionKeyType;
	return this;
}

AlterStatementPartitionKeyTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementPartitionKeyTypeContext.prototype.constructor = AlterStatementPartitionKeyTypeContext;

AlterStatementPartitionKeyTypeContext.prototype.KW_PARTITION = function () {
	return this.getToken(HiveParser.KW_PARTITION, 0);
};

AlterStatementPartitionKeyTypeContext.prototype.KW_COLUMN = function () {
	return this.getToken(HiveParser.KW_COLUMN, 0);
};

AlterStatementPartitionKeyTypeContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

AlterStatementPartitionKeyTypeContext.prototype.columnNameType = function () {
	return this.getTypedRuleContext(ColumnNameTypeContext, 0);
};

AlterStatementPartitionKeyTypeContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

AlterStatementPartitionKeyTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementPartitionKeyType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementPartitionKeyTypeContext = AlterStatementPartitionKeyTypeContext;

HiveParser.prototype.alterStatementPartitionKeyType = function () {
	var localctx = new AlterStatementPartitionKeyTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 78, HiveParser.RULE_alterStatementPartitionKeyType);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1305;
		this.match(HiveParser.KW_PARTITION);
		this.state = 1306;
		this.match(HiveParser.KW_COLUMN);
		this.state = 1307;
		this.match(HiveParser.LPAREN);
		this.state = 1308;
		this.columnNameType();
		this.state = 1309;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterViewStatementSuffixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterViewStatementSuffix;
	return this;
}

AlterViewStatementSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterViewStatementSuffixContext.prototype.constructor = AlterViewStatementSuffixContext;

AlterViewStatementSuffixContext.prototype.alterViewSuffixProperties = function () {
	return this.getTypedRuleContext(AlterViewSuffixPropertiesContext, 0);
};

AlterViewStatementSuffixContext.prototype.alterStatementSuffixRename = function () {
	return this.getTypedRuleContext(AlterStatementSuffixRenameContext, 0);
};

AlterViewStatementSuffixContext.prototype.alterStatementSuffixAddPartitions = function () {
	return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext, 0);
};

AlterViewStatementSuffixContext.prototype.alterStatementSuffixDropPartitions = function () {
	return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext, 0);
};

AlterViewStatementSuffixContext.prototype.selectStatementWithCTE = function () {
	return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
};

AlterViewStatementSuffixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterViewStatementSuffix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterViewStatementSuffixContext = AlterViewStatementSuffixContext;

HiveParser.prototype.alterViewStatementSuffix = function () {
	var localctx = new AlterViewStatementSuffixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 80, HiveParser.RULE_alterViewStatementSuffix);
	try {
		this.state = 1316;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_SET:
			case HiveParser.KW_UNSET:
				this.enterOuterAlt(localctx, 1);
				this.state = 1311;
				this.alterViewSuffixProperties();
				break;
			case HiveParser.KW_RENAME:
				this.enterOuterAlt(localctx, 2);
				this.state = 1312;
				this.alterStatementSuffixRename();
				break;
			case HiveParser.KW_ADD:
				this.enterOuterAlt(localctx, 3);
				this.state = 1313;
				this.alterStatementSuffixAddPartitions();
				break;
			case HiveParser.KW_DROP:
				this.enterOuterAlt(localctx, 4);
				this.state = 1314;
				this.alterStatementSuffixDropPartitions();
				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_WITH:
			case HiveParser.LPAREN:
				this.enterOuterAlt(localctx, 5);
				this.state = 1315;
				this.selectStatementWithCTE();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterMaterializedViewStatementSuffixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterMaterializedViewStatementSuffix;
	return this;
}

AlterMaterializedViewStatementSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterMaterializedViewStatementSuffixContext.prototype.constructor = AlterMaterializedViewStatementSuffixContext;

AlterMaterializedViewStatementSuffixContext.prototype.alterMaterializedViewSuffixRewrite = function () {
	return this.getTypedRuleContext(AlterMaterializedViewSuffixRewriteContext, 0);
};

AlterMaterializedViewStatementSuffixContext.prototype.alterMaterializedViewSuffixRebuild = function () {
	return this.getTypedRuleContext(AlterMaterializedViewSuffixRebuildContext, 0);
};

AlterMaterializedViewStatementSuffixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterMaterializedViewStatementSuffix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterMaterializedViewStatementSuffixContext = AlterMaterializedViewStatementSuffixContext;

HiveParser.prototype.alterMaterializedViewStatementSuffix = function () {
	var localctx = new AlterMaterializedViewStatementSuffixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 82, HiveParser.RULE_alterMaterializedViewStatementSuffix);
	try {
		this.state = 1320;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
				this.enterOuterAlt(localctx, 1);
				this.state = 1318;
				this.alterMaterializedViewSuffixRewrite();
				break;
			case HiveParser.KW_REBUILD:
				this.enterOuterAlt(localctx, 2);
				this.state = 1319;
				this.alterMaterializedViewSuffixRebuild();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterDatabaseStatementSuffixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterDatabaseStatementSuffix;
	return this;
}

AlterDatabaseStatementSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseStatementSuffixContext.prototype.constructor = AlterDatabaseStatementSuffixContext;

AlterDatabaseStatementSuffixContext.prototype.alterDatabaseSuffixProperties = function () {
	return this.getTypedRuleContext(AlterDatabaseSuffixPropertiesContext, 0);
};

AlterDatabaseStatementSuffixContext.prototype.alterDatabaseSuffixSetOwner = function () {
	return this.getTypedRuleContext(AlterDatabaseSuffixSetOwnerContext, 0);
};

AlterDatabaseStatementSuffixContext.prototype.alterDatabaseSuffixSetLocation = function () {
	return this.getTypedRuleContext(AlterDatabaseSuffixSetLocationContext, 0);
};

AlterDatabaseStatementSuffixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterDatabaseStatementSuffix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterDatabaseStatementSuffixContext = AlterDatabaseStatementSuffixContext;

HiveParser.prototype.alterDatabaseStatementSuffix = function () {
	var localctx = new AlterDatabaseStatementSuffixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 84, HiveParser.RULE_alterDatabaseStatementSuffix);
	try {
		this.state = 1325;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 60, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1322;
				this.alterDatabaseSuffixProperties();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1323;
				this.alterDatabaseSuffixSetOwner();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1324;
				this.alterDatabaseSuffixSetLocation();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterDatabaseSuffixPropertiesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixProperties;
	return this;
}

AlterDatabaseSuffixPropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseSuffixPropertiesContext.prototype.constructor = AlterDatabaseSuffixPropertiesContext;

AlterDatabaseSuffixPropertiesContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterDatabaseSuffixPropertiesContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterDatabaseSuffixPropertiesContext.prototype.KW_DBPROPERTIES = function () {
	return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
};

AlterDatabaseSuffixPropertiesContext.prototype.dbProperties = function () {
	return this.getTypedRuleContext(DbPropertiesContext, 0);
};

AlterDatabaseSuffixPropertiesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterDatabaseSuffixProperties(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterDatabaseSuffixPropertiesContext = AlterDatabaseSuffixPropertiesContext;

HiveParser.prototype.alterDatabaseSuffixProperties = function () {
	var localctx = new AlterDatabaseSuffixPropertiesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 86, HiveParser.RULE_alterDatabaseSuffixProperties);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1327;
		this.identifier();
		this.state = 1328;
		this.match(HiveParser.KW_SET);
		this.state = 1329;
		this.match(HiveParser.KW_DBPROPERTIES);
		this.state = 1330;
		this.dbProperties();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterDatabaseSuffixSetOwnerContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixSetOwner;
	return this;
}

AlterDatabaseSuffixSetOwnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseSuffixSetOwnerContext.prototype.constructor = AlterDatabaseSuffixSetOwnerContext;

AlterDatabaseSuffixSetOwnerContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterDatabaseSuffixSetOwnerContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterDatabaseSuffixSetOwnerContext.prototype.KW_OWNER = function () {
	return this.getToken(HiveParser.KW_OWNER, 0);
};

AlterDatabaseSuffixSetOwnerContext.prototype.principalName = function () {
	return this.getTypedRuleContext(PrincipalNameContext, 0);
};

AlterDatabaseSuffixSetOwnerContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterDatabaseSuffixSetOwner(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterDatabaseSuffixSetOwnerContext = AlterDatabaseSuffixSetOwnerContext;

HiveParser.prototype.alterDatabaseSuffixSetOwner = function () {
	var localctx = new AlterDatabaseSuffixSetOwnerContext(this, this._ctx, this.state);
	this.enterRule(localctx, 88, HiveParser.RULE_alterDatabaseSuffixSetOwner);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1332;
		this.identifier();
		this.state = 1333;
		this.match(HiveParser.KW_SET);
		this.state = 1334;
		this.match(HiveParser.KW_OWNER);
		this.state = 1335;
		this.principalName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterDatabaseSuffixSetLocationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixSetLocation;
	return this;
}

AlterDatabaseSuffixSetLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseSuffixSetLocationContext.prototype.constructor = AlterDatabaseSuffixSetLocationContext;

AlterDatabaseSuffixSetLocationContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterDatabaseSuffixSetLocationContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterDatabaseSuffixSetLocationContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

AlterDatabaseSuffixSetLocationContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterDatabaseSuffixSetLocationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterDatabaseSuffixSetLocation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterDatabaseSuffixSetLocationContext = AlterDatabaseSuffixSetLocationContext;

HiveParser.prototype.alterDatabaseSuffixSetLocation = function () {
	var localctx = new AlterDatabaseSuffixSetLocationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 90, HiveParser.RULE_alterDatabaseSuffixSetLocation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1337;
		this.identifier();
		this.state = 1338;
		this.match(HiveParser.KW_SET);
		this.state = 1339;
		this.match(HiveParser.KW_LOCATION);
		this.state = 1340;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixRenameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixRename;
	return this;
}

AlterStatementSuffixRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixRenameContext.prototype.constructor = AlterStatementSuffixRenameContext;

AlterStatementSuffixRenameContext.prototype.KW_RENAME = function () {
	return this.getToken(HiveParser.KW_RENAME, 0);
};

AlterStatementSuffixRenameContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

AlterStatementSuffixRenameContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

AlterStatementSuffixRenameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixRename(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixRenameContext = AlterStatementSuffixRenameContext;

HiveParser.prototype.alterStatementSuffixRename = function () {
	var localctx = new AlterStatementSuffixRenameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 92, HiveParser.RULE_alterStatementSuffixRename);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1342;
		this.match(HiveParser.KW_RENAME);
		this.state = 1343;
		this.match(HiveParser.KW_TO);
		this.state = 1344;
		this.tableName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixAddColContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddCol;
	return this;
}

AlterStatementSuffixAddColContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixAddColContext.prototype.constructor = AlterStatementSuffixAddColContext;

AlterStatementSuffixAddColContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

AlterStatementSuffixAddColContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

AlterStatementSuffixAddColContext.prototype.columnNameTypeList = function () {
	return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
};

AlterStatementSuffixAddColContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

AlterStatementSuffixAddColContext.prototype.KW_ADD = function () {
	return this.getToken(HiveParser.KW_ADD, 0);
};

AlterStatementSuffixAddColContext.prototype.KW_REPLACE = function () {
	return this.getToken(HiveParser.KW_REPLACE, 0);
};

AlterStatementSuffixAddColContext.prototype.restrictOrCascade = function () {
	return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
};

AlterStatementSuffixAddColContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixAddCol(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixAddColContext = AlterStatementSuffixAddColContext;

HiveParser.prototype.alterStatementSuffixAddCol = function () {
	var localctx = new AlterStatementSuffixAddColContext(this, this._ctx, this.state);
	this.enterRule(localctx, 94, HiveParser.RULE_alterStatementSuffixAddCol);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1346;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_ADD || _la === HiveParser.KW_REPLACE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1347;
		this.match(HiveParser.KW_COLUMNS);
		this.state = 1348;
		this.match(HiveParser.LPAREN);
		this.state = 1349;
		this.columnNameTypeList();
		this.state = 1350;
		this.match(HiveParser.RPAREN);
		this.state = 1352;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
			this.state = 1351;
			this.restrictOrCascade();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixAddConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddConstraint;
	return this;
}

AlterStatementSuffixAddConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixAddConstraintContext.prototype.constructor = AlterStatementSuffixAddConstraintContext;

AlterStatementSuffixAddConstraintContext.prototype.KW_ADD = function () {
	return this.getToken(HiveParser.KW_ADD, 0);
};

AlterStatementSuffixAddConstraintContext.prototype.alterForeignKeyWithName = function () {
	return this.getTypedRuleContext(AlterForeignKeyWithNameContext, 0);
};

AlterStatementSuffixAddConstraintContext.prototype.alterConstraintWithName = function () {
	return this.getTypedRuleContext(AlterConstraintWithNameContext, 0);
};

AlterStatementSuffixAddConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixAddConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixAddConstraintContext = AlterStatementSuffixAddConstraintContext;

HiveParser.prototype.alterStatementSuffixAddConstraint = function () {
	var localctx = new AlterStatementSuffixAddConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 96, HiveParser.RULE_alterStatementSuffixAddConstraint);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1354;
		this.match(HiveParser.KW_ADD);
		this.state = 1357;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);
		switch (la_) {
			case 1:
				this.state = 1355;
				this.alterForeignKeyWithName();
				break;

			case 2:
				this.state = 1356;
				this.alterConstraintWithName();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixUpdateColumnsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateColumns;
	return this;
}

AlterStatementSuffixUpdateColumnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixUpdateColumnsContext.prototype.constructor = AlterStatementSuffixUpdateColumnsContext;

AlterStatementSuffixUpdateColumnsContext.prototype.KW_UPDATE = function () {
	return this.getToken(HiveParser.KW_UPDATE, 0);
};

AlterStatementSuffixUpdateColumnsContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

AlterStatementSuffixUpdateColumnsContext.prototype.restrictOrCascade = function () {
	return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
};

AlterStatementSuffixUpdateColumnsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixUpdateColumns(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixUpdateColumnsContext = AlterStatementSuffixUpdateColumnsContext;

HiveParser.prototype.alterStatementSuffixUpdateColumns = function () {
	var localctx = new AlterStatementSuffixUpdateColumnsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 98, HiveParser.RULE_alterStatementSuffixUpdateColumns);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1359;
		this.match(HiveParser.KW_UPDATE);
		this.state = 1360;
		this.match(HiveParser.KW_COLUMNS);
		this.state = 1362;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
			this.state = 1361;
			this.restrictOrCascade();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixDropConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixDropConstraint;
	return this;
}

AlterStatementSuffixDropConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixDropConstraintContext.prototype.constructor = AlterStatementSuffixDropConstraintContext;

AlterStatementSuffixDropConstraintContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

AlterStatementSuffixDropConstraintContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

AlterStatementSuffixDropConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterStatementSuffixDropConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixDropConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixDropConstraintContext = AlterStatementSuffixDropConstraintContext;

HiveParser.prototype.alterStatementSuffixDropConstraint = function () {
	var localctx = new AlterStatementSuffixDropConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 100, HiveParser.RULE_alterStatementSuffixDropConstraint);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1364;
		this.match(HiveParser.KW_DROP);
		this.state = 1365;
		this.match(HiveParser.KW_CONSTRAINT);
		this.state = 1366;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixRenameColContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixRenameCol;
	return this;
}

AlterStatementSuffixRenameColContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixRenameColContext.prototype.constructor = AlterStatementSuffixRenameColContext;

AlterStatementSuffixRenameColContext.prototype.KW_CHANGE = function () {
	return this.getToken(HiveParser.KW_CHANGE, 0);
};

AlterStatementSuffixRenameColContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

AlterStatementSuffixRenameColContext.prototype.colType = function () {
	return this.getTypedRuleContext(ColTypeContext, 0);
};

AlterStatementSuffixRenameColContext.prototype.KW_COLUMN = function () {
	return this.getToken(HiveParser.KW_COLUMN, 0);
};

AlterStatementSuffixRenameColContext.prototype.alterColumnConstraint = function () {
	return this.getTypedRuleContext(AlterColumnConstraintContext, 0);
};

AlterStatementSuffixRenameColContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

AlterStatementSuffixRenameColContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterStatementSuffixRenameColContext.prototype.alterStatementChangeColPosition = function () {
	return this.getTypedRuleContext(AlterStatementChangeColPositionContext, 0);
};

AlterStatementSuffixRenameColContext.prototype.restrictOrCascade = function () {
	return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
};

AlterStatementSuffixRenameColContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixRenameCol(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixRenameColContext = AlterStatementSuffixRenameColContext;

HiveParser.prototype.alterStatementSuffixRenameCol = function () {
	var localctx = new AlterStatementSuffixRenameColContext(this, this._ctx, this.state);
	this.enterRule(localctx, 102, HiveParser.RULE_alterStatementSuffixRenameCol);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1368;
		this.match(HiveParser.KW_CHANGE);
		this.state = 1370;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COLUMN) {
			this.state = 1369;
			this.match(HiveParser.KW_COLUMN);
		}

		this.state = 1372;
		this.identifier();
		this.state = 1373;
		this.identifier();
		this.state = 1374;
		this.colType();
		this.state = 1376;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			(((_la - 288) & ~0x1f) == 0 &&
				((1 << (_la - 288)) &
					((1 << (HiveParser.KW_PRIMARY - 288)) |
						(1 << (HiveParser.KW_REFERENCES - 288)) |
						(1 << (HiveParser.KW_CONSTRAINT - 288)) |
						(1 << (HiveParser.KW_UNIQUE - 288)) |
						(1 << (HiveParser.KW_DEFAULT - 288)) |
						(1 << (HiveParser.KW_CHECK - 288)))) !==
					0)
		) {
			this.state = 1375;
			this.alterColumnConstraint();
		}

		this.state = 1380;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 1378;
			this.match(HiveParser.KW_COMMENT);
			this.state = 1379;
			this.match(HiveParser.StringLiteral);
		}

		this.state = 1383;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FIRST || _la === HiveParser.KW_AFTER) {
			this.state = 1382;
			this.alterStatementChangeColPosition();
		}

		this.state = 1386;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
			this.state = 1385;
			this.restrictOrCascade();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixUpdateStatsColContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateStatsCol;
	return this;
}

AlterStatementSuffixUpdateStatsColContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixUpdateStatsColContext.prototype.constructor = AlterStatementSuffixUpdateStatsColContext;

AlterStatementSuffixUpdateStatsColContext.prototype.KW_UPDATE = function () {
	return this.getToken(HiveParser.KW_UPDATE, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.KW_STATISTICS = function () {
	return this.getToken(HiveParser.KW_STATISTICS, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.KW_COLUMN = function () {
	return this.getToken(HiveParser.KW_COLUMN, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterStatementSuffixUpdateStatsColContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixUpdateStatsCol(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixUpdateStatsColContext = AlterStatementSuffixUpdateStatsColContext;

HiveParser.prototype.alterStatementSuffixUpdateStatsCol = function () {
	var localctx = new AlterStatementSuffixUpdateStatsColContext(this, this._ctx, this.state);
	this.enterRule(localctx, 104, HiveParser.RULE_alterStatementSuffixUpdateStatsCol);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1388;
		this.match(HiveParser.KW_UPDATE);
		this.state = 1389;
		this.match(HiveParser.KW_STATISTICS);
		this.state = 1390;
		this.match(HiveParser.KW_FOR);
		this.state = 1392;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COLUMN) {
			this.state = 1391;
			this.match(HiveParser.KW_COLUMN);
		}

		this.state = 1394;
		this.identifier();
		this.state = 1395;
		this.match(HiveParser.KW_SET);
		this.state = 1396;
		this.tableProperties();
		this.state = 1399;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 1397;
			this.match(HiveParser.KW_COMMENT);
			this.state = 1398;
			this.match(HiveParser.StringLiteral);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixUpdateStatsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateStats;
	return this;
}

AlterStatementSuffixUpdateStatsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixUpdateStatsContext.prototype.constructor = AlterStatementSuffixUpdateStatsContext;

AlterStatementSuffixUpdateStatsContext.prototype.KW_UPDATE = function () {
	return this.getToken(HiveParser.KW_UPDATE, 0);
};

AlterStatementSuffixUpdateStatsContext.prototype.KW_STATISTICS = function () {
	return this.getToken(HiveParser.KW_STATISTICS, 0);
};

AlterStatementSuffixUpdateStatsContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixUpdateStatsContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

AlterStatementSuffixUpdateStatsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixUpdateStats(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixUpdateStatsContext = AlterStatementSuffixUpdateStatsContext;

HiveParser.prototype.alterStatementSuffixUpdateStats = function () {
	var localctx = new AlterStatementSuffixUpdateStatsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 106, HiveParser.RULE_alterStatementSuffixUpdateStats);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1401;
		this.match(HiveParser.KW_UPDATE);
		this.state = 1402;
		this.match(HiveParser.KW_STATISTICS);
		this.state = 1403;
		this.match(HiveParser.KW_SET);
		this.state = 1404;
		this.tableProperties();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementChangeColPositionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementChangeColPosition;
	this.first = null; // Token
	return this;
}

AlterStatementChangeColPositionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementChangeColPositionContext.prototype.constructor = AlterStatementChangeColPositionContext;

AlterStatementChangeColPositionContext.prototype.KW_FIRST = function () {
	return this.getToken(HiveParser.KW_FIRST, 0);
};

AlterStatementChangeColPositionContext.prototype.KW_AFTER = function () {
	return this.getToken(HiveParser.KW_AFTER, 0);
};

AlterStatementChangeColPositionContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterStatementChangeColPositionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementChangeColPosition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementChangeColPositionContext = AlterStatementChangeColPositionContext;

HiveParser.prototype.alterStatementChangeColPosition = function () {
	var localctx = new AlterStatementChangeColPositionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 108, HiveParser.RULE_alterStatementChangeColPosition);
	try {
		this.state = 1409;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_FIRST:
				this.enterOuterAlt(localctx, 1);
				this.state = 1406;
				localctx.first = this.match(HiveParser.KW_FIRST);
				break;
			case HiveParser.KW_AFTER:
				this.enterOuterAlt(localctx, 2);
				this.state = 1407;
				this.match(HiveParser.KW_AFTER);
				this.state = 1408;
				this.identifier();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixAddPartitionsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddPartitions;
	return this;
}

AlterStatementSuffixAddPartitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixAddPartitionsContext.prototype.constructor = AlterStatementSuffixAddPartitionsContext;

AlterStatementSuffixAddPartitionsContext.prototype.KW_ADD = function () {
	return this.getToken(HiveParser.KW_ADD, 0);
};

AlterStatementSuffixAddPartitionsContext.prototype.ifNotExists = function () {
	return this.getTypedRuleContext(IfNotExistsContext, 0);
};

AlterStatementSuffixAddPartitionsContext.prototype.alterStatementSuffixAddPartitionsElement = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(AlterStatementSuffixAddPartitionsElementContext);
	} else {
		return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsElementContext, i);
	}
};

AlterStatementSuffixAddPartitionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixAddPartitions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixAddPartitionsContext = AlterStatementSuffixAddPartitionsContext;

HiveParser.prototype.alterStatementSuffixAddPartitions = function () {
	var localctx = new AlterStatementSuffixAddPartitionsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 110, HiveParser.RULE_alterStatementSuffixAddPartitions);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1411;
		this.match(HiveParser.KW_ADD);
		this.state = 1413;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 1412;
			this.ifNotExists();
		}

		this.state = 1416;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 1415;
			this.alterStatementSuffixAddPartitionsElement();
			this.state = 1418;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === HiveParser.KW_PARTITION);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixAddPartitionsElementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddPartitionsElement;
	return this;
}

AlterStatementSuffixAddPartitionsElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixAddPartitionsElementContext.prototype.constructor = AlterStatementSuffixAddPartitionsElementContext;

AlterStatementSuffixAddPartitionsElementContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

AlterStatementSuffixAddPartitionsElementContext.prototype.partitionLocation = function () {
	return this.getTypedRuleContext(PartitionLocationContext, 0);
};

AlterStatementSuffixAddPartitionsElementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixAddPartitionsElement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixAddPartitionsElementContext = AlterStatementSuffixAddPartitionsElementContext;

HiveParser.prototype.alterStatementSuffixAddPartitionsElement = function () {
	var localctx = new AlterStatementSuffixAddPartitionsElementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 112, HiveParser.RULE_alterStatementSuffixAddPartitionsElement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1420;
		this.partitionSpec();
		this.state = 1422;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LOCATION) {
			this.state = 1421;
			this.partitionLocation();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixTouchContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixTouch;
	return this;
}

AlterStatementSuffixTouchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixTouchContext.prototype.constructor = AlterStatementSuffixTouchContext;

AlterStatementSuffixTouchContext.prototype.KW_TOUCH = function () {
	return this.getToken(HiveParser.KW_TOUCH, 0);
};

AlterStatementSuffixTouchContext.prototype.partitionSpec = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PartitionSpecContext);
	} else {
		return this.getTypedRuleContext(PartitionSpecContext, i);
	}
};

AlterStatementSuffixTouchContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixTouch(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixTouchContext = AlterStatementSuffixTouchContext;

HiveParser.prototype.alterStatementSuffixTouch = function () {
	var localctx = new AlterStatementSuffixTouchContext(this, this._ctx, this.state);
	this.enterRule(localctx, 114, HiveParser.RULE_alterStatementSuffixTouch);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1424;
		this.match(HiveParser.KW_TOUCH);
		this.state = 1428;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.KW_PARTITION) {
			this.state = 1425;
			this.partitionSpec();
			this.state = 1430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixArchiveContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixArchive;
	return this;
}

AlterStatementSuffixArchiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixArchiveContext.prototype.constructor = AlterStatementSuffixArchiveContext;

AlterStatementSuffixArchiveContext.prototype.KW_ARCHIVE = function () {
	return this.getToken(HiveParser.KW_ARCHIVE, 0);
};

AlterStatementSuffixArchiveContext.prototype.partitionSpec = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PartitionSpecContext);
	} else {
		return this.getTypedRuleContext(PartitionSpecContext, i);
	}
};

AlterStatementSuffixArchiveContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixArchive(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixArchiveContext = AlterStatementSuffixArchiveContext;

HiveParser.prototype.alterStatementSuffixArchive = function () {
	var localctx = new AlterStatementSuffixArchiveContext(this, this._ctx, this.state);
	this.enterRule(localctx, 116, HiveParser.RULE_alterStatementSuffixArchive);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1431;
		this.match(HiveParser.KW_ARCHIVE);
		this.state = 1435;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.KW_PARTITION) {
			this.state = 1432;
			this.partitionSpec();
			this.state = 1437;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixUnArchiveContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixUnArchive;
	return this;
}

AlterStatementSuffixUnArchiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixUnArchiveContext.prototype.constructor = AlterStatementSuffixUnArchiveContext;

AlterStatementSuffixUnArchiveContext.prototype.KW_UNARCHIVE = function () {
	return this.getToken(HiveParser.KW_UNARCHIVE, 0);
};

AlterStatementSuffixUnArchiveContext.prototype.partitionSpec = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PartitionSpecContext);
	} else {
		return this.getTypedRuleContext(PartitionSpecContext, i);
	}
};

AlterStatementSuffixUnArchiveContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixUnArchive(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixUnArchiveContext = AlterStatementSuffixUnArchiveContext;

HiveParser.prototype.alterStatementSuffixUnArchive = function () {
	var localctx = new AlterStatementSuffixUnArchiveContext(this, this._ctx, this.state);
	this.enterRule(localctx, 118, HiveParser.RULE_alterStatementSuffixUnArchive);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1438;
		this.match(HiveParser.KW_UNARCHIVE);
		this.state = 1442;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.KW_PARTITION) {
			this.state = 1439;
			this.partitionSpec();
			this.state = 1444;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionLocationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitionLocation;
	return this;
}

PartitionLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionLocationContext.prototype.constructor = PartitionLocationContext;

PartitionLocationContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

PartitionLocationContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

PartitionLocationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitionLocation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitionLocationContext = PartitionLocationContext;

HiveParser.prototype.partitionLocation = function () {
	var localctx = new PartitionLocationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 120, HiveParser.RULE_partitionLocation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1445;
		this.match(HiveParser.KW_LOCATION);
		this.state = 1446;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixDropPartitionsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixDropPartitions;
	return this;
}

AlterStatementSuffixDropPartitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixDropPartitionsContext.prototype.constructor = AlterStatementSuffixDropPartitionsContext;

AlterStatementSuffixDropPartitionsContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

AlterStatementSuffixDropPartitionsContext.prototype.dropPartitionSpec = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(DropPartitionSpecContext);
	} else {
		return this.getTypedRuleContext(DropPartitionSpecContext, i);
	}
};

AlterStatementSuffixDropPartitionsContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

AlterStatementSuffixDropPartitionsContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

AlterStatementSuffixDropPartitionsContext.prototype.KW_PURGE = function () {
	return this.getToken(HiveParser.KW_PURGE, 0);
};

AlterStatementSuffixDropPartitionsContext.prototype.replicationClause = function () {
	return this.getTypedRuleContext(ReplicationClauseContext, 0);
};

AlterStatementSuffixDropPartitionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixDropPartitions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixDropPartitionsContext = AlterStatementSuffixDropPartitionsContext;

HiveParser.prototype.alterStatementSuffixDropPartitions = function () {
	var localctx = new AlterStatementSuffixDropPartitionsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 122, HiveParser.RULE_alterStatementSuffixDropPartitions);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1448;
		this.match(HiveParser.KW_DROP);
		this.state = 1450;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 1449;
			this.ifExists();
		}

		this.state = 1452;
		this.dropPartitionSpec();
		this.state = 1457;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 1453;
			this.match(HiveParser.COMMA);
			this.state = 1454;
			this.dropPartitionSpec();
			this.state = 1459;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 1461;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PURGE) {
			this.state = 1460;
			this.match(HiveParser.KW_PURGE);
		}

		this.state = 1464;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FOR) {
			this.state = 1463;
			this.replicationClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixPropertiesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixProperties;
	return this;
}

AlterStatementSuffixPropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixPropertiesContext.prototype.constructor = AlterStatementSuffixPropertiesContext;

AlterStatementSuffixPropertiesContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixPropertiesContext.prototype.KW_TBLPROPERTIES = function () {
	return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
};

AlterStatementSuffixPropertiesContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

AlterStatementSuffixPropertiesContext.prototype.KW_UNSET = function () {
	return this.getToken(HiveParser.KW_UNSET, 0);
};

AlterStatementSuffixPropertiesContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

AlterStatementSuffixPropertiesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixProperties(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixPropertiesContext = AlterStatementSuffixPropertiesContext;

HiveParser.prototype.alterStatementSuffixProperties = function () {
	var localctx = new AlterStatementSuffixPropertiesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 124, HiveParser.RULE_alterStatementSuffixProperties);
	var _la = 0; // Token type
	try {
		this.state = 1475;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_SET:
				this.enterOuterAlt(localctx, 1);
				this.state = 1466;
				this.match(HiveParser.KW_SET);
				this.state = 1467;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1468;
				this.tableProperties();
				break;
			case HiveParser.KW_UNSET:
				this.enterOuterAlt(localctx, 2);
				this.state = 1469;
				this.match(HiveParser.KW_UNSET);
				this.state = 1470;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_IF) {
					this.state = 1471;
					this.ifExists();
				}

				this.state = 1474;
				this.tableProperties();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterViewSuffixPropertiesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterViewSuffixProperties;
	return this;
}

AlterViewSuffixPropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterViewSuffixPropertiesContext.prototype.constructor = AlterViewSuffixPropertiesContext;

AlterViewSuffixPropertiesContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterViewSuffixPropertiesContext.prototype.KW_TBLPROPERTIES = function () {
	return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
};

AlterViewSuffixPropertiesContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

AlterViewSuffixPropertiesContext.prototype.KW_UNSET = function () {
	return this.getToken(HiveParser.KW_UNSET, 0);
};

AlterViewSuffixPropertiesContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

AlterViewSuffixPropertiesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterViewSuffixProperties(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterViewSuffixPropertiesContext = AlterViewSuffixPropertiesContext;

HiveParser.prototype.alterViewSuffixProperties = function () {
	var localctx = new AlterViewSuffixPropertiesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 126, HiveParser.RULE_alterViewSuffixProperties);
	var _la = 0; // Token type
	try {
		this.state = 1486;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_SET:
				this.enterOuterAlt(localctx, 1);
				this.state = 1477;
				this.match(HiveParser.KW_SET);
				this.state = 1478;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1479;
				this.tableProperties();
				break;
			case HiveParser.KW_UNSET:
				this.enterOuterAlt(localctx, 2);
				this.state = 1480;
				this.match(HiveParser.KW_UNSET);
				this.state = 1481;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_IF) {
					this.state = 1482;
					this.ifExists();
				}

				this.state = 1485;
				this.tableProperties();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterMaterializedViewSuffixRewriteContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterMaterializedViewSuffixRewrite;
	return this;
}

AlterMaterializedViewSuffixRewriteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterMaterializedViewSuffixRewriteContext.prototype.constructor = AlterMaterializedViewSuffixRewriteContext;

AlterMaterializedViewSuffixRewriteContext.prototype.rewriteEnabled = function () {
	return this.getTypedRuleContext(RewriteEnabledContext, 0);
};

AlterMaterializedViewSuffixRewriteContext.prototype.rewriteDisabled = function () {
	return this.getTypedRuleContext(RewriteDisabledContext, 0);
};

AlterMaterializedViewSuffixRewriteContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterMaterializedViewSuffixRewrite(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterMaterializedViewSuffixRewriteContext = AlterMaterializedViewSuffixRewriteContext;

HiveParser.prototype.alterMaterializedViewSuffixRewrite = function () {
	var localctx = new AlterMaterializedViewSuffixRewriteContext(this, this._ctx, this.state);
	this.enterRule(localctx, 128, HiveParser.RULE_alterMaterializedViewSuffixRewrite);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1490;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ENABLE:
				this.state = 1488;
				this.rewriteEnabled();
				break;
			case HiveParser.KW_DISABLE:
				this.state = 1489;
				this.rewriteDisabled();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterMaterializedViewSuffixRebuildContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterMaterializedViewSuffixRebuild;
	return this;
}

AlterMaterializedViewSuffixRebuildContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterMaterializedViewSuffixRebuildContext.prototype.constructor = AlterMaterializedViewSuffixRebuildContext;

AlterMaterializedViewSuffixRebuildContext.prototype.KW_REBUILD = function () {
	return this.getToken(HiveParser.KW_REBUILD, 0);
};

AlterMaterializedViewSuffixRebuildContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterMaterializedViewSuffixRebuild(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterMaterializedViewSuffixRebuildContext = AlterMaterializedViewSuffixRebuildContext;

HiveParser.prototype.alterMaterializedViewSuffixRebuild = function () {
	var localctx = new AlterMaterializedViewSuffixRebuildContext(this, this._ctx, this.state);
	this.enterRule(localctx, 130, HiveParser.RULE_alterMaterializedViewSuffixRebuild);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1492;
		this.match(HiveParser.KW_REBUILD);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixSerdePropertiesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixSerdeProperties;
	return this;
}

AlterStatementSuffixSerdePropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixSerdePropertiesContext.prototype.constructor = AlterStatementSuffixSerdePropertiesContext;

AlterStatementSuffixSerdePropertiesContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixSerdePropertiesContext.prototype.KW_SERDE = function () {
	return this.getToken(HiveParser.KW_SERDE, 0);
};

AlterStatementSuffixSerdePropertiesContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterStatementSuffixSerdePropertiesContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

AlterStatementSuffixSerdePropertiesContext.prototype.KW_SERDEPROPERTIES = function () {
	return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
};

AlterStatementSuffixSerdePropertiesContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

AlterStatementSuffixSerdePropertiesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixSerdeProperties(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixSerdePropertiesContext = AlterStatementSuffixSerdePropertiesContext;

HiveParser.prototype.alterStatementSuffixSerdeProperties = function () {
	var localctx = new AlterStatementSuffixSerdePropertiesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 132, HiveParser.RULE_alterStatementSuffixSerdeProperties);
	var _la = 0; // Token type
	try {
		this.state = 1505;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1494;
				this.match(HiveParser.KW_SET);
				this.state = 1495;
				this.match(HiveParser.KW_SERDE);
				this.state = 1496;
				this.match(HiveParser.StringLiteral);
				this.state = 1500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WITH) {
					this.state = 1497;
					this.match(HiveParser.KW_WITH);
					this.state = 1498;
					this.match(HiveParser.KW_SERDEPROPERTIES);
					this.state = 1499;
					this.tableProperties();
				}

				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1502;
				this.match(HiveParser.KW_SET);
				this.state = 1503;
				this.match(HiveParser.KW_SERDEPROPERTIES);
				this.state = 1504;
				this.tableProperties();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterIndexStatementSuffixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterIndexStatementSuffix;
	return this;
}

AlterIndexStatementSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterIndexStatementSuffixContext.prototype.constructor = AlterIndexStatementSuffixContext;

AlterIndexStatementSuffixContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterIndexStatementSuffixContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

AlterIndexStatementSuffixContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

AlterIndexStatementSuffixContext.prototype.KW_REBUILD = function () {
	return this.getToken(HiveParser.KW_REBUILD, 0);
};

AlterIndexStatementSuffixContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

AlterIndexStatementSuffixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterIndexStatementSuffix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterIndexStatementSuffixContext = AlterIndexStatementSuffixContext;

HiveParser.prototype.alterIndexStatementSuffix = function () {
	var localctx = new AlterIndexStatementSuffixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 134, HiveParser.RULE_alterIndexStatementSuffix);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1507;
		this.identifier();
		this.state = 1508;
		this.match(HiveParser.KW_ON);
		this.state = 1509;
		this.tableName();
		this.state = 1511;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITION) {
			this.state = 1510;
			this.partitionSpec();
		}

		this.state = 1513;
		this.match(HiveParser.KW_REBUILD);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixFileFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixFileFormat;
	return this;
}

AlterStatementSuffixFileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixFileFormatContext.prototype.constructor = AlterStatementSuffixFileFormatContext;

AlterStatementSuffixFileFormatContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixFileFormatContext.prototype.KW_FILEFORMAT = function () {
	return this.getToken(HiveParser.KW_FILEFORMAT, 0);
};

AlterStatementSuffixFileFormatContext.prototype.fileFormat = function () {
	return this.getTypedRuleContext(FileFormatContext, 0);
};

AlterStatementSuffixFileFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixFileFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixFileFormatContext = AlterStatementSuffixFileFormatContext;

HiveParser.prototype.alterStatementSuffixFileFormat = function () {
	var localctx = new AlterStatementSuffixFileFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 136, HiveParser.RULE_alterStatementSuffixFileFormat);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1515;
		this.match(HiveParser.KW_SET);
		this.state = 1516;
		this.match(HiveParser.KW_FILEFORMAT);
		this.state = 1517;
		this.fileFormat();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixClusterbySortbyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixClusterbySortby;
	return this;
}

AlterStatementSuffixClusterbySortbyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixClusterbySortbyContext.prototype.constructor = AlterStatementSuffixClusterbySortbyContext;

AlterStatementSuffixClusterbySortbyContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

AlterStatementSuffixClusterbySortbyContext.prototype.KW_CLUSTERED = function () {
	return this.getToken(HiveParser.KW_CLUSTERED, 0);
};

AlterStatementSuffixClusterbySortbyContext.prototype.KW_SORTED = function () {
	return this.getToken(HiveParser.KW_SORTED, 0);
};

AlterStatementSuffixClusterbySortbyContext.prototype.tableBuckets = function () {
	return this.getTypedRuleContext(TableBucketsContext, 0);
};

AlterStatementSuffixClusterbySortbyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixClusterbySortby(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixClusterbySortbyContext = AlterStatementSuffixClusterbySortbyContext;

HiveParser.prototype.alterStatementSuffixClusterbySortby = function () {
	var localctx = new AlterStatementSuffixClusterbySortbyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 138, HiveParser.RULE_alterStatementSuffixClusterbySortby);
	try {
		this.state = 1524;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1519;
				this.match(HiveParser.KW_NOT);
				this.state = 1520;
				this.match(HiveParser.KW_CLUSTERED);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1521;
				this.match(HiveParser.KW_NOT);
				this.state = 1522;
				this.match(HiveParser.KW_SORTED);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1523;
				this.tableBuckets();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterTblPartitionStatementSuffixSkewedLocationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation;
	return this;
}

AlterTblPartitionStatementSuffixSkewedLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTblPartitionStatementSuffixSkewedLocationContext.prototype.constructor =
	AlterTblPartitionStatementSuffixSkewedLocationContext;

AlterTblPartitionStatementSuffixSkewedLocationContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterTblPartitionStatementSuffixSkewedLocationContext.prototype.KW_SKEWED = function () {
	return this.getToken(HiveParser.KW_SKEWED, 0);
};

AlterTblPartitionStatementSuffixSkewedLocationContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

AlterTblPartitionStatementSuffixSkewedLocationContext.prototype.skewedLocations = function () {
	return this.getTypedRuleContext(SkewedLocationsContext, 0);
};

AlterTblPartitionStatementSuffixSkewedLocationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext =
	AlterTblPartitionStatementSuffixSkewedLocationContext;

HiveParser.prototype.alterTblPartitionStatementSuffixSkewedLocation = function () {
	var localctx = new AlterTblPartitionStatementSuffixSkewedLocationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 140, HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1526;
		this.match(HiveParser.KW_SET);
		this.state = 1527;
		this.match(HiveParser.KW_SKEWED);
		this.state = 1528;
		this.match(HiveParser.KW_LOCATION);
		this.state = 1529;
		this.skewedLocations();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedLocationsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedLocations;
	return this;
}

SkewedLocationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedLocationsContext.prototype.constructor = SkewedLocationsContext;

SkewedLocationsContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

SkewedLocationsContext.prototype.skewedLocationsList = function () {
	return this.getTypedRuleContext(SkewedLocationsListContext, 0);
};

SkewedLocationsContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

SkewedLocationsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedLocations(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedLocationsContext = SkewedLocationsContext;

HiveParser.prototype.skewedLocations = function () {
	var localctx = new SkewedLocationsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 142, HiveParser.RULE_skewedLocations);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1531;
		this.match(HiveParser.LPAREN);
		this.state = 1532;
		this.skewedLocationsList();
		this.state = 1533;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedLocationsListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedLocationsList;
	return this;
}

SkewedLocationsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedLocationsListContext.prototype.constructor = SkewedLocationsListContext;

SkewedLocationsListContext.prototype.skewedLocationMap = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SkewedLocationMapContext);
	} else {
		return this.getTypedRuleContext(SkewedLocationMapContext, i);
	}
};

SkewedLocationsListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

SkewedLocationsListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedLocationsList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedLocationsListContext = SkewedLocationsListContext;

HiveParser.prototype.skewedLocationsList = function () {
	var localctx = new SkewedLocationsListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 144, HiveParser.RULE_skewedLocationsList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1535;
		this.skewedLocationMap();
		this.state = 1540;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 1536;
			this.match(HiveParser.COMMA);
			this.state = 1537;
			this.skewedLocationMap();
			this.state = 1542;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedLocationMapContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedLocationMap;
	return this;
}

SkewedLocationMapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedLocationMapContext.prototype.constructor = SkewedLocationMapContext;

SkewedLocationMapContext.prototype.skewedValueLocationElement = function () {
	return this.getTypedRuleContext(SkewedValueLocationElementContext, 0);
};

SkewedLocationMapContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

SkewedLocationMapContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

SkewedLocationMapContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedLocationMap(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedLocationMapContext = SkewedLocationMapContext;

HiveParser.prototype.skewedLocationMap = function () {
	var localctx = new SkewedLocationMapContext(this, this._ctx, this.state);
	this.enterRule(localctx, 146, HiveParser.RULE_skewedLocationMap);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1543;
		this.skewedValueLocationElement();
		this.state = 1544;
		this.match(HiveParser.EQUAL);
		this.state = 1545;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixLocationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixLocation;
	return this;
}

AlterStatementSuffixLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixLocationContext.prototype.constructor = AlterStatementSuffixLocationContext;

AlterStatementSuffixLocationContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixLocationContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

AlterStatementSuffixLocationContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterStatementSuffixLocationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixLocation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixLocationContext = AlterStatementSuffixLocationContext;

HiveParser.prototype.alterStatementSuffixLocation = function () {
	var localctx = new AlterStatementSuffixLocationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 148, HiveParser.RULE_alterStatementSuffixLocation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1547;
		this.match(HiveParser.KW_SET);
		this.state = 1548;
		this.match(HiveParser.KW_LOCATION);
		this.state = 1549;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixSkewedbyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixSkewedby;
	return this;
}

AlterStatementSuffixSkewedbyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixSkewedbyContext.prototype.constructor = AlterStatementSuffixSkewedbyContext;

AlterStatementSuffixSkewedbyContext.prototype.tableSkewed = function () {
	return this.getTypedRuleContext(TableSkewedContext, 0);
};

AlterStatementSuffixSkewedbyContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

AlterStatementSuffixSkewedbyContext.prototype.KW_SKEWED = function () {
	return this.getToken(HiveParser.KW_SKEWED, 0);
};

AlterStatementSuffixSkewedbyContext.prototype.storedAsDirs = function () {
	return this.getTypedRuleContext(StoredAsDirsContext, 0);
};

AlterStatementSuffixSkewedbyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixSkewedby(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixSkewedbyContext = AlterStatementSuffixSkewedbyContext;

HiveParser.prototype.alterStatementSuffixSkewedby = function () {
	var localctx = new AlterStatementSuffixSkewedbyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 150, HiveParser.RULE_alterStatementSuffixSkewedby);
	try {
		this.state = 1556;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 92, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1551;
				this.tableSkewed();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1552;
				this.match(HiveParser.KW_NOT);
				this.state = 1553;
				this.match(HiveParser.KW_SKEWED);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1554;
				this.match(HiveParser.KW_NOT);
				this.state = 1555;
				this.storedAsDirs();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixExchangePartitionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixExchangePartition;
	return this;
}

AlterStatementSuffixExchangePartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixExchangePartitionContext.prototype.constructor = AlterStatementSuffixExchangePartitionContext;

AlterStatementSuffixExchangePartitionContext.prototype.KW_EXCHANGE = function () {
	return this.getToken(HiveParser.KW_EXCHANGE, 0);
};

AlterStatementSuffixExchangePartitionContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

AlterStatementSuffixExchangePartitionContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

AlterStatementSuffixExchangePartitionContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

AlterStatementSuffixExchangePartitionContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

AlterStatementSuffixExchangePartitionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixExchangePartition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixExchangePartitionContext = AlterStatementSuffixExchangePartitionContext;

HiveParser.prototype.alterStatementSuffixExchangePartition = function () {
	var localctx = new AlterStatementSuffixExchangePartitionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 152, HiveParser.RULE_alterStatementSuffixExchangePartition);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1558;
		this.match(HiveParser.KW_EXCHANGE);
		this.state = 1559;
		this.partitionSpec();
		this.state = 1560;
		this.match(HiveParser.KW_WITH);
		this.state = 1561;
		this.match(HiveParser.KW_TABLE);
		this.state = 1562;
		this.tableName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixRenamePartContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixRenamePart;
	return this;
}

AlterStatementSuffixRenamePartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixRenamePartContext.prototype.constructor = AlterStatementSuffixRenamePartContext;

AlterStatementSuffixRenamePartContext.prototype.KW_RENAME = function () {
	return this.getToken(HiveParser.KW_RENAME, 0);
};

AlterStatementSuffixRenamePartContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

AlterStatementSuffixRenamePartContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

AlterStatementSuffixRenamePartContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixRenamePart(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixRenamePartContext = AlterStatementSuffixRenamePartContext;

HiveParser.prototype.alterStatementSuffixRenamePart = function () {
	var localctx = new AlterStatementSuffixRenamePartContext(this, this._ctx, this.state);
	this.enterRule(localctx, 154, HiveParser.RULE_alterStatementSuffixRenamePart);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1564;
		this.match(HiveParser.KW_RENAME);
		this.state = 1565;
		this.match(HiveParser.KW_TO);
		this.state = 1566;
		this.partitionSpec();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixStatsPartContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixStatsPart;
	return this;
}

AlterStatementSuffixStatsPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixStatsPartContext.prototype.constructor = AlterStatementSuffixStatsPartContext;

AlterStatementSuffixStatsPartContext.prototype.KW_UPDATE = function () {
	return this.getToken(HiveParser.KW_UPDATE, 0);
};

AlterStatementSuffixStatsPartContext.prototype.KW_STATISTICS = function () {
	return this.getToken(HiveParser.KW_STATISTICS, 0);
};

AlterStatementSuffixStatsPartContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

AlterStatementSuffixStatsPartContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterStatementSuffixStatsPartContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixStatsPartContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

AlterStatementSuffixStatsPartContext.prototype.KW_COLUMN = function () {
	return this.getToken(HiveParser.KW_COLUMN, 0);
};

AlterStatementSuffixStatsPartContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

AlterStatementSuffixStatsPartContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterStatementSuffixStatsPartContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixStatsPart(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixStatsPartContext = AlterStatementSuffixStatsPartContext;

HiveParser.prototype.alterStatementSuffixStatsPart = function () {
	var localctx = new AlterStatementSuffixStatsPartContext(this, this._ctx, this.state);
	this.enterRule(localctx, 156, HiveParser.RULE_alterStatementSuffixStatsPart);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1568;
		this.match(HiveParser.KW_UPDATE);
		this.state = 1569;
		this.match(HiveParser.KW_STATISTICS);
		this.state = 1570;
		this.match(HiveParser.KW_FOR);
		this.state = 1572;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COLUMN) {
			this.state = 1571;
			this.match(HiveParser.KW_COLUMN);
		}

		this.state = 1574;
		this.identifier();
		this.state = 1575;
		this.match(HiveParser.KW_SET);
		this.state = 1576;
		this.tableProperties();
		this.state = 1579;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 1577;
			this.match(HiveParser.KW_COMMENT);
			this.state = 1578;
			this.match(HiveParser.StringLiteral);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixMergeFilesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixMergeFiles;
	return this;
}

AlterStatementSuffixMergeFilesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixMergeFilesContext.prototype.constructor = AlterStatementSuffixMergeFilesContext;

AlterStatementSuffixMergeFilesContext.prototype.KW_CONCATENATE = function () {
	return this.getToken(HiveParser.KW_CONCATENATE, 0);
};

AlterStatementSuffixMergeFilesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixMergeFiles(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixMergeFilesContext = AlterStatementSuffixMergeFilesContext;

HiveParser.prototype.alterStatementSuffixMergeFiles = function () {
	var localctx = new AlterStatementSuffixMergeFilesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 158, HiveParser.RULE_alterStatementSuffixMergeFiles);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1581;
		this.match(HiveParser.KW_CONCATENATE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixBucketNumContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixBucketNum;
	return this;
}

AlterStatementSuffixBucketNumContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixBucketNumContext.prototype.constructor = AlterStatementSuffixBucketNumContext;

AlterStatementSuffixBucketNumContext.prototype.KW_INTO = function () {
	return this.getToken(HiveParser.KW_INTO, 0);
};

AlterStatementSuffixBucketNumContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

AlterStatementSuffixBucketNumContext.prototype.KW_BUCKETS = function () {
	return this.getToken(HiveParser.KW_BUCKETS, 0);
};

AlterStatementSuffixBucketNumContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixBucketNum(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixBucketNumContext = AlterStatementSuffixBucketNumContext;

HiveParser.prototype.alterStatementSuffixBucketNum = function () {
	var localctx = new AlterStatementSuffixBucketNumContext(this, this._ctx, this.state);
	this.enterRule(localctx, 160, HiveParser.RULE_alterStatementSuffixBucketNum);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1583;
		this.match(HiveParser.KW_INTO);
		this.state = 1584;
		this.match(HiveParser.Number);
		this.state = 1585;
		this.match(HiveParser.KW_BUCKETS);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateIndexStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createIndexStatement;
	return this;
}

CreateIndexStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexStatementContext.prototype.constructor = CreateIndexStatementContext;

CreateIndexStatementContext.prototype.createIndexMainStatement = function () {
	return this.getTypedRuleContext(CreateIndexMainStatementContext, 0);
};

CreateIndexStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

CreateIndexStatementContext.prototype.KW_DEFERRED = function () {
	return this.getToken(HiveParser.KW_DEFERRED, 0);
};

CreateIndexStatementContext.prototype.KW_REBUILD = function () {
	return this.getToken(HiveParser.KW_REBUILD, 0);
};

CreateIndexStatementContext.prototype.KW_IDXPROPERTIES = function () {
	return this.getToken(HiveParser.KW_IDXPROPERTIES, 0);
};

CreateIndexStatementContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

CreateIndexStatementContext.prototype.KW_IN = function () {
	return this.getToken(HiveParser.KW_IN, 0);
};

CreateIndexStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

CreateIndexStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

CreateIndexStatementContext.prototype.KW_PARTITIONED = function () {
	return this.getToken(HiveParser.KW_PARTITIONED, 0);
};

CreateIndexStatementContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

CreateIndexStatementContext.prototype.columnParenthesesList = function () {
	return this.getTypedRuleContext(ColumnParenthesesListContext, 0);
};

CreateIndexStatementContext.prototype.tableFileFormat = function () {
	return this.getTypedRuleContext(TableFileFormatContext, 0);
};

CreateIndexStatementContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

CreateIndexStatementContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

CreateIndexStatementContext.prototype.tablePropertiesPrefixed = function () {
	return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0);
};

CreateIndexStatementContext.prototype.tableComment = function () {
	return this.getTypedRuleContext(TableCommentContext, 0);
};

CreateIndexStatementContext.prototype.tableRowFormat = function () {
	return this.getTypedRuleContext(TableRowFormatContext, 0);
};

CreateIndexStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateIndexStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateIndexStatementContext = CreateIndexStatementContext;

HiveParser.prototype.createIndexStatement = function () {
	var localctx = new CreateIndexStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 162, HiveParser.RULE_createIndexStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1587;
		this.createIndexMainStatement();
		this.state = 1591;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1588;
			this.match(HiveParser.KW_WITH);
			this.state = 1589;
			this.match(HiveParser.KW_DEFERRED);
			this.state = 1590;
			this.match(HiveParser.KW_REBUILD);
		}

		this.state = 1595;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IDXPROPERTIES) {
			this.state = 1593;
			this.match(HiveParser.KW_IDXPROPERTIES);
			this.state = 1594;
			this.tableProperties();
		}

		this.state = 1600;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IN) {
			this.state = 1597;
			this.match(HiveParser.KW_IN);
			this.state = 1598;
			this.match(HiveParser.KW_TABLE);
			this.state = 1599;
			this.tableName();
		}

		this.state = 1605;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITIONED) {
			this.state = 1602;
			this.match(HiveParser.KW_PARTITIONED);
			this.state = 1603;
			this.match(HiveParser.KW_BY);
			this.state = 1604;
			this.columnParenthesesList();
		}

		this.state = 1611;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ROW || _la === HiveParser.KW_STORED) {
			this.state = 1608;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ROW) {
				this.state = 1607;
				this.tableRowFormat();
			}

			this.state = 1610;
			this.tableFileFormat();
		}

		this.state = 1615;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LOCATION) {
			this.state = 1613;
			this.match(HiveParser.KW_LOCATION);
			this.state = 1614;
			this.poolPath();
		}

		this.state = 1618;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TBLPROPERTIES) {
			this.state = 1617;
			this.tablePropertiesPrefixed();
		}

		this.state = 1621;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 1620;
			this.tableComment();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateIndexMainStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createIndexMainStatement;
	return this;
}

CreateIndexMainStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexMainStatementContext.prototype.constructor = CreateIndexMainStatementContext;

CreateIndexMainStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateIndexMainStatementContext.prototype.KW_INDEX = function () {
	return this.getToken(HiveParser.KW_INDEX, 0);
};

CreateIndexMainStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreateIndexMainStatementContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

CreateIndexMainStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

CreateIndexMainStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

CreateIndexMainStatementContext.prototype.columnParenthesesList = function () {
	return this.getTypedRuleContext(ColumnParenthesesListContext, 0);
};

CreateIndexMainStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

CreateIndexMainStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

CreateIndexMainStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateIndexMainStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateIndexMainStatementContext = CreateIndexMainStatementContext;

HiveParser.prototype.createIndexMainStatement = function () {
	var localctx = new CreateIndexMainStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 164, HiveParser.RULE_createIndexMainStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1623;
		this.match(HiveParser.KW_CREATE);
		this.state = 1624;
		this.match(HiveParser.KW_INDEX);
		this.state = 1625;
		this.identifier();
		this.state = 1626;
		this.match(HiveParser.KW_ON);
		this.state = 1627;
		this.match(HiveParser.KW_TABLE);
		this.state = 1628;
		this.tableName();
		this.state = 1629;
		this.columnParenthesesList();
		this.state = 1630;
		this.match(HiveParser.KW_AS);
		this.state = 1631;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropIndexStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropIndexStatement;
	return this;
}

DropIndexStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropIndexStatementContext.prototype.constructor = DropIndexStatementContext;

DropIndexStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropIndexStatementContext.prototype.KW_INDEX = function () {
	return this.getToken(HiveParser.KW_INDEX, 0);
};

DropIndexStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DropIndexStatementContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

DropIndexStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

DropIndexStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropIndexStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropIndexStatementContext = DropIndexStatementContext;

HiveParser.prototype.dropIndexStatement = function () {
	var localctx = new DropIndexStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 166, HiveParser.RULE_dropIndexStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1633;
		this.match(HiveParser.KW_DROP);
		this.state = 1634;
		this.match(HiveParser.KW_INDEX);
		this.state = 1635;
		this.identifier();
		this.state = 1636;
		this.match(HiveParser.KW_ON);
		this.state = 1637;
		this.tableName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateBloomfilterIndexStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createBloomfilterIndexStatement;
	return this;
}

CreateBloomfilterIndexStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateBloomfilterIndexStatementContext.prototype.constructor = CreateBloomfilterIndexStatementContext;

CreateBloomfilterIndexStatementContext.prototype.createBloomfilterIndexMainStatement = function () {
	return this.getTypedRuleContext(CreateBloomfilterIndexMainStatementContext, 0);
};

CreateBloomfilterIndexStatementContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

CreateBloomfilterIndexStatementContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

CreateBloomfilterIndexStatementContext.prototype.bloomfilterColumnParenthesesList = function () {
	return this.getTypedRuleContext(BloomfilterColumnParenthesesListContext, 0);
};

CreateBloomfilterIndexStatementContext.prototype.bloomfilterIndexOptions = function () {
	return this.getTypedRuleContext(BloomfilterIndexOptionsContext, 0);
};

CreateBloomfilterIndexStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateBloomfilterIndexStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateBloomfilterIndexStatementContext = CreateBloomfilterIndexStatementContext;

HiveParser.prototype.createBloomfilterIndexStatement = function () {
	var localctx = new CreateBloomfilterIndexStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 168, HiveParser.RULE_createBloomfilterIndexStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1639;
		this.createBloomfilterIndexMainStatement();
		this.state = 1643;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FOR) {
			this.state = 1640;
			this.match(HiveParser.KW_FOR);
			this.state = 1641;
			this.match(HiveParser.KW_COLUMNS);
			this.state = 1642;
			this.bloomfilterColumnParenthesesList();
		}

		this.state = 1646;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_OPTIONS) {
			this.state = 1645;
			this.bloomfilterIndexOptions();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateBloomfilterIndexMainStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createBloomfilterIndexMainStatement;
	return this;
}

CreateBloomfilterIndexMainStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateBloomfilterIndexMainStatementContext.prototype.constructor = CreateBloomfilterIndexMainStatementContext;

CreateBloomfilterIndexMainStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateBloomfilterIndexMainStatementContext.prototype.KW_BLOOMFILTER = function () {
	return this.getToken(HiveParser.KW_BLOOMFILTER, 0);
};

CreateBloomfilterIndexMainStatementContext.prototype.KW_INDEX = function () {
	return this.getToken(HiveParser.KW_INDEX, 0);
};

CreateBloomfilterIndexMainStatementContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

CreateBloomfilterIndexMainStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

CreateBloomfilterIndexMainStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

CreateBloomfilterIndexMainStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateBloomfilterIndexMainStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateBloomfilterIndexMainStatementContext = CreateBloomfilterIndexMainStatementContext;

HiveParser.prototype.createBloomfilterIndexMainStatement = function () {
	var localctx = new CreateBloomfilterIndexMainStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 170, HiveParser.RULE_createBloomfilterIndexMainStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1648;
		this.match(HiveParser.KW_CREATE);
		this.state = 1649;
		this.match(HiveParser.KW_BLOOMFILTER);
		this.state = 1650;
		this.match(HiveParser.KW_INDEX);
		this.state = 1651;
		this.match(HiveParser.KW_ON);
		this.state = 1653;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TABLE) {
			this.state = 1652;
			this.match(HiveParser.KW_TABLE);
		}

		this.state = 1655;
		this.tableName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BloomfilterColumnParenthesesListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_bloomfilterColumnParenthesesList;
	return this;
}

BloomfilterColumnParenthesesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BloomfilterColumnParenthesesListContext.prototype.constructor = BloomfilterColumnParenthesesListContext;

BloomfilterColumnParenthesesListContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

BloomfilterColumnParenthesesListContext.prototype.bloomfilterColumnNameList = function () {
	return this.getTypedRuleContext(BloomfilterColumnNameListContext, 0);
};

BloomfilterColumnParenthesesListContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

BloomfilterColumnParenthesesListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBloomfilterColumnParenthesesList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BloomfilterColumnParenthesesListContext = BloomfilterColumnParenthesesListContext;

HiveParser.prototype.bloomfilterColumnParenthesesList = function () {
	var localctx = new BloomfilterColumnParenthesesListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 172, HiveParser.RULE_bloomfilterColumnParenthesesList);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1657;
		this.match(HiveParser.LPAREN);
		this.state = 1658;
		this.bloomfilterColumnNameList();
		this.state = 1659;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BloomfilterColumnNameListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_bloomfilterColumnNameList;
	return this;
}

BloomfilterColumnNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BloomfilterColumnNameListContext.prototype.constructor = BloomfilterColumnNameListContext;

BloomfilterColumnNameListContext.prototype.bloomfilterColumnName = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(BloomfilterColumnNameContext);
	} else {
		return this.getTypedRuleContext(BloomfilterColumnNameContext, i);
	}
};

BloomfilterColumnNameListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

BloomfilterColumnNameListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBloomfilterColumnNameList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BloomfilterColumnNameListContext = BloomfilterColumnNameListContext;

HiveParser.prototype.bloomfilterColumnNameList = function () {
	var localctx = new BloomfilterColumnNameListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 174, HiveParser.RULE_bloomfilterColumnNameList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1661;
		this.bloomfilterColumnName();
		this.state = 1666;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 1662;
			this.match(HiveParser.COMMA);
			this.state = 1663;
			this.bloomfilterColumnName();
			this.state = 1668;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BloomfilterColumnNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_bloomfilterColumnName;
	return this;
}

BloomfilterColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BloomfilterColumnNameContext.prototype.constructor = BloomfilterColumnNameContext;

BloomfilterColumnNameContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

BloomfilterColumnNameContext.prototype.bloomfilterIndexOptions = function () {
	return this.getTypedRuleContext(BloomfilterIndexOptionsContext, 0);
};

BloomfilterColumnNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBloomfilterColumnName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BloomfilterColumnNameContext = BloomfilterColumnNameContext;

HiveParser.prototype.bloomfilterColumnName = function () {
	var localctx = new BloomfilterColumnNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 176, HiveParser.RULE_bloomfilterColumnName);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1669;
		this.identifier();
		this.state = 1671;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_OPTIONS) {
			this.state = 1670;
			this.bloomfilterIndexOptions();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BloomfilterIndexOptionsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_bloomfilterIndexOptions;
	return this;
}

BloomfilterIndexOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BloomfilterIndexOptionsContext.prototype.constructor = BloomfilterIndexOptionsContext;

BloomfilterIndexOptionsContext.prototype.KW_OPTIONS = function () {
	return this.getToken(HiveParser.KW_OPTIONS, 0);
};

BloomfilterIndexOptionsContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

BloomfilterIndexOptionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBloomfilterIndexOptions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BloomfilterIndexOptionsContext = BloomfilterIndexOptionsContext;

HiveParser.prototype.bloomfilterIndexOptions = function () {
	var localctx = new BloomfilterIndexOptionsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 178, HiveParser.RULE_bloomfilterIndexOptions);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1673;
		this.match(HiveParser.KW_OPTIONS);
		this.state = 1674;
		this.tableProperties();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropBloomfilterIndexStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropBloomfilterIndexStatement;
	return this;
}

DropBloomfilterIndexStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropBloomfilterIndexStatementContext.prototype.constructor = DropBloomfilterIndexStatementContext;

DropBloomfilterIndexStatementContext.prototype.dropBloomfilterIndexMainStatement = function () {
	return this.getTypedRuleContext(DropBloomfilterIndexMainStatementContext, 0);
};

DropBloomfilterIndexStatementContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

DropBloomfilterIndexStatementContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

DropBloomfilterIndexStatementContext.prototype.bloomfilterColumnParenthesesList = function () {
	return this.getTypedRuleContext(BloomfilterColumnParenthesesListContext, 0);
};

DropBloomfilterIndexStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropBloomfilterIndexStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropBloomfilterIndexStatementContext = DropBloomfilterIndexStatementContext;

HiveParser.prototype.dropBloomfilterIndexStatement = function () {
	var localctx = new DropBloomfilterIndexStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 180, HiveParser.RULE_dropBloomfilterIndexStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1676;
		this.dropBloomfilterIndexMainStatement();
		this.state = 1680;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FOR) {
			this.state = 1677;
			this.match(HiveParser.KW_FOR);
			this.state = 1678;
			this.match(HiveParser.KW_COLUMNS);
			this.state = 1679;
			this.bloomfilterColumnParenthesesList();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropBloomfilterIndexMainStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropBloomfilterIndexMainStatement;
	return this;
}

DropBloomfilterIndexMainStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropBloomfilterIndexMainStatementContext.prototype.constructor = DropBloomfilterIndexMainStatementContext;

DropBloomfilterIndexMainStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropBloomfilterIndexMainStatementContext.prototype.KW_BLOOMFILTER = function () {
	return this.getToken(HiveParser.KW_BLOOMFILTER, 0);
};

DropBloomfilterIndexMainStatementContext.prototype.KW_INDEX = function () {
	return this.getToken(HiveParser.KW_INDEX, 0);
};

DropBloomfilterIndexMainStatementContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

DropBloomfilterIndexMainStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

DropBloomfilterIndexMainStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

DropBloomfilterIndexMainStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropBloomfilterIndexMainStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropBloomfilterIndexMainStatementContext = DropBloomfilterIndexMainStatementContext;

HiveParser.prototype.dropBloomfilterIndexMainStatement = function () {
	var localctx = new DropBloomfilterIndexMainStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 182, HiveParser.RULE_dropBloomfilterIndexMainStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1682;
		this.match(HiveParser.KW_DROP);
		this.state = 1683;
		this.match(HiveParser.KW_BLOOMFILTER);
		this.state = 1684;
		this.match(HiveParser.KW_INDEX);
		this.state = 1685;
		this.match(HiveParser.KW_ON);
		this.state = 1687;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TABLE) {
			this.state = 1686;
			this.match(HiveParser.KW_TABLE);
		}

		this.state = 1689;
		this.tableName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TablePartitionPrefixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tablePartitionPrefix;
	return this;
}

TablePartitionPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePartitionPrefixContext.prototype.constructor = TablePartitionPrefixContext;

TablePartitionPrefixContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

TablePartitionPrefixContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

TablePartitionPrefixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTablePartitionPrefix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TablePartitionPrefixContext = TablePartitionPrefixContext;

HiveParser.prototype.tablePartitionPrefix = function () {
	var localctx = new TablePartitionPrefixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 184, HiveParser.RULE_tablePartitionPrefix);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1691;
		this.tableName();
		this.state = 1693;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITION) {
			this.state = 1692;
			this.partitionSpec();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BlockingContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_blocking;
	return this;
}

BlockingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockingContext.prototype.constructor = BlockingContext;

BlockingContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

BlockingContext.prototype.KW_WAIT = function () {
	return this.getToken(HiveParser.KW_WAIT, 0);
};

BlockingContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBlocking(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BlockingContext = BlockingContext;

HiveParser.prototype.blocking = function () {
	var localctx = new BlockingContext(this, this._ctx, this.state);
	this.enterRule(localctx, 186, HiveParser.RULE_blocking);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1695;
		this.match(HiveParser.KW_AND);
		this.state = 1696;
		this.match(HiveParser.KW_WAIT);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixCompactContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixCompact;
	return this;
}

AlterStatementSuffixCompactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixCompactContext.prototype.constructor = AlterStatementSuffixCompactContext;

AlterStatementSuffixCompactContext.prototype.KW_COMPACT = function () {
	return this.getToken(HiveParser.KW_COMPACT, 0);
};

AlterStatementSuffixCompactContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterStatementSuffixCompactContext.prototype.blocking = function () {
	return this.getTypedRuleContext(BlockingContext, 0);
};

AlterStatementSuffixCompactContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

AlterStatementSuffixCompactContext.prototype.KW_OVERWRITE = function () {
	return this.getToken(HiveParser.KW_OVERWRITE, 0);
};

AlterStatementSuffixCompactContext.prototype.KW_TBLPROPERTIES = function () {
	return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
};

AlterStatementSuffixCompactContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

AlterStatementSuffixCompactContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixCompact(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixCompactContext = AlterStatementSuffixCompactContext;

HiveParser.prototype.alterStatementSuffixCompact = function () {
	var localctx = new AlterStatementSuffixCompactContext(this, this._ctx, this.state);
	this.enterRule(localctx, 188, HiveParser.RULE_alterStatementSuffixCompact);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1698;
		this.match(HiveParser.KW_COMPACT);
		this.state = 1699;
		this.match(HiveParser.StringLiteral);
		this.state = 1701;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_AND) {
			this.state = 1700;
			this.blocking();
		}

		this.state = 1707;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1703;
			this.match(HiveParser.KW_WITH);
			this.state = 1704;
			this.match(HiveParser.KW_OVERWRITE);
			this.state = 1705;
			this.match(HiveParser.KW_TBLPROPERTIES);
			this.state = 1706;
			this.tableProperties();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterStatementSuffixSetOwnerContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterStatementSuffixSetOwner;
	return this;
}

AlterStatementSuffixSetOwnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStatementSuffixSetOwnerContext.prototype.constructor = AlterStatementSuffixSetOwnerContext;

AlterStatementSuffixSetOwnerContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterStatementSuffixSetOwnerContext.prototype.KW_OWNER = function () {
	return this.getToken(HiveParser.KW_OWNER, 0);
};

AlterStatementSuffixSetOwnerContext.prototype.principalName = function () {
	return this.getTypedRuleContext(PrincipalNameContext, 0);
};

AlterStatementSuffixSetOwnerContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterStatementSuffixSetOwner(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterStatementSuffixSetOwnerContext = AlterStatementSuffixSetOwnerContext;

HiveParser.prototype.alterStatementSuffixSetOwner = function () {
	var localctx = new AlterStatementSuffixSetOwnerContext(this, this._ctx, this.state);
	this.enterRule(localctx, 190, HiveParser.RULE_alterStatementSuffixSetOwner);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1709;
		this.match(HiveParser.KW_SET);
		this.state = 1710;
		this.match(HiveParser.KW_OWNER);
		this.state = 1711;
		this.principalName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FileFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_fileFormat;
	return this;
}

FileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileFormatContext.prototype.constructor = FileFormatContext;

FileFormatContext.prototype.KW_INPUTFORMAT = function () {
	return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
};

FileFormatContext.prototype.StringLiteral = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.StringLiteral);
	} else {
		return this.getToken(HiveParser.StringLiteral, i);
	}
};

FileFormatContext.prototype.KW_OUTPUTFORMAT = function () {
	return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
};

FileFormatContext.prototype.KW_SERDE = function () {
	return this.getToken(HiveParser.KW_SERDE, 0);
};

FileFormatContext.prototype.KW_INPUTDRIVER = function () {
	return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
};

FileFormatContext.prototype.KW_OUTPUTDRIVER = function () {
	return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
};

FileFormatContext.prototype.tableFileFormatStoredAsFormat = function () {
	return this.getTypedRuleContext(TableFileFormatStoredAsFormatContext, 0);
};

FileFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFileFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FileFormatContext = FileFormatContext;

HiveParser.prototype.fileFormat = function () {
	var localctx = new FileFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 192, HiveParser.RULE_fileFormat);
	var _la = 0; // Token type
	try {
		this.state = 1726;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_INPUTFORMAT:
				this.enterOuterAlt(localctx, 1);
				this.state = 1713;
				this.match(HiveParser.KW_INPUTFORMAT);
				this.state = 1714;
				this.match(HiveParser.StringLiteral);
				this.state = 1715;
				this.match(HiveParser.KW_OUTPUTFORMAT);
				this.state = 1716;
				this.match(HiveParser.StringLiteral);
				this.state = 1717;
				this.match(HiveParser.KW_SERDE);
				this.state = 1718;
				this.match(HiveParser.StringLiteral);
				this.state = 1723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_INPUTDRIVER) {
					this.state = 1719;
					this.match(HiveParser.KW_INPUTDRIVER);
					this.state = 1720;
					this.match(HiveParser.StringLiteral);
					this.state = 1721;
					this.match(HiveParser.KW_OUTPUTDRIVER);
					this.state = 1722;
					this.match(HiveParser.StringLiteral);
				}

				break;
			case HiveParser.KW_SEQUENCEFILE:
			case HiveParser.KW_TEXTFILE:
			case HiveParser.KW_RCFILE:
			case HiveParser.KW_ORC:
			case HiveParser.KW_PARQUET:
			case HiveParser.KW_AVRO:
			case HiveParser.KW_JSONFILE:
				this.enterOuterAlt(localctx, 2);
				this.state = 1725;
				this.tableFileFormatStoredAsFormat();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function InputFileFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_inputFileFormat;
	return this;
}

InputFileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputFileFormatContext.prototype.constructor = InputFileFormatContext;

InputFileFormatContext.prototype.KW_INPUTFORMAT = function () {
	return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
};

InputFileFormatContext.prototype.StringLiteral = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.StringLiteral);
	} else {
		return this.getToken(HiveParser.StringLiteral, i);
	}
};

InputFileFormatContext.prototype.KW_SERDE = function () {
	return this.getToken(HiveParser.KW_SERDE, 0);
};

InputFileFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitInputFileFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.InputFileFormatContext = InputFileFormatContext;

HiveParser.prototype.inputFileFormat = function () {
	var localctx = new InputFileFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 194, HiveParser.RULE_inputFileFormat);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1728;
		this.match(HiveParser.KW_INPUTFORMAT);
		this.state = 1729;
		this.match(HiveParser.StringLiteral);
		this.state = 1730;
		this.match(HiveParser.KW_SERDE);
		this.state = 1731;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TabTypeExprContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tabTypeExpr;
	return this;
}

TabTypeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TabTypeExprContext.prototype.constructor = TabTypeExprContext;

TabTypeExprContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

TabTypeExprContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.DOT);
	} else {
		return this.getToken(HiveParser.DOT, i);
	}
};

TabTypeExprContext.prototype.KW_ELEM_TYPE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_ELEM_TYPE);
	} else {
		return this.getToken(HiveParser.KW_ELEM_TYPE, i);
	}
};

TabTypeExprContext.prototype.KW_KEY_TYPE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_KEY_TYPE);
	} else {
		return this.getToken(HiveParser.KW_KEY_TYPE, i);
	}
};

TabTypeExprContext.prototype.KW_VALUE_TYPE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_VALUE_TYPE);
	} else {
		return this.getToken(HiveParser.KW_VALUE_TYPE, i);
	}
};

TabTypeExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTabTypeExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TabTypeExprContext = TabTypeExprContext;

HiveParser.prototype.tabTypeExpr = function () {
	var localctx = new TabTypeExprContext(this, this._ctx, this.state);
	this.enterRule(localctx, 196, HiveParser.RULE_tabTypeExpr);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1733;
		this.identifier();
		this.state = 1736;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.DOT) {
			this.state = 1734;
			this.match(HiveParser.DOT);
			this.state = 1735;
			this.identifier();
		}

		this.state = 1751;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_ASC) |
						(1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_NULLS) |
						(1 << HiveParser.KW_LAST) |
						(1 << HiveParser.KW_OVERWRITE))) !==
					0) ||
			(((_la - 36) & ~0x1f) == 0 &&
				((1 << (_la - 36)) &
					((1 << (HiveParser.KW_PARTITIONS - 36)) |
						(1 << (HiveParser.KW_TABLES - 36)) |
						(1 << (HiveParser.KW_COLUMNS - 36)) |
						(1 << (HiveParser.KW_INDEX - 36)) |
						(1 << (HiveParser.KW_INDEXES - 36)) |
						(1 << (HiveParser.KW_REBUILD - 36)) |
						(1 << (HiveParser.KW_FUNCTIONS - 36)) |
						(1 << (HiveParser.KW_SHOW - 36)) |
						(1 << (HiveParser.KW_MSCK - 36)) |
						(1 << (HiveParser.KW_REPAIR - 36)) |
						(1 << (HiveParser.KW_DIRECTORY - 36)) |
						(1 << (HiveParser.KW_CLUSTER - 36)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
						(1 << (HiveParser.KW_SORT - 36)) |
						(1 << (HiveParser.KW_LOAD - 36)) |
						(1 << (HiveParser.KW_EXPORT - 36)) |
						(1 << (HiveParser.KW_REPLICATION - 36)) |
						(1 << (HiveParser.KW_METADATA - 36)) |
						(1 << (HiveParser.KW_DATA - 36)) |
						(1 << (HiveParser.KW_INPATH - 36)))) !==
					0) ||
			(((_la - 68) & ~0x1f) == 0 &&
				((1 << (_la - 68)) &
					((1 << (HiveParser.KW_CHANGE - 68)) |
						(1 << (HiveParser.KW_FIRST - 68)) |
						(1 << (HiveParser.KW_AFTER - 68)) |
						(1 << (HiveParser.KW_RENAME - 68)) |
						(1 << (HiveParser.KW_COMMENT - 68)) |
						(1 << (HiveParser.KW_TINYINT - 68)) |
						(1 << (HiveParser.KW_DATETIME - 68)) |
						(1 << (HiveParser.KW_ZONE - 68)) |
						(1 << (HiveParser.KW_STRING - 68)) |
						(1 << (HiveParser.KW_STRUCT - 68)) |
						(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
					0) ||
			(((_la - 101) & ~0x1f) == 0 &&
				((1 << (_la - 101)) &
					((1 << (HiveParser.KW_PARTITIONED - 101)) |
						(1 << (HiveParser.KW_CLUSTERED - 101)) |
						(1 << (HiveParser.KW_SORTED - 101)) |
						(1 << (HiveParser.KW_BUCKETS - 101)) |
						(1 << (HiveParser.KW_FORMAT - 101)) |
						(1 << (HiveParser.KW_DELIMITED - 101)) |
						(1 << (HiveParser.KW_FIELDS - 101)) |
						(1 << (HiveParser.KW_TERMINATED - 101)) |
						(1 << (HiveParser.KW_ESCAPED - 101)) |
						(1 << (HiveParser.KW_COLLECTION - 101)) |
						(1 << (HiveParser.KW_ITEMS - 101)) |
						(1 << (HiveParser.KW_KEYS - 101)) |
						(1 << (HiveParser.KW_KEY_TYPE - 101)) |
						(1 << (HiveParser.KW_KILL - 101)) |
						(1 << (HiveParser.KW_LINES - 101)) |
						(1 << (HiveParser.KW_STORED - 101)) |
						(1 << (HiveParser.KW_FILEFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_ENABLE - 101)) |
						(1 << (HiveParser.KW_DISABLE - 101)) |
						(1 << (HiveParser.KW_LOCATION - 101)) |
						(1 << (HiveParser.KW_BUCKET - 101)))) !==
					0) ||
			(((_la - 134) & ~0x1f) == 0 &&
				((1 << (_la - 134)) &
					((1 << (HiveParser.KW_ADD - 134)) |
						(1 << (HiveParser.KW_REPLACE - 134)) |
						(1 << (HiveParser.KW_TEMPORARY - 134)) |
						(1 << (HiveParser.KW_FILE - 134)) |
						(1 << (HiveParser.KW_JAR - 134)) |
						(1 << (HiveParser.KW_EXPLAIN - 134)) |
						(1 << (HiveParser.KW_FORMATTED - 134)) |
						(1 << (HiveParser.KW_DEPENDENCY - 134)) |
						(1 << (HiveParser.KW_LOGICAL - 134)) |
						(1 << (HiveParser.KW_SERDE - 134)) |
						(1 << (HiveParser.KW_DEFERRED - 134)) |
						(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
						(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
						(1 << (HiveParser.KW_LIMIT - 134)) |
						(1 << (HiveParser.KW_OFFSET - 134)) |
						(1 << (HiveParser.KW_UNSET - 134)) |
						(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
						(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
						(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
						(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
						(1 << (HiveParser.KW_DEFINED - 134)))) !==
					0) ||
			(((_la - 167) & ~0x1f) == 0 &&
				((1 << (_la - 167)) &
					((1 << (HiveParser.KW_MAPJOIN - 167)) |
						(1 << (HiveParser.KW_STREAMTABLE - 167)) |
						(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
						(1 << (HiveParser.KW_UTC - 167)) |
						(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
						(1 << (HiveParser.KW_LONG - 167)) |
						(1 << (HiveParser.KW_PLUS - 167)) |
						(1 << (HiveParser.KW_VIEW - 167)) |
						(1 << (HiveParser.KW_VIEWS - 167)) |
						(1 << (HiveParser.KW_DATABASES - 167)) |
						(1 << (HiveParser.KW_MATERIALIZED - 167)) |
						(1 << (HiveParser.KW_SCHEMA - 167)) |
						(1 << (HiveParser.KW_SCHEMAS - 167)) |
						(1 << (HiveParser.KW_SSL - 167)) |
						(1 << (HiveParser.KW_UNDO - 167)) |
						(1 << (HiveParser.KW_LOCK - 167)) |
						(1 << (HiveParser.KW_LOCKS - 167)) |
						(1 << (HiveParser.KW_UNLOCK - 167)) |
						(1 << (HiveParser.KW_SHARED - 167)) |
						(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
						(1 << (HiveParser.KW_UNSIGNED - 167)) |
						(1 << (HiveParser.KW_WHILE - 167)) |
						(1 << (HiveParser.KW_READ - 167)))) !==
					0) ||
			(((_la - 200) & ~0x1f) == 0 &&
				((1 << (_la - 200)) &
					((1 << (HiveParser.KW_PURGE - 200)) |
						(1 << (HiveParser.KW_ANALYZE - 200)) |
						(1 << (HiveParser.KW_BEFORE - 200)) |
						(1 << (HiveParser.KW_CONTINUE - 200)) |
						(1 << (HiveParser.KW_RECORDREADER - 200)) |
						(1 << (HiveParser.KW_RECORDWRITER - 200)) |
						(1 << (HiveParser.KW_SEMI - 200)) |
						(1 << (HiveParser.KW_TOUCH - 200)) |
						(1 << (HiveParser.KW_ARCHIVE - 200)) |
						(1 << (HiveParser.KW_UNARCHIVE - 200)) |
						(1 << (HiveParser.KW_COMPUTE - 200)) |
						(1 << (HiveParser.KW_STATISTICS - 200)) |
						(1 << (HiveParser.KW_USE - 200)) |
						(1 << (HiveParser.KW_OPTION - 200)) |
						(1 << (HiveParser.KW_CONCATENATE - 200)) |
						(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
						(1 << (HiveParser.KW_RESTRICT - 200)) |
						(1 << (HiveParser.KW_CASCADE - 200)) |
						(1 << (HiveParser.KW_SKEWED - 200)) |
						(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
					0) ||
			(((_la - 244) & ~0x1f) == 0 &&
				((1 << (_la - 244)) &
					((1 << (HiveParser.KW_SETS - 244)) |
						(1 << (HiveParser.KW_NOSCAN - 244)) |
						(1 << (HiveParser.KW_ROLE - 244)) |
						(1 << (HiveParser.KW_ROLES - 244)) |
						(1 << (HiveParser.KW_URI - 244)) |
						(1 << (HiveParser.KW_SERVER - 244)) |
						(1 << (HiveParser.KW_ADMIN - 244)) |
						(1 << (HiveParser.KW_OWNER - 244)) |
						(1 << (HiveParser.KW_PRINCIPALS - 244)) |
						(1 << (HiveParser.KW_COMPACT - 244)) |
						(1 << (HiveParser.KW_COMPACTIONS - 244)) |
						(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
						(1 << (HiveParser.KW_REWRITE - 244)) |
						(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
						(1 << (HiveParser.KW_RELOAD - 244)) |
						(1 << (HiveParser.KW_YEAR - 244)) |
						(1 << (HiveParser.KW_QUERY - 244)) |
						(1 << (HiveParser.KW_QUARTER - 244)) |
						(1 << (HiveParser.KW_MONTH - 244)) |
						(1 << (HiveParser.KW_WEEK - 244)) |
						(1 << (HiveParser.KW_DAY - 244)) |
						(1 << (HiveParser.KW_DOW - 244)) |
						(1 << (HiveParser.KW_HOUR - 244)) |
						(1 << (HiveParser.KW_MINUTE - 244)) |
						(1 << (HiveParser.KW_SECOND - 244)))) !==
					0) ||
			(((_la - 277) & ~0x1f) == 0 &&
				((1 << (_la - 277)) &
					((1 << (HiveParser.KW_TRANSACTION - 277)) |
						(1 << (HiveParser.KW_WORK - 277)) |
						(1 << (HiveParser.KW_WRITE - 277)) |
						(1 << (HiveParser.KW_ISOLATION - 277)) |
						(1 << (HiveParser.KW_LEVEL - 277)) |
						(1 << (HiveParser.KW_SNAPSHOT - 277)) |
						(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
						(1 << (HiveParser.KW_CACHE - 277)) |
						(1 << (HiveParser.KW_ENFORCED - 277)) |
						(1 << (HiveParser.KW_VALIDATE - 277)) |
						(1 << (HiveParser.KW_NOVALIDATE - 277)) |
						(1 << (HiveParser.KW_RELY - 277)) |
						(1 << (HiveParser.KW_NORELY - 277)) |
						(1 << (HiveParser.KW_KEY - 277)) |
						(1 << (HiveParser.KW_ABORT - 277)) |
						(1 << (HiveParser.KW_MATCHED - 277)) |
						(1 << (HiveParser.KW_REPL - 277)) |
						(1 << (HiveParser.KW_DUMP - 277)) |
						(1 << (HiveParser.KW_STATUS - 277)) |
						(1 << (HiveParser.KW_VECTORIZATION - 277)) |
						(1 << (HiveParser.KW_SUMMARY - 277)))) !==
					0) ||
			(((_la - 309) & ~0x1f) == 0 &&
				((1 << (_la - 309)) &
					((1 << (HiveParser.KW_OPERATOR - 309)) |
						(1 << (HiveParser.KW_EXPRESSION - 309)) |
						(1 << (HiveParser.KW_DETAIL - 309)) |
						(1 << (HiveParser.KW_WAIT - 309)) |
						(1 << (HiveParser.KW_RESOURCE - 309)) |
						(1 << (HiveParser.KW_PLAN - 309)) |
						(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
						(1 << (HiveParser.KW_PLANS - 309)) |
						(1 << (HiveParser.KW_ACTIVATE - 309)) |
						(1 << (HiveParser.KW_DEFAULT - 309)) |
						(1 << (HiveParser.KW_CHECK - 309)) |
						(1 << (HiveParser.KW_POOL - 309)) |
						(1 << (HiveParser.KW_MOVE - 309)) |
						(1 << (HiveParser.KW_DO - 309)) |
						(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
						(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
						(1 << (HiveParser.KW_PATH - 309)) |
						(1 << (HiveParser.KW_MAPPING - 309)) |
						(1 << (HiveParser.KW_WORKLOAD - 309)) |
						(1 << (HiveParser.KW_MANAGEMENT - 309)) |
						(1 << (HiveParser.KW_ACTIVE - 309)) |
						(1 << (HiveParser.KW_UNMANAGED - 309)) |
						(1 << (HiveParser.KW_DELTA - 309)) |
						(1 << (HiveParser.KW_CSV - 309)))) !==
					0) ||
			_la === HiveParser.KW_JSON ||
			_la === HiveParser.KW_BLOOMFILTER ||
			_la === HiveParser.Identifier
		) {
			this.state = 1738;
			this.identifier();
			this.state = 1748;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.DOT) {
				this.state = 1739;
				this.match(HiveParser.DOT);
				this.state = 1744;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);
				switch (la_) {
					case 1:
						this.state = 1740;
						this.match(HiveParser.KW_ELEM_TYPE);
						break;

					case 2:
						this.state = 1741;
						this.match(HiveParser.KW_KEY_TYPE);
						break;

					case 3:
						this.state = 1742;
						this.match(HiveParser.KW_VALUE_TYPE);
						break;

					case 4:
						this.state = 1743;
						this.identifier();
						break;
				}
				this.state = 1750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartTypeExprContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partTypeExpr;
	return this;
}

PartTypeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartTypeExprContext.prototype.constructor = PartTypeExprContext;

PartTypeExprContext.prototype.tabTypeExpr = function () {
	return this.getTypedRuleContext(TabTypeExprContext, 0);
};

PartTypeExprContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

PartTypeExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartTypeExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartTypeExprContext = PartTypeExprContext;

HiveParser.prototype.partTypeExpr = function () {
	var localctx = new PartTypeExprContext(this, this._ctx, this.state);
	this.enterRule(localctx, 198, HiveParser.RULE_partTypeExpr);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1753;
		this.tabTypeExpr();
		this.state = 1755;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITION) {
			this.state = 1754;
			this.partitionSpec();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TabPartColTypeExprContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tabPartColTypeExpr;
	return this;
}

TabPartColTypeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TabPartColTypeExprContext.prototype.constructor = TabPartColTypeExprContext;

TabPartColTypeExprContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

TabPartColTypeExprContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

TabPartColTypeExprContext.prototype.extColumnName = function () {
	return this.getTypedRuleContext(ExtColumnNameContext, 0);
};

TabPartColTypeExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTabPartColTypeExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TabPartColTypeExprContext = TabPartColTypeExprContext;

HiveParser.prototype.tabPartColTypeExpr = function () {
	var localctx = new TabPartColTypeExprContext(this, this._ctx, this.state);
	this.enterRule(localctx, 200, HiveParser.RULE_tabPartColTypeExpr);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1757;
		this.tableName();
		this.state = 1759;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITION) {
			this.state = 1758;
			this.partitionSpec();
		}

		this.state = 1762;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_ASC) |
						(1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_NULLS) |
						(1 << HiveParser.KW_LAST) |
						(1 << HiveParser.KW_OVERWRITE))) !==
					0) ||
			(((_la - 36) & ~0x1f) == 0 &&
				((1 << (_la - 36)) &
					((1 << (HiveParser.KW_PARTITIONS - 36)) |
						(1 << (HiveParser.KW_TABLES - 36)) |
						(1 << (HiveParser.KW_COLUMNS - 36)) |
						(1 << (HiveParser.KW_INDEX - 36)) |
						(1 << (HiveParser.KW_INDEXES - 36)) |
						(1 << (HiveParser.KW_REBUILD - 36)) |
						(1 << (HiveParser.KW_FUNCTIONS - 36)) |
						(1 << (HiveParser.KW_SHOW - 36)) |
						(1 << (HiveParser.KW_MSCK - 36)) |
						(1 << (HiveParser.KW_REPAIR - 36)) |
						(1 << (HiveParser.KW_DIRECTORY - 36)) |
						(1 << (HiveParser.KW_CLUSTER - 36)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
						(1 << (HiveParser.KW_SORT - 36)) |
						(1 << (HiveParser.KW_LOAD - 36)) |
						(1 << (HiveParser.KW_EXPORT - 36)) |
						(1 << (HiveParser.KW_REPLICATION - 36)) |
						(1 << (HiveParser.KW_METADATA - 36)) |
						(1 << (HiveParser.KW_DATA - 36)) |
						(1 << (HiveParser.KW_INPATH - 36)))) !==
					0) ||
			(((_la - 68) & ~0x1f) == 0 &&
				((1 << (_la - 68)) &
					((1 << (HiveParser.KW_CHANGE - 68)) |
						(1 << (HiveParser.KW_FIRST - 68)) |
						(1 << (HiveParser.KW_AFTER - 68)) |
						(1 << (HiveParser.KW_RENAME - 68)) |
						(1 << (HiveParser.KW_COMMENT - 68)) |
						(1 << (HiveParser.KW_TINYINT - 68)) |
						(1 << (HiveParser.KW_DATETIME - 68)) |
						(1 << (HiveParser.KW_ZONE - 68)) |
						(1 << (HiveParser.KW_STRING - 68)) |
						(1 << (HiveParser.KW_STRUCT - 68)) |
						(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
					0) ||
			(((_la - 101) & ~0x1f) == 0 &&
				((1 << (_la - 101)) &
					((1 << (HiveParser.KW_PARTITIONED - 101)) |
						(1 << (HiveParser.KW_CLUSTERED - 101)) |
						(1 << (HiveParser.KW_SORTED - 101)) |
						(1 << (HiveParser.KW_BUCKETS - 101)) |
						(1 << (HiveParser.KW_FORMAT - 101)) |
						(1 << (HiveParser.KW_DELIMITED - 101)) |
						(1 << (HiveParser.KW_FIELDS - 101)) |
						(1 << (HiveParser.KW_TERMINATED - 101)) |
						(1 << (HiveParser.KW_ESCAPED - 101)) |
						(1 << (HiveParser.KW_COLLECTION - 101)) |
						(1 << (HiveParser.KW_ITEMS - 101)) |
						(1 << (HiveParser.KW_KEYS - 101)) |
						(1 << (HiveParser.KW_KEY_TYPE - 101)) |
						(1 << (HiveParser.KW_KILL - 101)) |
						(1 << (HiveParser.KW_LINES - 101)) |
						(1 << (HiveParser.KW_STORED - 101)) |
						(1 << (HiveParser.KW_FILEFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_ENABLE - 101)) |
						(1 << (HiveParser.KW_DISABLE - 101)) |
						(1 << (HiveParser.KW_LOCATION - 101)) |
						(1 << (HiveParser.KW_BUCKET - 101)))) !==
					0) ||
			(((_la - 134) & ~0x1f) == 0 &&
				((1 << (_la - 134)) &
					((1 << (HiveParser.KW_ADD - 134)) |
						(1 << (HiveParser.KW_REPLACE - 134)) |
						(1 << (HiveParser.KW_TEMPORARY - 134)) |
						(1 << (HiveParser.KW_FILE - 134)) |
						(1 << (HiveParser.KW_JAR - 134)) |
						(1 << (HiveParser.KW_EXPLAIN - 134)) |
						(1 << (HiveParser.KW_FORMATTED - 134)) |
						(1 << (HiveParser.KW_DEPENDENCY - 134)) |
						(1 << (HiveParser.KW_LOGICAL - 134)) |
						(1 << (HiveParser.KW_SERDE - 134)) |
						(1 << (HiveParser.KW_DEFERRED - 134)) |
						(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
						(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
						(1 << (HiveParser.KW_LIMIT - 134)) |
						(1 << (HiveParser.KW_OFFSET - 134)) |
						(1 << (HiveParser.KW_UNSET - 134)) |
						(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
						(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
						(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
						(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
						(1 << (HiveParser.KW_DEFINED - 134)))) !==
					0) ||
			(((_la - 167) & ~0x1f) == 0 &&
				((1 << (_la - 167)) &
					((1 << (HiveParser.KW_MAPJOIN - 167)) |
						(1 << (HiveParser.KW_STREAMTABLE - 167)) |
						(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
						(1 << (HiveParser.KW_UTC - 167)) |
						(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
						(1 << (HiveParser.KW_LONG - 167)) |
						(1 << (HiveParser.KW_PLUS - 167)) |
						(1 << (HiveParser.KW_VIEW - 167)) |
						(1 << (HiveParser.KW_VIEWS - 167)) |
						(1 << (HiveParser.KW_DATABASES - 167)) |
						(1 << (HiveParser.KW_MATERIALIZED - 167)) |
						(1 << (HiveParser.KW_SCHEMA - 167)) |
						(1 << (HiveParser.KW_SCHEMAS - 167)) |
						(1 << (HiveParser.KW_SSL - 167)) |
						(1 << (HiveParser.KW_UNDO - 167)) |
						(1 << (HiveParser.KW_LOCK - 167)) |
						(1 << (HiveParser.KW_LOCKS - 167)) |
						(1 << (HiveParser.KW_UNLOCK - 167)) |
						(1 << (HiveParser.KW_SHARED - 167)) |
						(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
						(1 << (HiveParser.KW_UNSIGNED - 167)) |
						(1 << (HiveParser.KW_WHILE - 167)) |
						(1 << (HiveParser.KW_READ - 167)))) !==
					0) ||
			(((_la - 200) & ~0x1f) == 0 &&
				((1 << (_la - 200)) &
					((1 << (HiveParser.KW_PURGE - 200)) |
						(1 << (HiveParser.KW_ANALYZE - 200)) |
						(1 << (HiveParser.KW_BEFORE - 200)) |
						(1 << (HiveParser.KW_CONTINUE - 200)) |
						(1 << (HiveParser.KW_RECORDREADER - 200)) |
						(1 << (HiveParser.KW_RECORDWRITER - 200)) |
						(1 << (HiveParser.KW_SEMI - 200)) |
						(1 << (HiveParser.KW_TOUCH - 200)) |
						(1 << (HiveParser.KW_ARCHIVE - 200)) |
						(1 << (HiveParser.KW_UNARCHIVE - 200)) |
						(1 << (HiveParser.KW_COMPUTE - 200)) |
						(1 << (HiveParser.KW_STATISTICS - 200)) |
						(1 << (HiveParser.KW_USE - 200)) |
						(1 << (HiveParser.KW_OPTION - 200)) |
						(1 << (HiveParser.KW_CONCATENATE - 200)) |
						(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
						(1 << (HiveParser.KW_RESTRICT - 200)) |
						(1 << (HiveParser.KW_CASCADE - 200)) |
						(1 << (HiveParser.KW_SKEWED - 200)) |
						(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
					0) ||
			(((_la - 244) & ~0x1f) == 0 &&
				((1 << (_la - 244)) &
					((1 << (HiveParser.KW_SETS - 244)) |
						(1 << (HiveParser.KW_NOSCAN - 244)) |
						(1 << (HiveParser.KW_ROLE - 244)) |
						(1 << (HiveParser.KW_ROLES - 244)) |
						(1 << (HiveParser.KW_URI - 244)) |
						(1 << (HiveParser.KW_SERVER - 244)) |
						(1 << (HiveParser.KW_ADMIN - 244)) |
						(1 << (HiveParser.KW_OWNER - 244)) |
						(1 << (HiveParser.KW_PRINCIPALS - 244)) |
						(1 << (HiveParser.KW_COMPACT - 244)) |
						(1 << (HiveParser.KW_COMPACTIONS - 244)) |
						(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
						(1 << (HiveParser.KW_REWRITE - 244)) |
						(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
						(1 << (HiveParser.KW_RELOAD - 244)) |
						(1 << (HiveParser.KW_YEAR - 244)) |
						(1 << (HiveParser.KW_QUERY - 244)) |
						(1 << (HiveParser.KW_QUARTER - 244)) |
						(1 << (HiveParser.KW_MONTH - 244)) |
						(1 << (HiveParser.KW_WEEK - 244)) |
						(1 << (HiveParser.KW_DAY - 244)) |
						(1 << (HiveParser.KW_DOW - 244)) |
						(1 << (HiveParser.KW_HOUR - 244)) |
						(1 << (HiveParser.KW_MINUTE - 244)) |
						(1 << (HiveParser.KW_SECOND - 244)))) !==
					0) ||
			(((_la - 277) & ~0x1f) == 0 &&
				((1 << (_la - 277)) &
					((1 << (HiveParser.KW_TRANSACTION - 277)) |
						(1 << (HiveParser.KW_WORK - 277)) |
						(1 << (HiveParser.KW_WRITE - 277)) |
						(1 << (HiveParser.KW_ISOLATION - 277)) |
						(1 << (HiveParser.KW_LEVEL - 277)) |
						(1 << (HiveParser.KW_SNAPSHOT - 277)) |
						(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
						(1 << (HiveParser.KW_CACHE - 277)) |
						(1 << (HiveParser.KW_ENFORCED - 277)) |
						(1 << (HiveParser.KW_VALIDATE - 277)) |
						(1 << (HiveParser.KW_NOVALIDATE - 277)) |
						(1 << (HiveParser.KW_RELY - 277)) |
						(1 << (HiveParser.KW_NORELY - 277)) |
						(1 << (HiveParser.KW_KEY - 277)) |
						(1 << (HiveParser.KW_ABORT - 277)) |
						(1 << (HiveParser.KW_MATCHED - 277)) |
						(1 << (HiveParser.KW_REPL - 277)) |
						(1 << (HiveParser.KW_DUMP - 277)) |
						(1 << (HiveParser.KW_STATUS - 277)) |
						(1 << (HiveParser.KW_VECTORIZATION - 277)) |
						(1 << (HiveParser.KW_SUMMARY - 277)))) !==
					0) ||
			(((_la - 309) & ~0x1f) == 0 &&
				((1 << (_la - 309)) &
					((1 << (HiveParser.KW_OPERATOR - 309)) |
						(1 << (HiveParser.KW_EXPRESSION - 309)) |
						(1 << (HiveParser.KW_DETAIL - 309)) |
						(1 << (HiveParser.KW_WAIT - 309)) |
						(1 << (HiveParser.KW_RESOURCE - 309)) |
						(1 << (HiveParser.KW_PLAN - 309)) |
						(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
						(1 << (HiveParser.KW_PLANS - 309)) |
						(1 << (HiveParser.KW_ACTIVATE - 309)) |
						(1 << (HiveParser.KW_DEFAULT - 309)) |
						(1 << (HiveParser.KW_CHECK - 309)) |
						(1 << (HiveParser.KW_POOL - 309)) |
						(1 << (HiveParser.KW_MOVE - 309)) |
						(1 << (HiveParser.KW_DO - 309)) |
						(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
						(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
						(1 << (HiveParser.KW_PATH - 309)) |
						(1 << (HiveParser.KW_MAPPING - 309)) |
						(1 << (HiveParser.KW_WORKLOAD - 309)) |
						(1 << (HiveParser.KW_MANAGEMENT - 309)) |
						(1 << (HiveParser.KW_ACTIVE - 309)) |
						(1 << (HiveParser.KW_UNMANAGED - 309)) |
						(1 << (HiveParser.KW_DELTA - 309)) |
						(1 << (HiveParser.KW_CSV - 309)))) !==
					0) ||
			_la === HiveParser.KW_JSON ||
			_la === HiveParser.KW_BLOOMFILTER ||
			_la === HiveParser.Identifier
		) {
			this.state = 1761;
			this.extColumnName();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DescStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_descStatement;
	return this;
}

DescStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescStatementContext.prototype.constructor = DescStatementContext;

DescStatementContext.prototype.KW_DESCRIBE = function () {
	return this.getToken(HiveParser.KW_DESCRIBE, 0);
};

DescStatementContext.prototype.KW_DESC = function () {
	return this.getToken(HiveParser.KW_DESC, 0);
};

DescStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DescStatementContext.prototype.KW_FUNCTION = function () {
	return this.getToken(HiveParser.KW_FUNCTION, 0);
};

DescStatementContext.prototype.descFuncNames = function () {
	return this.getTypedRuleContext(DescFuncNamesContext, 0);
};

DescStatementContext.prototype.tabPartColTypeExpr = function () {
	return this.getTypedRuleContext(TabPartColTypeExprContext, 0);
};

DescStatementContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

DescStatementContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

DescStatementContext.prototype.KW_EXTENDED = function () {
	return this.getToken(HiveParser.KW_EXTENDED, 0);
};

DescStatementContext.prototype.KW_FORMATTED = function () {
	return this.getToken(HiveParser.KW_FORMATTED, 0);
};

DescStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDescStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DescStatementContext = DescStatementContext;

HiveParser.prototype.descStatement = function () {
	var localctx = new DescStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 202, HiveParser.RULE_descStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1764;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_DESC || _la === HiveParser.KW_DESCRIBE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1778;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 125, this._ctx);
		switch (la_) {
			case 1:
				this.state = 1765;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_EXTENDED) {
					this.state = 1766;
					this.match(HiveParser.KW_EXTENDED);
				}

				this.state = 1769;
				this.identifier();
				break;

			case 2:
				this.state = 1770;
				this.match(HiveParser.KW_FUNCTION);
				this.state = 1772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_EXTENDED) {
					this.state = 1771;
					this.match(HiveParser.KW_EXTENDED);
				}

				this.state = 1774;
				this.descFuncNames();
				break;

			case 3:
				this.state = 1775;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_EXTENDED || _la === HiveParser.KW_FORMATTED)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1776;
				this.tabPartColTypeExpr();
				break;

			case 4:
				this.state = 1777;
				this.tabPartColTypeExpr();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AnalyzeStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_analyzeStatement;
	return this;
}

AnalyzeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnalyzeStatementContext.prototype.constructor = AnalyzeStatementContext;

AnalyzeStatementContext.prototype.KW_ANALYZE = function () {
	return this.getToken(HiveParser.KW_ANALYZE, 0);
};

AnalyzeStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

AnalyzeStatementContext.prototype.tableOrPartition = function () {
	return this.getTypedRuleContext(TableOrPartitionContext, 0);
};

AnalyzeStatementContext.prototype.KW_COMPUTE = function () {
	return this.getToken(HiveParser.KW_COMPUTE, 0);
};

AnalyzeStatementContext.prototype.KW_STATISTICS = function () {
	return this.getToken(HiveParser.KW_STATISTICS, 0);
};

AnalyzeStatementContext.prototype.KW_CACHE = function () {
	return this.getToken(HiveParser.KW_CACHE, 0);
};

AnalyzeStatementContext.prototype.KW_METADATA = function () {
	return this.getToken(HiveParser.KW_METADATA, 0);
};

AnalyzeStatementContext.prototype.KW_NOSCAN = function () {
	return this.getToken(HiveParser.KW_NOSCAN, 0);
};

AnalyzeStatementContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

AnalyzeStatementContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

AnalyzeStatementContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

AnalyzeStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAnalyzeStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AnalyzeStatementContext = AnalyzeStatementContext;

HiveParser.prototype.analyzeStatement = function () {
	var localctx = new AnalyzeStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 204, HiveParser.RULE_analyzeStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1780;
		this.match(HiveParser.KW_ANALYZE);
		this.state = 1781;
		this.match(HiveParser.KW_TABLE);

		this.state = 1782;
		this.tableOrPartition();
		this.state = 1795;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_COMPUTE:
				this.state = 1783;
				this.match(HiveParser.KW_COMPUTE);
				this.state = 1784;
				this.match(HiveParser.KW_STATISTICS);
				this.state = 1791;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_NOSCAN:
						this.state = 1785;
						this.match(HiveParser.KW_NOSCAN);
						break;
					case HiveParser.KW_FOR:
						this.state = 1786;
						this.match(HiveParser.KW_FOR);
						this.state = 1787;
						this.match(HiveParser.KW_COLUMNS);
						this.state = 1789;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (
							((_la & ~0x1f) == 0 &&
								((1 << _la) &
									((1 << HiveParser.KW_ASC) |
										(1 << HiveParser.KW_DESC) |
										(1 << HiveParser.KW_NULLS) |
										(1 << HiveParser.KW_LAST) |
										(1 << HiveParser.KW_OVERWRITE))) !==
									0) ||
							(((_la - 36) & ~0x1f) == 0 &&
								((1 << (_la - 36)) &
									((1 << (HiveParser.KW_PARTITIONS - 36)) |
										(1 << (HiveParser.KW_TABLES - 36)) |
										(1 << (HiveParser.KW_COLUMNS - 36)) |
										(1 << (HiveParser.KW_INDEX - 36)) |
										(1 << (HiveParser.KW_INDEXES - 36)) |
										(1 << (HiveParser.KW_REBUILD - 36)) |
										(1 << (HiveParser.KW_FUNCTIONS - 36)) |
										(1 << (HiveParser.KW_SHOW - 36)) |
										(1 << (HiveParser.KW_MSCK - 36)) |
										(1 << (HiveParser.KW_REPAIR - 36)) |
										(1 << (HiveParser.KW_DIRECTORY - 36)) |
										(1 << (HiveParser.KW_CLUSTER - 36)) |
										(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
										(1 << (HiveParser.KW_SORT - 36)) |
										(1 << (HiveParser.KW_LOAD - 36)) |
										(1 << (HiveParser.KW_EXPORT - 36)) |
										(1 << (HiveParser.KW_REPLICATION - 36)) |
										(1 << (HiveParser.KW_METADATA - 36)) |
										(1 << (HiveParser.KW_DATA - 36)) |
										(1 << (HiveParser.KW_INPATH - 36)))) !==
									0) ||
							(((_la - 68) & ~0x1f) == 0 &&
								((1 << (_la - 68)) &
									((1 << (HiveParser.KW_CHANGE - 68)) |
										(1 << (HiveParser.KW_FIRST - 68)) |
										(1 << (HiveParser.KW_AFTER - 68)) |
										(1 << (HiveParser.KW_RENAME - 68)) |
										(1 << (HiveParser.KW_COMMENT - 68)) |
										(1 << (HiveParser.KW_TINYINT - 68)) |
										(1 << (HiveParser.KW_DATETIME - 68)) |
										(1 << (HiveParser.KW_ZONE - 68)) |
										(1 << (HiveParser.KW_STRING - 68)) |
										(1 << (HiveParser.KW_STRUCT - 68)) |
										(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
									0) ||
							(((_la - 101) & ~0x1f) == 0 &&
								((1 << (_la - 101)) &
									((1 << (HiveParser.KW_PARTITIONED - 101)) |
										(1 << (HiveParser.KW_CLUSTERED - 101)) |
										(1 << (HiveParser.KW_SORTED - 101)) |
										(1 << (HiveParser.KW_BUCKETS - 101)) |
										(1 << (HiveParser.KW_FORMAT - 101)) |
										(1 << (HiveParser.KW_DELIMITED - 101)) |
										(1 << (HiveParser.KW_FIELDS - 101)) |
										(1 << (HiveParser.KW_TERMINATED - 101)) |
										(1 << (HiveParser.KW_ESCAPED - 101)) |
										(1 << (HiveParser.KW_COLLECTION - 101)) |
										(1 << (HiveParser.KW_ITEMS - 101)) |
										(1 << (HiveParser.KW_KEYS - 101)) |
										(1 << (HiveParser.KW_KEY_TYPE - 101)) |
										(1 << (HiveParser.KW_KILL - 101)) |
										(1 << (HiveParser.KW_LINES - 101)) |
										(1 << (HiveParser.KW_STORED - 101)) |
										(1 << (HiveParser.KW_FILEFORMAT - 101)) |
										(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
										(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
										(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
										(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
										(1 << (HiveParser.KW_ENABLE - 101)) |
										(1 << (HiveParser.KW_DISABLE - 101)) |
										(1 << (HiveParser.KW_LOCATION - 101)) |
										(1 << (HiveParser.KW_BUCKET - 101)))) !==
									0) ||
							(((_la - 134) & ~0x1f) == 0 &&
								((1 << (_la - 134)) &
									((1 << (HiveParser.KW_ADD - 134)) |
										(1 << (HiveParser.KW_REPLACE - 134)) |
										(1 << (HiveParser.KW_TEMPORARY - 134)) |
										(1 << (HiveParser.KW_FILE - 134)) |
										(1 << (HiveParser.KW_JAR - 134)) |
										(1 << (HiveParser.KW_EXPLAIN - 134)) |
										(1 << (HiveParser.KW_FORMATTED - 134)) |
										(1 << (HiveParser.KW_DEPENDENCY - 134)) |
										(1 << (HiveParser.KW_LOGICAL - 134)) |
										(1 << (HiveParser.KW_SERDE - 134)) |
										(1 << (HiveParser.KW_DEFERRED - 134)) |
										(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
										(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
										(1 << (HiveParser.KW_LIMIT - 134)) |
										(1 << (HiveParser.KW_OFFSET - 134)) |
										(1 << (HiveParser.KW_UNSET - 134)) |
										(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
										(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
										(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
										(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
										(1 << (HiveParser.KW_DEFINED - 134)))) !==
									0) ||
							(((_la - 167) & ~0x1f) == 0 &&
								((1 << (_la - 167)) &
									((1 << (HiveParser.KW_MAPJOIN - 167)) |
										(1 << (HiveParser.KW_STREAMTABLE - 167)) |
										(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
										(1 << (HiveParser.KW_UTC - 167)) |
										(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
										(1 << (HiveParser.KW_LONG - 167)) |
										(1 << (HiveParser.KW_PLUS - 167)) |
										(1 << (HiveParser.KW_VIEW - 167)) |
										(1 << (HiveParser.KW_VIEWS - 167)) |
										(1 << (HiveParser.KW_DATABASES - 167)) |
										(1 << (HiveParser.KW_MATERIALIZED - 167)) |
										(1 << (HiveParser.KW_SCHEMA - 167)) |
										(1 << (HiveParser.KW_SCHEMAS - 167)) |
										(1 << (HiveParser.KW_SSL - 167)) |
										(1 << (HiveParser.KW_UNDO - 167)) |
										(1 << (HiveParser.KW_LOCK - 167)) |
										(1 << (HiveParser.KW_LOCKS - 167)) |
										(1 << (HiveParser.KW_UNLOCK - 167)) |
										(1 << (HiveParser.KW_SHARED - 167)) |
										(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
										(1 << (HiveParser.KW_UNSIGNED - 167)) |
										(1 << (HiveParser.KW_WHILE - 167)) |
										(1 << (HiveParser.KW_READ - 167)))) !==
									0) ||
							(((_la - 200) & ~0x1f) == 0 &&
								((1 << (_la - 200)) &
									((1 << (HiveParser.KW_PURGE - 200)) |
										(1 << (HiveParser.KW_ANALYZE - 200)) |
										(1 << (HiveParser.KW_BEFORE - 200)) |
										(1 << (HiveParser.KW_CONTINUE - 200)) |
										(1 << (HiveParser.KW_RECORDREADER - 200)) |
										(1 << (HiveParser.KW_RECORDWRITER - 200)) |
										(1 << (HiveParser.KW_SEMI - 200)) |
										(1 << (HiveParser.KW_TOUCH - 200)) |
										(1 << (HiveParser.KW_ARCHIVE - 200)) |
										(1 << (HiveParser.KW_UNARCHIVE - 200)) |
										(1 << (HiveParser.KW_COMPUTE - 200)) |
										(1 << (HiveParser.KW_STATISTICS - 200)) |
										(1 << (HiveParser.KW_USE - 200)) |
										(1 << (HiveParser.KW_OPTION - 200)) |
										(1 << (HiveParser.KW_CONCATENATE - 200)) |
										(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
										(1 << (HiveParser.KW_RESTRICT - 200)) |
										(1 << (HiveParser.KW_CASCADE - 200)) |
										(1 << (HiveParser.KW_SKEWED - 200)) |
										(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
									0) ||
							(((_la - 244) & ~0x1f) == 0 &&
								((1 << (_la - 244)) &
									((1 << (HiveParser.KW_SETS - 244)) |
										(1 << (HiveParser.KW_NOSCAN - 244)) |
										(1 << (HiveParser.KW_ROLE - 244)) |
										(1 << (HiveParser.KW_ROLES - 244)) |
										(1 << (HiveParser.KW_URI - 244)) |
										(1 << (HiveParser.KW_SERVER - 244)) |
										(1 << (HiveParser.KW_ADMIN - 244)) |
										(1 << (HiveParser.KW_OWNER - 244)) |
										(1 << (HiveParser.KW_PRINCIPALS - 244)) |
										(1 << (HiveParser.KW_COMPACT - 244)) |
										(1 << (HiveParser.KW_COMPACTIONS - 244)) |
										(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
										(1 << (HiveParser.KW_REWRITE - 244)) |
										(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
										(1 << (HiveParser.KW_RELOAD - 244)) |
										(1 << (HiveParser.KW_YEAR - 244)) |
										(1 << (HiveParser.KW_QUERY - 244)) |
										(1 << (HiveParser.KW_QUARTER - 244)) |
										(1 << (HiveParser.KW_MONTH - 244)) |
										(1 << (HiveParser.KW_WEEK - 244)) |
										(1 << (HiveParser.KW_DAY - 244)) |
										(1 << (HiveParser.KW_DOW - 244)) |
										(1 << (HiveParser.KW_HOUR - 244)) |
										(1 << (HiveParser.KW_MINUTE - 244)) |
										(1 << (HiveParser.KW_SECOND - 244)))) !==
									0) ||
							(((_la - 277) & ~0x1f) == 0 &&
								((1 << (_la - 277)) &
									((1 << (HiveParser.KW_TRANSACTION - 277)) |
										(1 << (HiveParser.KW_WORK - 277)) |
										(1 << (HiveParser.KW_WRITE - 277)) |
										(1 << (HiveParser.KW_ISOLATION - 277)) |
										(1 << (HiveParser.KW_LEVEL - 277)) |
										(1 << (HiveParser.KW_SNAPSHOT - 277)) |
										(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
										(1 << (HiveParser.KW_CACHE - 277)) |
										(1 << (HiveParser.KW_ENFORCED - 277)) |
										(1 << (HiveParser.KW_VALIDATE - 277)) |
										(1 << (HiveParser.KW_NOVALIDATE - 277)) |
										(1 << (HiveParser.KW_RELY - 277)) |
										(1 << (HiveParser.KW_NORELY - 277)) |
										(1 << (HiveParser.KW_KEY - 277)) |
										(1 << (HiveParser.KW_ABORT - 277)) |
										(1 << (HiveParser.KW_MATCHED - 277)) |
										(1 << (HiveParser.KW_REPL - 277)) |
										(1 << (HiveParser.KW_DUMP - 277)) |
										(1 << (HiveParser.KW_STATUS - 277)) |
										(1 << (HiveParser.KW_VECTORIZATION - 277)) |
										(1 << (HiveParser.KW_SUMMARY - 277)))) !==
									0) ||
							(((_la - 309) & ~0x1f) == 0 &&
								((1 << (_la - 309)) &
									((1 << (HiveParser.KW_OPERATOR - 309)) |
										(1 << (HiveParser.KW_EXPRESSION - 309)) |
										(1 << (HiveParser.KW_DETAIL - 309)) |
										(1 << (HiveParser.KW_WAIT - 309)) |
										(1 << (HiveParser.KW_RESOURCE - 309)) |
										(1 << (HiveParser.KW_PLAN - 309)) |
										(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
										(1 << (HiveParser.KW_PLANS - 309)) |
										(1 << (HiveParser.KW_ACTIVATE - 309)) |
										(1 << (HiveParser.KW_DEFAULT - 309)) |
										(1 << (HiveParser.KW_CHECK - 309)) |
										(1 << (HiveParser.KW_POOL - 309)) |
										(1 << (HiveParser.KW_MOVE - 309)) |
										(1 << (HiveParser.KW_DO - 309)) |
										(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
										(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
										(1 << (HiveParser.KW_PATH - 309)) |
										(1 << (HiveParser.KW_MAPPING - 309)) |
										(1 << (HiveParser.KW_WORKLOAD - 309)) |
										(1 << (HiveParser.KW_MANAGEMENT - 309)) |
										(1 << (HiveParser.KW_ACTIVE - 309)) |
										(1 << (HiveParser.KW_UNMANAGED - 309)) |
										(1 << (HiveParser.KW_DELTA - 309)) |
										(1 << (HiveParser.KW_CSV - 309)))) !==
									0) ||
							_la === HiveParser.KW_JSON ||
							_la === HiveParser.KW_BLOOMFILTER ||
							_la === HiveParser.Identifier
						) {
							this.state = 1788;
							this.columnNameList();
						}

						break;
					case HiveParser.SEMICOLON:
						break;
					default:
						break;
				}
				break;
			case HiveParser.KW_CACHE:
				this.state = 1793;
				this.match(HiveParser.KW_CACHE);
				this.state = 1794;
				this.match(HiveParser.KW_METADATA);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showStatement;
	return this;
}

ShowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowStatementContext.prototype.constructor = ShowStatementContext;

ShowStatementContext.prototype.KW_SHOW = function () {
	return this.getToken(HiveParser.KW_SHOW, 0);
};

ShowStatementContext.prototype.KW_DATABASES = function () {
	return this.getToken(HiveParser.KW_DATABASES, 0);
};

ShowStatementContext.prototype.KW_SCHEMAS = function () {
	return this.getToken(HiveParser.KW_SCHEMAS, 0);
};

ShowStatementContext.prototype.KW_LIKE = function () {
	return this.getToken(HiveParser.KW_LIKE, 0);
};

ShowStatementContext.prototype.showStmtIdentifier = function () {
	return this.getTypedRuleContext(ShowStmtIdentifierContext, 0);
};

ShowStatementContext.prototype.KW_TABLES = function () {
	return this.getToken(HiveParser.KW_TABLES, 0);
};

ShowStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ShowStatementContext.prototype.KW_FROM = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_FROM);
	} else {
		return this.getToken(HiveParser.KW_FROM, i);
	}
};

ShowStatementContext.prototype.KW_IN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_IN);
	} else {
		return this.getToken(HiveParser.KW_IN, i);
	}
};

ShowStatementContext.prototype.KW_VIEWS = function () {
	return this.getToken(HiveParser.KW_VIEWS, 0);
};

ShowStatementContext.prototype.KW_MATERIALIZED = function () {
	return this.getToken(HiveParser.KW_MATERIALIZED, 0);
};

ShowStatementContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

ShowStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

ShowStatementContext.prototype.KW_FUNCTIONS = function () {
	return this.getToken(HiveParser.KW_FUNCTIONS, 0);
};

ShowStatementContext.prototype.showFunctionIdentifier = function () {
	return this.getTypedRuleContext(ShowFunctionIdentifierContext, 0);
};

ShowStatementContext.prototype.KW_PARTITIONS = function () {
	return this.getToken(HiveParser.KW_PARTITIONS, 0);
};

ShowStatementContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

ShowStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

ShowStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

ShowStatementContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

ShowStatementContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

ShowStatementContext.prototype.KW_EXTENDED = function () {
	return this.getToken(HiveParser.KW_EXTENDED, 0);
};

ShowStatementContext.prototype.KW_TBLPROPERTIES = function () {
	return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
};

ShowStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ShowStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ShowStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ShowStatementContext.prototype.KW_LOCKS = function () {
	return this.getToken(HiveParser.KW_LOCKS, 0);
};

ShowStatementContext.prototype.partTypeExpr = function () {
	return this.getTypedRuleContext(PartTypeExprContext, 0);
};

ShowStatementContext.prototype.KW_COMPACTIONS = function () {
	return this.getToken(HiveParser.KW_COMPACTIONS, 0);
};

ShowStatementContext.prototype.KW_TRANSACTIONS = function () {
	return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
};

ShowStatementContext.prototype.KW_CONF = function () {
	return this.getToken(HiveParser.KW_CONF, 0);
};

ShowStatementContext.prototype.KW_RESOURCE = function () {
	return this.getToken(HiveParser.KW_RESOURCE, 0);
};

ShowStatementContext.prototype.KW_PLANS = function () {
	return this.getToken(HiveParser.KW_PLANS, 0);
};

ShowStatementContext.prototype.KW_PLAN = function () {
	return this.getToken(HiveParser.KW_PLAN, 0);
};

ShowStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowStatementContext = ShowStatementContext;

HiveParser.prototype.showStatement = function () {
	var localctx = new ShowStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 206, HiveParser.RULE_showStatement);
	var _la = 0; // Token type
	try {
		this.state = 1920;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 149, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1797;
				this.match(HiveParser.KW_SHOW);
				this.state = 1798;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASES || _la === HiveParser.KW_SCHEMAS)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LIKE) {
					this.state = 1799;
					this.match(HiveParser.KW_LIKE);
					this.state = 1800;
					this.showStmtIdentifier();
				}

				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1803;
				this.match(HiveParser.KW_SHOW);
				this.state = 1804;
				this.match(HiveParser.KW_TABLES);
				this.state = 1807;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
					this.state = 1805;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1806;
					this.identifier();
				}

				this.state = 1812;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_LIKE:
						this.state = 1809;
						this.match(HiveParser.KW_LIKE);
						this.state = 1810;
						this.showStmtIdentifier();
						break;
					case HiveParser.KW_ASC:
					case HiveParser.KW_DESC:
					case HiveParser.KW_NULLS:
					case HiveParser.KW_LAST:
					case HiveParser.KW_OVERWRITE:
					case HiveParser.KW_PARTITIONS:
					case HiveParser.KW_TABLES:
					case HiveParser.KW_COLUMNS:
					case HiveParser.KW_INDEX:
					case HiveParser.KW_INDEXES:
					case HiveParser.KW_REBUILD:
					case HiveParser.KW_FUNCTIONS:
					case HiveParser.KW_SHOW:
					case HiveParser.KW_MSCK:
					case HiveParser.KW_REPAIR:
					case HiveParser.KW_DIRECTORY:
					case HiveParser.KW_CLUSTER:
					case HiveParser.KW_DISTRIBUTE:
					case HiveParser.KW_SORT:
					case HiveParser.KW_LOAD:
					case HiveParser.KW_EXPORT:
					case HiveParser.KW_REPLICATION:
					case HiveParser.KW_METADATA:
					case HiveParser.KW_DATA:
					case HiveParser.KW_INPATH:
					case HiveParser.KW_CHANGE:
					case HiveParser.KW_FIRST:
					case HiveParser.KW_AFTER:
					case HiveParser.KW_RENAME:
					case HiveParser.KW_COMMENT:
					case HiveParser.KW_TINYINT:
					case HiveParser.KW_DATETIME:
					case HiveParser.KW_ZONE:
					case HiveParser.KW_STRING:
					case HiveParser.KW_STRUCT:
					case HiveParser.KW_UNIONTYPE:
					case HiveParser.KW_PARTITIONED:
					case HiveParser.KW_CLUSTERED:
					case HiveParser.KW_SORTED:
					case HiveParser.KW_BUCKETS:
					case HiveParser.KW_FORMAT:
					case HiveParser.KW_DELIMITED:
					case HiveParser.KW_FIELDS:
					case HiveParser.KW_TERMINATED:
					case HiveParser.KW_ESCAPED:
					case HiveParser.KW_COLLECTION:
					case HiveParser.KW_ITEMS:
					case HiveParser.KW_KEYS:
					case HiveParser.KW_KEY_TYPE:
					case HiveParser.KW_KILL:
					case HiveParser.KW_LINES:
					case HiveParser.KW_STORED:
					case HiveParser.KW_FILEFORMAT:
					case HiveParser.KW_INPUTFORMAT:
					case HiveParser.KW_OUTPUTFORMAT:
					case HiveParser.KW_INPUTDRIVER:
					case HiveParser.KW_OUTPUTDRIVER:
					case HiveParser.KW_ENABLE:
					case HiveParser.KW_DISABLE:
					case HiveParser.KW_LOCATION:
					case HiveParser.KW_BUCKET:
					case HiveParser.KW_ADD:
					case HiveParser.KW_REPLACE:
					case HiveParser.KW_TEMPORARY:
					case HiveParser.KW_FILE:
					case HiveParser.KW_JAR:
					case HiveParser.KW_EXPLAIN:
					case HiveParser.KW_FORMATTED:
					case HiveParser.KW_DEPENDENCY:
					case HiveParser.KW_LOGICAL:
					case HiveParser.KW_SERDE:
					case HiveParser.KW_DEFERRED:
					case HiveParser.KW_SERDEPROPERTIES:
					case HiveParser.KW_DBPROPERTIES:
					case HiveParser.KW_LIMIT:
					case HiveParser.KW_OFFSET:
					case HiveParser.KW_UNSET:
					case HiveParser.KW_TBLPROPERTIES:
					case HiveParser.KW_IDXPROPERTIES:
					case HiveParser.KW_VALUE_TYPE:
					case HiveParser.KW_ELEM_TYPE:
					case HiveParser.KW_DEFINED:
					case HiveParser.KW_MAPJOIN:
					case HiveParser.KW_STREAMTABLE:
					case HiveParser.KW_CLUSTERSTATUS:
					case HiveParser.KW_UTC:
					case HiveParser.KW_UTCTIMESTAMP:
					case HiveParser.KW_LONG:
					case HiveParser.KW_PLUS:
					case HiveParser.KW_VIEW:
					case HiveParser.KW_VIEWS:
					case HiveParser.KW_DATABASES:
					case HiveParser.KW_MATERIALIZED:
					case HiveParser.KW_SCHEMA:
					case HiveParser.KW_SCHEMAS:
					case HiveParser.KW_SSL:
					case HiveParser.KW_UNDO:
					case HiveParser.KW_LOCK:
					case HiveParser.KW_LOCKS:
					case HiveParser.KW_UNLOCK:
					case HiveParser.KW_SHARED:
					case HiveParser.KW_EXCLUSIVE:
					case HiveParser.KW_UNSIGNED:
					case HiveParser.KW_WHILE:
					case HiveParser.KW_READ:
					case HiveParser.KW_PURGE:
					case HiveParser.KW_ANALYZE:
					case HiveParser.KW_BEFORE:
					case HiveParser.KW_CONTINUE:
					case HiveParser.KW_RECORDREADER:
					case HiveParser.KW_RECORDWRITER:
					case HiveParser.KW_SEMI:
					case HiveParser.KW_TOUCH:
					case HiveParser.KW_ARCHIVE:
					case HiveParser.KW_UNARCHIVE:
					case HiveParser.KW_COMPUTE:
					case HiveParser.KW_STATISTICS:
					case HiveParser.KW_USE:
					case HiveParser.KW_OPTION:
					case HiveParser.KW_CONCATENATE:
					case HiveParser.KW_SHOW_DATABASE:
					case HiveParser.KW_RESTRICT:
					case HiveParser.KW_CASCADE:
					case HiveParser.KW_SKEWED:
					case HiveParser.KW_DIRECTORIES:
					case HiveParser.KW_SETS:
					case HiveParser.KW_NOSCAN:
					case HiveParser.KW_ROLE:
					case HiveParser.KW_ROLES:
					case HiveParser.KW_URI:
					case HiveParser.KW_SERVER:
					case HiveParser.KW_ADMIN:
					case HiveParser.KW_OWNER:
					case HiveParser.KW_PRINCIPALS:
					case HiveParser.KW_COMPACT:
					case HiveParser.KW_COMPACTIONS:
					case HiveParser.KW_TRANSACTIONS:
					case HiveParser.KW_REWRITE:
					case HiveParser.KW_REOPTIMIZATION:
					case HiveParser.KW_RELOAD:
					case HiveParser.KW_YEAR:
					case HiveParser.KW_QUERY:
					case HiveParser.KW_QUARTER:
					case HiveParser.KW_MONTH:
					case HiveParser.KW_WEEK:
					case HiveParser.KW_DAY:
					case HiveParser.KW_DOW:
					case HiveParser.KW_HOUR:
					case HiveParser.KW_MINUTE:
					case HiveParser.KW_SECOND:
					case HiveParser.KW_TRANSACTION:
					case HiveParser.KW_WORK:
					case HiveParser.KW_WRITE:
					case HiveParser.KW_ISOLATION:
					case HiveParser.KW_LEVEL:
					case HiveParser.KW_SNAPSHOT:
					case HiveParser.KW_AUTOCOMMIT:
					case HiveParser.KW_CACHE:
					case HiveParser.KW_ENFORCED:
					case HiveParser.KW_VALIDATE:
					case HiveParser.KW_NOVALIDATE:
					case HiveParser.KW_RELY:
					case HiveParser.KW_NORELY:
					case HiveParser.KW_KEY:
					case HiveParser.KW_ABORT:
					case HiveParser.KW_MATCHED:
					case HiveParser.KW_REPL:
					case HiveParser.KW_DUMP:
					case HiveParser.KW_STATUS:
					case HiveParser.KW_VECTORIZATION:
					case HiveParser.KW_SUMMARY:
					case HiveParser.KW_OPERATOR:
					case HiveParser.KW_EXPRESSION:
					case HiveParser.KW_DETAIL:
					case HiveParser.KW_WAIT:
					case HiveParser.KW_RESOURCE:
					case HiveParser.KW_PLAN:
					case HiveParser.KW_QUERY_PARALLELISM:
					case HiveParser.KW_PLANS:
					case HiveParser.KW_ACTIVATE:
					case HiveParser.KW_DEFAULT:
					case HiveParser.KW_CHECK:
					case HiveParser.KW_POOL:
					case HiveParser.KW_MOVE:
					case HiveParser.KW_DO:
					case HiveParser.KW_ALLOC_FRACTION:
					case HiveParser.KW_SCHEDULING_POLICY:
					case HiveParser.KW_PATH:
					case HiveParser.KW_MAPPING:
					case HiveParser.KW_WORKLOAD:
					case HiveParser.KW_MANAGEMENT:
					case HiveParser.KW_ACTIVE:
					case HiveParser.KW_UNMANAGED:
					case HiveParser.KW_DELTA:
					case HiveParser.KW_CSV:
					case HiveParser.KW_JSON:
					case HiveParser.KW_BLOOMFILTER:
					case HiveParser.StringLiteral:
					case HiveParser.Identifier:
						this.state = 1811;
						this.showStmtIdentifier();
						break;
					case HiveParser.SEMICOLON:
						break;
					default:
						break;
				}
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1814;
				this.match(HiveParser.KW_SHOW);
				this.state = 1815;
				this.match(HiveParser.KW_VIEWS);
				this.state = 1818;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
					this.state = 1816;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1817;
					this.identifier();
				}

				this.state = 1823;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_LIKE:
						this.state = 1820;
						this.match(HiveParser.KW_LIKE);
						this.state = 1821;
						this.showStmtIdentifier();
						break;
					case HiveParser.KW_ASC:
					case HiveParser.KW_DESC:
					case HiveParser.KW_NULLS:
					case HiveParser.KW_LAST:
					case HiveParser.KW_OVERWRITE:
					case HiveParser.KW_PARTITIONS:
					case HiveParser.KW_TABLES:
					case HiveParser.KW_COLUMNS:
					case HiveParser.KW_INDEX:
					case HiveParser.KW_INDEXES:
					case HiveParser.KW_REBUILD:
					case HiveParser.KW_FUNCTIONS:
					case HiveParser.KW_SHOW:
					case HiveParser.KW_MSCK:
					case HiveParser.KW_REPAIR:
					case HiveParser.KW_DIRECTORY:
					case HiveParser.KW_CLUSTER:
					case HiveParser.KW_DISTRIBUTE:
					case HiveParser.KW_SORT:
					case HiveParser.KW_LOAD:
					case HiveParser.KW_EXPORT:
					case HiveParser.KW_REPLICATION:
					case HiveParser.KW_METADATA:
					case HiveParser.KW_DATA:
					case HiveParser.KW_INPATH:
					case HiveParser.KW_CHANGE:
					case HiveParser.KW_FIRST:
					case HiveParser.KW_AFTER:
					case HiveParser.KW_RENAME:
					case HiveParser.KW_COMMENT:
					case HiveParser.KW_TINYINT:
					case HiveParser.KW_DATETIME:
					case HiveParser.KW_ZONE:
					case HiveParser.KW_STRING:
					case HiveParser.KW_STRUCT:
					case HiveParser.KW_UNIONTYPE:
					case HiveParser.KW_PARTITIONED:
					case HiveParser.KW_CLUSTERED:
					case HiveParser.KW_SORTED:
					case HiveParser.KW_BUCKETS:
					case HiveParser.KW_FORMAT:
					case HiveParser.KW_DELIMITED:
					case HiveParser.KW_FIELDS:
					case HiveParser.KW_TERMINATED:
					case HiveParser.KW_ESCAPED:
					case HiveParser.KW_COLLECTION:
					case HiveParser.KW_ITEMS:
					case HiveParser.KW_KEYS:
					case HiveParser.KW_KEY_TYPE:
					case HiveParser.KW_KILL:
					case HiveParser.KW_LINES:
					case HiveParser.KW_STORED:
					case HiveParser.KW_FILEFORMAT:
					case HiveParser.KW_INPUTFORMAT:
					case HiveParser.KW_OUTPUTFORMAT:
					case HiveParser.KW_INPUTDRIVER:
					case HiveParser.KW_OUTPUTDRIVER:
					case HiveParser.KW_ENABLE:
					case HiveParser.KW_DISABLE:
					case HiveParser.KW_LOCATION:
					case HiveParser.KW_BUCKET:
					case HiveParser.KW_ADD:
					case HiveParser.KW_REPLACE:
					case HiveParser.KW_TEMPORARY:
					case HiveParser.KW_FILE:
					case HiveParser.KW_JAR:
					case HiveParser.KW_EXPLAIN:
					case HiveParser.KW_FORMATTED:
					case HiveParser.KW_DEPENDENCY:
					case HiveParser.KW_LOGICAL:
					case HiveParser.KW_SERDE:
					case HiveParser.KW_DEFERRED:
					case HiveParser.KW_SERDEPROPERTIES:
					case HiveParser.KW_DBPROPERTIES:
					case HiveParser.KW_LIMIT:
					case HiveParser.KW_OFFSET:
					case HiveParser.KW_UNSET:
					case HiveParser.KW_TBLPROPERTIES:
					case HiveParser.KW_IDXPROPERTIES:
					case HiveParser.KW_VALUE_TYPE:
					case HiveParser.KW_ELEM_TYPE:
					case HiveParser.KW_DEFINED:
					case HiveParser.KW_MAPJOIN:
					case HiveParser.KW_STREAMTABLE:
					case HiveParser.KW_CLUSTERSTATUS:
					case HiveParser.KW_UTC:
					case HiveParser.KW_UTCTIMESTAMP:
					case HiveParser.KW_LONG:
					case HiveParser.KW_PLUS:
					case HiveParser.KW_VIEW:
					case HiveParser.KW_VIEWS:
					case HiveParser.KW_DATABASES:
					case HiveParser.KW_MATERIALIZED:
					case HiveParser.KW_SCHEMA:
					case HiveParser.KW_SCHEMAS:
					case HiveParser.KW_SSL:
					case HiveParser.KW_UNDO:
					case HiveParser.KW_LOCK:
					case HiveParser.KW_LOCKS:
					case HiveParser.KW_UNLOCK:
					case HiveParser.KW_SHARED:
					case HiveParser.KW_EXCLUSIVE:
					case HiveParser.KW_UNSIGNED:
					case HiveParser.KW_WHILE:
					case HiveParser.KW_READ:
					case HiveParser.KW_PURGE:
					case HiveParser.KW_ANALYZE:
					case HiveParser.KW_BEFORE:
					case HiveParser.KW_CONTINUE:
					case HiveParser.KW_RECORDREADER:
					case HiveParser.KW_RECORDWRITER:
					case HiveParser.KW_SEMI:
					case HiveParser.KW_TOUCH:
					case HiveParser.KW_ARCHIVE:
					case HiveParser.KW_UNARCHIVE:
					case HiveParser.KW_COMPUTE:
					case HiveParser.KW_STATISTICS:
					case HiveParser.KW_USE:
					case HiveParser.KW_OPTION:
					case HiveParser.KW_CONCATENATE:
					case HiveParser.KW_SHOW_DATABASE:
					case HiveParser.KW_RESTRICT:
					case HiveParser.KW_CASCADE:
					case HiveParser.KW_SKEWED:
					case HiveParser.KW_DIRECTORIES:
					case HiveParser.KW_SETS:
					case HiveParser.KW_NOSCAN:
					case HiveParser.KW_ROLE:
					case HiveParser.KW_ROLES:
					case HiveParser.KW_URI:
					case HiveParser.KW_SERVER:
					case HiveParser.KW_ADMIN:
					case HiveParser.KW_OWNER:
					case HiveParser.KW_PRINCIPALS:
					case HiveParser.KW_COMPACT:
					case HiveParser.KW_COMPACTIONS:
					case HiveParser.KW_TRANSACTIONS:
					case HiveParser.KW_REWRITE:
					case HiveParser.KW_REOPTIMIZATION:
					case HiveParser.KW_RELOAD:
					case HiveParser.KW_YEAR:
					case HiveParser.KW_QUERY:
					case HiveParser.KW_QUARTER:
					case HiveParser.KW_MONTH:
					case HiveParser.KW_WEEK:
					case HiveParser.KW_DAY:
					case HiveParser.KW_DOW:
					case HiveParser.KW_HOUR:
					case HiveParser.KW_MINUTE:
					case HiveParser.KW_SECOND:
					case HiveParser.KW_TRANSACTION:
					case HiveParser.KW_WORK:
					case HiveParser.KW_WRITE:
					case HiveParser.KW_ISOLATION:
					case HiveParser.KW_LEVEL:
					case HiveParser.KW_SNAPSHOT:
					case HiveParser.KW_AUTOCOMMIT:
					case HiveParser.KW_CACHE:
					case HiveParser.KW_ENFORCED:
					case HiveParser.KW_VALIDATE:
					case HiveParser.KW_NOVALIDATE:
					case HiveParser.KW_RELY:
					case HiveParser.KW_NORELY:
					case HiveParser.KW_KEY:
					case HiveParser.KW_ABORT:
					case HiveParser.KW_MATCHED:
					case HiveParser.KW_REPL:
					case HiveParser.KW_DUMP:
					case HiveParser.KW_STATUS:
					case HiveParser.KW_VECTORIZATION:
					case HiveParser.KW_SUMMARY:
					case HiveParser.KW_OPERATOR:
					case HiveParser.KW_EXPRESSION:
					case HiveParser.KW_DETAIL:
					case HiveParser.KW_WAIT:
					case HiveParser.KW_RESOURCE:
					case HiveParser.KW_PLAN:
					case HiveParser.KW_QUERY_PARALLELISM:
					case HiveParser.KW_PLANS:
					case HiveParser.KW_ACTIVATE:
					case HiveParser.KW_DEFAULT:
					case HiveParser.KW_CHECK:
					case HiveParser.KW_POOL:
					case HiveParser.KW_MOVE:
					case HiveParser.KW_DO:
					case HiveParser.KW_ALLOC_FRACTION:
					case HiveParser.KW_SCHEDULING_POLICY:
					case HiveParser.KW_PATH:
					case HiveParser.KW_MAPPING:
					case HiveParser.KW_WORKLOAD:
					case HiveParser.KW_MANAGEMENT:
					case HiveParser.KW_ACTIVE:
					case HiveParser.KW_UNMANAGED:
					case HiveParser.KW_DELTA:
					case HiveParser.KW_CSV:
					case HiveParser.KW_JSON:
					case HiveParser.KW_BLOOMFILTER:
					case HiveParser.StringLiteral:
					case HiveParser.Identifier:
						this.state = 1822;
						this.showStmtIdentifier();
						break;
					case HiveParser.SEMICOLON:
						break;
					default:
						break;
				}
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 1825;
				this.match(HiveParser.KW_SHOW);
				this.state = 1826;
				this.match(HiveParser.KW_MATERIALIZED);
				this.state = 1827;
				this.match(HiveParser.KW_VIEWS);
				this.state = 1830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
					this.state = 1828;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1829;
					this.identifier();
				}

				this.state = 1835;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_LIKE:
						this.state = 1832;
						this.match(HiveParser.KW_LIKE);
						this.state = 1833;
						this.showStmtIdentifier();
						break;
					case HiveParser.KW_ASC:
					case HiveParser.KW_DESC:
					case HiveParser.KW_NULLS:
					case HiveParser.KW_LAST:
					case HiveParser.KW_OVERWRITE:
					case HiveParser.KW_PARTITIONS:
					case HiveParser.KW_TABLES:
					case HiveParser.KW_COLUMNS:
					case HiveParser.KW_INDEX:
					case HiveParser.KW_INDEXES:
					case HiveParser.KW_REBUILD:
					case HiveParser.KW_FUNCTIONS:
					case HiveParser.KW_SHOW:
					case HiveParser.KW_MSCK:
					case HiveParser.KW_REPAIR:
					case HiveParser.KW_DIRECTORY:
					case HiveParser.KW_CLUSTER:
					case HiveParser.KW_DISTRIBUTE:
					case HiveParser.KW_SORT:
					case HiveParser.KW_LOAD:
					case HiveParser.KW_EXPORT:
					case HiveParser.KW_REPLICATION:
					case HiveParser.KW_METADATA:
					case HiveParser.KW_DATA:
					case HiveParser.KW_INPATH:
					case HiveParser.KW_CHANGE:
					case HiveParser.KW_FIRST:
					case HiveParser.KW_AFTER:
					case HiveParser.KW_RENAME:
					case HiveParser.KW_COMMENT:
					case HiveParser.KW_TINYINT:
					case HiveParser.KW_DATETIME:
					case HiveParser.KW_ZONE:
					case HiveParser.KW_STRING:
					case HiveParser.KW_STRUCT:
					case HiveParser.KW_UNIONTYPE:
					case HiveParser.KW_PARTITIONED:
					case HiveParser.KW_CLUSTERED:
					case HiveParser.KW_SORTED:
					case HiveParser.KW_BUCKETS:
					case HiveParser.KW_FORMAT:
					case HiveParser.KW_DELIMITED:
					case HiveParser.KW_FIELDS:
					case HiveParser.KW_TERMINATED:
					case HiveParser.KW_ESCAPED:
					case HiveParser.KW_COLLECTION:
					case HiveParser.KW_ITEMS:
					case HiveParser.KW_KEYS:
					case HiveParser.KW_KEY_TYPE:
					case HiveParser.KW_KILL:
					case HiveParser.KW_LINES:
					case HiveParser.KW_STORED:
					case HiveParser.KW_FILEFORMAT:
					case HiveParser.KW_INPUTFORMAT:
					case HiveParser.KW_OUTPUTFORMAT:
					case HiveParser.KW_INPUTDRIVER:
					case HiveParser.KW_OUTPUTDRIVER:
					case HiveParser.KW_ENABLE:
					case HiveParser.KW_DISABLE:
					case HiveParser.KW_LOCATION:
					case HiveParser.KW_BUCKET:
					case HiveParser.KW_ADD:
					case HiveParser.KW_REPLACE:
					case HiveParser.KW_TEMPORARY:
					case HiveParser.KW_FILE:
					case HiveParser.KW_JAR:
					case HiveParser.KW_EXPLAIN:
					case HiveParser.KW_FORMATTED:
					case HiveParser.KW_DEPENDENCY:
					case HiveParser.KW_LOGICAL:
					case HiveParser.KW_SERDE:
					case HiveParser.KW_DEFERRED:
					case HiveParser.KW_SERDEPROPERTIES:
					case HiveParser.KW_DBPROPERTIES:
					case HiveParser.KW_LIMIT:
					case HiveParser.KW_OFFSET:
					case HiveParser.KW_UNSET:
					case HiveParser.KW_TBLPROPERTIES:
					case HiveParser.KW_IDXPROPERTIES:
					case HiveParser.KW_VALUE_TYPE:
					case HiveParser.KW_ELEM_TYPE:
					case HiveParser.KW_DEFINED:
					case HiveParser.KW_MAPJOIN:
					case HiveParser.KW_STREAMTABLE:
					case HiveParser.KW_CLUSTERSTATUS:
					case HiveParser.KW_UTC:
					case HiveParser.KW_UTCTIMESTAMP:
					case HiveParser.KW_LONG:
					case HiveParser.KW_PLUS:
					case HiveParser.KW_VIEW:
					case HiveParser.KW_VIEWS:
					case HiveParser.KW_DATABASES:
					case HiveParser.KW_MATERIALIZED:
					case HiveParser.KW_SCHEMA:
					case HiveParser.KW_SCHEMAS:
					case HiveParser.KW_SSL:
					case HiveParser.KW_UNDO:
					case HiveParser.KW_LOCK:
					case HiveParser.KW_LOCKS:
					case HiveParser.KW_UNLOCK:
					case HiveParser.KW_SHARED:
					case HiveParser.KW_EXCLUSIVE:
					case HiveParser.KW_UNSIGNED:
					case HiveParser.KW_WHILE:
					case HiveParser.KW_READ:
					case HiveParser.KW_PURGE:
					case HiveParser.KW_ANALYZE:
					case HiveParser.KW_BEFORE:
					case HiveParser.KW_CONTINUE:
					case HiveParser.KW_RECORDREADER:
					case HiveParser.KW_RECORDWRITER:
					case HiveParser.KW_SEMI:
					case HiveParser.KW_TOUCH:
					case HiveParser.KW_ARCHIVE:
					case HiveParser.KW_UNARCHIVE:
					case HiveParser.KW_COMPUTE:
					case HiveParser.KW_STATISTICS:
					case HiveParser.KW_USE:
					case HiveParser.KW_OPTION:
					case HiveParser.KW_CONCATENATE:
					case HiveParser.KW_SHOW_DATABASE:
					case HiveParser.KW_RESTRICT:
					case HiveParser.KW_CASCADE:
					case HiveParser.KW_SKEWED:
					case HiveParser.KW_DIRECTORIES:
					case HiveParser.KW_SETS:
					case HiveParser.KW_NOSCAN:
					case HiveParser.KW_ROLE:
					case HiveParser.KW_ROLES:
					case HiveParser.KW_URI:
					case HiveParser.KW_SERVER:
					case HiveParser.KW_ADMIN:
					case HiveParser.KW_OWNER:
					case HiveParser.KW_PRINCIPALS:
					case HiveParser.KW_COMPACT:
					case HiveParser.KW_COMPACTIONS:
					case HiveParser.KW_TRANSACTIONS:
					case HiveParser.KW_REWRITE:
					case HiveParser.KW_REOPTIMIZATION:
					case HiveParser.KW_RELOAD:
					case HiveParser.KW_YEAR:
					case HiveParser.KW_QUERY:
					case HiveParser.KW_QUARTER:
					case HiveParser.KW_MONTH:
					case HiveParser.KW_WEEK:
					case HiveParser.KW_DAY:
					case HiveParser.KW_DOW:
					case HiveParser.KW_HOUR:
					case HiveParser.KW_MINUTE:
					case HiveParser.KW_SECOND:
					case HiveParser.KW_TRANSACTION:
					case HiveParser.KW_WORK:
					case HiveParser.KW_WRITE:
					case HiveParser.KW_ISOLATION:
					case HiveParser.KW_LEVEL:
					case HiveParser.KW_SNAPSHOT:
					case HiveParser.KW_AUTOCOMMIT:
					case HiveParser.KW_CACHE:
					case HiveParser.KW_ENFORCED:
					case HiveParser.KW_VALIDATE:
					case HiveParser.KW_NOVALIDATE:
					case HiveParser.KW_RELY:
					case HiveParser.KW_NORELY:
					case HiveParser.KW_KEY:
					case HiveParser.KW_ABORT:
					case HiveParser.KW_MATCHED:
					case HiveParser.KW_REPL:
					case HiveParser.KW_DUMP:
					case HiveParser.KW_STATUS:
					case HiveParser.KW_VECTORIZATION:
					case HiveParser.KW_SUMMARY:
					case HiveParser.KW_OPERATOR:
					case HiveParser.KW_EXPRESSION:
					case HiveParser.KW_DETAIL:
					case HiveParser.KW_WAIT:
					case HiveParser.KW_RESOURCE:
					case HiveParser.KW_PLAN:
					case HiveParser.KW_QUERY_PARALLELISM:
					case HiveParser.KW_PLANS:
					case HiveParser.KW_ACTIVATE:
					case HiveParser.KW_DEFAULT:
					case HiveParser.KW_CHECK:
					case HiveParser.KW_POOL:
					case HiveParser.KW_MOVE:
					case HiveParser.KW_DO:
					case HiveParser.KW_ALLOC_FRACTION:
					case HiveParser.KW_SCHEDULING_POLICY:
					case HiveParser.KW_PATH:
					case HiveParser.KW_MAPPING:
					case HiveParser.KW_WORKLOAD:
					case HiveParser.KW_MANAGEMENT:
					case HiveParser.KW_ACTIVE:
					case HiveParser.KW_UNMANAGED:
					case HiveParser.KW_DELTA:
					case HiveParser.KW_CSV:
					case HiveParser.KW_JSON:
					case HiveParser.KW_BLOOMFILTER:
					case HiveParser.StringLiteral:
					case HiveParser.Identifier:
						this.state = 1834;
						this.showStmtIdentifier();
						break;
					case HiveParser.SEMICOLON:
						break;
					default:
						break;
				}
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 1837;
				this.match(HiveParser.KW_SHOW);
				this.state = 1838;
				this.match(HiveParser.KW_COLUMNS);
				this.state = 1839;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1840;
				this.tableName();
				this.state = 1843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
					this.state = 1841;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1842;
					this.identifier();
				}

				this.state = 1848;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_LIKE:
						this.state = 1845;
						this.match(HiveParser.KW_LIKE);
						this.state = 1846;
						this.showStmtIdentifier();
						break;
					case HiveParser.KW_ASC:
					case HiveParser.KW_DESC:
					case HiveParser.KW_NULLS:
					case HiveParser.KW_LAST:
					case HiveParser.KW_OVERWRITE:
					case HiveParser.KW_PARTITIONS:
					case HiveParser.KW_TABLES:
					case HiveParser.KW_COLUMNS:
					case HiveParser.KW_INDEX:
					case HiveParser.KW_INDEXES:
					case HiveParser.KW_REBUILD:
					case HiveParser.KW_FUNCTIONS:
					case HiveParser.KW_SHOW:
					case HiveParser.KW_MSCK:
					case HiveParser.KW_REPAIR:
					case HiveParser.KW_DIRECTORY:
					case HiveParser.KW_CLUSTER:
					case HiveParser.KW_DISTRIBUTE:
					case HiveParser.KW_SORT:
					case HiveParser.KW_LOAD:
					case HiveParser.KW_EXPORT:
					case HiveParser.KW_REPLICATION:
					case HiveParser.KW_METADATA:
					case HiveParser.KW_DATA:
					case HiveParser.KW_INPATH:
					case HiveParser.KW_CHANGE:
					case HiveParser.KW_FIRST:
					case HiveParser.KW_AFTER:
					case HiveParser.KW_RENAME:
					case HiveParser.KW_COMMENT:
					case HiveParser.KW_TINYINT:
					case HiveParser.KW_DATETIME:
					case HiveParser.KW_ZONE:
					case HiveParser.KW_STRING:
					case HiveParser.KW_STRUCT:
					case HiveParser.KW_UNIONTYPE:
					case HiveParser.KW_PARTITIONED:
					case HiveParser.KW_CLUSTERED:
					case HiveParser.KW_SORTED:
					case HiveParser.KW_BUCKETS:
					case HiveParser.KW_FORMAT:
					case HiveParser.KW_DELIMITED:
					case HiveParser.KW_FIELDS:
					case HiveParser.KW_TERMINATED:
					case HiveParser.KW_ESCAPED:
					case HiveParser.KW_COLLECTION:
					case HiveParser.KW_ITEMS:
					case HiveParser.KW_KEYS:
					case HiveParser.KW_KEY_TYPE:
					case HiveParser.KW_KILL:
					case HiveParser.KW_LINES:
					case HiveParser.KW_STORED:
					case HiveParser.KW_FILEFORMAT:
					case HiveParser.KW_INPUTFORMAT:
					case HiveParser.KW_OUTPUTFORMAT:
					case HiveParser.KW_INPUTDRIVER:
					case HiveParser.KW_OUTPUTDRIVER:
					case HiveParser.KW_ENABLE:
					case HiveParser.KW_DISABLE:
					case HiveParser.KW_LOCATION:
					case HiveParser.KW_BUCKET:
					case HiveParser.KW_ADD:
					case HiveParser.KW_REPLACE:
					case HiveParser.KW_TEMPORARY:
					case HiveParser.KW_FILE:
					case HiveParser.KW_JAR:
					case HiveParser.KW_EXPLAIN:
					case HiveParser.KW_FORMATTED:
					case HiveParser.KW_DEPENDENCY:
					case HiveParser.KW_LOGICAL:
					case HiveParser.KW_SERDE:
					case HiveParser.KW_DEFERRED:
					case HiveParser.KW_SERDEPROPERTIES:
					case HiveParser.KW_DBPROPERTIES:
					case HiveParser.KW_LIMIT:
					case HiveParser.KW_OFFSET:
					case HiveParser.KW_UNSET:
					case HiveParser.KW_TBLPROPERTIES:
					case HiveParser.KW_IDXPROPERTIES:
					case HiveParser.KW_VALUE_TYPE:
					case HiveParser.KW_ELEM_TYPE:
					case HiveParser.KW_DEFINED:
					case HiveParser.KW_MAPJOIN:
					case HiveParser.KW_STREAMTABLE:
					case HiveParser.KW_CLUSTERSTATUS:
					case HiveParser.KW_UTC:
					case HiveParser.KW_UTCTIMESTAMP:
					case HiveParser.KW_LONG:
					case HiveParser.KW_PLUS:
					case HiveParser.KW_VIEW:
					case HiveParser.KW_VIEWS:
					case HiveParser.KW_DATABASES:
					case HiveParser.KW_MATERIALIZED:
					case HiveParser.KW_SCHEMA:
					case HiveParser.KW_SCHEMAS:
					case HiveParser.KW_SSL:
					case HiveParser.KW_UNDO:
					case HiveParser.KW_LOCK:
					case HiveParser.KW_LOCKS:
					case HiveParser.KW_UNLOCK:
					case HiveParser.KW_SHARED:
					case HiveParser.KW_EXCLUSIVE:
					case HiveParser.KW_UNSIGNED:
					case HiveParser.KW_WHILE:
					case HiveParser.KW_READ:
					case HiveParser.KW_PURGE:
					case HiveParser.KW_ANALYZE:
					case HiveParser.KW_BEFORE:
					case HiveParser.KW_CONTINUE:
					case HiveParser.KW_RECORDREADER:
					case HiveParser.KW_RECORDWRITER:
					case HiveParser.KW_SEMI:
					case HiveParser.KW_TOUCH:
					case HiveParser.KW_ARCHIVE:
					case HiveParser.KW_UNARCHIVE:
					case HiveParser.KW_COMPUTE:
					case HiveParser.KW_STATISTICS:
					case HiveParser.KW_USE:
					case HiveParser.KW_OPTION:
					case HiveParser.KW_CONCATENATE:
					case HiveParser.KW_SHOW_DATABASE:
					case HiveParser.KW_RESTRICT:
					case HiveParser.KW_CASCADE:
					case HiveParser.KW_SKEWED:
					case HiveParser.KW_DIRECTORIES:
					case HiveParser.KW_SETS:
					case HiveParser.KW_NOSCAN:
					case HiveParser.KW_ROLE:
					case HiveParser.KW_ROLES:
					case HiveParser.KW_URI:
					case HiveParser.KW_SERVER:
					case HiveParser.KW_ADMIN:
					case HiveParser.KW_OWNER:
					case HiveParser.KW_PRINCIPALS:
					case HiveParser.KW_COMPACT:
					case HiveParser.KW_COMPACTIONS:
					case HiveParser.KW_TRANSACTIONS:
					case HiveParser.KW_REWRITE:
					case HiveParser.KW_REOPTIMIZATION:
					case HiveParser.KW_RELOAD:
					case HiveParser.KW_YEAR:
					case HiveParser.KW_QUERY:
					case HiveParser.KW_QUARTER:
					case HiveParser.KW_MONTH:
					case HiveParser.KW_WEEK:
					case HiveParser.KW_DAY:
					case HiveParser.KW_DOW:
					case HiveParser.KW_HOUR:
					case HiveParser.KW_MINUTE:
					case HiveParser.KW_SECOND:
					case HiveParser.KW_TRANSACTION:
					case HiveParser.KW_WORK:
					case HiveParser.KW_WRITE:
					case HiveParser.KW_ISOLATION:
					case HiveParser.KW_LEVEL:
					case HiveParser.KW_SNAPSHOT:
					case HiveParser.KW_AUTOCOMMIT:
					case HiveParser.KW_CACHE:
					case HiveParser.KW_ENFORCED:
					case HiveParser.KW_VALIDATE:
					case HiveParser.KW_NOVALIDATE:
					case HiveParser.KW_RELY:
					case HiveParser.KW_NORELY:
					case HiveParser.KW_KEY:
					case HiveParser.KW_ABORT:
					case HiveParser.KW_MATCHED:
					case HiveParser.KW_REPL:
					case HiveParser.KW_DUMP:
					case HiveParser.KW_STATUS:
					case HiveParser.KW_VECTORIZATION:
					case HiveParser.KW_SUMMARY:
					case HiveParser.KW_OPERATOR:
					case HiveParser.KW_EXPRESSION:
					case HiveParser.KW_DETAIL:
					case HiveParser.KW_WAIT:
					case HiveParser.KW_RESOURCE:
					case HiveParser.KW_PLAN:
					case HiveParser.KW_QUERY_PARALLELISM:
					case HiveParser.KW_PLANS:
					case HiveParser.KW_ACTIVATE:
					case HiveParser.KW_DEFAULT:
					case HiveParser.KW_CHECK:
					case HiveParser.KW_POOL:
					case HiveParser.KW_MOVE:
					case HiveParser.KW_DO:
					case HiveParser.KW_ALLOC_FRACTION:
					case HiveParser.KW_SCHEDULING_POLICY:
					case HiveParser.KW_PATH:
					case HiveParser.KW_MAPPING:
					case HiveParser.KW_WORKLOAD:
					case HiveParser.KW_MANAGEMENT:
					case HiveParser.KW_ACTIVE:
					case HiveParser.KW_UNMANAGED:
					case HiveParser.KW_DELTA:
					case HiveParser.KW_CSV:
					case HiveParser.KW_JSON:
					case HiveParser.KW_BLOOMFILTER:
					case HiveParser.StringLiteral:
					case HiveParser.Identifier:
						this.state = 1847;
						this.showStmtIdentifier();
						break;
					case HiveParser.SEMICOLON:
						break;
					default:
						break;
				}
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 1850;
				this.match(HiveParser.KW_SHOW);
				this.state = 1851;
				this.match(HiveParser.KW_FUNCTIONS);
				this.state = 1855;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_LIKE:
						this.state = 1852;
						this.match(HiveParser.KW_LIKE);
						this.state = 1853;
						this.showFunctionIdentifier();
						break;
					case HiveParser.KW_ASC:
					case HiveParser.KW_DESC:
					case HiveParser.KW_NULLS:
					case HiveParser.KW_LAST:
					case HiveParser.KW_OVERWRITE:
					case HiveParser.KW_PARTITIONS:
					case HiveParser.KW_TABLES:
					case HiveParser.KW_COLUMNS:
					case HiveParser.KW_INDEX:
					case HiveParser.KW_INDEXES:
					case HiveParser.KW_REBUILD:
					case HiveParser.KW_FUNCTIONS:
					case HiveParser.KW_SHOW:
					case HiveParser.KW_MSCK:
					case HiveParser.KW_REPAIR:
					case HiveParser.KW_DIRECTORY:
					case HiveParser.KW_CLUSTER:
					case HiveParser.KW_DISTRIBUTE:
					case HiveParser.KW_SORT:
					case HiveParser.KW_LOAD:
					case HiveParser.KW_EXPORT:
					case HiveParser.KW_REPLICATION:
					case HiveParser.KW_METADATA:
					case HiveParser.KW_DATA:
					case HiveParser.KW_INPATH:
					case HiveParser.KW_CHANGE:
					case HiveParser.KW_FIRST:
					case HiveParser.KW_AFTER:
					case HiveParser.KW_RENAME:
					case HiveParser.KW_COMMENT:
					case HiveParser.KW_TINYINT:
					case HiveParser.KW_DATETIME:
					case HiveParser.KW_ZONE:
					case HiveParser.KW_STRING:
					case HiveParser.KW_STRUCT:
					case HiveParser.KW_UNIONTYPE:
					case HiveParser.KW_PARTITIONED:
					case HiveParser.KW_CLUSTERED:
					case HiveParser.KW_SORTED:
					case HiveParser.KW_BUCKETS:
					case HiveParser.KW_FORMAT:
					case HiveParser.KW_DELIMITED:
					case HiveParser.KW_FIELDS:
					case HiveParser.KW_TERMINATED:
					case HiveParser.KW_ESCAPED:
					case HiveParser.KW_COLLECTION:
					case HiveParser.KW_ITEMS:
					case HiveParser.KW_KEYS:
					case HiveParser.KW_KEY_TYPE:
					case HiveParser.KW_KILL:
					case HiveParser.KW_LINES:
					case HiveParser.KW_STORED:
					case HiveParser.KW_FILEFORMAT:
					case HiveParser.KW_INPUTFORMAT:
					case HiveParser.KW_OUTPUTFORMAT:
					case HiveParser.KW_INPUTDRIVER:
					case HiveParser.KW_OUTPUTDRIVER:
					case HiveParser.KW_ENABLE:
					case HiveParser.KW_DISABLE:
					case HiveParser.KW_LOCATION:
					case HiveParser.KW_BUCKET:
					case HiveParser.KW_ADD:
					case HiveParser.KW_REPLACE:
					case HiveParser.KW_TEMPORARY:
					case HiveParser.KW_FILE:
					case HiveParser.KW_JAR:
					case HiveParser.KW_EXPLAIN:
					case HiveParser.KW_FORMATTED:
					case HiveParser.KW_DEPENDENCY:
					case HiveParser.KW_LOGICAL:
					case HiveParser.KW_SERDE:
					case HiveParser.KW_DEFERRED:
					case HiveParser.KW_SERDEPROPERTIES:
					case HiveParser.KW_DBPROPERTIES:
					case HiveParser.KW_LIMIT:
					case HiveParser.KW_OFFSET:
					case HiveParser.KW_UNSET:
					case HiveParser.KW_TBLPROPERTIES:
					case HiveParser.KW_IDXPROPERTIES:
					case HiveParser.KW_VALUE_TYPE:
					case HiveParser.KW_ELEM_TYPE:
					case HiveParser.KW_DEFINED:
					case HiveParser.KW_MAPJOIN:
					case HiveParser.KW_STREAMTABLE:
					case HiveParser.KW_CLUSTERSTATUS:
					case HiveParser.KW_UTC:
					case HiveParser.KW_UTCTIMESTAMP:
					case HiveParser.KW_LONG:
					case HiveParser.KW_PLUS:
					case HiveParser.KW_VIEW:
					case HiveParser.KW_VIEWS:
					case HiveParser.KW_DATABASES:
					case HiveParser.KW_MATERIALIZED:
					case HiveParser.KW_SCHEMA:
					case HiveParser.KW_SCHEMAS:
					case HiveParser.KW_SSL:
					case HiveParser.KW_UNDO:
					case HiveParser.KW_LOCK:
					case HiveParser.KW_LOCKS:
					case HiveParser.KW_UNLOCK:
					case HiveParser.KW_SHARED:
					case HiveParser.KW_EXCLUSIVE:
					case HiveParser.KW_UNSIGNED:
					case HiveParser.KW_WHILE:
					case HiveParser.KW_READ:
					case HiveParser.KW_PURGE:
					case HiveParser.KW_ANALYZE:
					case HiveParser.KW_BEFORE:
					case HiveParser.KW_CONTINUE:
					case HiveParser.KW_RECORDREADER:
					case HiveParser.KW_RECORDWRITER:
					case HiveParser.KW_SEMI:
					case HiveParser.KW_TOUCH:
					case HiveParser.KW_ARCHIVE:
					case HiveParser.KW_UNARCHIVE:
					case HiveParser.KW_COMPUTE:
					case HiveParser.KW_STATISTICS:
					case HiveParser.KW_USE:
					case HiveParser.KW_OPTION:
					case HiveParser.KW_CONCATENATE:
					case HiveParser.KW_SHOW_DATABASE:
					case HiveParser.KW_RESTRICT:
					case HiveParser.KW_CASCADE:
					case HiveParser.KW_SKEWED:
					case HiveParser.KW_DIRECTORIES:
					case HiveParser.KW_SETS:
					case HiveParser.KW_NOSCAN:
					case HiveParser.KW_ROLE:
					case HiveParser.KW_ROLES:
					case HiveParser.KW_URI:
					case HiveParser.KW_SERVER:
					case HiveParser.KW_ADMIN:
					case HiveParser.KW_OWNER:
					case HiveParser.KW_PRINCIPALS:
					case HiveParser.KW_COMPACT:
					case HiveParser.KW_COMPACTIONS:
					case HiveParser.KW_TRANSACTIONS:
					case HiveParser.KW_REWRITE:
					case HiveParser.KW_REOPTIMIZATION:
					case HiveParser.KW_RELOAD:
					case HiveParser.KW_YEAR:
					case HiveParser.KW_QUERY:
					case HiveParser.KW_QUARTER:
					case HiveParser.KW_MONTH:
					case HiveParser.KW_WEEK:
					case HiveParser.KW_DAY:
					case HiveParser.KW_DOW:
					case HiveParser.KW_HOUR:
					case HiveParser.KW_MINUTE:
					case HiveParser.KW_SECOND:
					case HiveParser.KW_TRANSACTION:
					case HiveParser.KW_WORK:
					case HiveParser.KW_WRITE:
					case HiveParser.KW_ISOLATION:
					case HiveParser.KW_LEVEL:
					case HiveParser.KW_SNAPSHOT:
					case HiveParser.KW_AUTOCOMMIT:
					case HiveParser.KW_CACHE:
					case HiveParser.KW_ENFORCED:
					case HiveParser.KW_VALIDATE:
					case HiveParser.KW_NOVALIDATE:
					case HiveParser.KW_RELY:
					case HiveParser.KW_NORELY:
					case HiveParser.KW_KEY:
					case HiveParser.KW_ABORT:
					case HiveParser.KW_MATCHED:
					case HiveParser.KW_REPL:
					case HiveParser.KW_DUMP:
					case HiveParser.KW_STATUS:
					case HiveParser.KW_VECTORIZATION:
					case HiveParser.KW_SUMMARY:
					case HiveParser.KW_OPERATOR:
					case HiveParser.KW_EXPRESSION:
					case HiveParser.KW_DETAIL:
					case HiveParser.KW_WAIT:
					case HiveParser.KW_RESOURCE:
					case HiveParser.KW_PLAN:
					case HiveParser.KW_QUERY_PARALLELISM:
					case HiveParser.KW_PLANS:
					case HiveParser.KW_ACTIVATE:
					case HiveParser.KW_DEFAULT:
					case HiveParser.KW_CHECK:
					case HiveParser.KW_POOL:
					case HiveParser.KW_MOVE:
					case HiveParser.KW_DO:
					case HiveParser.KW_ALLOC_FRACTION:
					case HiveParser.KW_SCHEDULING_POLICY:
					case HiveParser.KW_PATH:
					case HiveParser.KW_MAPPING:
					case HiveParser.KW_WORKLOAD:
					case HiveParser.KW_MANAGEMENT:
					case HiveParser.KW_ACTIVE:
					case HiveParser.KW_UNMANAGED:
					case HiveParser.KW_DELTA:
					case HiveParser.KW_CSV:
					case HiveParser.KW_JSON:
					case HiveParser.KW_BLOOMFILTER:
					case HiveParser.StringLiteral:
					case HiveParser.Identifier:
						this.state = 1854;
						this.showFunctionIdentifier();
						break;
					case HiveParser.SEMICOLON:
						break;
					default:
						break;
				}
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 1857;
				this.match(HiveParser.KW_SHOW);
				this.state = 1858;
				this.match(HiveParser.KW_PARTITIONS);
				this.state = 1859;
				this.tableName();
				this.state = 1861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					this.state = 1860;
					this.partitionSpec();
				}

				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 1863;
				this.match(HiveParser.KW_SHOW);
				this.state = 1864;
				this.match(HiveParser.KW_CREATE);
				this.state = 1869;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_DATABASE:
					case HiveParser.KW_SCHEMA:
						this.state = 1865;
						_la = this._input.LA(1);
						if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 1866;
						this.identifier();
						break;
					case HiveParser.KW_TABLE:
						this.state = 1867;
						this.match(HiveParser.KW_TABLE);
						this.state = 1868;
						this.tableName();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 1871;
				this.match(HiveParser.KW_SHOW);
				this.state = 1872;
				this.match(HiveParser.KW_TABLE);
				this.state = 1873;
				this.match(HiveParser.KW_EXTENDED);
				this.state = 1876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
					this.state = 1874;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1875;
					this.identifier();
				}

				this.state = 1878;
				this.match(HiveParser.KW_LIKE);
				this.state = 1879;
				this.showStmtIdentifier();
				this.state = 1881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					this.state = 1880;
					this.partitionSpec();
				}

				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 1883;
				this.match(HiveParser.KW_SHOW);
				this.state = 1884;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1885;
				this.tableName();
				this.state = 1889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.LPAREN) {
					this.state = 1886;
					this.match(HiveParser.LPAREN);
					this.state = 1887;
					this.match(HiveParser.StringLiteral);
					this.state = 1888;
					this.match(HiveParser.RPAREN);
				}

				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 1891;
				this.match(HiveParser.KW_SHOW);
				this.state = 1892;
				this.match(HiveParser.KW_LOCKS);
				this.state = 1904;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 147, this._ctx);
				switch (la_) {
					case 1:
						this.state = 1893;
						_la = this._input.LA(1);
						if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 1894;
						this.identifier();
						this.state = 1896;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_EXTENDED) {
							this.state = 1895;
							this.match(HiveParser.KW_EXTENDED);
						}

						break;

					case 2:
						this.state = 1899;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (
							((_la & ~0x1f) == 0 &&
								((1 << _la) &
									((1 << HiveParser.KW_ASC) |
										(1 << HiveParser.KW_DESC) |
										(1 << HiveParser.KW_NULLS) |
										(1 << HiveParser.KW_LAST) |
										(1 << HiveParser.KW_OVERWRITE))) !==
									0) ||
							(((_la - 36) & ~0x1f) == 0 &&
								((1 << (_la - 36)) &
									((1 << (HiveParser.KW_PARTITIONS - 36)) |
										(1 << (HiveParser.KW_TABLES - 36)) |
										(1 << (HiveParser.KW_COLUMNS - 36)) |
										(1 << (HiveParser.KW_INDEX - 36)) |
										(1 << (HiveParser.KW_INDEXES - 36)) |
										(1 << (HiveParser.KW_REBUILD - 36)) |
										(1 << (HiveParser.KW_FUNCTIONS - 36)) |
										(1 << (HiveParser.KW_SHOW - 36)) |
										(1 << (HiveParser.KW_MSCK - 36)) |
										(1 << (HiveParser.KW_REPAIR - 36)) |
										(1 << (HiveParser.KW_DIRECTORY - 36)) |
										(1 << (HiveParser.KW_CLUSTER - 36)) |
										(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
										(1 << (HiveParser.KW_SORT - 36)) |
										(1 << (HiveParser.KW_LOAD - 36)) |
										(1 << (HiveParser.KW_EXPORT - 36)) |
										(1 << (HiveParser.KW_REPLICATION - 36)) |
										(1 << (HiveParser.KW_METADATA - 36)) |
										(1 << (HiveParser.KW_DATA - 36)) |
										(1 << (HiveParser.KW_INPATH - 36)))) !==
									0) ||
							(((_la - 68) & ~0x1f) == 0 &&
								((1 << (_la - 68)) &
									((1 << (HiveParser.KW_CHANGE - 68)) |
										(1 << (HiveParser.KW_FIRST - 68)) |
										(1 << (HiveParser.KW_AFTER - 68)) |
										(1 << (HiveParser.KW_RENAME - 68)) |
										(1 << (HiveParser.KW_COMMENT - 68)) |
										(1 << (HiveParser.KW_TINYINT - 68)) |
										(1 << (HiveParser.KW_DATETIME - 68)) |
										(1 << (HiveParser.KW_ZONE - 68)) |
										(1 << (HiveParser.KW_STRING - 68)) |
										(1 << (HiveParser.KW_STRUCT - 68)) |
										(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
									0) ||
							(((_la - 101) & ~0x1f) == 0 &&
								((1 << (_la - 101)) &
									((1 << (HiveParser.KW_PARTITIONED - 101)) |
										(1 << (HiveParser.KW_CLUSTERED - 101)) |
										(1 << (HiveParser.KW_SORTED - 101)) |
										(1 << (HiveParser.KW_BUCKETS - 101)) |
										(1 << (HiveParser.KW_FORMAT - 101)) |
										(1 << (HiveParser.KW_DELIMITED - 101)) |
										(1 << (HiveParser.KW_FIELDS - 101)) |
										(1 << (HiveParser.KW_TERMINATED - 101)) |
										(1 << (HiveParser.KW_ESCAPED - 101)) |
										(1 << (HiveParser.KW_COLLECTION - 101)) |
										(1 << (HiveParser.KW_ITEMS - 101)) |
										(1 << (HiveParser.KW_KEYS - 101)) |
										(1 << (HiveParser.KW_KEY_TYPE - 101)) |
										(1 << (HiveParser.KW_KILL - 101)) |
										(1 << (HiveParser.KW_LINES - 101)) |
										(1 << (HiveParser.KW_STORED - 101)) |
										(1 << (HiveParser.KW_FILEFORMAT - 101)) |
										(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
										(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
										(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
										(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
										(1 << (HiveParser.KW_ENABLE - 101)) |
										(1 << (HiveParser.KW_DISABLE - 101)) |
										(1 << (HiveParser.KW_LOCATION - 101)) |
										(1 << (HiveParser.KW_BUCKET - 101)))) !==
									0) ||
							(((_la - 134) & ~0x1f) == 0 &&
								((1 << (_la - 134)) &
									((1 << (HiveParser.KW_ADD - 134)) |
										(1 << (HiveParser.KW_REPLACE - 134)) |
										(1 << (HiveParser.KW_TEMPORARY - 134)) |
										(1 << (HiveParser.KW_FILE - 134)) |
										(1 << (HiveParser.KW_JAR - 134)) |
										(1 << (HiveParser.KW_EXPLAIN - 134)) |
										(1 << (HiveParser.KW_FORMATTED - 134)) |
										(1 << (HiveParser.KW_DEPENDENCY - 134)) |
										(1 << (HiveParser.KW_LOGICAL - 134)) |
										(1 << (HiveParser.KW_SERDE - 134)) |
										(1 << (HiveParser.KW_DEFERRED - 134)) |
										(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
										(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
										(1 << (HiveParser.KW_LIMIT - 134)) |
										(1 << (HiveParser.KW_OFFSET - 134)) |
										(1 << (HiveParser.KW_UNSET - 134)) |
										(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
										(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
										(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
										(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
										(1 << (HiveParser.KW_DEFINED - 134)))) !==
									0) ||
							(((_la - 167) & ~0x1f) == 0 &&
								((1 << (_la - 167)) &
									((1 << (HiveParser.KW_MAPJOIN - 167)) |
										(1 << (HiveParser.KW_STREAMTABLE - 167)) |
										(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
										(1 << (HiveParser.KW_UTC - 167)) |
										(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
										(1 << (HiveParser.KW_LONG - 167)) |
										(1 << (HiveParser.KW_PLUS - 167)) |
										(1 << (HiveParser.KW_VIEW - 167)) |
										(1 << (HiveParser.KW_VIEWS - 167)) |
										(1 << (HiveParser.KW_DATABASES - 167)) |
										(1 << (HiveParser.KW_MATERIALIZED - 167)) |
										(1 << (HiveParser.KW_SCHEMA - 167)) |
										(1 << (HiveParser.KW_SCHEMAS - 167)) |
										(1 << (HiveParser.KW_SSL - 167)) |
										(1 << (HiveParser.KW_UNDO - 167)) |
										(1 << (HiveParser.KW_LOCK - 167)) |
										(1 << (HiveParser.KW_LOCKS - 167)) |
										(1 << (HiveParser.KW_UNLOCK - 167)) |
										(1 << (HiveParser.KW_SHARED - 167)) |
										(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
										(1 << (HiveParser.KW_UNSIGNED - 167)) |
										(1 << (HiveParser.KW_WHILE - 167)) |
										(1 << (HiveParser.KW_READ - 167)))) !==
									0) ||
							(((_la - 200) & ~0x1f) == 0 &&
								((1 << (_la - 200)) &
									((1 << (HiveParser.KW_PURGE - 200)) |
										(1 << (HiveParser.KW_ANALYZE - 200)) |
										(1 << (HiveParser.KW_BEFORE - 200)) |
										(1 << (HiveParser.KW_CONTINUE - 200)) |
										(1 << (HiveParser.KW_RECORDREADER - 200)) |
										(1 << (HiveParser.KW_RECORDWRITER - 200)) |
										(1 << (HiveParser.KW_SEMI - 200)) |
										(1 << (HiveParser.KW_TOUCH - 200)) |
										(1 << (HiveParser.KW_ARCHIVE - 200)) |
										(1 << (HiveParser.KW_UNARCHIVE - 200)) |
										(1 << (HiveParser.KW_COMPUTE - 200)) |
										(1 << (HiveParser.KW_STATISTICS - 200)) |
										(1 << (HiveParser.KW_USE - 200)) |
										(1 << (HiveParser.KW_OPTION - 200)) |
										(1 << (HiveParser.KW_CONCATENATE - 200)) |
										(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
										(1 << (HiveParser.KW_RESTRICT - 200)) |
										(1 << (HiveParser.KW_CASCADE - 200)) |
										(1 << (HiveParser.KW_SKEWED - 200)) |
										(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
									0) ||
							(((_la - 244) & ~0x1f) == 0 &&
								((1 << (_la - 244)) &
									((1 << (HiveParser.KW_SETS - 244)) |
										(1 << (HiveParser.KW_NOSCAN - 244)) |
										(1 << (HiveParser.KW_ROLE - 244)) |
										(1 << (HiveParser.KW_ROLES - 244)) |
										(1 << (HiveParser.KW_URI - 244)) |
										(1 << (HiveParser.KW_SERVER - 244)) |
										(1 << (HiveParser.KW_ADMIN - 244)) |
										(1 << (HiveParser.KW_OWNER - 244)) |
										(1 << (HiveParser.KW_PRINCIPALS - 244)) |
										(1 << (HiveParser.KW_COMPACT - 244)) |
										(1 << (HiveParser.KW_COMPACTIONS - 244)) |
										(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
										(1 << (HiveParser.KW_REWRITE - 244)) |
										(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
										(1 << (HiveParser.KW_RELOAD - 244)) |
										(1 << (HiveParser.KW_YEAR - 244)) |
										(1 << (HiveParser.KW_QUERY - 244)) |
										(1 << (HiveParser.KW_QUARTER - 244)) |
										(1 << (HiveParser.KW_MONTH - 244)) |
										(1 << (HiveParser.KW_WEEK - 244)) |
										(1 << (HiveParser.KW_DAY - 244)) |
										(1 << (HiveParser.KW_DOW - 244)) |
										(1 << (HiveParser.KW_HOUR - 244)) |
										(1 << (HiveParser.KW_MINUTE - 244)) |
										(1 << (HiveParser.KW_SECOND - 244)))) !==
									0) ||
							(((_la - 277) & ~0x1f) == 0 &&
								((1 << (_la - 277)) &
									((1 << (HiveParser.KW_TRANSACTION - 277)) |
										(1 << (HiveParser.KW_WORK - 277)) |
										(1 << (HiveParser.KW_WRITE - 277)) |
										(1 << (HiveParser.KW_ISOLATION - 277)) |
										(1 << (HiveParser.KW_LEVEL - 277)) |
										(1 << (HiveParser.KW_SNAPSHOT - 277)) |
										(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
										(1 << (HiveParser.KW_CACHE - 277)) |
										(1 << (HiveParser.KW_ENFORCED - 277)) |
										(1 << (HiveParser.KW_VALIDATE - 277)) |
										(1 << (HiveParser.KW_NOVALIDATE - 277)) |
										(1 << (HiveParser.KW_RELY - 277)) |
										(1 << (HiveParser.KW_NORELY - 277)) |
										(1 << (HiveParser.KW_KEY - 277)) |
										(1 << (HiveParser.KW_ABORT - 277)) |
										(1 << (HiveParser.KW_MATCHED - 277)) |
										(1 << (HiveParser.KW_REPL - 277)) |
										(1 << (HiveParser.KW_DUMP - 277)) |
										(1 << (HiveParser.KW_STATUS - 277)) |
										(1 << (HiveParser.KW_VECTORIZATION - 277)) |
										(1 << (HiveParser.KW_SUMMARY - 277)))) !==
									0) ||
							(((_la - 309) & ~0x1f) == 0 &&
								((1 << (_la - 309)) &
									((1 << (HiveParser.KW_OPERATOR - 309)) |
										(1 << (HiveParser.KW_EXPRESSION - 309)) |
										(1 << (HiveParser.KW_DETAIL - 309)) |
										(1 << (HiveParser.KW_WAIT - 309)) |
										(1 << (HiveParser.KW_RESOURCE - 309)) |
										(1 << (HiveParser.KW_PLAN - 309)) |
										(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
										(1 << (HiveParser.KW_PLANS - 309)) |
										(1 << (HiveParser.KW_ACTIVATE - 309)) |
										(1 << (HiveParser.KW_DEFAULT - 309)) |
										(1 << (HiveParser.KW_CHECK - 309)) |
										(1 << (HiveParser.KW_POOL - 309)) |
										(1 << (HiveParser.KW_MOVE - 309)) |
										(1 << (HiveParser.KW_DO - 309)) |
										(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
										(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
										(1 << (HiveParser.KW_PATH - 309)) |
										(1 << (HiveParser.KW_MAPPING - 309)) |
										(1 << (HiveParser.KW_WORKLOAD - 309)) |
										(1 << (HiveParser.KW_MANAGEMENT - 309)) |
										(1 << (HiveParser.KW_ACTIVE - 309)) |
										(1 << (HiveParser.KW_UNMANAGED - 309)) |
										(1 << (HiveParser.KW_DELTA - 309)) |
										(1 << (HiveParser.KW_CSV - 309)))) !==
									0) ||
							_la === HiveParser.KW_JSON ||
							_la === HiveParser.KW_BLOOMFILTER ||
							_la === HiveParser.Identifier
						) {
							this.state = 1898;
							this.partTypeExpr();
						}

						this.state = 1902;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_EXTENDED) {
							this.state = 1901;
							this.match(HiveParser.KW_EXTENDED);
						}

						break;
				}
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 1906;
				this.match(HiveParser.KW_SHOW);
				this.state = 1907;
				this.match(HiveParser.KW_COMPACTIONS);
				break;

			case 13:
				this.enterOuterAlt(localctx, 13);
				this.state = 1908;
				this.match(HiveParser.KW_SHOW);
				this.state = 1909;
				this.match(HiveParser.KW_TRANSACTIONS);
				break;

			case 14:
				this.enterOuterAlt(localctx, 14);
				this.state = 1910;
				this.match(HiveParser.KW_SHOW);
				this.state = 1911;
				this.match(HiveParser.KW_CONF);
				this.state = 1912;
				this.match(HiveParser.StringLiteral);
				break;

			case 15:
				this.enterOuterAlt(localctx, 15);
				this.state = 1913;
				this.match(HiveParser.KW_SHOW);
				this.state = 1914;
				this.match(HiveParser.KW_RESOURCE);
				this.state = 1918;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_PLAN:
						this.state = 1915;
						this.match(HiveParser.KW_PLAN);
						this.state = 1916;
						this.identifier();
						break;
					case HiveParser.KW_PLANS:
						this.state = 1917;
						this.match(HiveParser.KW_PLANS);
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LockStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_lockStatement;
	return this;
}

LockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockStatementContext.prototype.constructor = LockStatementContext;

LockStatementContext.prototype.KW_LOCK = function () {
	return this.getToken(HiveParser.KW_LOCK, 0);
};

LockStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

LockStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

LockStatementContext.prototype.lockMode = function () {
	return this.getTypedRuleContext(LockModeContext, 0);
};

LockStatementContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

LockStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitLockStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.LockStatementContext = LockStatementContext;

HiveParser.prototype.lockStatement = function () {
	var localctx = new LockStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 208, HiveParser.RULE_lockStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1922;
		this.match(HiveParser.KW_LOCK);
		this.state = 1923;
		this.match(HiveParser.KW_TABLE);
		this.state = 1924;
		this.tableName();
		this.state = 1926;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITION) {
			this.state = 1925;
			this.partitionSpec();
		}

		this.state = 1928;
		this.lockMode();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LockDatabaseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_lockDatabase;
	return this;
}

LockDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockDatabaseContext.prototype.constructor = LockDatabaseContext;

LockDatabaseContext.prototype.KW_LOCK = function () {
	return this.getToken(HiveParser.KW_LOCK, 0);
};

LockDatabaseContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

LockDatabaseContext.prototype.lockMode = function () {
	return this.getTypedRuleContext(LockModeContext, 0);
};

LockDatabaseContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

LockDatabaseContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

LockDatabaseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitLockDatabase(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.LockDatabaseContext = LockDatabaseContext;

HiveParser.prototype.lockDatabase = function () {
	var localctx = new LockDatabaseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 210, HiveParser.RULE_lockDatabase);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1930;
		this.match(HiveParser.KW_LOCK);
		this.state = 1931;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1932;
		this.identifier();
		this.state = 1933;
		this.lockMode();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LockModeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_lockMode;
	return this;
}

LockModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockModeContext.prototype.constructor = LockModeContext;

LockModeContext.prototype.KW_SHARED = function () {
	return this.getToken(HiveParser.KW_SHARED, 0);
};

LockModeContext.prototype.KW_EXCLUSIVE = function () {
	return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
};

LockModeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitLockMode(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.LockModeContext = LockModeContext;

HiveParser.prototype.lockMode = function () {
	var localctx = new LockModeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 212, HiveParser.RULE_lockMode);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1935;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_SHARED || _la === HiveParser.KW_EXCLUSIVE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UnlockStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_unlockStatement;
	return this;
}

UnlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnlockStatementContext.prototype.constructor = UnlockStatementContext;

UnlockStatementContext.prototype.KW_UNLOCK = function () {
	return this.getToken(HiveParser.KW_UNLOCK, 0);
};

UnlockStatementContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

UnlockStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

UnlockStatementContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

UnlockStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUnlockStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UnlockStatementContext = UnlockStatementContext;

HiveParser.prototype.unlockStatement = function () {
	var localctx = new UnlockStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 214, HiveParser.RULE_unlockStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1937;
		this.match(HiveParser.KW_UNLOCK);
		this.state = 1938;
		this.match(HiveParser.KW_TABLE);
		this.state = 1939;
		this.tableName();
		this.state = 1941;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITION) {
			this.state = 1940;
			this.partitionSpec();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UnlockDatabaseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_unlockDatabase;
	return this;
}

UnlockDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnlockDatabaseContext.prototype.constructor = UnlockDatabaseContext;

UnlockDatabaseContext.prototype.KW_UNLOCK = function () {
	return this.getToken(HiveParser.KW_UNLOCK, 0);
};

UnlockDatabaseContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

UnlockDatabaseContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

UnlockDatabaseContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

UnlockDatabaseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUnlockDatabase(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UnlockDatabaseContext = UnlockDatabaseContext;

HiveParser.prototype.unlockDatabase = function () {
	var localctx = new UnlockDatabaseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 216, HiveParser.RULE_unlockDatabase);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1943;
		this.match(HiveParser.KW_UNLOCK);
		this.state = 1944;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1945;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateRoleStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createRoleStatement;
	return this;
}

CreateRoleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRoleStatementContext.prototype.constructor = CreateRoleStatementContext;

CreateRoleStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateRoleStatementContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

CreateRoleStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreateRoleStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateRoleStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateRoleStatementContext = CreateRoleStatementContext;

HiveParser.prototype.createRoleStatement = function () {
	var localctx = new CreateRoleStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 218, HiveParser.RULE_createRoleStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1947;
		this.match(HiveParser.KW_CREATE);
		this.state = 1948;
		this.match(HiveParser.KW_ROLE);
		this.state = 1949;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropRoleStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropRoleStatement;
	return this;
}

DropRoleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropRoleStatementContext.prototype.constructor = DropRoleStatementContext;

DropRoleStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropRoleStatementContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

DropRoleStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DropRoleStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropRoleStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropRoleStatementContext = DropRoleStatementContext;

HiveParser.prototype.dropRoleStatement = function () {
	var localctx = new DropRoleStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 220, HiveParser.RULE_dropRoleStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1951;
		this.match(HiveParser.KW_DROP);
		this.state = 1952;
		this.match(HiveParser.KW_ROLE);
		this.state = 1953;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GrantPrivilegesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_grantPrivileges;
	return this;
}

GrantPrivilegesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantPrivilegesContext.prototype.constructor = GrantPrivilegesContext;

GrantPrivilegesContext.prototype.KW_GRANT = function () {
	return this.getToken(HiveParser.KW_GRANT, 0);
};

GrantPrivilegesContext.prototype.privilegeList = function () {
	return this.getTypedRuleContext(PrivilegeListContext, 0);
};

GrantPrivilegesContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

GrantPrivilegesContext.prototype.principalSpecification = function () {
	return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
};

GrantPrivilegesContext.prototype.privilegeObject = function () {
	return this.getTypedRuleContext(PrivilegeObjectContext, 0);
};

GrantPrivilegesContext.prototype.withGrantOption = function () {
	return this.getTypedRuleContext(WithGrantOptionContext, 0);
};

GrantPrivilegesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGrantPrivileges(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GrantPrivilegesContext = GrantPrivilegesContext;

HiveParser.prototype.grantPrivileges = function () {
	var localctx = new GrantPrivilegesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 222, HiveParser.RULE_grantPrivileges);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1955;
		this.match(HiveParser.KW_GRANT);
		this.state = 1956;
		this.privilegeList();
		this.state = 1958;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ON) {
			this.state = 1957;
			this.privilegeObject();
		}

		this.state = 1960;
		this.match(HiveParser.KW_TO);
		this.state = 1961;
		this.principalSpecification();
		this.state = 1963;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1962;
			this.withGrantOption();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RevokePrivilegesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_revokePrivileges;
	return this;
}

RevokePrivilegesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokePrivilegesContext.prototype.constructor = RevokePrivilegesContext;

RevokePrivilegesContext.prototype.KW_REVOKE = function () {
	return this.getToken(HiveParser.KW_REVOKE, 0);
};

RevokePrivilegesContext.prototype.privilegeList = function () {
	return this.getTypedRuleContext(PrivilegeListContext, 0);
};

RevokePrivilegesContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

RevokePrivilegesContext.prototype.principalSpecification = function () {
	return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
};

RevokePrivilegesContext.prototype.grantOptionFor = function () {
	return this.getTypedRuleContext(GrantOptionForContext, 0);
};

RevokePrivilegesContext.prototype.privilegeObject = function () {
	return this.getTypedRuleContext(PrivilegeObjectContext, 0);
};

RevokePrivilegesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRevokePrivileges(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RevokePrivilegesContext = RevokePrivilegesContext;

HiveParser.prototype.revokePrivileges = function () {
	var localctx = new RevokePrivilegesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 224, HiveParser.RULE_revokePrivileges);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1965;
		this.match(HiveParser.KW_REVOKE);
		this.state = 1967;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_GRANT) {
			this.state = 1966;
			this.grantOptionFor();
		}

		this.state = 1969;
		this.privilegeList();
		this.state = 1971;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ON) {
			this.state = 1970;
			this.privilegeObject();
		}

		this.state = 1973;
		this.match(HiveParser.KW_FROM);
		this.state = 1974;
		this.principalSpecification();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GrantRoleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_grantRole;
	return this;
}

GrantRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantRoleContext.prototype.constructor = GrantRoleContext;

GrantRoleContext.prototype.KW_GRANT = function () {
	return this.getToken(HiveParser.KW_GRANT, 0);
};

GrantRoleContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

GrantRoleContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

GrantRoleContext.prototype.principalSpecification = function () {
	return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
};

GrantRoleContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

GrantRoleContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

GrantRoleContext.prototype.withAdminOption = function () {
	return this.getTypedRuleContext(WithAdminOptionContext, 0);
};

GrantRoleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGrantRole(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GrantRoleContext = GrantRoleContext;

HiveParser.prototype.grantRole = function () {
	var localctx = new GrantRoleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 226, HiveParser.RULE_grantRole);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1976;
		this.match(HiveParser.KW_GRANT);
		this.state = 1978;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
		if (la_ === 1) {
			this.state = 1977;
			this.match(HiveParser.KW_ROLE);
		}
		this.state = 1980;
		this.identifier();
		this.state = 1985;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 1981;
			this.match(HiveParser.COMMA);
			this.state = 1982;
			this.identifier();
			this.state = 1987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 1988;
		this.match(HiveParser.KW_TO);
		this.state = 1989;
		this.principalSpecification();
		this.state = 1991;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 1990;
			this.withAdminOption();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RevokeRoleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_revokeRole;
	return this;
}

RevokeRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokeRoleContext.prototype.constructor = RevokeRoleContext;

RevokeRoleContext.prototype.KW_REVOKE = function () {
	return this.getToken(HiveParser.KW_REVOKE, 0);
};

RevokeRoleContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

RevokeRoleContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

RevokeRoleContext.prototype.principalSpecification = function () {
	return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
};

RevokeRoleContext.prototype.adminOptionFor = function () {
	return this.getTypedRuleContext(AdminOptionForContext, 0);
};

RevokeRoleContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

RevokeRoleContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

RevokeRoleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRevokeRole(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RevokeRoleContext = RevokeRoleContext;

HiveParser.prototype.revokeRole = function () {
	var localctx = new RevokeRoleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 228, HiveParser.RULE_revokeRole);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1993;
		this.match(HiveParser.KW_REVOKE);
		this.state = 1995;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);
		if (la_ === 1) {
			this.state = 1994;
			this.adminOptionFor();
		}
		this.state = 1998;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 160, this._ctx);
		if (la_ === 1) {
			this.state = 1997;
			this.match(HiveParser.KW_ROLE);
		}
		this.state = 2000;
		this.identifier();
		this.state = 2005;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2001;
			this.match(HiveParser.COMMA);
			this.state = 2002;
			this.identifier();
			this.state = 2007;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 2008;
		this.match(HiveParser.KW_FROM);
		this.state = 2009;
		this.principalSpecification();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowRoleGrantsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showRoleGrants;
	return this;
}

ShowRoleGrantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowRoleGrantsContext.prototype.constructor = ShowRoleGrantsContext;

ShowRoleGrantsContext.prototype.KW_SHOW = function () {
	return this.getToken(HiveParser.KW_SHOW, 0);
};

ShowRoleGrantsContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

ShowRoleGrantsContext.prototype.KW_GRANT = function () {
	return this.getToken(HiveParser.KW_GRANT, 0);
};

ShowRoleGrantsContext.prototype.principalName = function () {
	return this.getTypedRuleContext(PrincipalNameContext, 0);
};

ShowRoleGrantsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowRoleGrants(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowRoleGrantsContext = ShowRoleGrantsContext;

HiveParser.prototype.showRoleGrants = function () {
	var localctx = new ShowRoleGrantsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 230, HiveParser.RULE_showRoleGrants);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2011;
		this.match(HiveParser.KW_SHOW);
		this.state = 2012;
		this.match(HiveParser.KW_ROLE);
		this.state = 2013;
		this.match(HiveParser.KW_GRANT);
		this.state = 2014;
		this.principalName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowRolesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showRoles;
	return this;
}

ShowRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowRolesContext.prototype.constructor = ShowRolesContext;

ShowRolesContext.prototype.KW_SHOW = function () {
	return this.getToken(HiveParser.KW_SHOW, 0);
};

ShowRolesContext.prototype.KW_ROLES = function () {
	return this.getToken(HiveParser.KW_ROLES, 0);
};

ShowRolesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowRoles(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowRolesContext = ShowRolesContext;

HiveParser.prototype.showRoles = function () {
	var localctx = new ShowRolesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 232, HiveParser.RULE_showRoles);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2016;
		this.match(HiveParser.KW_SHOW);
		this.state = 2017;
		this.match(HiveParser.KW_ROLES);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowCurrentRoleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showCurrentRole;
	return this;
}

ShowCurrentRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowCurrentRoleContext.prototype.constructor = ShowCurrentRoleContext;

ShowCurrentRoleContext.prototype.KW_SHOW = function () {
	return this.getToken(HiveParser.KW_SHOW, 0);
};

ShowCurrentRoleContext.prototype.KW_CURRENT = function () {
	return this.getToken(HiveParser.KW_CURRENT, 0);
};

ShowCurrentRoleContext.prototype.KW_ROLES = function () {
	return this.getToken(HiveParser.KW_ROLES, 0);
};

ShowCurrentRoleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowCurrentRole(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowCurrentRoleContext = ShowCurrentRoleContext;

HiveParser.prototype.showCurrentRole = function () {
	var localctx = new ShowCurrentRoleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 234, HiveParser.RULE_showCurrentRole);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2019;
		this.match(HiveParser.KW_SHOW);
		this.state = 2020;
		this.match(HiveParser.KW_CURRENT);
		this.state = 2021;
		this.match(HiveParser.KW_ROLES);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SetRoleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_setRole;
	return this;
}

SetRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetRoleContext.prototype.constructor = SetRoleContext;

SetRoleContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

SetRoleContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

SetRoleContext.prototype.KW_ALL = function () {
	return this.getToken(HiveParser.KW_ALL, 0);
};

SetRoleContext.prototype.KW_NONE = function () {
	return this.getToken(HiveParser.KW_NONE, 0);
};

SetRoleContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

SetRoleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSetRole(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SetRoleContext = SetRoleContext;

HiveParser.prototype.setRole = function () {
	var localctx = new SetRoleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 236, HiveParser.RULE_setRole);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2023;
		this.match(HiveParser.KW_SET);
		this.state = 2024;
		this.match(HiveParser.KW_ROLE);
		this.state = 2028;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ALL:
				this.state = 2025;
				this.match(HiveParser.KW_ALL);
				break;
			case HiveParser.KW_NONE:
				this.state = 2026;
				this.match(HiveParser.KW_NONE);
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.state = 2027;
				this.identifier();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowGrantsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showGrants;
	return this;
}

ShowGrantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowGrantsContext.prototype.constructor = ShowGrantsContext;

ShowGrantsContext.prototype.KW_SHOW = function () {
	return this.getToken(HiveParser.KW_SHOW, 0);
};

ShowGrantsContext.prototype.KW_GRANT = function () {
	return this.getToken(HiveParser.KW_GRANT, 0);
};

ShowGrantsContext.prototype.principalName = function () {
	return this.getTypedRuleContext(PrincipalNameContext, 0);
};

ShowGrantsContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

ShowGrantsContext.prototype.privilegeIncludeColObject = function () {
	return this.getTypedRuleContext(PrivilegeIncludeColObjectContext, 0);
};

ShowGrantsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowGrants(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowGrantsContext = ShowGrantsContext;

HiveParser.prototype.showGrants = function () {
	var localctx = new ShowGrantsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 238, HiveParser.RULE_showGrants);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2030;
		this.match(HiveParser.KW_SHOW);
		this.state = 2031;
		this.match(HiveParser.KW_GRANT);
		this.state = 2033;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_GROUP || _la === HiveParser.KW_USER || _la === HiveParser.KW_ROLE) {
			this.state = 2032;
			this.principalName();
		}

		this.state = 2037;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ON) {
			this.state = 2035;
			this.match(HiveParser.KW_ON);
			this.state = 2036;
			this.privilegeIncludeColObject();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowRolePrincipalsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showRolePrincipals;
	return this;
}

ShowRolePrincipalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowRolePrincipalsContext.prototype.constructor = ShowRolePrincipalsContext;

ShowRolePrincipalsContext.prototype.KW_SHOW = function () {
	return this.getToken(HiveParser.KW_SHOW, 0);
};

ShowRolePrincipalsContext.prototype.KW_PRINCIPALS = function () {
	return this.getToken(HiveParser.KW_PRINCIPALS, 0);
};

ShowRolePrincipalsContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ShowRolePrincipalsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowRolePrincipals(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowRolePrincipalsContext = ShowRolePrincipalsContext;

HiveParser.prototype.showRolePrincipals = function () {
	var localctx = new ShowRolePrincipalsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 240, HiveParser.RULE_showRolePrincipals);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2039;
		this.match(HiveParser.KW_SHOW);
		this.state = 2040;
		this.match(HiveParser.KW_PRINCIPALS);
		this.state = 2041;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrivilegeIncludeColObjectContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_privilegeIncludeColObject;
	return this;
}

PrivilegeIncludeColObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeIncludeColObjectContext.prototype.constructor = PrivilegeIncludeColObjectContext;

PrivilegeIncludeColObjectContext.prototype.KW_ALL = function () {
	return this.getToken(HiveParser.KW_ALL, 0);
};

PrivilegeIncludeColObjectContext.prototype.privObjectCols = function () {
	return this.getTypedRuleContext(PrivObjectColsContext, 0);
};

PrivilegeIncludeColObjectContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrivilegeIncludeColObject(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrivilegeIncludeColObjectContext = PrivilegeIncludeColObjectContext;

HiveParser.prototype.privilegeIncludeColObject = function () {
	var localctx = new PrivilegeIncludeColObjectContext(this, this._ctx, this.state);
	this.enterRule(localctx, 242, HiveParser.RULE_privilegeIncludeColObject);
	try {
		this.state = 2045;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ALL:
				this.enterOuterAlt(localctx, 1);
				this.state = 2043;
				this.match(HiveParser.KW_ALL);
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLE:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASE:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 2);
				this.state = 2044;
				this.privObjectCols();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrivilegeObjectContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_privilegeObject;
	return this;
}

PrivilegeObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeObjectContext.prototype.constructor = PrivilegeObjectContext;

PrivilegeObjectContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

PrivilegeObjectContext.prototype.privObject = function () {
	return this.getTypedRuleContext(PrivObjectContext, 0);
};

PrivilegeObjectContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrivilegeObject(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrivilegeObjectContext = PrivilegeObjectContext;

HiveParser.prototype.privilegeObject = function () {
	var localctx = new PrivilegeObjectContext(this, this._ctx, this.state);
	this.enterRule(localctx, 244, HiveParser.RULE_privilegeObject);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2047;
		this.match(HiveParser.KW_ON);
		this.state = 2048;
		this.privObject();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrivObjectContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_privObject;
	return this;
}

PrivObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivObjectContext.prototype.constructor = PrivObjectContext;

PrivObjectContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

PrivObjectContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

PrivObjectContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

PrivObjectContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

PrivObjectContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

PrivObjectContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

PrivObjectContext.prototype.KW_URI = function () {
	return this.getToken(HiveParser.KW_URI, 0);
};

PrivObjectContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

PrivObjectContext.prototype.KW_SERVER = function () {
	return this.getToken(HiveParser.KW_SERVER, 0);
};

PrivObjectContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrivObject(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrivObjectContext = PrivObjectContext;

HiveParser.prototype.privObject = function () {
	var localctx = new PrivObjectContext(this, this._ctx, this.state);
	this.enterRule(localctx, 246, HiveParser.RULE_privObject);
	var _la = 0; // Token type
	try {
		this.state = 2063;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 168, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2050;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2051;
				this.identifier();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TABLE) {
					this.state = 2052;
					this.match(HiveParser.KW_TABLE);
				}

				this.state = 2055;
				this.tableName();
				this.state = 2057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					this.state = 2056;
					this.partitionSpec();
				}

				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 2059;
				this.match(HiveParser.KW_URI);
				this.state = 2060;
				this.match(HiveParser.StringLiteral);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 2061;
				this.match(HiveParser.KW_SERVER);
				this.state = 2062;
				this.identifier();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrivObjectColsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_privObjectCols;
	return this;
}

PrivObjectColsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivObjectColsContext.prototype.constructor = PrivObjectColsContext;

PrivObjectColsContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

PrivObjectColsContext.prototype.KW_DATABASE = function () {
	return this.getToken(HiveParser.KW_DATABASE, 0);
};

PrivObjectColsContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

PrivObjectColsContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

PrivObjectColsContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

PrivObjectColsContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

PrivObjectColsContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

PrivObjectColsContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

PrivObjectColsContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

PrivObjectColsContext.prototype.KW_URI = function () {
	return this.getToken(HiveParser.KW_URI, 0);
};

PrivObjectColsContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

PrivObjectColsContext.prototype.KW_SERVER = function () {
	return this.getToken(HiveParser.KW_SERVER, 0);
};

PrivObjectColsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrivObjectCols(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrivObjectColsContext = PrivObjectColsContext;

HiveParser.prototype.privObjectCols = function () {
	var localctx = new PrivObjectColsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 248, HiveParser.RULE_privObjectCols);
	var _la = 0; // Token type
	try {
		this.state = 2084;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 172, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2065;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2066;
				this.identifier();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TABLE) {
					this.state = 2067;
					this.match(HiveParser.KW_TABLE);
				}

				this.state = 2070;
				this.tableName();
				this.state = 2075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.LPAREN) {
					this.state = 2071;
					this.match(HiveParser.LPAREN);
					this.state = 2072;
					this.columnNameList();
					this.state = 2073;
					this.match(HiveParser.RPAREN);
				}

				this.state = 2078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					this.state = 2077;
					this.partitionSpec();
				}

				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 2080;
				this.match(HiveParser.KW_URI);
				this.state = 2081;
				this.match(HiveParser.StringLiteral);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 2082;
				this.match(HiveParser.KW_SERVER);
				this.state = 2083;
				this.identifier();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrivilegeListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_privilegeList;
	return this;
}

PrivilegeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeListContext.prototype.constructor = PrivilegeListContext;

PrivilegeListContext.prototype.privlegeDef = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PrivlegeDefContext);
	} else {
		return this.getTypedRuleContext(PrivlegeDefContext, i);
	}
};

PrivilegeListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

PrivilegeListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrivilegeList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrivilegeListContext = PrivilegeListContext;

HiveParser.prototype.privilegeList = function () {
	var localctx = new PrivilegeListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 250, HiveParser.RULE_privilegeList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2086;
		this.privlegeDef();
		this.state = 2091;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2087;
			this.match(HiveParser.COMMA);
			this.state = 2088;
			this.privlegeDef();
			this.state = 2093;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrivlegeDefContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_privlegeDef;
	return this;
}

PrivlegeDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivlegeDefContext.prototype.constructor = PrivlegeDefContext;

PrivlegeDefContext.prototype.privilegeType = function () {
	return this.getTypedRuleContext(PrivilegeTypeContext, 0);
};

PrivlegeDefContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

PrivlegeDefContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

PrivlegeDefContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

PrivlegeDefContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrivlegeDef(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrivlegeDefContext = PrivlegeDefContext;

HiveParser.prototype.privlegeDef = function () {
	var localctx = new PrivlegeDefContext(this, this._ctx, this.state);
	this.enterRule(localctx, 252, HiveParser.RULE_privlegeDef);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2094;
		this.privilegeType();
		this.state = 2099;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.LPAREN) {
			this.state = 2095;
			this.match(HiveParser.LPAREN);
			this.state = 2096;
			this.columnNameList();
			this.state = 2097;
			this.match(HiveParser.RPAREN);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrivilegeTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_privilegeType;
	return this;
}

PrivilegeTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeTypeContext.prototype.constructor = PrivilegeTypeContext;

PrivilegeTypeContext.prototype.KW_ALL = function () {
	return this.getToken(HiveParser.KW_ALL, 0);
};

PrivilegeTypeContext.prototype.KW_ALTER = function () {
	return this.getToken(HiveParser.KW_ALTER, 0);
};

PrivilegeTypeContext.prototype.KW_UPDATE = function () {
	return this.getToken(HiveParser.KW_UPDATE, 0);
};

PrivilegeTypeContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

PrivilegeTypeContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

PrivilegeTypeContext.prototype.KW_LOCK = function () {
	return this.getToken(HiveParser.KW_LOCK, 0);
};

PrivilegeTypeContext.prototype.KW_SELECT = function () {
	return this.getToken(HiveParser.KW_SELECT, 0);
};

PrivilegeTypeContext.prototype.KW_SHOW_DATABASE = function () {
	return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
};

PrivilegeTypeContext.prototype.KW_INSERT = function () {
	return this.getToken(HiveParser.KW_INSERT, 0);
};

PrivilegeTypeContext.prototype.KW_DELETE = function () {
	return this.getToken(HiveParser.KW_DELETE, 0);
};

PrivilegeTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrivilegeType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrivilegeTypeContext = PrivilegeTypeContext;

HiveParser.prototype.privilegeType = function () {
	var localctx = new PrivilegeTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 254, HiveParser.RULE_privilegeType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2101;
		_la = this._input.LA(1);
		if (
			!(
				((_la & ~0x1f) == 0 &&
					((1 << _la) &
						((1 << HiveParser.KW_ALL) | (1 << HiveParser.KW_SELECT) | (1 << HiveParser.KW_INSERT))) !==
						0) ||
				(((_la - 65) & ~0x1f) == 0 &&
					((1 << (_la - 65)) &
						((1 << (HiveParser.KW_CREATE - 65)) |
							(1 << (HiveParser.KW_ALTER - 65)) |
							(1 << (HiveParser.KW_DROP - 65)))) !==
						0) ||
				_la === HiveParser.KW_DELETE ||
				_la === HiveParser.KW_LOCK ||
				_la === HiveParser.KW_SHOW_DATABASE ||
				_la === HiveParser.KW_UPDATE
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrincipalSpecificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_principalSpecification;
	return this;
}

PrincipalSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrincipalSpecificationContext.prototype.constructor = PrincipalSpecificationContext;

PrincipalSpecificationContext.prototype.principalName = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PrincipalNameContext);
	} else {
		return this.getTypedRuleContext(PrincipalNameContext, i);
	}
};

PrincipalSpecificationContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

PrincipalSpecificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrincipalSpecification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrincipalSpecificationContext = PrincipalSpecificationContext;

HiveParser.prototype.principalSpecification = function () {
	var localctx = new PrincipalSpecificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 256, HiveParser.RULE_principalSpecification);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2103;
		this.principalName();
		this.state = 2108;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2104;
			this.match(HiveParser.COMMA);
			this.state = 2105;
			this.principalName();
			this.state = 2110;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrincipalNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_principalName;
	return this;
}

PrincipalNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrincipalNameContext.prototype.constructor = PrincipalNameContext;

PrincipalNameContext.prototype.KW_USER = function () {
	return this.getToken(HiveParser.KW_USER, 0);
};

PrincipalNameContext.prototype.principalIdentifier = function () {
	return this.getTypedRuleContext(PrincipalIdentifierContext, 0);
};

PrincipalNameContext.prototype.KW_GROUP = function () {
	return this.getToken(HiveParser.KW_GROUP, 0);
};

PrincipalNameContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

PrincipalNameContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

PrincipalNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrincipalName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrincipalNameContext = PrincipalNameContext;

HiveParser.prototype.principalName = function () {
	var localctx = new PrincipalNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 258, HiveParser.RULE_principalName);
	try {
		this.state = 2117;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_USER:
				this.enterOuterAlt(localctx, 1);
				this.state = 2111;
				this.match(HiveParser.KW_USER);
				this.state = 2112;
				this.principalIdentifier();
				break;
			case HiveParser.KW_GROUP:
				this.enterOuterAlt(localctx, 2);
				this.state = 2113;
				this.match(HiveParser.KW_GROUP);
				this.state = 2114;
				this.principalIdentifier();
				break;
			case HiveParser.KW_ROLE:
				this.enterOuterAlt(localctx, 3);
				this.state = 2115;
				this.match(HiveParser.KW_ROLE);
				this.state = 2116;
				this.identifier();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WithGrantOptionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_withGrantOption;
	return this;
}

WithGrantOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithGrantOptionContext.prototype.constructor = WithGrantOptionContext;

WithGrantOptionContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

WithGrantOptionContext.prototype.KW_GRANT = function () {
	return this.getToken(HiveParser.KW_GRANT, 0);
};

WithGrantOptionContext.prototype.KW_OPTION = function () {
	return this.getToken(HiveParser.KW_OPTION, 0);
};

WithGrantOptionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWithGrantOption(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WithGrantOptionContext = WithGrantOptionContext;

HiveParser.prototype.withGrantOption = function () {
	var localctx = new WithGrantOptionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 260, HiveParser.RULE_withGrantOption);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2119;
		this.match(HiveParser.KW_WITH);
		this.state = 2120;
		this.match(HiveParser.KW_GRANT);
		this.state = 2121;
		this.match(HiveParser.KW_OPTION);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GrantOptionForContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_grantOptionFor;
	return this;
}

GrantOptionForContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantOptionForContext.prototype.constructor = GrantOptionForContext;

GrantOptionForContext.prototype.KW_GRANT = function () {
	return this.getToken(HiveParser.KW_GRANT, 0);
};

GrantOptionForContext.prototype.KW_OPTION = function () {
	return this.getToken(HiveParser.KW_OPTION, 0);
};

GrantOptionForContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

GrantOptionForContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGrantOptionFor(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GrantOptionForContext = GrantOptionForContext;

HiveParser.prototype.grantOptionFor = function () {
	var localctx = new GrantOptionForContext(this, this._ctx, this.state);
	this.enterRule(localctx, 262, HiveParser.RULE_grantOptionFor);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2123;
		this.match(HiveParser.KW_GRANT);
		this.state = 2124;
		this.match(HiveParser.KW_OPTION);
		this.state = 2125;
		this.match(HiveParser.KW_FOR);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AdminOptionForContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_adminOptionFor;
	return this;
}

AdminOptionForContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdminOptionForContext.prototype.constructor = AdminOptionForContext;

AdminOptionForContext.prototype.KW_ADMIN = function () {
	return this.getToken(HiveParser.KW_ADMIN, 0);
};

AdminOptionForContext.prototype.KW_OPTION = function () {
	return this.getToken(HiveParser.KW_OPTION, 0);
};

AdminOptionForContext.prototype.KW_FOR = function () {
	return this.getToken(HiveParser.KW_FOR, 0);
};

AdminOptionForContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAdminOptionFor(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AdminOptionForContext = AdminOptionForContext;

HiveParser.prototype.adminOptionFor = function () {
	var localctx = new AdminOptionForContext(this, this._ctx, this.state);
	this.enterRule(localctx, 264, HiveParser.RULE_adminOptionFor);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2127;
		this.match(HiveParser.KW_ADMIN);
		this.state = 2128;
		this.match(HiveParser.KW_OPTION);
		this.state = 2129;
		this.match(HiveParser.KW_FOR);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WithAdminOptionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_withAdminOption;
	return this;
}

WithAdminOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithAdminOptionContext.prototype.constructor = WithAdminOptionContext;

WithAdminOptionContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

WithAdminOptionContext.prototype.KW_ADMIN = function () {
	return this.getToken(HiveParser.KW_ADMIN, 0);
};

WithAdminOptionContext.prototype.KW_OPTION = function () {
	return this.getToken(HiveParser.KW_OPTION, 0);
};

WithAdminOptionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWithAdminOption(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WithAdminOptionContext = WithAdminOptionContext;

HiveParser.prototype.withAdminOption = function () {
	var localctx = new WithAdminOptionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 266, HiveParser.RULE_withAdminOption);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2131;
		this.match(HiveParser.KW_WITH);
		this.state = 2132;
		this.match(HiveParser.KW_ADMIN);
		this.state = 2133;
		this.match(HiveParser.KW_OPTION);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function MetastoreCheckContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_metastoreCheck;
	return this;
}

MetastoreCheckContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetastoreCheckContext.prototype.constructor = MetastoreCheckContext;

MetastoreCheckContext.prototype.KW_MSCK = function () {
	return this.getToken(HiveParser.KW_MSCK, 0);
};

MetastoreCheckContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

MetastoreCheckContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

MetastoreCheckContext.prototype.KW_REPAIR = function () {
	return this.getToken(HiveParser.KW_REPAIR, 0);
};

MetastoreCheckContext.prototype.KW_PARTITIONS = function () {
	return this.getToken(HiveParser.KW_PARTITIONS, 0);
};

MetastoreCheckContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

MetastoreCheckContext.prototype.KW_ADD = function () {
	return this.getToken(HiveParser.KW_ADD, 0);
};

MetastoreCheckContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

MetastoreCheckContext.prototype.KW_SYNC = function () {
	return this.getToken(HiveParser.KW_SYNC, 0);
};

MetastoreCheckContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitMetastoreCheck(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.MetastoreCheckContext = MetastoreCheckContext;

HiveParser.prototype.metastoreCheck = function () {
	var localctx = new MetastoreCheckContext(this, this._ctx, this.state);
	this.enterRule(localctx, 268, HiveParser.RULE_metastoreCheck);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2135;
		this.match(HiveParser.KW_MSCK);
		this.state = 2137;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_REPAIR) {
			this.state = 2136;
			this.match(HiveParser.KW_REPAIR);
		}

		this.state = 2148;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_TABLE:
				this.state = 2139;
				this.match(HiveParser.KW_TABLE);
				this.state = 2140;
				this.tableName();
				this.state = 2143;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DROP || _la === HiveParser.KW_ADD || _la === HiveParser.KW_SYNC) {
					this.state = 2141;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_DROP || _la === HiveParser.KW_ADD || _la === HiveParser.KW_SYNC)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2142;
					this.match(HiveParser.KW_PARTITIONS);
				}

				break;
			case HiveParser.KW_PARTITION:
			case HiveParser.SEMICOLON:
				this.state = 2146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					this.state = 2145;
					this.partitionSpec();
				}

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ResourceListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_resourceList;
	return this;
}

ResourceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceListContext.prototype.constructor = ResourceListContext;

ResourceListContext.prototype.resource = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ResourceContext);
	} else {
		return this.getTypedRuleContext(ResourceContext, i);
	}
};

ResourceListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ResourceListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitResourceList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ResourceListContext = ResourceListContext;

HiveParser.prototype.resourceList = function () {
	var localctx = new ResourceListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 270, HiveParser.RULE_resourceList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2150;
		this.resource();
		this.state = 2155;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2151;
			this.match(HiveParser.COMMA);
			this.state = 2152;
			this.resource();
			this.state = 2157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_resource;
	return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.resourceType = function () {
	return this.getTypedRuleContext(ResourceTypeContext, 0);
};

ResourceContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ResourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitResource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ResourceContext = ResourceContext;

HiveParser.prototype.resource = function () {
	var localctx = new ResourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 272, HiveParser.RULE_resource);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2158;
		this.resourceType();
		this.state = 2159;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ResourceTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_resourceType;
	return this;
}

ResourceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceTypeContext.prototype.constructor = ResourceTypeContext;

ResourceTypeContext.prototype.KW_JAR = function () {
	return this.getToken(HiveParser.KW_JAR, 0);
};

ResourceTypeContext.prototype.KW_FILE = function () {
	return this.getToken(HiveParser.KW_FILE, 0);
};

ResourceTypeContext.prototype.KW_ARCHIVE = function () {
	return this.getToken(HiveParser.KW_ARCHIVE, 0);
};

ResourceTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitResourceType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ResourceTypeContext = ResourceTypeContext;

HiveParser.prototype.resourceType = function () {
	var localctx = new ResourceTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 274, HiveParser.RULE_resourceType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2161;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_FILE || _la === HiveParser.KW_JAR || _la === HiveParser.KW_ARCHIVE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateFunctionStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createFunctionStatement;
	return this;
}

CreateFunctionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionStatementContext.prototype.constructor = CreateFunctionStatementContext;

CreateFunctionStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateFunctionStatementContext.prototype.KW_FUNCTION = function () {
	return this.getToken(HiveParser.KW_FUNCTION, 0);
};

CreateFunctionStatementContext.prototype.functionIdentifier = function () {
	return this.getTypedRuleContext(FunctionIdentifierContext, 0);
};

CreateFunctionStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

CreateFunctionStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

CreateFunctionStatementContext.prototype.KW_TEMPORARY = function () {
	return this.getToken(HiveParser.KW_TEMPORARY, 0);
};

CreateFunctionStatementContext.prototype.KW_USING = function () {
	return this.getToken(HiveParser.KW_USING, 0);
};

CreateFunctionStatementContext.prototype.resourceList = function () {
	return this.getTypedRuleContext(ResourceListContext, 0);
};

CreateFunctionStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateFunctionStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateFunctionStatementContext = CreateFunctionStatementContext;

HiveParser.prototype.createFunctionStatement = function () {
	var localctx = new CreateFunctionStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 276, HiveParser.RULE_createFunctionStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2163;
		this.match(HiveParser.KW_CREATE);
		this.state = 2165;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TEMPORARY) {
			this.state = 2164;
			this.match(HiveParser.KW_TEMPORARY);
		}

		this.state = 2167;
		this.match(HiveParser.KW_FUNCTION);
		this.state = 2168;
		this.functionIdentifier();
		this.state = 2169;
		this.match(HiveParser.KW_AS);
		this.state = 2170;
		this.match(HiveParser.StringLiteral);
		this.state = 2173;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_USING) {
			this.state = 2171;
			this.match(HiveParser.KW_USING);
			this.state = 2172;
			this.resourceList();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropFunctionStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropFunctionStatement;
	return this;
}

DropFunctionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionStatementContext.prototype.constructor = DropFunctionStatementContext;

DropFunctionStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropFunctionStatementContext.prototype.KW_FUNCTION = function () {
	return this.getToken(HiveParser.KW_FUNCTION, 0);
};

DropFunctionStatementContext.prototype.functionIdentifier = function () {
	return this.getTypedRuleContext(FunctionIdentifierContext, 0);
};

DropFunctionStatementContext.prototype.KW_TEMPORARY = function () {
	return this.getToken(HiveParser.KW_TEMPORARY, 0);
};

DropFunctionStatementContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

DropFunctionStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropFunctionStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropFunctionStatementContext = DropFunctionStatementContext;

HiveParser.prototype.dropFunctionStatement = function () {
	var localctx = new DropFunctionStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 278, HiveParser.RULE_dropFunctionStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2175;
		this.match(HiveParser.KW_DROP);
		this.state = 2177;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TEMPORARY) {
			this.state = 2176;
			this.match(HiveParser.KW_TEMPORARY);
		}

		this.state = 2179;
		this.match(HiveParser.KW_FUNCTION);
		this.state = 2181;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 2180;
			this.ifExists();
		}

		this.state = 2183;
		this.functionIdentifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReloadFunctionStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_reloadFunctionStatement;
	return this;
}

ReloadFunctionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReloadFunctionStatementContext.prototype.constructor = ReloadFunctionStatementContext;

ReloadFunctionStatementContext.prototype.KW_RELOAD = function () {
	return this.getToken(HiveParser.KW_RELOAD, 0);
};

ReloadFunctionStatementContext.prototype.KW_FUNCTION = function () {
	return this.getToken(HiveParser.KW_FUNCTION, 0);
};

ReloadFunctionStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReloadFunctionStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReloadFunctionStatementContext = ReloadFunctionStatementContext;

HiveParser.prototype.reloadFunctionStatement = function () {
	var localctx = new ReloadFunctionStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 280, HiveParser.RULE_reloadFunctionStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2185;
		this.match(HiveParser.KW_RELOAD);
		this.state = 2186;
		this.match(HiveParser.KW_FUNCTION);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateMacroStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createMacroStatement;
	return this;
}

CreateMacroStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateMacroStatementContext.prototype.constructor = CreateMacroStatementContext;

CreateMacroStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateMacroStatementContext.prototype.KW_TEMPORARY = function () {
	return this.getToken(HiveParser.KW_TEMPORARY, 0);
};

CreateMacroStatementContext.prototype.KW_MACRO = function () {
	return this.getToken(HiveParser.KW_MACRO, 0);
};

CreateMacroStatementContext.prototype.Identifier = function () {
	return this.getToken(HiveParser.Identifier, 0);
};

CreateMacroStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

CreateMacroStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

CreateMacroStatementContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

CreateMacroStatementContext.prototype.columnNameTypeList = function () {
	return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
};

CreateMacroStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateMacroStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateMacroStatementContext = CreateMacroStatementContext;

HiveParser.prototype.createMacroStatement = function () {
	var localctx = new CreateMacroStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 282, HiveParser.RULE_createMacroStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2188;
		this.match(HiveParser.KW_CREATE);
		this.state = 2189;
		this.match(HiveParser.KW_TEMPORARY);
		this.state = 2190;
		this.match(HiveParser.KW_MACRO);
		this.state = 2191;
		this.match(HiveParser.Identifier);
		this.state = 2192;
		this.match(HiveParser.LPAREN);
		this.state = 2194;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_ASC) |
						(1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_NULLS) |
						(1 << HiveParser.KW_LAST) |
						(1 << HiveParser.KW_OVERWRITE))) !==
					0) ||
			(((_la - 36) & ~0x1f) == 0 &&
				((1 << (_la - 36)) &
					((1 << (HiveParser.KW_PARTITIONS - 36)) |
						(1 << (HiveParser.KW_TABLES - 36)) |
						(1 << (HiveParser.KW_COLUMNS - 36)) |
						(1 << (HiveParser.KW_INDEX - 36)) |
						(1 << (HiveParser.KW_INDEXES - 36)) |
						(1 << (HiveParser.KW_REBUILD - 36)) |
						(1 << (HiveParser.KW_FUNCTIONS - 36)) |
						(1 << (HiveParser.KW_SHOW - 36)) |
						(1 << (HiveParser.KW_MSCK - 36)) |
						(1 << (HiveParser.KW_REPAIR - 36)) |
						(1 << (HiveParser.KW_DIRECTORY - 36)) |
						(1 << (HiveParser.KW_CLUSTER - 36)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
						(1 << (HiveParser.KW_SORT - 36)) |
						(1 << (HiveParser.KW_LOAD - 36)) |
						(1 << (HiveParser.KW_EXPORT - 36)) |
						(1 << (HiveParser.KW_REPLICATION - 36)) |
						(1 << (HiveParser.KW_METADATA - 36)) |
						(1 << (HiveParser.KW_DATA - 36)) |
						(1 << (HiveParser.KW_INPATH - 36)))) !==
					0) ||
			(((_la - 68) & ~0x1f) == 0 &&
				((1 << (_la - 68)) &
					((1 << (HiveParser.KW_CHANGE - 68)) |
						(1 << (HiveParser.KW_FIRST - 68)) |
						(1 << (HiveParser.KW_AFTER - 68)) |
						(1 << (HiveParser.KW_RENAME - 68)) |
						(1 << (HiveParser.KW_COMMENT - 68)) |
						(1 << (HiveParser.KW_TINYINT - 68)) |
						(1 << (HiveParser.KW_DATETIME - 68)) |
						(1 << (HiveParser.KW_ZONE - 68)) |
						(1 << (HiveParser.KW_STRING - 68)) |
						(1 << (HiveParser.KW_STRUCT - 68)) |
						(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
					0) ||
			(((_la - 101) & ~0x1f) == 0 &&
				((1 << (_la - 101)) &
					((1 << (HiveParser.KW_PARTITIONED - 101)) |
						(1 << (HiveParser.KW_CLUSTERED - 101)) |
						(1 << (HiveParser.KW_SORTED - 101)) |
						(1 << (HiveParser.KW_BUCKETS - 101)) |
						(1 << (HiveParser.KW_FORMAT - 101)) |
						(1 << (HiveParser.KW_DELIMITED - 101)) |
						(1 << (HiveParser.KW_FIELDS - 101)) |
						(1 << (HiveParser.KW_TERMINATED - 101)) |
						(1 << (HiveParser.KW_ESCAPED - 101)) |
						(1 << (HiveParser.KW_COLLECTION - 101)) |
						(1 << (HiveParser.KW_ITEMS - 101)) |
						(1 << (HiveParser.KW_KEYS - 101)) |
						(1 << (HiveParser.KW_KEY_TYPE - 101)) |
						(1 << (HiveParser.KW_KILL - 101)) |
						(1 << (HiveParser.KW_LINES - 101)) |
						(1 << (HiveParser.KW_STORED - 101)) |
						(1 << (HiveParser.KW_FILEFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_ENABLE - 101)) |
						(1 << (HiveParser.KW_DISABLE - 101)) |
						(1 << (HiveParser.KW_LOCATION - 101)) |
						(1 << (HiveParser.KW_BUCKET - 101)))) !==
					0) ||
			(((_la - 134) & ~0x1f) == 0 &&
				((1 << (_la - 134)) &
					((1 << (HiveParser.KW_ADD - 134)) |
						(1 << (HiveParser.KW_REPLACE - 134)) |
						(1 << (HiveParser.KW_TEMPORARY - 134)) |
						(1 << (HiveParser.KW_FILE - 134)) |
						(1 << (HiveParser.KW_JAR - 134)) |
						(1 << (HiveParser.KW_EXPLAIN - 134)) |
						(1 << (HiveParser.KW_FORMATTED - 134)) |
						(1 << (HiveParser.KW_DEPENDENCY - 134)) |
						(1 << (HiveParser.KW_LOGICAL - 134)) |
						(1 << (HiveParser.KW_SERDE - 134)) |
						(1 << (HiveParser.KW_DEFERRED - 134)) |
						(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
						(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
						(1 << (HiveParser.KW_LIMIT - 134)) |
						(1 << (HiveParser.KW_OFFSET - 134)) |
						(1 << (HiveParser.KW_UNSET - 134)) |
						(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
						(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
						(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
						(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
						(1 << (HiveParser.KW_DEFINED - 134)))) !==
					0) ||
			(((_la - 167) & ~0x1f) == 0 &&
				((1 << (_la - 167)) &
					((1 << (HiveParser.KW_MAPJOIN - 167)) |
						(1 << (HiveParser.KW_STREAMTABLE - 167)) |
						(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
						(1 << (HiveParser.KW_UTC - 167)) |
						(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
						(1 << (HiveParser.KW_LONG - 167)) |
						(1 << (HiveParser.KW_PLUS - 167)) |
						(1 << (HiveParser.KW_VIEW - 167)) |
						(1 << (HiveParser.KW_VIEWS - 167)) |
						(1 << (HiveParser.KW_DATABASES - 167)) |
						(1 << (HiveParser.KW_MATERIALIZED - 167)) |
						(1 << (HiveParser.KW_SCHEMA - 167)) |
						(1 << (HiveParser.KW_SCHEMAS - 167)) |
						(1 << (HiveParser.KW_SSL - 167)) |
						(1 << (HiveParser.KW_UNDO - 167)) |
						(1 << (HiveParser.KW_LOCK - 167)) |
						(1 << (HiveParser.KW_LOCKS - 167)) |
						(1 << (HiveParser.KW_UNLOCK - 167)) |
						(1 << (HiveParser.KW_SHARED - 167)) |
						(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
						(1 << (HiveParser.KW_UNSIGNED - 167)) |
						(1 << (HiveParser.KW_WHILE - 167)) |
						(1 << (HiveParser.KW_READ - 167)))) !==
					0) ||
			(((_la - 200) & ~0x1f) == 0 &&
				((1 << (_la - 200)) &
					((1 << (HiveParser.KW_PURGE - 200)) |
						(1 << (HiveParser.KW_ANALYZE - 200)) |
						(1 << (HiveParser.KW_BEFORE - 200)) |
						(1 << (HiveParser.KW_CONTINUE - 200)) |
						(1 << (HiveParser.KW_RECORDREADER - 200)) |
						(1 << (HiveParser.KW_RECORDWRITER - 200)) |
						(1 << (HiveParser.KW_SEMI - 200)) |
						(1 << (HiveParser.KW_TOUCH - 200)) |
						(1 << (HiveParser.KW_ARCHIVE - 200)) |
						(1 << (HiveParser.KW_UNARCHIVE - 200)) |
						(1 << (HiveParser.KW_COMPUTE - 200)) |
						(1 << (HiveParser.KW_STATISTICS - 200)) |
						(1 << (HiveParser.KW_USE - 200)) |
						(1 << (HiveParser.KW_OPTION - 200)) |
						(1 << (HiveParser.KW_CONCATENATE - 200)) |
						(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
						(1 << (HiveParser.KW_RESTRICT - 200)) |
						(1 << (HiveParser.KW_CASCADE - 200)) |
						(1 << (HiveParser.KW_SKEWED - 200)) |
						(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
					0) ||
			(((_la - 244) & ~0x1f) == 0 &&
				((1 << (_la - 244)) &
					((1 << (HiveParser.KW_SETS - 244)) |
						(1 << (HiveParser.KW_NOSCAN - 244)) |
						(1 << (HiveParser.KW_ROLE - 244)) |
						(1 << (HiveParser.KW_ROLES - 244)) |
						(1 << (HiveParser.KW_URI - 244)) |
						(1 << (HiveParser.KW_SERVER - 244)) |
						(1 << (HiveParser.KW_ADMIN - 244)) |
						(1 << (HiveParser.KW_OWNER - 244)) |
						(1 << (HiveParser.KW_PRINCIPALS - 244)) |
						(1 << (HiveParser.KW_COMPACT - 244)) |
						(1 << (HiveParser.KW_COMPACTIONS - 244)) |
						(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
						(1 << (HiveParser.KW_REWRITE - 244)) |
						(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
						(1 << (HiveParser.KW_RELOAD - 244)) |
						(1 << (HiveParser.KW_YEAR - 244)) |
						(1 << (HiveParser.KW_QUERY - 244)) |
						(1 << (HiveParser.KW_QUARTER - 244)) |
						(1 << (HiveParser.KW_MONTH - 244)) |
						(1 << (HiveParser.KW_WEEK - 244)) |
						(1 << (HiveParser.KW_DAY - 244)) |
						(1 << (HiveParser.KW_DOW - 244)) |
						(1 << (HiveParser.KW_HOUR - 244)) |
						(1 << (HiveParser.KW_MINUTE - 244)) |
						(1 << (HiveParser.KW_SECOND - 244)))) !==
					0) ||
			(((_la - 277) & ~0x1f) == 0 &&
				((1 << (_la - 277)) &
					((1 << (HiveParser.KW_TRANSACTION - 277)) |
						(1 << (HiveParser.KW_WORK - 277)) |
						(1 << (HiveParser.KW_WRITE - 277)) |
						(1 << (HiveParser.KW_ISOLATION - 277)) |
						(1 << (HiveParser.KW_LEVEL - 277)) |
						(1 << (HiveParser.KW_SNAPSHOT - 277)) |
						(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
						(1 << (HiveParser.KW_CACHE - 277)) |
						(1 << (HiveParser.KW_ENFORCED - 277)) |
						(1 << (HiveParser.KW_VALIDATE - 277)) |
						(1 << (HiveParser.KW_NOVALIDATE - 277)) |
						(1 << (HiveParser.KW_RELY - 277)) |
						(1 << (HiveParser.KW_NORELY - 277)) |
						(1 << (HiveParser.KW_KEY - 277)) |
						(1 << (HiveParser.KW_ABORT - 277)) |
						(1 << (HiveParser.KW_MATCHED - 277)) |
						(1 << (HiveParser.KW_REPL - 277)) |
						(1 << (HiveParser.KW_DUMP - 277)) |
						(1 << (HiveParser.KW_STATUS - 277)) |
						(1 << (HiveParser.KW_VECTORIZATION - 277)) |
						(1 << (HiveParser.KW_SUMMARY - 277)))) !==
					0) ||
			(((_la - 309) & ~0x1f) == 0 &&
				((1 << (_la - 309)) &
					((1 << (HiveParser.KW_OPERATOR - 309)) |
						(1 << (HiveParser.KW_EXPRESSION - 309)) |
						(1 << (HiveParser.KW_DETAIL - 309)) |
						(1 << (HiveParser.KW_WAIT - 309)) |
						(1 << (HiveParser.KW_RESOURCE - 309)) |
						(1 << (HiveParser.KW_PLAN - 309)) |
						(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
						(1 << (HiveParser.KW_PLANS - 309)) |
						(1 << (HiveParser.KW_ACTIVATE - 309)) |
						(1 << (HiveParser.KW_DEFAULT - 309)) |
						(1 << (HiveParser.KW_CHECK - 309)) |
						(1 << (HiveParser.KW_POOL - 309)) |
						(1 << (HiveParser.KW_MOVE - 309)) |
						(1 << (HiveParser.KW_DO - 309)) |
						(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
						(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
						(1 << (HiveParser.KW_PATH - 309)) |
						(1 << (HiveParser.KW_MAPPING - 309)) |
						(1 << (HiveParser.KW_WORKLOAD - 309)) |
						(1 << (HiveParser.KW_MANAGEMENT - 309)) |
						(1 << (HiveParser.KW_ACTIVE - 309)) |
						(1 << (HiveParser.KW_UNMANAGED - 309)) |
						(1 << (HiveParser.KW_DELTA - 309)) |
						(1 << (HiveParser.KW_CSV - 309)))) !==
					0) ||
			_la === HiveParser.KW_JSON ||
			_la === HiveParser.KW_BLOOMFILTER ||
			_la === HiveParser.Identifier
		) {
			this.state = 2193;
			this.columnNameTypeList();
		}

		this.state = 2196;
		this.match(HiveParser.RPAREN);
		this.state = 2197;
		this.expression(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropMacroStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropMacroStatement;
	return this;
}

DropMacroStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropMacroStatementContext.prototype.constructor = DropMacroStatementContext;

DropMacroStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropMacroStatementContext.prototype.KW_TEMPORARY = function () {
	return this.getToken(HiveParser.KW_TEMPORARY, 0);
};

DropMacroStatementContext.prototype.KW_MACRO = function () {
	return this.getToken(HiveParser.KW_MACRO, 0);
};

DropMacroStatementContext.prototype.Identifier = function () {
	return this.getToken(HiveParser.Identifier, 0);
};

DropMacroStatementContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

DropMacroStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropMacroStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropMacroStatementContext = DropMacroStatementContext;

HiveParser.prototype.dropMacroStatement = function () {
	var localctx = new DropMacroStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 284, HiveParser.RULE_dropMacroStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2199;
		this.match(HiveParser.KW_DROP);
		this.state = 2200;
		this.match(HiveParser.KW_TEMPORARY);
		this.state = 2201;
		this.match(HiveParser.KW_MACRO);
		this.state = 2203;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 2202;
			this.ifExists();
		}

		this.state = 2205;
		this.match(HiveParser.Identifier);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateViewStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createViewStatement;
	return this;
}

CreateViewStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateViewStatementContext.prototype.constructor = CreateViewStatementContext;

CreateViewStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateViewStatementContext.prototype.KW_VIEW = function () {
	return this.getToken(HiveParser.KW_VIEW, 0);
};

CreateViewStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

CreateViewStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

CreateViewStatementContext.prototype.selectStatementWithCTE = function () {
	return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
};

CreateViewStatementContext.prototype.orReplace = function () {
	return this.getTypedRuleContext(OrReplaceContext, 0);
};

CreateViewStatementContext.prototype.ifNotExists = function () {
	return this.getTypedRuleContext(IfNotExistsContext, 0);
};

CreateViewStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

CreateViewStatementContext.prototype.columnNameCommentList = function () {
	return this.getTypedRuleContext(ColumnNameCommentListContext, 0);
};

CreateViewStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

CreateViewStatementContext.prototype.tableComment = function () {
	return this.getTypedRuleContext(TableCommentContext, 0);
};

CreateViewStatementContext.prototype.viewPartition = function () {
	return this.getTypedRuleContext(ViewPartitionContext, 0);
};

CreateViewStatementContext.prototype.tablePropertiesPrefixed = function () {
	return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0);
};

CreateViewStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateViewStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateViewStatementContext = CreateViewStatementContext;

HiveParser.prototype.createViewStatement = function () {
	var localctx = new CreateViewStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 286, HiveParser.RULE_createViewStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2207;
		this.match(HiveParser.KW_CREATE);
		this.state = 2209;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_OR) {
			this.state = 2208;
			this.orReplace();
		}

		this.state = 2211;
		this.match(HiveParser.KW_VIEW);
		this.state = 2213;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 2212;
			this.ifNotExists();
		}

		this.state = 2215;
		this.tableName();
		this.state = 2220;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.LPAREN) {
			this.state = 2216;
			this.match(HiveParser.LPAREN);
			this.state = 2217;
			this.columnNameCommentList();
			this.state = 2218;
			this.match(HiveParser.RPAREN);
		}

		this.state = 2223;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 2222;
			this.tableComment();
		}

		this.state = 2226;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITIONED) {
			this.state = 2225;
			this.viewPartition();
		}

		this.state = 2229;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TBLPROPERTIES) {
			this.state = 2228;
			this.tablePropertiesPrefixed();
		}

		this.state = 2231;
		this.match(HiveParser.KW_AS);
		this.state = 2232;
		this.selectStatementWithCTE();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateMaterializedViewStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createMaterializedViewStatement;
	return this;
}

CreateMaterializedViewStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateMaterializedViewStatementContext.prototype.constructor = CreateMaterializedViewStatementContext;

CreateMaterializedViewStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateMaterializedViewStatementContext.prototype.KW_MATERIALIZED = function () {
	return this.getToken(HiveParser.KW_MATERIALIZED, 0);
};

CreateMaterializedViewStatementContext.prototype.KW_VIEW = function () {
	return this.getToken(HiveParser.KW_VIEW, 0);
};

CreateMaterializedViewStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

CreateMaterializedViewStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

CreateMaterializedViewStatementContext.prototype.selectStatementWithCTE = function () {
	return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
};

CreateMaterializedViewStatementContext.prototype.ifNotExists = function () {
	return this.getTypedRuleContext(IfNotExistsContext, 0);
};

CreateMaterializedViewStatementContext.prototype.rewriteDisabled = function () {
	return this.getTypedRuleContext(RewriteDisabledContext, 0);
};

CreateMaterializedViewStatementContext.prototype.tableComment = function () {
	return this.getTypedRuleContext(TableCommentContext, 0);
};

CreateMaterializedViewStatementContext.prototype.tableRowFormat = function () {
	return this.getTypedRuleContext(TableRowFormatContext, 0);
};

CreateMaterializedViewStatementContext.prototype.tableFileFormat = function () {
	return this.getTypedRuleContext(TableFileFormatContext, 0);
};

CreateMaterializedViewStatementContext.prototype.tableLocation = function () {
	return this.getTypedRuleContext(TableLocationContext, 0);
};

CreateMaterializedViewStatementContext.prototype.tablePropertiesPrefixed = function () {
	return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0);
};

CreateMaterializedViewStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateMaterializedViewStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateMaterializedViewStatementContext = CreateMaterializedViewStatementContext;

HiveParser.prototype.createMaterializedViewStatement = function () {
	var localctx = new CreateMaterializedViewStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 288, HiveParser.RULE_createMaterializedViewStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2234;
		this.match(HiveParser.KW_CREATE);
		this.state = 2235;
		this.match(HiveParser.KW_MATERIALIZED);
		this.state = 2236;
		this.match(HiveParser.KW_VIEW);
		this.state = 2238;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 2237;
			this.ifNotExists();
		}

		this.state = 2240;
		this.tableName();
		this.state = 2242;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_DISABLE) {
			this.state = 2241;
			this.rewriteDisabled();
		}

		this.state = 2245;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 2244;
			this.tableComment();
		}

		this.state = 2248;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ROW) {
			this.state = 2247;
			this.tableRowFormat();
		}

		this.state = 2251;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_STORED) {
			this.state = 2250;
			this.tableFileFormat();
		}

		this.state = 2254;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LOCATION) {
			this.state = 2253;
			this.tableLocation();
		}

		this.state = 2257;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TBLPROPERTIES) {
			this.state = 2256;
			this.tablePropertiesPrefixed();
		}

		this.state = 2259;
		this.match(HiveParser.KW_AS);
		this.state = 2260;
		this.selectStatementWithCTE();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ViewPartitionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_viewPartition;
	return this;
}

ViewPartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewPartitionContext.prototype.constructor = ViewPartitionContext;

ViewPartitionContext.prototype.KW_PARTITIONED = function () {
	return this.getToken(HiveParser.KW_PARTITIONED, 0);
};

ViewPartitionContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

ViewPartitionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ViewPartitionContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

ViewPartitionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ViewPartitionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitViewPartition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ViewPartitionContext = ViewPartitionContext;

HiveParser.prototype.viewPartition = function () {
	var localctx = new ViewPartitionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 290, HiveParser.RULE_viewPartition);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2262;
		this.match(HiveParser.KW_PARTITIONED);
		this.state = 2263;
		this.match(HiveParser.KW_ON);
		this.state = 2264;
		this.match(HiveParser.LPAREN);
		this.state = 2265;
		this.columnNameList();
		this.state = 2266;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropViewStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropViewStatement;
	return this;
}

DropViewStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropViewStatementContext.prototype.constructor = DropViewStatementContext;

DropViewStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropViewStatementContext.prototype.KW_VIEW = function () {
	return this.getToken(HiveParser.KW_VIEW, 0);
};

DropViewStatementContext.prototype.viewName = function () {
	return this.getTypedRuleContext(ViewNameContext, 0);
};

DropViewStatementContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

DropViewStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropViewStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropViewStatementContext = DropViewStatementContext;

HiveParser.prototype.dropViewStatement = function () {
	var localctx = new DropViewStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 292, HiveParser.RULE_dropViewStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2268;
		this.match(HiveParser.KW_DROP);
		this.state = 2269;
		this.match(HiveParser.KW_VIEW);
		this.state = 2271;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 2270;
			this.ifExists();
		}

		this.state = 2273;
		this.viewName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropMaterializedViewStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropMaterializedViewStatement;
	return this;
}

DropMaterializedViewStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropMaterializedViewStatementContext.prototype.constructor = DropMaterializedViewStatementContext;

DropMaterializedViewStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropMaterializedViewStatementContext.prototype.KW_MATERIALIZED = function () {
	return this.getToken(HiveParser.KW_MATERIALIZED, 0);
};

DropMaterializedViewStatementContext.prototype.KW_VIEW = function () {
	return this.getToken(HiveParser.KW_VIEW, 0);
};

DropMaterializedViewStatementContext.prototype.viewName = function () {
	return this.getTypedRuleContext(ViewNameContext, 0);
};

DropMaterializedViewStatementContext.prototype.ifExists = function () {
	return this.getTypedRuleContext(IfExistsContext, 0);
};

DropMaterializedViewStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropMaterializedViewStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropMaterializedViewStatementContext = DropMaterializedViewStatementContext;

HiveParser.prototype.dropMaterializedViewStatement = function () {
	var localctx = new DropMaterializedViewStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 294, HiveParser.RULE_dropMaterializedViewStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2275;
		this.match(HiveParser.KW_DROP);
		this.state = 2276;
		this.match(HiveParser.KW_MATERIALIZED);
		this.state = 2277;
		this.match(HiveParser.KW_VIEW);
		this.state = 2279;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_IF) {
			this.state = 2278;
			this.ifExists();
		}

		this.state = 2281;
		this.viewName();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowFunctionIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showFunctionIdentifier;
	return this;
}

ShowFunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowFunctionIdentifierContext.prototype.constructor = ShowFunctionIdentifierContext;

ShowFunctionIdentifierContext.prototype.functionIdentifier = function () {
	return this.getTypedRuleContext(FunctionIdentifierContext, 0);
};

ShowFunctionIdentifierContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ShowFunctionIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowFunctionIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowFunctionIdentifierContext = ShowFunctionIdentifierContext;

HiveParser.prototype.showFunctionIdentifier = function () {
	var localctx = new ShowFunctionIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 296, HiveParser.RULE_showFunctionIdentifier);
	try {
		this.state = 2285;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 1);
				this.state = 2283;
				this.functionIdentifier();
				break;
			case HiveParser.StringLiteral:
				this.enterOuterAlt(localctx, 2);
				this.state = 2284;
				this.match(HiveParser.StringLiteral);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ShowStmtIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_showStmtIdentifier;
	return this;
}

ShowStmtIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowStmtIdentifierContext.prototype.constructor = ShowStmtIdentifierContext;

ShowStmtIdentifierContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ShowStmtIdentifierContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ShowStmtIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitShowStmtIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ShowStmtIdentifierContext = ShowStmtIdentifierContext;

HiveParser.prototype.showStmtIdentifier = function () {
	var localctx = new ShowStmtIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 298, HiveParser.RULE_showStmtIdentifier);
	try {
		this.state = 2289;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 1);
				this.state = 2287;
				this.identifier();
				break;
			case HiveParser.StringLiteral:
				this.enterOuterAlt(localctx, 2);
				this.state = 2288;
				this.match(HiveParser.StringLiteral);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableCommentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableComment;
	return this;
}

TableCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableCommentContext.prototype.constructor = TableCommentContext;

TableCommentContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

TableCommentContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableCommentContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableComment(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableCommentContext = TableCommentContext;

HiveParser.prototype.tableComment = function () {
	var localctx = new TableCommentContext(this, this._ctx, this.state);
	this.enterRule(localctx, 300, HiveParser.RULE_tableComment);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2291;
		this.match(HiveParser.KW_COMMENT);
		this.state = 2292;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableUsingDataSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableUsingDataSource;
	return this;
}

TableUsingDataSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableUsingDataSourceContext.prototype.constructor = TableUsingDataSourceContext;

TableUsingDataSourceContext.prototype.KW_USING = function () {
	return this.getToken(HiveParser.KW_USING, 0);
};

TableUsingDataSourceContext.prototype.tableDataSource = function () {
	return this.getTypedRuleContext(TableDataSourceContext, 0);
};

TableUsingDataSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableUsingDataSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableUsingDataSourceContext = TableUsingDataSourceContext;

HiveParser.prototype.tableUsingDataSource = function () {
	var localctx = new TableUsingDataSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 302, HiveParser.RULE_tableUsingDataSource);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2294;
		this.match(HiveParser.KW_USING);
		this.state = 2295;
		this.tableDataSource();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableDataSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableDataSource;
	return this;
}

TableDataSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableDataSourceContext.prototype.constructor = TableDataSourceContext;

TableDataSourceContext.prototype.KW_AVRO = function () {
	return this.getToken(HiveParser.KW_AVRO, 0);
};

TableDataSourceContext.prototype.KW_CSV = function () {
	return this.getToken(HiveParser.KW_CSV, 0);
};

TableDataSourceContext.prototype.KW_JSON = function () {
	return this.getToken(HiveParser.KW_JSON, 0);
};

TableDataSourceContext.prototype.KW_PARQUET = function () {
	return this.getToken(HiveParser.KW_PARQUET, 0);
};

TableDataSourceContext.prototype.KW_ORC = function () {
	return this.getToken(HiveParser.KW_ORC, 0);
};

TableDataSourceContext.prototype.KW_DELTA = function () {
	return this.getToken(HiveParser.KW_DELTA, 0);
};

TableDataSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableDataSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableDataSourceContext = TableDataSourceContext;

HiveParser.prototype.tableDataSource = function () {
	var localctx = new TableDataSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 304, HiveParser.RULE_tableDataSource);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2297;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 336) & ~0x1f) == 0 &&
				((1 << (_la - 336)) &
					((1 << (HiveParser.KW_ORC - 336)) |
						(1 << (HiveParser.KW_PARQUET - 336)) |
						(1 << (HiveParser.KW_DELTA - 336)) |
						(1 << (HiveParser.KW_AVRO - 336)) |
						(1 << (HiveParser.KW_CSV - 336)) |
						(1 << (HiveParser.KW_JSON - 336)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TablePartitionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tablePartition;
	return this;
}

TablePartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePartitionContext.prototype.constructor = TablePartitionContext;

TablePartitionContext.prototype.KW_PARTITIONED = function () {
	return this.getToken(HiveParser.KW_PARTITIONED, 0);
};

TablePartitionContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TablePartitionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

TablePartitionContext.prototype.partitionedColumnNameTypeConstraint = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PartitionedColumnNameTypeConstraintContext);
	} else {
		return this.getTypedRuleContext(PartitionedColumnNameTypeConstraintContext, i);
	}
};

TablePartitionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

TablePartitionContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

TablePartitionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTablePartition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TablePartitionContext = TablePartitionContext;

HiveParser.prototype.tablePartition = function () {
	var localctx = new TablePartitionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 306, HiveParser.RULE_tablePartition);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2299;
		this.match(HiveParser.KW_PARTITIONED);
		this.state = 2300;
		this.match(HiveParser.KW_BY);
		this.state = 2301;
		this.match(HiveParser.LPAREN);
		this.state = 2302;
		this.partitionedColumnNameTypeConstraint();
		this.state = 2307;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2303;
			this.match(HiveParser.COMMA);
			this.state = 2304;
			this.partitionedColumnNameTypeConstraint();
			this.state = 2309;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 2310;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableBucketsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableBuckets;
	return this;
}

TableBucketsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableBucketsContext.prototype.constructor = TableBucketsContext;

TableBucketsContext.prototype.KW_CLUSTERED = function () {
	return this.getToken(HiveParser.KW_CLUSTERED, 0);
};

TableBucketsContext.prototype.KW_BY = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_BY);
	} else {
		return this.getToken(HiveParser.KW_BY, i);
	}
};

TableBucketsContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.LPAREN);
	} else {
		return this.getToken(HiveParser.LPAREN, i);
	}
};

TableBucketsContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

TableBucketsContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.RPAREN);
	} else {
		return this.getToken(HiveParser.RPAREN, i);
	}
};

TableBucketsContext.prototype.KW_INTO = function () {
	return this.getToken(HiveParser.KW_INTO, 0);
};

TableBucketsContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

TableBucketsContext.prototype.KW_BUCKETS = function () {
	return this.getToken(HiveParser.KW_BUCKETS, 0);
};

TableBucketsContext.prototype.KW_SORTED = function () {
	return this.getToken(HiveParser.KW_SORTED, 0);
};

TableBucketsContext.prototype.columnNameOrderList = function () {
	return this.getTypedRuleContext(ColumnNameOrderListContext, 0);
};

TableBucketsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableBuckets(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableBucketsContext = TableBucketsContext;

HiveParser.prototype.tableBuckets = function () {
	var localctx = new TableBucketsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 308, HiveParser.RULE_tableBuckets);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2312;
		this.match(HiveParser.KW_CLUSTERED);
		this.state = 2313;
		this.match(HiveParser.KW_BY);
		this.state = 2314;
		this.match(HiveParser.LPAREN);
		this.state = 2315;
		this.columnNameList();
		this.state = 2316;
		this.match(HiveParser.RPAREN);
		this.state = 2323;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_SORTED) {
			this.state = 2317;
			this.match(HiveParser.KW_SORTED);
			this.state = 2318;
			this.match(HiveParser.KW_BY);
			this.state = 2319;
			this.match(HiveParser.LPAREN);
			this.state = 2320;
			this.columnNameOrderList();
			this.state = 2321;
			this.match(HiveParser.RPAREN);
		}

		this.state = 2325;
		this.match(HiveParser.KW_INTO);
		this.state = 2326;
		this.match(HiveParser.Number);
		this.state = 2327;
		this.match(HiveParser.KW_BUCKETS);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableSkewedContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableSkewed;
	return this;
}

TableSkewedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSkewedContext.prototype.constructor = TableSkewedContext;

TableSkewedContext.prototype.KW_SKEWED = function () {
	return this.getToken(HiveParser.KW_SKEWED, 0);
};

TableSkewedContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TableSkewedContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.LPAREN);
	} else {
		return this.getToken(HiveParser.LPAREN, i);
	}
};

TableSkewedContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

TableSkewedContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.RPAREN);
	} else {
		return this.getToken(HiveParser.RPAREN, i);
	}
};

TableSkewedContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

TableSkewedContext.prototype.skewedValueElement = function () {
	return this.getTypedRuleContext(SkewedValueElementContext, 0);
};

TableSkewedContext.prototype.storedAsDirs = function () {
	return this.getTypedRuleContext(StoredAsDirsContext, 0);
};

TableSkewedContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableSkewed(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableSkewedContext = TableSkewedContext;

HiveParser.prototype.tableSkewed = function () {
	var localctx = new TableSkewedContext(this, this._ctx, this.state);
	this.enterRule(localctx, 310, HiveParser.RULE_tableSkewed);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2329;
		this.match(HiveParser.KW_SKEWED);
		this.state = 2330;
		this.match(HiveParser.KW_BY);
		this.state = 2331;
		this.match(HiveParser.LPAREN);
		this.state = 2332;
		this.columnNameList();
		this.state = 2333;
		this.match(HiveParser.RPAREN);
		this.state = 2334;
		this.match(HiveParser.KW_ON);
		this.state = 2335;
		this.match(HiveParser.LPAREN);
		this.state = 2336;
		this.skewedValueElement();
		this.state = 2337;
		this.match(HiveParser.RPAREN);
		this.state = 2339;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 207, this._ctx);
		if (la_ === 1) {
			this.state = 2338;
			this.storedAsDirs();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RowFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rowFormat;
	return this;
}

RowFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowFormatContext.prototype.constructor = RowFormatContext;

RowFormatContext.prototype.rowFormatSerde = function () {
	return this.getTypedRuleContext(RowFormatSerdeContext, 0);
};

RowFormatContext.prototype.rowFormatDelimited = function () {
	return this.getTypedRuleContext(RowFormatDelimitedContext, 0);
};

RowFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRowFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RowFormatContext = RowFormatContext;

HiveParser.prototype.rowFormat = function () {
	var localctx = new RowFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 312, HiveParser.RULE_rowFormat);
	try {
		this.state = 2343;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 208, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2341;
				this.rowFormatSerde();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2342;
				this.rowFormatDelimited();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RecordReaderContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_recordReader;
	return this;
}

RecordReaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordReaderContext.prototype.constructor = RecordReaderContext;

RecordReaderContext.prototype.KW_RECORDREADER = function () {
	return this.getToken(HiveParser.KW_RECORDREADER, 0);
};

RecordReaderContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

RecordReaderContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRecordReader(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RecordReaderContext = RecordReaderContext;

HiveParser.prototype.recordReader = function () {
	var localctx = new RecordReaderContext(this, this._ctx, this.state);
	this.enterRule(localctx, 314, HiveParser.RULE_recordReader);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2345;
		this.match(HiveParser.KW_RECORDREADER);
		this.state = 2346;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RecordWriterContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_recordWriter;
	return this;
}

RecordWriterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordWriterContext.prototype.constructor = RecordWriterContext;

RecordWriterContext.prototype.KW_RECORDWRITER = function () {
	return this.getToken(HiveParser.KW_RECORDWRITER, 0);
};

RecordWriterContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

RecordWriterContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRecordWriter(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RecordWriterContext = RecordWriterContext;

HiveParser.prototype.recordWriter = function () {
	var localctx = new RecordWriterContext(this, this._ctx, this.state);
	this.enterRule(localctx, 316, HiveParser.RULE_recordWriter);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2348;
		this.match(HiveParser.KW_RECORDWRITER);
		this.state = 2349;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RowFormatSerdeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rowFormatSerde;
	return this;
}

RowFormatSerdeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowFormatSerdeContext.prototype.constructor = RowFormatSerdeContext;

RowFormatSerdeContext.prototype.KW_ROW = function () {
	return this.getToken(HiveParser.KW_ROW, 0);
};

RowFormatSerdeContext.prototype.KW_FORMAT = function () {
	return this.getToken(HiveParser.KW_FORMAT, 0);
};

RowFormatSerdeContext.prototype.KW_SERDE = function () {
	return this.getToken(HiveParser.KW_SERDE, 0);
};

RowFormatSerdeContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

RowFormatSerdeContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

RowFormatSerdeContext.prototype.KW_SERDEPROPERTIES = function () {
	return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
};

RowFormatSerdeContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

RowFormatSerdeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRowFormatSerde(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RowFormatSerdeContext = RowFormatSerdeContext;

HiveParser.prototype.rowFormatSerde = function () {
	var localctx = new RowFormatSerdeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 318, HiveParser.RULE_rowFormatSerde);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2351;
		this.match(HiveParser.KW_ROW);
		this.state = 2352;
		this.match(HiveParser.KW_FORMAT);
		this.state = 2353;
		this.match(HiveParser.KW_SERDE);
		this.state = 2354;
		this.match(HiveParser.StringLiteral);
		this.state = 2358;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 2355;
			this.match(HiveParser.KW_WITH);
			this.state = 2356;
			this.match(HiveParser.KW_SERDEPROPERTIES);
			this.state = 2357;
			this.tableProperties();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RowFormatDelimitedContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rowFormatDelimited;
	return this;
}

RowFormatDelimitedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowFormatDelimitedContext.prototype.constructor = RowFormatDelimitedContext;

RowFormatDelimitedContext.prototype.KW_ROW = function () {
	return this.getToken(HiveParser.KW_ROW, 0);
};

RowFormatDelimitedContext.prototype.KW_FORMAT = function () {
	return this.getToken(HiveParser.KW_FORMAT, 0);
};

RowFormatDelimitedContext.prototype.KW_DELIMITED = function () {
	return this.getToken(HiveParser.KW_DELIMITED, 0);
};

RowFormatDelimitedContext.prototype.tableRowFormatFieldIdentifier = function () {
	return this.getTypedRuleContext(TableRowFormatFieldIdentifierContext, 0);
};

RowFormatDelimitedContext.prototype.tableRowFormatCollItemsIdentifier = function () {
	return this.getTypedRuleContext(TableRowFormatCollItemsIdentifierContext, 0);
};

RowFormatDelimitedContext.prototype.tableRowFormatMapKeysIdentifier = function () {
	return this.getTypedRuleContext(TableRowFormatMapKeysIdentifierContext, 0);
};

RowFormatDelimitedContext.prototype.tableRowFormatLinesIdentifier = function () {
	return this.getTypedRuleContext(TableRowFormatLinesIdentifierContext, 0);
};

RowFormatDelimitedContext.prototype.tableRowNullFormat = function () {
	return this.getTypedRuleContext(TableRowNullFormatContext, 0);
};

RowFormatDelimitedContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRowFormatDelimited(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RowFormatDelimitedContext = RowFormatDelimitedContext;

HiveParser.prototype.rowFormatDelimited = function () {
	var localctx = new RowFormatDelimitedContext(this, this._ctx, this.state);
	this.enterRule(localctx, 320, HiveParser.RULE_rowFormatDelimited);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2360;
		this.match(HiveParser.KW_ROW);
		this.state = 2361;
		this.match(HiveParser.KW_FORMAT);
		this.state = 2362;
		this.match(HiveParser.KW_DELIMITED);
		this.state = 2364;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_FIELDS) {
			this.state = 2363;
			this.tableRowFormatFieldIdentifier();
		}

		this.state = 2367;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COLLECTION) {
			this.state = 2366;
			this.tableRowFormatCollItemsIdentifier();
		}

		this.state = 2370;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 212, this._ctx);
		if (la_ === 1) {
			this.state = 2369;
			this.tableRowFormatMapKeysIdentifier();
		}
		this.state = 2373;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LINES) {
			this.state = 2372;
			this.tableRowFormatLinesIdentifier();
		}

		this.state = 2376;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_NULL) {
			this.state = 2375;
			this.tableRowNullFormat();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableRowFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableRowFormat;
	return this;
}

TableRowFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRowFormatContext.prototype.constructor = TableRowFormatContext;

TableRowFormatContext.prototype.rowFormatDelimited = function () {
	return this.getTypedRuleContext(RowFormatDelimitedContext, 0);
};

TableRowFormatContext.prototype.rowFormatSerde = function () {
	return this.getTypedRuleContext(RowFormatSerdeContext, 0);
};

TableRowFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableRowFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableRowFormatContext = TableRowFormatContext;

HiveParser.prototype.tableRowFormat = function () {
	var localctx = new TableRowFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 322, HiveParser.RULE_tableRowFormat);
	try {
		this.state = 2380;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 215, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2378;
				this.rowFormatDelimited();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2379;
				this.rowFormatSerde();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TablePropertiesPrefixedContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tablePropertiesPrefixed;
	return this;
}

TablePropertiesPrefixedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertiesPrefixedContext.prototype.constructor = TablePropertiesPrefixedContext;

TablePropertiesPrefixedContext.prototype.KW_TBLPROPERTIES = function () {
	return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
};

TablePropertiesPrefixedContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

TablePropertiesPrefixedContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTablePropertiesPrefixed(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TablePropertiesPrefixedContext = TablePropertiesPrefixedContext;

HiveParser.prototype.tablePropertiesPrefixed = function () {
	var localctx = new TablePropertiesPrefixedContext(this, this._ctx, this.state);
	this.enterRule(localctx, 324, HiveParser.RULE_tablePropertiesPrefixed);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2382;
		this.match(HiveParser.KW_TBLPROPERTIES);
		this.state = 2383;
		this.tableProperties();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TablePropertiesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableProperties;
	return this;
}

TablePropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertiesContext.prototype.constructor = TablePropertiesContext;

TablePropertiesContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

TablePropertiesContext.prototype.tablePropertiesList = function () {
	return this.getTypedRuleContext(TablePropertiesListContext, 0);
};

TablePropertiesContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

TablePropertiesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableProperties(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TablePropertiesContext = TablePropertiesContext;

HiveParser.prototype.tableProperties = function () {
	var localctx = new TablePropertiesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 326, HiveParser.RULE_tableProperties);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2385;
		this.match(HiveParser.LPAREN);
		this.state = 2386;
		this.tablePropertiesList();
		this.state = 2387;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TablePropertiesListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tablePropertiesList;
	return this;
}

TablePropertiesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertiesListContext.prototype.constructor = TablePropertiesListContext;

TablePropertiesListContext.prototype.keyValueProperty = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(KeyValuePropertyContext);
	} else {
		return this.getTypedRuleContext(KeyValuePropertyContext, i);
	}
};

TablePropertiesListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

TablePropertiesListContext.prototype.keyProperty = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(KeyPropertyContext);
	} else {
		return this.getTypedRuleContext(KeyPropertyContext, i);
	}
};

TablePropertiesListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTablePropertiesList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TablePropertiesListContext = TablePropertiesListContext;

HiveParser.prototype.tablePropertiesList = function () {
	var localctx = new TablePropertiesListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 328, HiveParser.RULE_tablePropertiesList);
	var _la = 0; // Token type
	try {
		this.state = 2405;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 218, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2389;
				this.keyValueProperty();
				this.state = 2394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					this.state = 2390;
					this.match(HiveParser.COMMA);
					this.state = 2391;
					this.keyValueProperty();
					this.state = 2396;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2397;
				this.keyProperty();
				this.state = 2402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					this.state = 2398;
					this.match(HiveParser.COMMA);
					this.state = 2399;
					this.keyProperty();
					this.state = 2404;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function KeyValuePropertyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_keyValueProperty;
	return this;
}

KeyValuePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyValuePropertyContext.prototype.constructor = KeyValuePropertyContext;

KeyValuePropertyContext.prototype.keyProperty = function () {
	return this.getTypedRuleContext(KeyPropertyContext, 0);
};

KeyValuePropertyContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

KeyValuePropertyContext.prototype.keyValue = function () {
	return this.getTypedRuleContext(KeyValueContext, 0);
};

KeyValuePropertyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitKeyValueProperty(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.KeyValuePropertyContext = KeyValuePropertyContext;

HiveParser.prototype.keyValueProperty = function () {
	var localctx = new KeyValuePropertyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 330, HiveParser.RULE_keyValueProperty);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2407;
		this.keyProperty();
		this.state = 2408;
		this.match(HiveParser.EQUAL);
		this.state = 2409;
		this.keyValue();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function KeyValueContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_keyValue;
	return this;
}

KeyValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyValueContext.prototype.constructor = KeyValueContext;

KeyValueContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

KeyValueContext.prototype.booleanValue = function () {
	return this.getTypedRuleContext(BooleanValueContext, 0);
};

KeyValueContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

KeyValueContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitKeyValue(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.KeyValueContext = KeyValueContext;

HiveParser.prototype.keyValue = function () {
	var localctx = new KeyValueContext(this, this._ctx, this.state);
	this.enterRule(localctx, 332, HiveParser.RULE_keyValue);
	try {
		this.state = 2414;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.Number:
				this.enterOuterAlt(localctx, 1);
				this.state = 2411;
				this.match(HiveParser.Number);
				break;
			case HiveParser.KW_TRUE:
			case HiveParser.KW_FALSE:
				this.enterOuterAlt(localctx, 2);
				this.state = 2412;
				this.booleanValue();
				break;
			case HiveParser.StringLiteral:
				this.enterOuterAlt(localctx, 3);
				this.state = 2413;
				this.match(HiveParser.StringLiteral);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function KeyPropertyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_keyProperty;
	return this;
}

KeyPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyPropertyContext.prototype.constructor = KeyPropertyContext;

KeyPropertyContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

KeyPropertyContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.DOT);
	} else {
		return this.getToken(HiveParser.DOT, i);
	}
};

KeyPropertyContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

KeyPropertyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitKeyProperty(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.KeyPropertyContext = KeyPropertyContext;

HiveParser.prototype.keyProperty = function () {
	var localctx = new KeyPropertyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 334, HiveParser.RULE_keyProperty);
	var _la = 0; // Token type
	try {
		this.state = 2425;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 1);
				this.state = 2416;
				this.identifier();
				this.state = 2421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.DOT) {
					this.state = 2417;
					this.match(HiveParser.DOT);
					this.state = 2418;
					this.identifier();
					this.state = 2423;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				break;
			case HiveParser.StringLiteral:
				this.enterOuterAlt(localctx, 2);
				this.state = 2424;
				this.match(HiveParser.StringLiteral);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableRowFormatFieldIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableRowFormatFieldIdentifier;
	return this;
}

TableRowFormatFieldIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRowFormatFieldIdentifierContext.prototype.constructor = TableRowFormatFieldIdentifierContext;

TableRowFormatFieldIdentifierContext.prototype.KW_FIELDS = function () {
	return this.getToken(HiveParser.KW_FIELDS, 0);
};

TableRowFormatFieldIdentifierContext.prototype.KW_TERMINATED = function () {
	return this.getToken(HiveParser.KW_TERMINATED, 0);
};

TableRowFormatFieldIdentifierContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TableRowFormatFieldIdentifierContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableRowFormatFieldIdentifierContext.prototype.tableRowFormatFieldIdentifierEcapedBy = function () {
	return this.getTypedRuleContext(TableRowFormatFieldIdentifierEcapedByContext, 0);
};

TableRowFormatFieldIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableRowFormatFieldIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableRowFormatFieldIdentifierContext = TableRowFormatFieldIdentifierContext;

HiveParser.prototype.tableRowFormatFieldIdentifier = function () {
	var localctx = new TableRowFormatFieldIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 336, HiveParser.RULE_tableRowFormatFieldIdentifier);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2427;
		this.match(HiveParser.KW_FIELDS);
		this.state = 2428;
		this.match(HiveParser.KW_TERMINATED);
		this.state = 2429;
		this.match(HiveParser.KW_BY);
		this.state = 2430;
		this.match(HiveParser.StringLiteral);
		this.state = 2432;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ESCAPED) {
			this.state = 2431;
			this.tableRowFormatFieldIdentifierEcapedBy();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableRowFormatFieldIdentifierEcapedByContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableRowFormatFieldIdentifierEcapedBy;
	return this;
}

TableRowFormatFieldIdentifierEcapedByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRowFormatFieldIdentifierEcapedByContext.prototype.constructor = TableRowFormatFieldIdentifierEcapedByContext;

TableRowFormatFieldIdentifierEcapedByContext.prototype.KW_ESCAPED = function () {
	return this.getToken(HiveParser.KW_ESCAPED, 0);
};

TableRowFormatFieldIdentifierEcapedByContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TableRowFormatFieldIdentifierEcapedByContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableRowFormatFieldIdentifierEcapedByContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableRowFormatFieldIdentifierEcapedBy(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableRowFormatFieldIdentifierEcapedByContext = TableRowFormatFieldIdentifierEcapedByContext;

HiveParser.prototype.tableRowFormatFieldIdentifierEcapedBy = function () {
	var localctx = new TableRowFormatFieldIdentifierEcapedByContext(this, this._ctx, this.state);
	this.enterRule(localctx, 338, HiveParser.RULE_tableRowFormatFieldIdentifierEcapedBy);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2434;
		this.match(HiveParser.KW_ESCAPED);
		this.state = 2435;
		this.match(HiveParser.KW_BY);
		this.state = 2436;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableRowFormatCollItemsIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableRowFormatCollItemsIdentifier;
	return this;
}

TableRowFormatCollItemsIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRowFormatCollItemsIdentifierContext.prototype.constructor = TableRowFormatCollItemsIdentifierContext;

TableRowFormatCollItemsIdentifierContext.prototype.KW_COLLECTION = function () {
	return this.getToken(HiveParser.KW_COLLECTION, 0);
};

TableRowFormatCollItemsIdentifierContext.prototype.KW_ITEMS = function () {
	return this.getToken(HiveParser.KW_ITEMS, 0);
};

TableRowFormatCollItemsIdentifierContext.prototype.KW_TERMINATED = function () {
	return this.getToken(HiveParser.KW_TERMINATED, 0);
};

TableRowFormatCollItemsIdentifierContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TableRowFormatCollItemsIdentifierContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableRowFormatCollItemsIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableRowFormatCollItemsIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableRowFormatCollItemsIdentifierContext = TableRowFormatCollItemsIdentifierContext;

HiveParser.prototype.tableRowFormatCollItemsIdentifier = function () {
	var localctx = new TableRowFormatCollItemsIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 340, HiveParser.RULE_tableRowFormatCollItemsIdentifier);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2438;
		this.match(HiveParser.KW_COLLECTION);
		this.state = 2439;
		this.match(HiveParser.KW_ITEMS);
		this.state = 2440;
		this.match(HiveParser.KW_TERMINATED);
		this.state = 2441;
		this.match(HiveParser.KW_BY);
		this.state = 2442;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableRowFormatMapKeysIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableRowFormatMapKeysIdentifier;
	return this;
}

TableRowFormatMapKeysIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRowFormatMapKeysIdentifierContext.prototype.constructor = TableRowFormatMapKeysIdentifierContext;

TableRowFormatMapKeysIdentifierContext.prototype.KW_MAP = function () {
	return this.getToken(HiveParser.KW_MAP, 0);
};

TableRowFormatMapKeysIdentifierContext.prototype.KW_KEYS = function () {
	return this.getToken(HiveParser.KW_KEYS, 0);
};

TableRowFormatMapKeysIdentifierContext.prototype.KW_TERMINATED = function () {
	return this.getToken(HiveParser.KW_TERMINATED, 0);
};

TableRowFormatMapKeysIdentifierContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TableRowFormatMapKeysIdentifierContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableRowFormatMapKeysIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableRowFormatMapKeysIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableRowFormatMapKeysIdentifierContext = TableRowFormatMapKeysIdentifierContext;

HiveParser.prototype.tableRowFormatMapKeysIdentifier = function () {
	var localctx = new TableRowFormatMapKeysIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 342, HiveParser.RULE_tableRowFormatMapKeysIdentifier);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2444;
		this.match(HiveParser.KW_MAP);
		this.state = 2445;
		this.match(HiveParser.KW_KEYS);
		this.state = 2446;
		this.match(HiveParser.KW_TERMINATED);
		this.state = 2447;
		this.match(HiveParser.KW_BY);
		this.state = 2448;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableRowFormatLinesIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableRowFormatLinesIdentifier;
	return this;
}

TableRowFormatLinesIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRowFormatLinesIdentifierContext.prototype.constructor = TableRowFormatLinesIdentifierContext;

TableRowFormatLinesIdentifierContext.prototype.KW_LINES = function () {
	return this.getToken(HiveParser.KW_LINES, 0);
};

TableRowFormatLinesIdentifierContext.prototype.KW_TERMINATED = function () {
	return this.getToken(HiveParser.KW_TERMINATED, 0);
};

TableRowFormatLinesIdentifierContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TableRowFormatLinesIdentifierContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableRowFormatLinesIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableRowFormatLinesIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableRowFormatLinesIdentifierContext = TableRowFormatLinesIdentifierContext;

HiveParser.prototype.tableRowFormatLinesIdentifier = function () {
	var localctx = new TableRowFormatLinesIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 344, HiveParser.RULE_tableRowFormatLinesIdentifier);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2450;
		this.match(HiveParser.KW_LINES);
		this.state = 2451;
		this.match(HiveParser.KW_TERMINATED);
		this.state = 2452;
		this.match(HiveParser.KW_BY);
		this.state = 2453;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableRowNullFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableRowNullFormat;
	return this;
}

TableRowNullFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableRowNullFormatContext.prototype.constructor = TableRowNullFormatContext;

TableRowNullFormatContext.prototype.KW_NULL = function () {
	return this.getToken(HiveParser.KW_NULL, 0);
};

TableRowNullFormatContext.prototype.KW_DEFINED = function () {
	return this.getToken(HiveParser.KW_DEFINED, 0);
};

TableRowNullFormatContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

TableRowNullFormatContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableRowNullFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableRowNullFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableRowNullFormatContext = TableRowNullFormatContext;

HiveParser.prototype.tableRowNullFormat = function () {
	var localctx = new TableRowNullFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 346, HiveParser.RULE_tableRowNullFormat);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2455;
		this.match(HiveParser.KW_NULL);
		this.state = 2456;
		this.match(HiveParser.KW_DEFINED);
		this.state = 2457;
		this.match(HiveParser.KW_AS);
		this.state = 2458;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableFileFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableFileFormat;
	return this;
}

TableFileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFileFormatContext.prototype.constructor = TableFileFormatContext;

TableFileFormatContext.prototype.tableInputOutputFileFormat = function () {
	return this.getTypedRuleContext(TableInputOutputFileFormatContext, 0);
};

TableFileFormatContext.prototype.tableFileFormatStoredBy = function () {
	return this.getTypedRuleContext(TableFileFormatStoredByContext, 0);
};

TableFileFormatContext.prototype.tableFileFormatStoredAs = function () {
	return this.getTypedRuleContext(TableFileFormatStoredAsContext, 0);
};

TableFileFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableFileFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableFileFormatContext = TableFileFormatContext;

HiveParser.prototype.tableFileFormat = function () {
	var localctx = new TableFileFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 348, HiveParser.RULE_tableFileFormat);
	try {
		this.state = 2463;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 223, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2460;
				this.tableInputOutputFileFormat();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2461;
				this.tableFileFormatStoredBy();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 2462;
				this.tableFileFormatStoredAs();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableFileFormatStoredByContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableFileFormatStoredBy;
	return this;
}

TableFileFormatStoredByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFileFormatStoredByContext.prototype.constructor = TableFileFormatStoredByContext;

TableFileFormatStoredByContext.prototype.KW_STORED = function () {
	return this.getToken(HiveParser.KW_STORED, 0);
};

TableFileFormatStoredByContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

TableFileFormatStoredByContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableFileFormatStoredByContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

TableFileFormatStoredByContext.prototype.KW_SERDEPROPERTIES = function () {
	return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
};

TableFileFormatStoredByContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

TableFileFormatStoredByContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableFileFormatStoredBy(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableFileFormatStoredByContext = TableFileFormatStoredByContext;

HiveParser.prototype.tableFileFormatStoredBy = function () {
	var localctx = new TableFileFormatStoredByContext(this, this._ctx, this.state);
	this.enterRule(localctx, 350, HiveParser.RULE_tableFileFormatStoredBy);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2465;
		this.match(HiveParser.KW_STORED);
		this.state = 2466;
		this.match(HiveParser.KW_BY);
		this.state = 2467;
		this.match(HiveParser.StringLiteral);
		this.state = 2471;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 2468;
			this.match(HiveParser.KW_WITH);
			this.state = 2469;
			this.match(HiveParser.KW_SERDEPROPERTIES);
			this.state = 2470;
			this.tableProperties();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableFileFormatStoredAsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableFileFormatStoredAs;
	return this;
}

TableFileFormatStoredAsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFileFormatStoredAsContext.prototype.constructor = TableFileFormatStoredAsContext;

TableFileFormatStoredAsContext.prototype.KW_STORED = function () {
	return this.getToken(HiveParser.KW_STORED, 0);
};

TableFileFormatStoredAsContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

TableFileFormatStoredAsContext.prototype.tableFileFormatStoredAsFormat = function () {
	return this.getTypedRuleContext(TableFileFormatStoredAsFormatContext, 0);
};

TableFileFormatStoredAsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableFileFormatStoredAs(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableFileFormatStoredAsContext = TableFileFormatStoredAsContext;

HiveParser.prototype.tableFileFormatStoredAs = function () {
	var localctx = new TableFileFormatStoredAsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 352, HiveParser.RULE_tableFileFormatStoredAs);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2473;
		this.match(HiveParser.KW_STORED);
		this.state = 2474;
		this.match(HiveParser.KW_AS);
		this.state = 2475;
		this.tableFileFormatStoredAsFormat();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableFileFormatStoredAsFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableFileFormatStoredAsFormat;
	return this;
}

TableFileFormatStoredAsFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFileFormatStoredAsFormatContext.prototype.constructor = TableFileFormatStoredAsFormatContext;

TableFileFormatStoredAsFormatContext.prototype.KW_SEQUENCEFILE = function () {
	return this.getToken(HiveParser.KW_SEQUENCEFILE, 0);
};

TableFileFormatStoredAsFormatContext.prototype.KW_TEXTFILE = function () {
	return this.getToken(HiveParser.KW_TEXTFILE, 0);
};

TableFileFormatStoredAsFormatContext.prototype.KW_RCFILE = function () {
	return this.getToken(HiveParser.KW_RCFILE, 0);
};

TableFileFormatStoredAsFormatContext.prototype.KW_ORC = function () {
	return this.getToken(HiveParser.KW_ORC, 0);
};

TableFileFormatStoredAsFormatContext.prototype.KW_PARQUET = function () {
	return this.getToken(HiveParser.KW_PARQUET, 0);
};

TableFileFormatStoredAsFormatContext.prototype.KW_AVRO = function () {
	return this.getToken(HiveParser.KW_AVRO, 0);
};

TableFileFormatStoredAsFormatContext.prototype.KW_JSONFILE = function () {
	return this.getToken(HiveParser.KW_JSONFILE, 0);
};

TableFileFormatStoredAsFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableFileFormatStoredAsFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableFileFormatStoredAsFormatContext = TableFileFormatStoredAsFormatContext;

HiveParser.prototype.tableFileFormatStoredAsFormat = function () {
	var localctx = new TableFileFormatStoredAsFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 354, HiveParser.RULE_tableFileFormatStoredAsFormat);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2477;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 333) & ~0x1f) == 0 &&
				((1 << (_la - 333)) &
					((1 << (HiveParser.KW_SEQUENCEFILE - 333)) |
						(1 << (HiveParser.KW_TEXTFILE - 333)) |
						(1 << (HiveParser.KW_RCFILE - 333)) |
						(1 << (HiveParser.KW_ORC - 333)) |
						(1 << (HiveParser.KW_PARQUET - 333)) |
						(1 << (HiveParser.KW_AVRO - 333)) |
						(1 << (HiveParser.KW_JSONFILE - 333)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableInputOutputFileFormatContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableInputOutputFileFormat;
	return this;
}

TableInputOutputFileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableInputOutputFileFormatContext.prototype.constructor = TableInputOutputFileFormatContext;

TableInputOutputFileFormatContext.prototype.KW_STORED = function () {
	return this.getToken(HiveParser.KW_STORED, 0);
};

TableInputOutputFileFormatContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

TableInputOutputFileFormatContext.prototype.tableInputLiteral = function () {
	return this.getTypedRuleContext(TableInputLiteralContext, 0);
};

TableInputOutputFileFormatContext.prototype.tableOutputLiteral = function () {
	return this.getTypedRuleContext(TableOutputLiteralContext, 0);
};

TableInputOutputFileFormatContext.prototype.KW_INPUTDRIVER = function () {
	return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
};

TableInputOutputFileFormatContext.prototype.StringLiteral = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.StringLiteral);
	} else {
		return this.getToken(HiveParser.StringLiteral, i);
	}
};

TableInputOutputFileFormatContext.prototype.KW_OUTPUTDRIVER = function () {
	return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
};

TableInputOutputFileFormatContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableInputOutputFileFormat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableInputOutputFileFormatContext = TableInputOutputFileFormatContext;

HiveParser.prototype.tableInputOutputFileFormat = function () {
	var localctx = new TableInputOutputFileFormatContext(this, this._ctx, this.state);
	this.enterRule(localctx, 356, HiveParser.RULE_tableInputOutputFileFormat);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2479;
		this.match(HiveParser.KW_STORED);
		this.state = 2480;
		this.match(HiveParser.KW_AS);
		this.state = 2481;
		this.tableInputLiteral();
		this.state = 2482;
		this.tableOutputLiteral();
		this.state = 2487;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_INPUTDRIVER) {
			this.state = 2483;
			this.match(HiveParser.KW_INPUTDRIVER);
			this.state = 2484;
			this.match(HiveParser.StringLiteral);
			this.state = 2485;
			this.match(HiveParser.KW_OUTPUTDRIVER);
			this.state = 2486;
			this.match(HiveParser.StringLiteral);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableInputLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableInputLiteral;
	return this;
}

TableInputLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableInputLiteralContext.prototype.constructor = TableInputLiteralContext;

TableInputLiteralContext.prototype.KW_INPUTFORMAT = function () {
	return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
};

TableInputLiteralContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableInputLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableInputLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableInputLiteralContext = TableInputLiteralContext;

HiveParser.prototype.tableInputLiteral = function () {
	var localctx = new TableInputLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 358, HiveParser.RULE_tableInputLiteral);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2489;
		this.match(HiveParser.KW_INPUTFORMAT);
		this.state = 2490;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableOutputLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableOutputLiteral;
	return this;
}

TableOutputLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOutputLiteralContext.prototype.constructor = TableOutputLiteralContext;

TableOutputLiteralContext.prototype.KW_OUTPUTFORMAT = function () {
	return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
};

TableOutputLiteralContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableOutputLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableOutputLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableOutputLiteralContext = TableOutputLiteralContext;

HiveParser.prototype.tableOutputLiteral = function () {
	var localctx = new TableOutputLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 360, HiveParser.RULE_tableOutputLiteral);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2492;
		this.match(HiveParser.KW_OUTPUTFORMAT);
		this.state = 2493;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableLocationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableLocation;
	return this;
}

TableLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableLocationContext.prototype.constructor = TableLocationContext;

TableLocationContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

TableLocationContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TableLocationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableLocation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableLocationContext = TableLocationContext;

HiveParser.prototype.tableLocation = function () {
	var localctx = new TableLocationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 362, HiveParser.RULE_tableLocation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2495;
		this.match(HiveParser.KW_LOCATION);
		this.state = 2496;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameTypeListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameTypeList;
	return this;
}

ColumnNameTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameTypeListContext.prototype.constructor = ColumnNameTypeListContext;

ColumnNameTypeListContext.prototype.columnNameType = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnNameTypeContext);
	} else {
		return this.getTypedRuleContext(ColumnNameTypeContext, i);
	}
};

ColumnNameTypeListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnNameTypeListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameTypeList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameTypeListContext = ColumnNameTypeListContext;

HiveParser.prototype.columnNameTypeList = function () {
	var localctx = new ColumnNameTypeListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 364, HiveParser.RULE_columnNameTypeList);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2498;
		this.columnNameType();
		this.state = 2503;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 226, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				this.state = 2499;
				this.match(HiveParser.COMMA);
				this.state = 2500;
				this.columnNameType();
			}
			this.state = 2505;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 226, this._ctx);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameTypeOrConstraintListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameTypeOrConstraintList;
	return this;
}

ColumnNameTypeOrConstraintListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameTypeOrConstraintListContext.prototype.constructor = ColumnNameTypeOrConstraintListContext;

ColumnNameTypeOrConstraintListContext.prototype.columnNameTypeOrConstraint = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnNameTypeOrConstraintContext);
	} else {
		return this.getTypedRuleContext(ColumnNameTypeOrConstraintContext, i);
	}
};

ColumnNameTypeOrConstraintListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnNameTypeOrConstraintListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameTypeOrConstraintList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameTypeOrConstraintListContext = ColumnNameTypeOrConstraintListContext;

HiveParser.prototype.columnNameTypeOrConstraintList = function () {
	var localctx = new ColumnNameTypeOrConstraintListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 366, HiveParser.RULE_columnNameTypeOrConstraintList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2506;
		this.columnNameTypeOrConstraint();
		this.state = 2511;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2507;
			this.match(HiveParser.COMMA);
			this.state = 2508;
			this.columnNameTypeOrConstraint();
			this.state = 2513;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameColonTypeListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameColonTypeList;
	return this;
}

ColumnNameColonTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameColonTypeListContext.prototype.constructor = ColumnNameColonTypeListContext;

ColumnNameColonTypeListContext.prototype.columnNameColonType = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnNameColonTypeContext);
	} else {
		return this.getTypedRuleContext(ColumnNameColonTypeContext, i);
	}
};

ColumnNameColonTypeListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnNameColonTypeListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameColonTypeList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameColonTypeListContext = ColumnNameColonTypeListContext;

HiveParser.prototype.columnNameColonTypeList = function () {
	var localctx = new ColumnNameColonTypeListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 368, HiveParser.RULE_columnNameColonTypeList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2514;
		this.columnNameColonType();
		this.state = 2519;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2515;
			this.match(HiveParser.COMMA);
			this.state = 2516;
			this.columnNameColonType();
			this.state = 2521;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameList;
	return this;
}

ColumnNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameListContext.prototype.constructor = ColumnNameListContext;

ColumnNameListContext.prototype.columnName = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnNameContext);
	} else {
		return this.getTypedRuleContext(ColumnNameContext, i);
	}
};

ColumnNameListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnNameListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameListContext = ColumnNameListContext;

HiveParser.prototype.columnNameList = function () {
	var localctx = new ColumnNameListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 370, HiveParser.RULE_columnNameList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2522;
		this.columnName();
		this.state = 2527;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2523;
			this.match(HiveParser.COMMA);
			this.state = 2524;
			this.columnName();
			this.state = 2529;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnName;
	return this;
}

ColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameContext.prototype.constructor = ColumnNameContext;

ColumnNameContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ColumnNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameContext = ColumnNameContext;

HiveParser.prototype.columnName = function () {
	var localctx = new ColumnNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 372, HiveParser.RULE_columnName);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2530;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExtColumnNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_extColumnName;
	return this;
}

ExtColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtColumnNameContext.prototype.constructor = ExtColumnNameContext;

ExtColumnNameContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

ExtColumnNameContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.DOT);
	} else {
		return this.getToken(HiveParser.DOT, i);
	}
};

ExtColumnNameContext.prototype.KW_ELEM_TYPE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_ELEM_TYPE);
	} else {
		return this.getToken(HiveParser.KW_ELEM_TYPE, i);
	}
};

ExtColumnNameContext.prototype.KW_KEY_TYPE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_KEY_TYPE);
	} else {
		return this.getToken(HiveParser.KW_KEY_TYPE, i);
	}
};

ExtColumnNameContext.prototype.KW_VALUE_TYPE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_VALUE_TYPE);
	} else {
		return this.getToken(HiveParser.KW_VALUE_TYPE, i);
	}
};

ExtColumnNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExtColumnName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExtColumnNameContext = ExtColumnNameContext;

HiveParser.prototype.extColumnName = function () {
	var localctx = new ExtColumnNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 374, HiveParser.RULE_extColumnName);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2532;
		this.identifier();
		this.state = 2542;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.DOT) {
			this.state = 2533;
			this.match(HiveParser.DOT);
			this.state = 2538;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 230, this._ctx);
			switch (la_) {
				case 1:
					this.state = 2534;
					this.match(HiveParser.KW_ELEM_TYPE);
					break;

				case 2:
					this.state = 2535;
					this.match(HiveParser.KW_KEY_TYPE);
					break;

				case 3:
					this.state = 2536;
					this.match(HiveParser.KW_VALUE_TYPE);
					break;

				case 4:
					this.state = 2537;
					this.identifier();
					break;
			}
			this.state = 2544;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameOrderListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameOrderList;
	return this;
}

ColumnNameOrderListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameOrderListContext.prototype.constructor = ColumnNameOrderListContext;

ColumnNameOrderListContext.prototype.columnNameOrder = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnNameOrderContext);
	} else {
		return this.getTypedRuleContext(ColumnNameOrderContext, i);
	}
};

ColumnNameOrderListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnNameOrderListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameOrderList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameOrderListContext = ColumnNameOrderListContext;

HiveParser.prototype.columnNameOrderList = function () {
	var localctx = new ColumnNameOrderListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 376, HiveParser.RULE_columnNameOrderList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2545;
		this.columnNameOrder();
		this.state = 2550;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2546;
			this.match(HiveParser.COMMA);
			this.state = 2547;
			this.columnNameOrder();
			this.state = 2552;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnParenthesesListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnParenthesesList;
	return this;
}

ColumnParenthesesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnParenthesesListContext.prototype.constructor = ColumnParenthesesListContext;

ColumnParenthesesListContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ColumnParenthesesListContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

ColumnParenthesesListContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ColumnParenthesesListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnParenthesesList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnParenthesesListContext = ColumnParenthesesListContext;

HiveParser.prototype.columnParenthesesList = function () {
	var localctx = new ColumnParenthesesListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 378, HiveParser.RULE_columnParenthesesList);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2553;
		this.match(HiveParser.LPAREN);
		this.state = 2554;
		this.columnNameList();
		this.state = 2555;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function EnableValidateSpecificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_enableValidateSpecification;
	return this;
}

EnableValidateSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnableValidateSpecificationContext.prototype.constructor = EnableValidateSpecificationContext;

EnableValidateSpecificationContext.prototype.enableSpecification = function () {
	return this.getTypedRuleContext(EnableSpecificationContext, 0);
};

EnableValidateSpecificationContext.prototype.validateSpecification = function () {
	return this.getTypedRuleContext(ValidateSpecificationContext, 0);
};

EnableValidateSpecificationContext.prototype.enforcedSpecification = function () {
	return this.getTypedRuleContext(EnforcedSpecificationContext, 0);
};

EnableValidateSpecificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitEnableValidateSpecification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.EnableValidateSpecificationContext = EnableValidateSpecificationContext;

HiveParser.prototype.enableValidateSpecification = function () {
	var localctx = new EnableValidateSpecificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 380, HiveParser.RULE_enableValidateSpecification);
	var _la = 0; // Token type
	try {
		this.state = 2562;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
				this.enterOuterAlt(localctx, 1);
				this.state = 2557;
				this.enableSpecification();
				this.state = 2559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_VALIDATE || _la === HiveParser.KW_NOVALIDATE) {
					this.state = 2558;
					this.validateSpecification();
				}

				break;
			case HiveParser.KW_NOT:
			case HiveParser.KW_ENFORCED:
				this.enterOuterAlt(localctx, 2);
				this.state = 2561;
				this.enforcedSpecification();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function EnableSpecificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_enableSpecification;
	return this;
}

EnableSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnableSpecificationContext.prototype.constructor = EnableSpecificationContext;

EnableSpecificationContext.prototype.KW_ENABLE = function () {
	return this.getToken(HiveParser.KW_ENABLE, 0);
};

EnableSpecificationContext.prototype.KW_DISABLE = function () {
	return this.getToken(HiveParser.KW_DISABLE, 0);
};

EnableSpecificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitEnableSpecification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.EnableSpecificationContext = EnableSpecificationContext;

HiveParser.prototype.enableSpecification = function () {
	var localctx = new EnableSpecificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 382, HiveParser.RULE_enableSpecification);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2564;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValidateSpecificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_validateSpecification;
	return this;
}

ValidateSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValidateSpecificationContext.prototype.constructor = ValidateSpecificationContext;

ValidateSpecificationContext.prototype.KW_VALIDATE = function () {
	return this.getToken(HiveParser.KW_VALIDATE, 0);
};

ValidateSpecificationContext.prototype.KW_NOVALIDATE = function () {
	return this.getToken(HiveParser.KW_NOVALIDATE, 0);
};

ValidateSpecificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitValidateSpecification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ValidateSpecificationContext = ValidateSpecificationContext;

HiveParser.prototype.validateSpecification = function () {
	var localctx = new ValidateSpecificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 384, HiveParser.RULE_validateSpecification);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2566;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_VALIDATE || _la === HiveParser.KW_NOVALIDATE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function EnforcedSpecificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_enforcedSpecification;
	return this;
}

EnforcedSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnforcedSpecificationContext.prototype.constructor = EnforcedSpecificationContext;

EnforcedSpecificationContext.prototype.KW_ENFORCED = function () {
	return this.getToken(HiveParser.KW_ENFORCED, 0);
};

EnforcedSpecificationContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

EnforcedSpecificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitEnforcedSpecification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.EnforcedSpecificationContext = EnforcedSpecificationContext;

HiveParser.prototype.enforcedSpecification = function () {
	var localctx = new EnforcedSpecificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 386, HiveParser.RULE_enforcedSpecification);
	try {
		this.state = 2571;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ENFORCED:
				this.enterOuterAlt(localctx, 1);
				this.state = 2568;
				this.match(HiveParser.KW_ENFORCED);
				break;
			case HiveParser.KW_NOT:
				this.enterOuterAlt(localctx, 2);
				this.state = 2569;
				this.match(HiveParser.KW_NOT);
				this.state = 2570;
				this.match(HiveParser.KW_ENFORCED);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RelySpecificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_relySpecification;
	return this;
}

RelySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelySpecificationContext.prototype.constructor = RelySpecificationContext;

RelySpecificationContext.prototype.KW_RELY = function () {
	return this.getToken(HiveParser.KW_RELY, 0);
};

RelySpecificationContext.prototype.KW_NORELY = function () {
	return this.getToken(HiveParser.KW_NORELY, 0);
};

RelySpecificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRelySpecification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RelySpecificationContext = RelySpecificationContext;

HiveParser.prototype.relySpecification = function () {
	var localctx = new RelySpecificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 388, HiveParser.RULE_relySpecification);
	var _la = 0; // Token type
	try {
		this.state = 2577;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_RELY:
				this.enterOuterAlt(localctx, 1);
				this.state = 2573;
				this.match(HiveParser.KW_RELY);
				break;
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_NORELY:
			case HiveParser.COMMA:
			case HiveParser.SEMICOLON:
			case HiveParser.RPAREN:
				this.enterOuterAlt(localctx, 2);
				this.state = 2575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_NORELY) {
					this.state = 2574;
					this.match(HiveParser.KW_NORELY);
				}

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createConstraint;
	return this;
}

CreateConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateConstraintContext.prototype.constructor = CreateConstraintContext;

CreateConstraintContext.prototype.tableLevelConstraint = function () {
	return this.getTypedRuleContext(TableLevelConstraintContext, 0);
};

CreateConstraintContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

CreateConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreateConstraintContext.prototype.constraintOptsCreate = function () {
	return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
};

CreateConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateConstraintContext = CreateConstraintContext;

HiveParser.prototype.createConstraint = function () {
	var localctx = new CreateConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 390, HiveParser.RULE_createConstraint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2581;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_CONSTRAINT) {
			this.state = 2579;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2580;
			this.identifier();
		}

		this.state = 2583;
		this.tableLevelConstraint();
		this.state = 2585;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2584;
			this.constraintOptsCreate();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterConstraintWithNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterConstraintWithName;
	return this;
}

AlterConstraintWithNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterConstraintWithNameContext.prototype.constructor = AlterConstraintWithNameContext;

AlterConstraintWithNameContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

AlterConstraintWithNameContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterConstraintWithNameContext.prototype.tableLevelConstraint = function () {
	return this.getTypedRuleContext(TableLevelConstraintContext, 0);
};

AlterConstraintWithNameContext.prototype.constraintOptsAlter = function () {
	return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
};

AlterConstraintWithNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterConstraintWithName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterConstraintWithNameContext = AlterConstraintWithNameContext;

HiveParser.prototype.alterConstraintWithName = function () {
	var localctx = new AlterConstraintWithNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 392, HiveParser.RULE_alterConstraintWithName);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2587;
		this.match(HiveParser.KW_CONSTRAINT);
		this.state = 2588;
		this.identifier();
		this.state = 2589;
		this.tableLevelConstraint();
		this.state = 2591;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2590;
			this.constraintOptsAlter();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableLevelConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableLevelConstraint;
	return this;
}

TableLevelConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableLevelConstraintContext.prototype.constructor = TableLevelConstraintContext;

TableLevelConstraintContext.prototype.pkUkConstraint = function () {
	return this.getTypedRuleContext(PkUkConstraintContext, 0);
};

TableLevelConstraintContext.prototype.checkConstraint = function () {
	return this.getTypedRuleContext(CheckConstraintContext, 0);
};

TableLevelConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableLevelConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableLevelConstraintContext = TableLevelConstraintContext;

HiveParser.prototype.tableLevelConstraint = function () {
	var localctx = new TableLevelConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 394, HiveParser.RULE_tableLevelConstraint);
	try {
		this.state = 2595;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_PRIMARY:
			case HiveParser.KW_UNIQUE:
				this.enterOuterAlt(localctx, 1);
				this.state = 2593;
				this.pkUkConstraint();
				break;
			case HiveParser.KW_CHECK:
				this.enterOuterAlt(localctx, 2);
				this.state = 2594;
				this.checkConstraint();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PkUkConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_pkUkConstraint;
	this.pkCols = null; // ColumnParenthesesListContext
	return this;
}

PkUkConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PkUkConstraintContext.prototype.constructor = PkUkConstraintContext;

PkUkConstraintContext.prototype.tableConstraintType = function () {
	return this.getTypedRuleContext(TableConstraintTypeContext, 0);
};

PkUkConstraintContext.prototype.columnParenthesesList = function () {
	return this.getTypedRuleContext(ColumnParenthesesListContext, 0);
};

PkUkConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPkUkConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PkUkConstraintContext = PkUkConstraintContext;

HiveParser.prototype.pkUkConstraint = function () {
	var localctx = new PkUkConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 396, HiveParser.RULE_pkUkConstraint);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2597;
		this.tableConstraintType();
		this.state = 2598;
		localctx.pkCols = this.columnParenthesesList();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CheckConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_checkConstraint;
	return this;
}

CheckConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckConstraintContext.prototype.constructor = CheckConstraintContext;

CheckConstraintContext.prototype.KW_CHECK = function () {
	return this.getToken(HiveParser.KW_CHECK, 0);
};

CheckConstraintContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

CheckConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCheckConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CheckConstraintContext = CheckConstraintContext;

HiveParser.prototype.checkConstraint = function () {
	var localctx = new CheckConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 398, HiveParser.RULE_checkConstraint);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2600;
		this.match(HiveParser.KW_CHECK);
		this.state = 2601;
		this.expression(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateForeignKeyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createForeignKey;
	return this;
}

CreateForeignKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateForeignKeyContext.prototype.constructor = CreateForeignKeyContext;

CreateForeignKeyContext.prototype.KW_FOREIGN = function () {
	return this.getToken(HiveParser.KW_FOREIGN, 0);
};

CreateForeignKeyContext.prototype.KW_KEY = function () {
	return this.getToken(HiveParser.KW_KEY, 0);
};

CreateForeignKeyContext.prototype.columnParenthesesList = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnParenthesesListContext);
	} else {
		return this.getTypedRuleContext(ColumnParenthesesListContext, i);
	}
};

CreateForeignKeyContext.prototype.KW_REFERENCES = function () {
	return this.getToken(HiveParser.KW_REFERENCES, 0);
};

CreateForeignKeyContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

CreateForeignKeyContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

CreateForeignKeyContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreateForeignKeyContext.prototype.constraintOptsCreate = function () {
	return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
};

CreateForeignKeyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateForeignKey(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateForeignKeyContext = CreateForeignKeyContext;

HiveParser.prototype.createForeignKey = function () {
	var localctx = new CreateForeignKeyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 400, HiveParser.RULE_createForeignKey);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2605;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_CONSTRAINT) {
			this.state = 2603;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2604;
			this.identifier();
		}

		this.state = 2607;
		this.match(HiveParser.KW_FOREIGN);
		this.state = 2608;
		this.match(HiveParser.KW_KEY);
		this.state = 2609;
		this.columnParenthesesList();
		this.state = 2610;
		this.match(HiveParser.KW_REFERENCES);
		this.state = 2611;
		this.tableName();
		this.state = 2612;
		this.columnParenthesesList();
		this.state = 2614;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2613;
			this.constraintOptsCreate();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterForeignKeyWithNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterForeignKeyWithName;
	return this;
}

AlterForeignKeyWithNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterForeignKeyWithNameContext.prototype.constructor = AlterForeignKeyWithNameContext;

AlterForeignKeyWithNameContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

AlterForeignKeyWithNameContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterForeignKeyWithNameContext.prototype.KW_FOREIGN = function () {
	return this.getToken(HiveParser.KW_FOREIGN, 0);
};

AlterForeignKeyWithNameContext.prototype.KW_KEY = function () {
	return this.getToken(HiveParser.KW_KEY, 0);
};

AlterForeignKeyWithNameContext.prototype.columnParenthesesList = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnParenthesesListContext);
	} else {
		return this.getTypedRuleContext(ColumnParenthesesListContext, i);
	}
};

AlterForeignKeyWithNameContext.prototype.KW_REFERENCES = function () {
	return this.getToken(HiveParser.KW_REFERENCES, 0);
};

AlterForeignKeyWithNameContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

AlterForeignKeyWithNameContext.prototype.constraintOptsAlter = function () {
	return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
};

AlterForeignKeyWithNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterForeignKeyWithName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterForeignKeyWithNameContext = AlterForeignKeyWithNameContext;

HiveParser.prototype.alterForeignKeyWithName = function () {
	var localctx = new AlterForeignKeyWithNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 402, HiveParser.RULE_alterForeignKeyWithName);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2616;
		this.match(HiveParser.KW_CONSTRAINT);
		this.state = 2617;
		this.identifier();
		this.state = 2618;
		this.match(HiveParser.KW_FOREIGN);
		this.state = 2619;
		this.match(HiveParser.KW_KEY);
		this.state = 2620;
		this.columnParenthesesList();
		this.state = 2621;
		this.match(HiveParser.KW_REFERENCES);
		this.state = 2622;
		this.tableName();
		this.state = 2623;
		this.columnParenthesesList();
		this.state = 2625;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2624;
			this.constraintOptsAlter();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedValueElementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedValueElement;
	return this;
}

SkewedValueElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedValueElementContext.prototype.constructor = SkewedValueElementContext;

SkewedValueElementContext.prototype.skewedColumnValues = function () {
	return this.getTypedRuleContext(SkewedColumnValuesContext, 0);
};

SkewedValueElementContext.prototype.skewedColumnValuePairList = function () {
	return this.getTypedRuleContext(SkewedColumnValuePairListContext, 0);
};

SkewedValueElementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedValueElement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedValueElementContext = SkewedValueElementContext;

HiveParser.prototype.skewedValueElement = function () {
	var localctx = new SkewedValueElementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 404, HiveParser.RULE_skewedValueElement);
	try {
		this.state = 2629;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_TRUE:
			case HiveParser.KW_FALSE:
			case HiveParser.KW_NULL:
			case HiveParser.KW_DATE:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_TIMESTAMPLOCALTZ:
			case HiveParser.KW_CURRENT_DATE:
			case HiveParser.KW_CURRENT_TIMESTAMP:
			case HiveParser.StringLiteral:
			case HiveParser.IntegralLiteral:
			case HiveParser.NumberLiteral:
			case HiveParser.Number:
			case HiveParser.CharSetName:
				this.enterOuterAlt(localctx, 1);
				this.state = 2627;
				this.skewedColumnValues();
				break;
			case HiveParser.LPAREN:
				this.enterOuterAlt(localctx, 2);
				this.state = 2628;
				this.skewedColumnValuePairList();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedColumnValuePairListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedColumnValuePairList;
	return this;
}

SkewedColumnValuePairListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedColumnValuePairListContext.prototype.constructor = SkewedColumnValuePairListContext;

SkewedColumnValuePairListContext.prototype.skewedColumnValuePair = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SkewedColumnValuePairContext);
	} else {
		return this.getTypedRuleContext(SkewedColumnValuePairContext, i);
	}
};

SkewedColumnValuePairListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

SkewedColumnValuePairListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedColumnValuePairList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedColumnValuePairListContext = SkewedColumnValuePairListContext;

HiveParser.prototype.skewedColumnValuePairList = function () {
	var localctx = new SkewedColumnValuePairListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 406, HiveParser.RULE_skewedColumnValuePairList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2631;
		this.skewedColumnValuePair();
		this.state = 2636;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2632;
			this.match(HiveParser.COMMA);
			this.state = 2633;
			this.skewedColumnValuePair();
			this.state = 2638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedColumnValuePairContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedColumnValuePair;
	return this;
}

SkewedColumnValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedColumnValuePairContext.prototype.constructor = SkewedColumnValuePairContext;

SkewedColumnValuePairContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

SkewedColumnValuePairContext.prototype.skewedColumnValues = function () {
	return this.getTypedRuleContext(SkewedColumnValuesContext, 0);
};

SkewedColumnValuePairContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

SkewedColumnValuePairContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedColumnValuePair(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedColumnValuePairContext = SkewedColumnValuePairContext;

HiveParser.prototype.skewedColumnValuePair = function () {
	var localctx = new SkewedColumnValuePairContext(this, this._ctx, this.state);
	this.enterRule(localctx, 408, HiveParser.RULE_skewedColumnValuePair);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2639;
		this.match(HiveParser.LPAREN);
		this.state = 2640;
		this.skewedColumnValues();
		this.state = 2641;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedColumnValuesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedColumnValues;
	return this;
}

SkewedColumnValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedColumnValuesContext.prototype.constructor = SkewedColumnValuesContext;

SkewedColumnValuesContext.prototype.skewedColumnValue = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SkewedColumnValueContext);
	} else {
		return this.getTypedRuleContext(SkewedColumnValueContext, i);
	}
};

SkewedColumnValuesContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

SkewedColumnValuesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedColumnValues(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedColumnValuesContext = SkewedColumnValuesContext;

HiveParser.prototype.skewedColumnValues = function () {
	var localctx = new SkewedColumnValuesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 410, HiveParser.RULE_skewedColumnValues);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2643;
		this.skewedColumnValue();
		this.state = 2648;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2644;
			this.match(HiveParser.COMMA);
			this.state = 2645;
			this.skewedColumnValue();
			this.state = 2650;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedColumnValueContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedColumnValue;
	return this;
}

SkewedColumnValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedColumnValueContext.prototype.constructor = SkewedColumnValueContext;

SkewedColumnValueContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

SkewedColumnValueContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedColumnValue(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedColumnValueContext = SkewedColumnValueContext;

HiveParser.prototype.skewedColumnValue = function () {
	var localctx = new SkewedColumnValueContext(this, this._ctx, this.state);
	this.enterRule(localctx, 412, HiveParser.RULE_skewedColumnValue);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2651;
		this.constant();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SkewedValueLocationElementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_skewedValueLocationElement;
	return this;
}

SkewedValueLocationElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewedValueLocationElementContext.prototype.constructor = SkewedValueLocationElementContext;

SkewedValueLocationElementContext.prototype.skewedColumnValue = function () {
	return this.getTypedRuleContext(SkewedColumnValueContext, 0);
};

SkewedValueLocationElementContext.prototype.skewedColumnValuePair = function () {
	return this.getTypedRuleContext(SkewedColumnValuePairContext, 0);
};

SkewedValueLocationElementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSkewedValueLocationElement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SkewedValueLocationElementContext = SkewedValueLocationElementContext;

HiveParser.prototype.skewedValueLocationElement = function () {
	var localctx = new SkewedValueLocationElementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 414, HiveParser.RULE_skewedValueLocationElement);
	try {
		this.state = 2655;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_TRUE:
			case HiveParser.KW_FALSE:
			case HiveParser.KW_NULL:
			case HiveParser.KW_DATE:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_TIMESTAMPLOCALTZ:
			case HiveParser.KW_CURRENT_DATE:
			case HiveParser.KW_CURRENT_TIMESTAMP:
			case HiveParser.StringLiteral:
			case HiveParser.IntegralLiteral:
			case HiveParser.NumberLiteral:
			case HiveParser.Number:
			case HiveParser.CharSetName:
				this.enterOuterAlt(localctx, 1);
				this.state = 2653;
				this.skewedColumnValue();
				break;
			case HiveParser.LPAREN:
				this.enterOuterAlt(localctx, 2);
				this.state = 2654;
				this.skewedColumnValuePair();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OrderSpecificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_orderSpecification;
	return this;
}

OrderSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderSpecificationContext.prototype.constructor = OrderSpecificationContext;

OrderSpecificationContext.prototype.KW_ASC = function () {
	return this.getToken(HiveParser.KW_ASC, 0);
};

OrderSpecificationContext.prototype.KW_DESC = function () {
	return this.getToken(HiveParser.KW_DESC, 0);
};

OrderSpecificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitOrderSpecification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.OrderSpecificationContext = OrderSpecificationContext;

HiveParser.prototype.orderSpecification = function () {
	var localctx = new OrderSpecificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 416, HiveParser.RULE_orderSpecification);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2657;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function NullOrderingContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_nullOrdering;
	return this;
}

NullOrderingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullOrderingContext.prototype.constructor = NullOrderingContext;

NullOrderingContext.prototype.KW_NULLS = function () {
	return this.getToken(HiveParser.KW_NULLS, 0);
};

NullOrderingContext.prototype.KW_FIRST = function () {
	return this.getToken(HiveParser.KW_FIRST, 0);
};

NullOrderingContext.prototype.KW_LAST = function () {
	return this.getToken(HiveParser.KW_LAST, 0);
};

NullOrderingContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitNullOrdering(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.NullOrderingContext = NullOrderingContext;

HiveParser.prototype.nullOrdering = function () {
	var localctx = new NullOrderingContext(this, this._ctx, this.state);
	this.enterRule(localctx, 418, HiveParser.RULE_nullOrdering);
	try {
		this.state = 2663;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 249, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2659;
				this.match(HiveParser.KW_NULLS);
				this.state = 2660;
				this.match(HiveParser.KW_FIRST);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2661;
				this.match(HiveParser.KW_NULLS);
				this.state = 2662;
				this.match(HiveParser.KW_LAST);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameOrderContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameOrder;
	return this;
}

ColumnNameOrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameOrderContext.prototype.constructor = ColumnNameOrderContext;

ColumnNameOrderContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ColumnNameOrderContext.prototype.orderSpecification = function () {
	return this.getTypedRuleContext(OrderSpecificationContext, 0);
};

ColumnNameOrderContext.prototype.nullOrdering = function () {
	return this.getTypedRuleContext(NullOrderingContext, 0);
};

ColumnNameOrderContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameOrder(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameOrderContext = ColumnNameOrderContext;

HiveParser.prototype.columnNameOrder = function () {
	var localctx = new ColumnNameOrderContext(this, this._ctx, this.state);
	this.enterRule(localctx, 420, HiveParser.RULE_columnNameOrder);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2665;
		this.identifier();
		this.state = 2667;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC) {
			this.state = 2666;
			this.orderSpecification();
		}

		this.state = 2670;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_NULLS) {
			this.state = 2669;
			this.nullOrdering();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameCommentListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameCommentList;
	return this;
}

ColumnNameCommentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameCommentListContext.prototype.constructor = ColumnNameCommentListContext;

ColumnNameCommentListContext.prototype.columnNameComment = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnNameCommentContext);
	} else {
		return this.getTypedRuleContext(ColumnNameCommentContext, i);
	}
};

ColumnNameCommentListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnNameCommentListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameCommentList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameCommentListContext = ColumnNameCommentListContext;

HiveParser.prototype.columnNameCommentList = function () {
	var localctx = new ColumnNameCommentListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 422, HiveParser.RULE_columnNameCommentList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2672;
		this.columnNameComment();
		this.state = 2677;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2673;
			this.match(HiveParser.COMMA);
			this.state = 2674;
			this.columnNameComment();
			this.state = 2679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameCommentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameComment;
	return this;
}

ColumnNameCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameCommentContext.prototype.constructor = ColumnNameCommentContext;

ColumnNameCommentContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ColumnNameCommentContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

ColumnNameCommentContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ColumnNameCommentContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameComment(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameCommentContext = ColumnNameCommentContext;

HiveParser.prototype.columnNameComment = function () {
	var localctx = new ColumnNameCommentContext(this, this._ctx, this.state);
	this.enterRule(localctx, 424, HiveParser.RULE_columnNameComment);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2680;
		this.identifier();
		this.state = 2683;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 2681;
			this.match(HiveParser.KW_COMMENT);
			this.state = 2682;
			this.match(HiveParser.StringLiteral);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnRefOrderContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnRefOrder;
	return this;
}

ColumnRefOrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnRefOrderContext.prototype.constructor = ColumnRefOrderContext;

ColumnRefOrderContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

ColumnRefOrderContext.prototype.orderSpecification = function () {
	return this.getTypedRuleContext(OrderSpecificationContext, 0);
};

ColumnRefOrderContext.prototype.nullOrdering = function () {
	return this.getTypedRuleContext(NullOrderingContext, 0);
};

ColumnRefOrderContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnRefOrder(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnRefOrderContext = ColumnRefOrderContext;

HiveParser.prototype.columnRefOrder = function () {
	var localctx = new ColumnRefOrderContext(this, this._ctx, this.state);
	this.enterRule(localctx, 426, HiveParser.RULE_columnRefOrder);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2685;
		this.expression(0);
		this.state = 2687;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC) {
			this.state = 2686;
			this.orderSpecification();
		}

		this.state = 2690;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_NULLS) {
			this.state = 2689;
			this.nullOrdering();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameType;
	return this;
}

ColumnNameTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameTypeContext.prototype.constructor = ColumnNameTypeContext;

ColumnNameTypeContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ColumnNameTypeContext.prototype.colType = function () {
	return this.getTypedRuleContext(ColTypeContext, 0);
};

ColumnNameTypeContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

ColumnNameTypeContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ColumnNameTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameTypeContext = ColumnNameTypeContext;

HiveParser.prototype.columnNameType = function () {
	var localctx = new ColumnNameTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 428, HiveParser.RULE_columnNameType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2692;
		this.identifier();
		this.state = 2693;
		this.colType();
		this.state = 2696;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 2694;
			this.match(HiveParser.KW_COMMENT);
			this.state = 2695;
			this.match(HiveParser.StringLiteral);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameTypeOrConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameTypeOrConstraint;
	return this;
}

ColumnNameTypeOrConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameTypeOrConstraintContext.prototype.constructor = ColumnNameTypeOrConstraintContext;

ColumnNameTypeOrConstraintContext.prototype.tableConstraint = function () {
	return this.getTypedRuleContext(TableConstraintContext, 0);
};

ColumnNameTypeOrConstraintContext.prototype.columnNameTypeConstraint = function () {
	return this.getTypedRuleContext(ColumnNameTypeConstraintContext, 0);
};

ColumnNameTypeOrConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameTypeOrConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameTypeOrConstraintContext = ColumnNameTypeOrConstraintContext;

HiveParser.prototype.columnNameTypeOrConstraint = function () {
	var localctx = new ColumnNameTypeOrConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 430, HiveParser.RULE_columnNameTypeOrConstraint);
	try {
		this.state = 2700;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 257, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2698;
				this.tableConstraint();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2699;
				this.columnNameTypeConstraint();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableConstraint;
	return this;
}

TableConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableConstraintContext.prototype.constructor = TableConstraintContext;

TableConstraintContext.prototype.createForeignKey = function () {
	return this.getTypedRuleContext(CreateForeignKeyContext, 0);
};

TableConstraintContext.prototype.createConstraint = function () {
	return this.getTypedRuleContext(CreateConstraintContext, 0);
};

TableConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableConstraintContext = TableConstraintContext;

HiveParser.prototype.tableConstraint = function () {
	var localctx = new TableConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 432, HiveParser.RULE_tableConstraint);
	try {
		this.state = 2704;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 258, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2702;
				this.createForeignKey();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2703;
				this.createConstraint();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameTypeConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameTypeConstraint;
	return this;
}

ColumnNameTypeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameTypeConstraintContext.prototype.constructor = ColumnNameTypeConstraintContext;

ColumnNameTypeConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ColumnNameTypeConstraintContext.prototype.colType = function () {
	return this.getTypedRuleContext(ColTypeContext, 0);
};

ColumnNameTypeConstraintContext.prototype.columnConstraint = function () {
	return this.getTypedRuleContext(ColumnConstraintContext, 0);
};

ColumnNameTypeConstraintContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

ColumnNameTypeConstraintContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ColumnNameTypeConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameTypeConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameTypeConstraintContext = ColumnNameTypeConstraintContext;

HiveParser.prototype.columnNameTypeConstraint = function () {
	var localctx = new ColumnNameTypeConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 434, HiveParser.RULE_columnNameTypeConstraint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2706;
		this.identifier();
		this.state = 2707;
		this.colType();
		this.state = 2709;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			(((_la - 288) & ~0x1f) == 0 &&
				((1 << (_la - 288)) &
					((1 << (HiveParser.KW_PRIMARY - 288)) |
						(1 << (HiveParser.KW_REFERENCES - 288)) |
						(1 << (HiveParser.KW_CONSTRAINT - 288)) |
						(1 << (HiveParser.KW_UNIQUE - 288)) |
						(1 << (HiveParser.KW_DEFAULT - 288)) |
						(1 << (HiveParser.KW_CHECK - 288)))) !==
					0)
		) {
			this.state = 2708;
			this.columnConstraint();
		}

		this.state = 2713;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 2711;
			this.match(HiveParser.KW_COMMENT);
			this.state = 2712;
			this.match(HiveParser.StringLiteral);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionedColumnNameTypeConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitionedColumnNameTypeConstraint;
	return this;
}

PartitionedColumnNameTypeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionedColumnNameTypeConstraintContext.prototype.constructor = PartitionedColumnNameTypeConstraintContext;

PartitionedColumnNameTypeConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

PartitionedColumnNameTypeConstraintContext.prototype.colType = function () {
	return this.getTypedRuleContext(ColTypeContext, 0);
};

PartitionedColumnNameTypeConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitionedColumnNameTypeConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitionedColumnNameTypeConstraintContext = PartitionedColumnNameTypeConstraintContext;

HiveParser.prototype.partitionedColumnNameTypeConstraint = function () {
	var localctx = new PartitionedColumnNameTypeConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 436, HiveParser.RULE_partitionedColumnNameTypeConstraint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2715;
		this.identifier();
		this.state = 2717;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			(((_la - 77) & ~0x1f) == 0 &&
				((1 << (_la - 77)) &
					((1 << (HiveParser.KW_BOOLEAN - 77)) |
						(1 << (HiveParser.KW_TINYINT - 77)) |
						(1 << (HiveParser.KW_SMALLINT - 77)) |
						(1 << (HiveParser.KW_INT - 77)) |
						(1 << (HiveParser.KW_BIGINT - 77)) |
						(1 << (HiveParser.KW_FLOAT - 77)) |
						(1 << (HiveParser.KW_DOUBLE - 77)) |
						(1 << (HiveParser.KW_DATE - 77)) |
						(1 << (HiveParser.KW_DATETIME - 77)) |
						(1 << (HiveParser.KW_TIMESTAMP - 77)) |
						(1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 77)) |
						(1 << (HiveParser.KW_DECIMAL - 77)) |
						(1 << (HiveParser.KW_STRING - 77)) |
						(1 << (HiveParser.KW_CHAR - 77)) |
						(1 << (HiveParser.KW_VARCHAR - 77)) |
						(1 << (HiveParser.KW_ARRAY - 77)) |
						(1 << (HiveParser.KW_STRUCT - 77)) |
						(1 << (HiveParser.KW_MAP - 77)) |
						(1 << (HiveParser.KW_UNIONTYPE - 77)))) !==
					0) ||
			_la === HiveParser.KW_BINARY
		) {
			this.state = 2716;
			this.colType();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnConstraint;
	return this;
}

ColumnConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnConstraintContext.prototype.constructor = ColumnConstraintContext;

ColumnConstraintContext.prototype.foreignKeyConstraint = function () {
	return this.getTypedRuleContext(ForeignKeyConstraintContext, 0);
};

ColumnConstraintContext.prototype.colConstraint = function () {
	return this.getTypedRuleContext(ColConstraintContext, 0);
};

ColumnConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnConstraintContext = ColumnConstraintContext;

HiveParser.prototype.columnConstraint = function () {
	var localctx = new ColumnConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 438, HiveParser.RULE_columnConstraint);
	try {
		this.state = 2721;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 262, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2719;
				this.foreignKeyConstraint();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2720;
				this.colConstraint();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ForeignKeyConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_foreignKeyConstraint;
	return this;
}

ForeignKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeignKeyConstraintContext.prototype.constructor = ForeignKeyConstraintContext;

ForeignKeyConstraintContext.prototype.KW_REFERENCES = function () {
	return this.getToken(HiveParser.KW_REFERENCES, 0);
};

ForeignKeyConstraintContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

ForeignKeyConstraintContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ForeignKeyConstraintContext.prototype.columnName = function () {
	return this.getTypedRuleContext(ColumnNameContext, 0);
};

ForeignKeyConstraintContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ForeignKeyConstraintContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

ForeignKeyConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ForeignKeyConstraintContext.prototype.constraintOptsCreate = function () {
	return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
};

ForeignKeyConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitForeignKeyConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ForeignKeyConstraintContext = ForeignKeyConstraintContext;

HiveParser.prototype.foreignKeyConstraint = function () {
	var localctx = new ForeignKeyConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 440, HiveParser.RULE_foreignKeyConstraint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2725;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_CONSTRAINT) {
			this.state = 2723;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2724;
			this.identifier();
		}

		this.state = 2727;
		this.match(HiveParser.KW_REFERENCES);
		this.state = 2728;
		this.tableName();
		this.state = 2729;
		this.match(HiveParser.LPAREN);
		this.state = 2730;
		this.columnName();
		this.state = 2731;
		this.match(HiveParser.RPAREN);
		this.state = 2733;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2732;
			this.constraintOptsCreate();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_colConstraint;
	return this;
}

ColConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColConstraintContext.prototype.constructor = ColConstraintContext;

ColConstraintContext.prototype.columnConstraintType = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnConstraintTypeContext);
	} else {
		return this.getTypedRuleContext(ColumnConstraintTypeContext, i);
	}
};

ColConstraintContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

ColConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ColConstraintContext.prototype.constraintOptsCreate = function () {
	return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
};

ColConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColConstraintContext = ColConstraintContext;

HiveParser.prototype.colConstraint = function () {
	var localctx = new ColConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 442, HiveParser.RULE_colConstraint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2737;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_CONSTRAINT) {
			this.state = 2735;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2736;
			this.identifier();
		}

		this.state = 2739;
		this.columnConstraintType();
		this.state = 2743;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 266, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				this.state = 2740;
				this.columnConstraintType();
			}
			this.state = 2745;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 266, this._ctx);
		}

		this.state = 2747;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2746;
			this.constraintOptsCreate();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterColumnConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterColumnConstraint;
	return this;
}

AlterColumnConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterColumnConstraintContext.prototype.constructor = AlterColumnConstraintContext;

AlterColumnConstraintContext.prototype.alterForeignKeyConstraint = function () {
	return this.getTypedRuleContext(AlterForeignKeyConstraintContext, 0);
};

AlterColumnConstraintContext.prototype.alterColConstraint = function () {
	return this.getTypedRuleContext(AlterColConstraintContext, 0);
};

AlterColumnConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterColumnConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterColumnConstraintContext = AlterColumnConstraintContext;

HiveParser.prototype.alterColumnConstraint = function () {
	var localctx = new AlterColumnConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 444, HiveParser.RULE_alterColumnConstraint);
	try {
		this.state = 2751;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 268, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2749;
				this.alterForeignKeyConstraint();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2750;
				this.alterColConstraint();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterForeignKeyConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterForeignKeyConstraint;
	return this;
}

AlterForeignKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterForeignKeyConstraintContext.prototype.constructor = AlterForeignKeyConstraintContext;

AlterForeignKeyConstraintContext.prototype.KW_REFERENCES = function () {
	return this.getToken(HiveParser.KW_REFERENCES, 0);
};

AlterForeignKeyConstraintContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

AlterForeignKeyConstraintContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

AlterForeignKeyConstraintContext.prototype.columnName = function () {
	return this.getTypedRuleContext(ColumnNameContext, 0);
};

AlterForeignKeyConstraintContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

AlterForeignKeyConstraintContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

AlterForeignKeyConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterForeignKeyConstraintContext.prototype.constraintOptsAlter = function () {
	return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
};

AlterForeignKeyConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterForeignKeyConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterForeignKeyConstraintContext = AlterForeignKeyConstraintContext;

HiveParser.prototype.alterForeignKeyConstraint = function () {
	var localctx = new AlterForeignKeyConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 446, HiveParser.RULE_alterForeignKeyConstraint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2755;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_CONSTRAINT) {
			this.state = 2753;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2754;
			this.identifier();
		}

		this.state = 2757;
		this.match(HiveParser.KW_REFERENCES);
		this.state = 2758;
		this.tableName();
		this.state = 2759;
		this.match(HiveParser.LPAREN);
		this.state = 2760;
		this.columnName();
		this.state = 2761;
		this.match(HiveParser.RPAREN);
		this.state = 2763;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2762;
			this.constraintOptsAlter();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterColConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterColConstraint;
	return this;
}

AlterColConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterColConstraintContext.prototype.constructor = AlterColConstraintContext;

AlterColConstraintContext.prototype.columnConstraintType = function () {
	return this.getTypedRuleContext(ColumnConstraintTypeContext, 0);
};

AlterColConstraintContext.prototype.KW_CONSTRAINT = function () {
	return this.getToken(HiveParser.KW_CONSTRAINT, 0);
};

AlterColConstraintContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterColConstraintContext.prototype.constraintOptsAlter = function () {
	return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
};

AlterColConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterColConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterColConstraintContext = AlterColConstraintContext;

HiveParser.prototype.alterColConstraint = function () {
	var localctx = new AlterColConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 448, HiveParser.RULE_alterColConstraint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2767;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_CONSTRAINT) {
			this.state = 2765;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2766;
			this.identifier();
		}

		this.state = 2769;
		this.columnConstraintType();
		this.state = 2771;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_NOT ||
			_la === HiveParser.KW_ENABLE ||
			_la === HiveParser.KW_DISABLE ||
			_la === HiveParser.KW_ENFORCED
		) {
			this.state = 2770;
			this.constraintOptsAlter();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnConstraintTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnConstraintType;
	return this;
}

ColumnConstraintTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnConstraintTypeContext.prototype.constructor = ColumnConstraintTypeContext;

ColumnConstraintTypeContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

ColumnConstraintTypeContext.prototype.KW_NULL = function () {
	return this.getToken(HiveParser.KW_NULL, 0);
};

ColumnConstraintTypeContext.prototype.KW_DEFAULT = function () {
	return this.getToken(HiveParser.KW_DEFAULT, 0);
};

ColumnConstraintTypeContext.prototype.defaultVal = function () {
	return this.getTypedRuleContext(DefaultValContext, 0);
};

ColumnConstraintTypeContext.prototype.checkConstraint = function () {
	return this.getTypedRuleContext(CheckConstraintContext, 0);
};

ColumnConstraintTypeContext.prototype.tableConstraintType = function () {
	return this.getTypedRuleContext(TableConstraintTypeContext, 0);
};

ColumnConstraintTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnConstraintType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnConstraintTypeContext = ColumnConstraintTypeContext;

HiveParser.prototype.columnConstraintType = function () {
	var localctx = new ColumnConstraintTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 450, HiveParser.RULE_columnConstraintType);
	try {
		this.state = 2779;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_NOT:
				this.enterOuterAlt(localctx, 1);
				this.state = 2773;
				this.match(HiveParser.KW_NOT);
				this.state = 2774;
				this.match(HiveParser.KW_NULL);
				break;
			case HiveParser.KW_DEFAULT:
				this.enterOuterAlt(localctx, 2);
				this.state = 2775;
				this.match(HiveParser.KW_DEFAULT);
				this.state = 2776;
				this.defaultVal();
				break;
			case HiveParser.KW_CHECK:
				this.enterOuterAlt(localctx, 3);
				this.state = 2777;
				this.checkConstraint();
				break;
			case HiveParser.KW_PRIMARY:
			case HiveParser.KW_UNIQUE:
				this.enterOuterAlt(localctx, 4);
				this.state = 2778;
				this.tableConstraintType();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DefaultValContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_defaultVal;
	return this;
}

DefaultValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValContext.prototype.constructor = DefaultValContext;

DefaultValContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

DefaultValContext.prototype.functionStatement = function () {
	return this.getTypedRuleContext(FunctionStatementContext, 0);
};

DefaultValContext.prototype.castExpression = function () {
	return this.getTypedRuleContext(CastExpressionContext, 0);
};

DefaultValContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDefaultVal(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DefaultValContext = DefaultValContext;

HiveParser.prototype.defaultVal = function () {
	var localctx = new DefaultValContext(this, this._ctx, this.state);
	this.enterRule(localctx, 452, HiveParser.RULE_defaultVal);
	try {
		this.state = 2784;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 274, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2781;
				this.constant();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2782;
				this.functionStatement();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 2783;
				this.castExpression();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableConstraintTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableConstraintType;
	return this;
}

TableConstraintTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableConstraintTypeContext.prototype.constructor = TableConstraintTypeContext;

TableConstraintTypeContext.prototype.KW_PRIMARY = function () {
	return this.getToken(HiveParser.KW_PRIMARY, 0);
};

TableConstraintTypeContext.prototype.KW_KEY = function () {
	return this.getToken(HiveParser.KW_KEY, 0);
};

TableConstraintTypeContext.prototype.KW_UNIQUE = function () {
	return this.getToken(HiveParser.KW_UNIQUE, 0);
};

TableConstraintTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableConstraintType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableConstraintTypeContext = TableConstraintTypeContext;

HiveParser.prototype.tableConstraintType = function () {
	var localctx = new TableConstraintTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 454, HiveParser.RULE_tableConstraintType);
	try {
		this.state = 2789;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_PRIMARY:
				this.enterOuterAlt(localctx, 1);
				this.state = 2786;
				this.match(HiveParser.KW_PRIMARY);
				this.state = 2787;
				this.match(HiveParser.KW_KEY);
				break;
			case HiveParser.KW_UNIQUE:
				this.enterOuterAlt(localctx, 2);
				this.state = 2788;
				this.match(HiveParser.KW_UNIQUE);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ConstraintOptsCreateContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_constraintOptsCreate;
	return this;
}

ConstraintOptsCreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintOptsCreateContext.prototype.constructor = ConstraintOptsCreateContext;

ConstraintOptsCreateContext.prototype.enableValidateSpecification = function () {
	return this.getTypedRuleContext(EnableValidateSpecificationContext, 0);
};

ConstraintOptsCreateContext.prototype.relySpecification = function () {
	return this.getTypedRuleContext(RelySpecificationContext, 0);
};

ConstraintOptsCreateContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitConstraintOptsCreate(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ConstraintOptsCreateContext = ConstraintOptsCreateContext;

HiveParser.prototype.constraintOptsCreate = function () {
	var localctx = new ConstraintOptsCreateContext(this, this._ctx, this.state);
	this.enterRule(localctx, 456, HiveParser.RULE_constraintOptsCreate);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2791;
		this.enableValidateSpecification();
		this.state = 2792;
		this.relySpecification();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ConstraintOptsAlterContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_constraintOptsAlter;
	return this;
}

ConstraintOptsAlterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintOptsAlterContext.prototype.constructor = ConstraintOptsAlterContext;

ConstraintOptsAlterContext.prototype.enableValidateSpecification = function () {
	return this.getTypedRuleContext(EnableValidateSpecificationContext, 0);
};

ConstraintOptsAlterContext.prototype.relySpecification = function () {
	return this.getTypedRuleContext(RelySpecificationContext, 0);
};

ConstraintOptsAlterContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitConstraintOptsAlter(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ConstraintOptsAlterContext = ConstraintOptsAlterContext;

HiveParser.prototype.constraintOptsAlter = function () {
	var localctx = new ConstraintOptsAlterContext(this, this._ctx, this.state);
	this.enterRule(localctx, 458, HiveParser.RULE_constraintOptsAlter);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2794;
		this.enableValidateSpecification();
		this.state = 2795;
		this.relySpecification();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnNameColonTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnNameColonType;
	return this;
}

ColumnNameColonTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameColonTypeContext.prototype.constructor = ColumnNameColonTypeContext;

ColumnNameColonTypeContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

ColumnNameColonTypeContext.prototype.COLON = function () {
	return this.getToken(HiveParser.COLON, 0);
};

ColumnNameColonTypeContext.prototype.colType = function () {
	return this.getTypedRuleContext(ColTypeContext, 0);
};

ColumnNameColonTypeContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

ColumnNameColonTypeContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ColumnNameColonTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnNameColonType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnNameColonTypeContext = ColumnNameColonTypeContext;

HiveParser.prototype.columnNameColonType = function () {
	var localctx = new ColumnNameColonTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 460, HiveParser.RULE_columnNameColonType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2797;
		this.identifier();
		this.state = 2798;
		this.match(HiveParser.COLON);
		this.state = 2799;
		this.colType();
		this.state = 2802;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_COMMENT) {
			this.state = 2800;
			this.match(HiveParser.KW_COMMENT);
			this.state = 2801;
			this.match(HiveParser.StringLiteral);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_colType;
	return this;
}

ColTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeContext.prototype.constructor = ColTypeContext;

ColTypeContext.prototype.type_db_col = function () {
	return this.getTypedRuleContext(Type_db_colContext, 0);
};

ColTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColTypeContext = ColTypeContext;

HiveParser.prototype.colType = function () {
	var localctx = new ColTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 462, HiveParser.RULE_colType);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2804;
		this.type_db_col();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColTypeListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_colTypeList;
	return this;
}

ColTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeListContext.prototype.constructor = ColTypeListContext;

ColTypeListContext.prototype.colType = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColTypeContext);
	} else {
		return this.getTypedRuleContext(ColTypeContext, i);
	}
};

ColTypeListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColTypeListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColTypeList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColTypeListContext = ColTypeListContext;

HiveParser.prototype.colTypeList = function () {
	var localctx = new ColTypeListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 464, HiveParser.RULE_colTypeList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2806;
		this.colType();
		this.state = 2811;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2807;
			this.match(HiveParser.COMMA);
			this.state = 2808;
			this.colType();
			this.state = 2813;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Type_db_colContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_type_db_col;
	return this;
}

Type_db_colContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_db_colContext.prototype.constructor = Type_db_colContext;

Type_db_colContext.prototype.primitiveType = function () {
	return this.getTypedRuleContext(PrimitiveTypeContext, 0);
};

Type_db_colContext.prototype.listType = function () {
	return this.getTypedRuleContext(ListTypeContext, 0);
};

Type_db_colContext.prototype.structType = function () {
	return this.getTypedRuleContext(StructTypeContext, 0);
};

Type_db_colContext.prototype.mapType = function () {
	return this.getTypedRuleContext(MapTypeContext, 0);
};

Type_db_colContext.prototype.unionType = function () {
	return this.getTypedRuleContext(UnionTypeContext, 0);
};

Type_db_colContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitType_db_col(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Type_db_colContext = Type_db_colContext;

HiveParser.prototype.type_db_col = function () {
	var localctx = new Type_db_colContext(this, this._ctx, this.state);
	this.enterRule(localctx, 466, HiveParser.RULE_type_db_col);
	try {
		this.state = 2819;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_BOOLEAN:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_SMALLINT:
			case HiveParser.KW_INT:
			case HiveParser.KW_BIGINT:
			case HiveParser.KW_FLOAT:
			case HiveParser.KW_DOUBLE:
			case HiveParser.KW_DATE:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_TIMESTAMPLOCALTZ:
			case HiveParser.KW_DECIMAL:
			case HiveParser.KW_STRING:
			case HiveParser.KW_CHAR:
			case HiveParser.KW_VARCHAR:
			case HiveParser.KW_BINARY:
				this.enterOuterAlt(localctx, 1);
				this.state = 2814;
				this.primitiveType();
				break;
			case HiveParser.KW_ARRAY:
				this.enterOuterAlt(localctx, 2);
				this.state = 2815;
				this.listType();
				break;
			case HiveParser.KW_STRUCT:
				this.enterOuterAlt(localctx, 3);
				this.state = 2816;
				this.structType();
				break;
			case HiveParser.KW_MAP:
				this.enterOuterAlt(localctx, 4);
				this.state = 2817;
				this.mapType();
				break;
			case HiveParser.KW_UNIONTYPE:
				this.enterOuterAlt(localctx, 5);
				this.state = 2818;
				this.unionType();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_primitiveType;
	return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.KW_TINYINT = function () {
	return this.getToken(HiveParser.KW_TINYINT, 0);
};

PrimitiveTypeContext.prototype.KW_SMALLINT = function () {
	return this.getToken(HiveParser.KW_SMALLINT, 0);
};

PrimitiveTypeContext.prototype.KW_INT = function () {
	return this.getToken(HiveParser.KW_INT, 0);
};

PrimitiveTypeContext.prototype.KW_BIGINT = function () {
	return this.getToken(HiveParser.KW_BIGINT, 0);
};

PrimitiveTypeContext.prototype.KW_BOOLEAN = function () {
	return this.getToken(HiveParser.KW_BOOLEAN, 0);
};

PrimitiveTypeContext.prototype.KW_FLOAT = function () {
	return this.getToken(HiveParser.KW_FLOAT, 0);
};

PrimitiveTypeContext.prototype.KW_DOUBLE = function () {
	return this.getToken(HiveParser.KW_DOUBLE, 0);
};

PrimitiveTypeContext.prototype.KW_PRECISION = function () {
	return this.getToken(HiveParser.KW_PRECISION, 0);
};

PrimitiveTypeContext.prototype.KW_DATE = function () {
	return this.getToken(HiveParser.KW_DATE, 0);
};

PrimitiveTypeContext.prototype.KW_DATETIME = function () {
	return this.getToken(HiveParser.KW_DATETIME, 0);
};

PrimitiveTypeContext.prototype.KW_TIMESTAMP = function () {
	return this.getToken(HiveParser.KW_TIMESTAMP, 0);
};

PrimitiveTypeContext.prototype.KW_TIMESTAMPLOCALTZ = function () {
	return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
};

PrimitiveTypeContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

PrimitiveTypeContext.prototype.KW_LOCAL = function () {
	return this.getToken(HiveParser.KW_LOCAL, 0);
};

PrimitiveTypeContext.prototype.KW_TIME = function () {
	return this.getToken(HiveParser.KW_TIME, 0);
};

PrimitiveTypeContext.prototype.KW_ZONE = function () {
	return this.getToken(HiveParser.KW_ZONE, 0);
};

PrimitiveTypeContext.prototype.KW_STRING = function () {
	return this.getToken(HiveParser.KW_STRING, 0);
};

PrimitiveTypeContext.prototype.KW_BINARY = function () {
	return this.getToken(HiveParser.KW_BINARY, 0);
};

PrimitiveTypeContext.prototype.KW_DECIMAL = function () {
	return this.getToken(HiveParser.KW_DECIMAL, 0);
};

PrimitiveTypeContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

PrimitiveTypeContext.prototype.Number = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.Number);
	} else {
		return this.getToken(HiveParser.Number, i);
	}
};

PrimitiveTypeContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

PrimitiveTypeContext.prototype.COMMA = function () {
	return this.getToken(HiveParser.COMMA, 0);
};

PrimitiveTypeContext.prototype.KW_VARCHAR = function () {
	return this.getToken(HiveParser.KW_VARCHAR, 0);
};

PrimitiveTypeContext.prototype.KW_CHAR = function () {
	return this.getToken(HiveParser.KW_CHAR, 0);
};

PrimitiveTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrimitiveType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrimitiveTypeContext = PrimitiveTypeContext;

HiveParser.prototype.primitiveType = function () {
	var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 468, HiveParser.RULE_primitiveType);
	var _la = 0; // Token type
	try {
		this.state = 2860;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 282, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2821;
				this.match(HiveParser.KW_TINYINT);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2822;
				this.match(HiveParser.KW_SMALLINT);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 2823;
				this.match(HiveParser.KW_INT);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 2824;
				this.match(HiveParser.KW_BIGINT);
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 2825;
				this.match(HiveParser.KW_BOOLEAN);
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 2826;
				this.match(HiveParser.KW_FLOAT);
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 2827;
				this.match(HiveParser.KW_DOUBLE);
				this.state = 2829;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PRECISION) {
					this.state = 2828;
					this.match(HiveParser.KW_PRECISION);
				}

				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 2831;
				this.match(HiveParser.KW_DATE);
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 2832;
				this.match(HiveParser.KW_DATETIME);
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 2833;
				this.match(HiveParser.KW_TIMESTAMP);
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 2834;
				this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 2835;
				this.match(HiveParser.KW_TIMESTAMP);
				this.state = 2836;
				this.match(HiveParser.KW_WITH);
				this.state = 2837;
				this.match(HiveParser.KW_LOCAL);
				this.state = 2838;
				this.match(HiveParser.KW_TIME);
				this.state = 2839;
				this.match(HiveParser.KW_ZONE);
				break;

			case 13:
				this.enterOuterAlt(localctx, 13);
				this.state = 2840;
				this.match(HiveParser.KW_STRING);
				break;

			case 14:
				this.enterOuterAlt(localctx, 14);
				this.state = 2841;
				this.match(HiveParser.KW_BINARY);
				break;

			case 15:
				this.enterOuterAlt(localctx, 15);
				this.state = 2842;
				this.match(HiveParser.KW_DECIMAL);
				this.state = 2850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.LPAREN) {
					this.state = 2843;
					this.match(HiveParser.LPAREN);
					this.state = 2844;
					this.match(HiveParser.Number);
					this.state = 2847;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveParser.COMMA) {
						this.state = 2845;
						this.match(HiveParser.COMMA);
						this.state = 2846;
						this.match(HiveParser.Number);
					}

					this.state = 2849;
					this.match(HiveParser.RPAREN);
				}

				break;

			case 16:
				this.enterOuterAlt(localctx, 16);
				this.state = 2852;
				this.match(HiveParser.KW_VARCHAR);
				this.state = 2853;
				this.match(HiveParser.LPAREN);
				this.state = 2854;
				this.match(HiveParser.Number);
				this.state = 2855;
				this.match(HiveParser.RPAREN);
				break;

			case 17:
				this.enterOuterAlt(localctx, 17);
				this.state = 2856;
				this.match(HiveParser.KW_CHAR);
				this.state = 2857;
				this.match(HiveParser.LPAREN);
				this.state = 2858;
				this.match(HiveParser.Number);
				this.state = 2859;
				this.match(HiveParser.RPAREN);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ListTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_listType;
	return this;
}

ListTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListTypeContext.prototype.constructor = ListTypeContext;

ListTypeContext.prototype.KW_ARRAY = function () {
	return this.getToken(HiveParser.KW_ARRAY, 0);
};

ListTypeContext.prototype.LESSTHAN = function () {
	return this.getToken(HiveParser.LESSTHAN, 0);
};

ListTypeContext.prototype.type_db_col = function () {
	return this.getTypedRuleContext(Type_db_colContext, 0);
};

ListTypeContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

ListTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitListType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ListTypeContext = ListTypeContext;

HiveParser.prototype.listType = function () {
	var localctx = new ListTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 470, HiveParser.RULE_listType);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2862;
		this.match(HiveParser.KW_ARRAY);
		this.state = 2863;
		this.match(HiveParser.LESSTHAN);
		this.state = 2864;
		this.type_db_col();
		this.state = 2865;
		this.match(HiveParser.GREATERTHAN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StructTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_structType;
	return this;
}

StructTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructTypeContext.prototype.constructor = StructTypeContext;

StructTypeContext.prototype.KW_STRUCT = function () {
	return this.getToken(HiveParser.KW_STRUCT, 0);
};

StructTypeContext.prototype.LESSTHAN = function () {
	return this.getToken(HiveParser.LESSTHAN, 0);
};

StructTypeContext.prototype.columnNameColonTypeList = function () {
	return this.getTypedRuleContext(ColumnNameColonTypeListContext, 0);
};

StructTypeContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

StructTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitStructType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.StructTypeContext = StructTypeContext;

HiveParser.prototype.structType = function () {
	var localctx = new StructTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 472, HiveParser.RULE_structType);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2867;
		this.match(HiveParser.KW_STRUCT);
		this.state = 2868;
		this.match(HiveParser.LESSTHAN);
		this.state = 2869;
		this.columnNameColonTypeList();
		this.state = 2870;
		this.match(HiveParser.GREATERTHAN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function MapTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_mapType;
	return this;
}

MapTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapTypeContext.prototype.constructor = MapTypeContext;

MapTypeContext.prototype.KW_MAP = function () {
	return this.getToken(HiveParser.KW_MAP, 0);
};

MapTypeContext.prototype.LESSTHAN = function () {
	return this.getToken(HiveParser.LESSTHAN, 0);
};

MapTypeContext.prototype.primitiveType = function () {
	return this.getTypedRuleContext(PrimitiveTypeContext, 0);
};

MapTypeContext.prototype.COMMA = function () {
	return this.getToken(HiveParser.COMMA, 0);
};

MapTypeContext.prototype.type_db_col = function () {
	return this.getTypedRuleContext(Type_db_colContext, 0);
};

MapTypeContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

MapTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitMapType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.MapTypeContext = MapTypeContext;

HiveParser.prototype.mapType = function () {
	var localctx = new MapTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 474, HiveParser.RULE_mapType);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2872;
		this.match(HiveParser.KW_MAP);
		this.state = 2873;
		this.match(HiveParser.LESSTHAN);
		this.state = 2874;
		this.primitiveType();
		this.state = 2875;
		this.match(HiveParser.COMMA);
		this.state = 2876;
		this.type_db_col();
		this.state = 2877;
		this.match(HiveParser.GREATERTHAN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UnionTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_unionType;
	return this;
}

UnionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionTypeContext.prototype.constructor = UnionTypeContext;

UnionTypeContext.prototype.KW_UNIONTYPE = function () {
	return this.getToken(HiveParser.KW_UNIONTYPE, 0);
};

UnionTypeContext.prototype.LESSTHAN = function () {
	return this.getToken(HiveParser.LESSTHAN, 0);
};

UnionTypeContext.prototype.colTypeList = function () {
	return this.getTypedRuleContext(ColTypeListContext, 0);
};

UnionTypeContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

UnionTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUnionType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UnionTypeContext = UnionTypeContext;

HiveParser.prototype.unionType = function () {
	var localctx = new UnionTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 476, HiveParser.RULE_unionType);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2879;
		this.match(HiveParser.KW_UNIONTYPE);
		this.state = 2880;
		this.match(HiveParser.LESSTHAN);
		this.state = 2881;
		this.colTypeList();
		this.state = 2882;
		this.match(HiveParser.GREATERTHAN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SetOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_setOperator;
	return this;
}

SetOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetOperatorContext.prototype.constructor = SetOperatorContext;

SetOperatorContext.prototype.KW_UNION = function () {
	return this.getToken(HiveParser.KW_UNION, 0);
};

SetOperatorContext.prototype.KW_ALL = function () {
	return this.getToken(HiveParser.KW_ALL, 0);
};

SetOperatorContext.prototype.KW_DISTINCT = function () {
	return this.getToken(HiveParser.KW_DISTINCT, 0);
};

SetOperatorContext.prototype.KW_INTERSECT = function () {
	return this.getToken(HiveParser.KW_INTERSECT, 0);
};

SetOperatorContext.prototype.KW_EXCEPT = function () {
	return this.getToken(HiveParser.KW_EXCEPT, 0);
};

SetOperatorContext.prototype.KW_MINUS = function () {
	return this.getToken(HiveParser.KW_MINUS, 0);
};

SetOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSetOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SetOperatorContext = SetOperatorContext;

HiveParser.prototype.setOperator = function () {
	var localctx = new SetOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 478, HiveParser.RULE_setOperator);
	var _la = 0; // Token type
	try {
		this.state = 2908;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 287, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 2884;
				this.match(HiveParser.KW_UNION);
				this.state = 2885;
				this.match(HiveParser.KW_ALL);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 2886;
				this.match(HiveParser.KW_UNION);
				this.state = 2888;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					this.state = 2887;
					this.match(HiveParser.KW_DISTINCT);
				}

				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 2890;
				this.match(HiveParser.KW_INTERSECT);
				this.state = 2891;
				this.match(HiveParser.KW_ALL);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 2892;
				this.match(HiveParser.KW_INTERSECT);
				this.state = 2894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					this.state = 2893;
					this.match(HiveParser.KW_DISTINCT);
				}

				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 2896;
				this.match(HiveParser.KW_EXCEPT);
				this.state = 2897;
				this.match(HiveParser.KW_ALL);
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 2898;
				this.match(HiveParser.KW_EXCEPT);
				this.state = 2900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					this.state = 2899;
					this.match(HiveParser.KW_DISTINCT);
				}

				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 2902;
				this.match(HiveParser.KW_MINUS);
				this.state = 2903;
				this.match(HiveParser.KW_ALL);
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 2904;
				this.match(HiveParser.KW_MINUS);
				this.state = 2906;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					this.state = 2905;
					this.match(HiveParser.KW_DISTINCT);
				}

				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function QueryStatementExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_queryStatementExpression;
	return this;
}

QueryStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryStatementExpressionContext.prototype.constructor = QueryStatementExpressionContext;

QueryStatementExpressionContext.prototype.queryStatementExpressionBody = function () {
	return this.getTypedRuleContext(QueryStatementExpressionBodyContext, 0);
};

QueryStatementExpressionContext.prototype.withClause = function () {
	return this.getTypedRuleContext(WithClauseContext, 0);
};

QueryStatementExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitQueryStatementExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.QueryStatementExpressionContext = QueryStatementExpressionContext;

HiveParser.prototype.queryStatementExpression = function () {
	var localctx = new QueryStatementExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 480, HiveParser.RULE_queryStatementExpression);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2911;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 2910;
			this.withClause();
		}

		this.state = 2913;
		this.queryStatementExpressionBody();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function QueryStatementExpressionBodyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_queryStatementExpressionBody;
	return this;
}

QueryStatementExpressionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryStatementExpressionBodyContext.prototype.constructor = QueryStatementExpressionBodyContext;

QueryStatementExpressionBodyContext.prototype.fromStatement = function () {
	return this.getTypedRuleContext(FromStatementContext, 0);
};

QueryStatementExpressionBodyContext.prototype.regularBody = function () {
	return this.getTypedRuleContext(RegularBodyContext, 0);
};

QueryStatementExpressionBodyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitQueryStatementExpressionBody(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.QueryStatementExpressionBodyContext = QueryStatementExpressionBodyContext;

HiveParser.prototype.queryStatementExpressionBody = function () {
	var localctx = new QueryStatementExpressionBodyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 482, HiveParser.RULE_queryStatementExpressionBody);
	try {
		this.state = 2917;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_FROM:
				this.enterOuterAlt(localctx, 1);
				this.state = 2915;
				this.fromStatement();
				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.LPAREN:
				this.enterOuterAlt(localctx, 2);
				this.state = 2916;
				this.regularBody();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WithClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_withClause;
	return this;
}

WithClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithClauseContext.prototype.constructor = WithClauseContext;

WithClauseContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

WithClauseContext.prototype.cteStatement = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(CteStatementContext);
	} else {
		return this.getTypedRuleContext(CteStatementContext, i);
	}
};

WithClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

WithClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWithClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WithClauseContext = WithClauseContext;

HiveParser.prototype.withClause = function () {
	var localctx = new WithClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 484, HiveParser.RULE_withClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2919;
		this.match(HiveParser.KW_WITH);
		this.state = 2920;
		this.cteStatement();
		this.state = 2925;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 2921;
			this.match(HiveParser.COMMA);
			this.state = 2922;
			this.cteStatement();
			this.state = 2927;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CteStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_cteStatement;
	return this;
}

CteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CteStatementContext.prototype.constructor = CteStatementContext;

CteStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CteStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

CteStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

CteStatementContext.prototype.queryStatementExpression = function () {
	return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
};

CteStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

CteStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCteStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CteStatementContext = CteStatementContext;

HiveParser.prototype.cteStatement = function () {
	var localctx = new CteStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 486, HiveParser.RULE_cteStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2928;
		this.identifier();
		this.state = 2929;
		this.match(HiveParser.KW_AS);
		this.state = 2930;
		this.match(HiveParser.LPAREN);
		this.state = 2931;
		this.queryStatementExpression();
		this.state = 2932;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FromStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_fromStatement;
	return this;
}

FromStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromStatementContext.prototype.constructor = FromStatementContext;

FromStatementContext.prototype.singleFromStatement = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SingleFromStatementContext);
	} else {
		return this.getTypedRuleContext(SingleFromStatementContext, i);
	}
};

FromStatementContext.prototype.setOperator = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SetOperatorContext);
	} else {
		return this.getTypedRuleContext(SetOperatorContext, i);
	}
};

FromStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFromStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FromStatementContext = FromStatementContext;

HiveParser.prototype.fromStatement = function () {
	var localctx = new FromStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 488, HiveParser.RULE_fromStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2934;
		this.singleFromStatement();
		this.state = 2940;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (
			_la === HiveParser.KW_UNION ||
			_la === HiveParser.KW_EXCEPT ||
			_la === HiveParser.KW_MINUS ||
			_la === HiveParser.KW_INTERSECT
		) {
			this.state = 2935;
			this.setOperator();
			this.state = 2936;
			this.singleFromStatement();
			this.state = 2942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SingleFromStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_singleFromStatement;
	return this;
}

SingleFromStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFromStatementContext.prototype.constructor = SingleFromStatementContext;

SingleFromStatementContext.prototype.fromClause = function () {
	return this.getTypedRuleContext(FromClauseContext, 0);
};

SingleFromStatementContext.prototype.body = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(BodyContext);
	} else {
		return this.getTypedRuleContext(BodyContext, i);
	}
};

SingleFromStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSingleFromStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SingleFromStatementContext = SingleFromStatementContext;

HiveParser.prototype.singleFromStatement = function () {
	var localctx = new SingleFromStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 490, HiveParser.RULE_singleFromStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2943;
		this.fromClause();
		this.state = 2945;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 2944;
			this.body();
			this.state = 2947;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (
			_la === HiveParser.KW_SELECT ||
			_la === HiveParser.KW_INSERT ||
			_la === HiveParser.KW_MAP ||
			_la === HiveParser.KW_REDUCE
		);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RegularBodyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_regularBody;
	return this;
}

RegularBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RegularBodyContext.prototype.constructor = RegularBodyContext;

RegularBodyContext.prototype.insertClause = function () {
	return this.getTypedRuleContext(InsertClauseContext, 0);
};

RegularBodyContext.prototype.selectStatement = function () {
	return this.getTypedRuleContext(SelectStatementContext, 0);
};

RegularBodyContext.prototype.valuesClause = function () {
	return this.getTypedRuleContext(ValuesClauseContext, 0);
};

RegularBodyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRegularBody(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RegularBodyContext = RegularBodyContext;

HiveParser.prototype.regularBody = function () {
	var localctx = new RegularBodyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 492, HiveParser.RULE_regularBody);
	try {
		this.state = 2955;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_INSERT:
				this.enterOuterAlt(localctx, 1);
				this.state = 2949;
				this.insertClause();
				this.state = 2952;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_SELECT:
					case HiveParser.KW_MAP:
					case HiveParser.KW_REDUCE:
					case HiveParser.LPAREN:
						this.state = 2950;
						this.selectStatement();
						break;
					case HiveParser.KW_VALUES:
						this.state = 2951;
						this.valuesClause();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.LPAREN:
				this.enterOuterAlt(localctx, 2);
				this.state = 2954;
				this.selectStatement();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AtomSelectStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_atomSelectStatement;
	return this;
}

AtomSelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomSelectStatementContext.prototype.constructor = AtomSelectStatementContext;

AtomSelectStatementContext.prototype.selectClause = function () {
	return this.getTypedRuleContext(SelectClauseContext, 0);
};

AtomSelectStatementContext.prototype.fromClause = function () {
	return this.getTypedRuleContext(FromClauseContext, 0);
};

AtomSelectStatementContext.prototype.whereClause = function () {
	return this.getTypedRuleContext(WhereClauseContext, 0);
};

AtomSelectStatementContext.prototype.groupByClause = function () {
	return this.getTypedRuleContext(GroupByClauseContext, 0);
};

AtomSelectStatementContext.prototype.havingClause = function () {
	return this.getTypedRuleContext(HavingClauseContext, 0);
};

AtomSelectStatementContext.prototype.window_clause = function () {
	return this.getTypedRuleContext(Window_clauseContext, 0);
};

AtomSelectStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

AtomSelectStatementContext.prototype.selectStatement = function () {
	return this.getTypedRuleContext(SelectStatementContext, 0);
};

AtomSelectStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

AtomSelectStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAtomSelectStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AtomSelectStatementContext = AtomSelectStatementContext;

HiveParser.prototype.atomSelectStatement = function () {
	var localctx = new AtomSelectStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 494, HiveParser.RULE_atomSelectStatement);
	var _la = 0; // Token type
	try {
		this.state = 2977;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
				this.enterOuterAlt(localctx, 1);
				this.state = 2957;
				this.selectClause();
				this.state = 2959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_FROM) {
					this.state = 2958;
					this.fromClause();
				}

				this.state = 2962;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WHERE) {
					this.state = 2961;
					this.whereClause();
				}

				this.state = 2965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_GROUP) {
					this.state = 2964;
					this.groupByClause();
				}

				this.state = 2968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_HAVING) {
					this.state = 2967;
					this.havingClause();
				}

				this.state = 2971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WINDOW) {
					this.state = 2970;
					this.window_clause();
				}

				break;
			case HiveParser.LPAREN:
				this.enterOuterAlt(localctx, 2);
				this.state = 2973;
				this.match(HiveParser.LPAREN);
				this.state = 2974;
				this.selectStatement();
				this.state = 2975;
				this.match(HiveParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectStatement;
	return this;
}

SelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementContext.prototype.constructor = SelectStatementContext;

SelectStatementContext.prototype.atomSelectStatement = function () {
	return this.getTypedRuleContext(AtomSelectStatementContext, 0);
};

SelectStatementContext.prototype.setOpSelectStatement = function () {
	return this.getTypedRuleContext(SetOpSelectStatementContext, 0);
};

SelectStatementContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

SelectStatementContext.prototype.clusterByClause = function () {
	return this.getTypedRuleContext(ClusterByClauseContext, 0);
};

SelectStatementContext.prototype.distributeByClause = function () {
	return this.getTypedRuleContext(DistributeByClauseContext, 0);
};

SelectStatementContext.prototype.sortByClause = function () {
	return this.getTypedRuleContext(SortByClauseContext, 0);
};

SelectStatementContext.prototype.limitClause = function () {
	return this.getTypedRuleContext(LimitClauseContext, 0);
};

SelectStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectStatementContext = SelectStatementContext;

HiveParser.prototype.selectStatement = function () {
	var localctx = new SelectStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 496, HiveParser.RULE_selectStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 2979;
		this.atomSelectStatement();
		this.state = 2981;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_UNION ||
			_la === HiveParser.KW_EXCEPT ||
			_la === HiveParser.KW_MINUS ||
			_la === HiveParser.KW_INTERSECT
		) {
			this.state = 2980;
			this.setOpSelectStatement();
		}

		this.state = 2984;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ORDER) {
			this.state = 2983;
			this.orderByClause();
		}

		this.state = 2987;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_CLUSTER) {
			this.state = 2986;
			this.clusterByClause();
		}

		this.state = 2990;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_DISTRIBUTE) {
			this.state = 2989;
			this.distributeByClause();
		}

		this.state = 2993;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_SORT) {
			this.state = 2992;
			this.sortByClause();
		}

		this.state = 2996;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_LIMIT) {
			this.state = 2995;
			this.limitClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SetOpSelectStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_setOpSelectStatement;
	return this;
}

SetOpSelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetOpSelectStatementContext.prototype.constructor = SetOpSelectStatementContext;

SetOpSelectStatementContext.prototype.setOperator = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SetOperatorContext);
	} else {
		return this.getTypedRuleContext(SetOperatorContext, i);
	}
};

SetOpSelectStatementContext.prototype.atomSelectStatement = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(AtomSelectStatementContext);
	} else {
		return this.getTypedRuleContext(AtomSelectStatementContext, i);
	}
};

SetOpSelectStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSetOpSelectStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SetOpSelectStatementContext = SetOpSelectStatementContext;

HiveParser.prototype.setOpSelectStatement = function () {
	var localctx = new SetOpSelectStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 498, HiveParser.RULE_setOpSelectStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3001;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 2998;
			this.setOperator();
			this.state = 2999;
			this.atomSelectStatement();
			this.state = 3003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (
			_la === HiveParser.KW_UNION ||
			_la === HiveParser.KW_EXCEPT ||
			_la === HiveParser.KW_MINUS ||
			_la === HiveParser.KW_INTERSECT
		);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectStatementWithCTEContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectStatementWithCTE;
	return this;
}

SelectStatementWithCTEContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementWithCTEContext.prototype.constructor = SelectStatementWithCTEContext;

SelectStatementWithCTEContext.prototype.selectStatement = function () {
	return this.getTypedRuleContext(SelectStatementContext, 0);
};

SelectStatementWithCTEContext.prototype.withClause = function () {
	return this.getTypedRuleContext(WithClauseContext, 0);
};

SelectStatementWithCTEContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectStatementWithCTE(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectStatementWithCTEContext = SelectStatementWithCTEContext;

HiveParser.prototype.selectStatementWithCTE = function () {
	var localctx = new SelectStatementWithCTEContext(this, this._ctx, this.state);
	this.enterRule(localctx, 500, HiveParser.RULE_selectStatementWithCTE);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3006;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 3005;
			this.withClause();
		}

		this.state = 3008;
		this.selectStatement();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BodyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_body;
	return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.insertClause = function () {
	return this.getTypedRuleContext(InsertClauseContext, 0);
};

BodyContext.prototype.selectClause = function () {
	return this.getTypedRuleContext(SelectClauseContext, 0);
};

BodyContext.prototype.lateralView = function () {
	return this.getTypedRuleContext(LateralViewContext, 0);
};

BodyContext.prototype.whereClause = function () {
	return this.getTypedRuleContext(WhereClauseContext, 0);
};

BodyContext.prototype.groupByClause = function () {
	return this.getTypedRuleContext(GroupByClauseContext, 0);
};

BodyContext.prototype.havingClause = function () {
	return this.getTypedRuleContext(HavingClauseContext, 0);
};

BodyContext.prototype.window_clause = function () {
	return this.getTypedRuleContext(Window_clauseContext, 0);
};

BodyContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

BodyContext.prototype.clusterByClause = function () {
	return this.getTypedRuleContext(ClusterByClauseContext, 0);
};

BodyContext.prototype.distributeByClause = function () {
	return this.getTypedRuleContext(DistributeByClauseContext, 0);
};

BodyContext.prototype.sortByClause = function () {
	return this.getTypedRuleContext(SortByClauseContext, 0);
};

BodyContext.prototype.limitClause = function () {
	return this.getTypedRuleContext(LimitClauseContext, 0);
};

BodyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBody(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BodyContext = BodyContext;

HiveParser.prototype.body = function () {
	var localctx = new BodyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 502, HiveParser.RULE_body);
	var _la = 0; // Token type
	try {
		this.state = 3073;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_INSERT:
				this.enterOuterAlt(localctx, 1);
				this.state = 3010;
				this.insertClause();
				this.state = 3011;
				this.selectClause();
				this.state = 3013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LATERAL || _la === HiveParser.COMMA) {
					this.state = 3012;
					this.lateralView();
				}

				this.state = 3016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WHERE) {
					this.state = 3015;
					this.whereClause();
				}

				this.state = 3019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_GROUP) {
					this.state = 3018;
					this.groupByClause();
				}

				this.state = 3022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_HAVING) {
					this.state = 3021;
					this.havingClause();
				}

				this.state = 3025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WINDOW) {
					this.state = 3024;
					this.window_clause();
				}

				this.state = 3028;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ORDER) {
					this.state = 3027;
					this.orderByClause();
				}

				this.state = 3031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_CLUSTER) {
					this.state = 3030;
					this.clusterByClause();
				}

				this.state = 3034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTRIBUTE) {
					this.state = 3033;
					this.distributeByClause();
				}

				this.state = 3037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_SORT) {
					this.state = 3036;
					this.sortByClause();
				}

				this.state = 3040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LIMIT) {
					this.state = 3039;
					this.limitClause();
				}

				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
				this.enterOuterAlt(localctx, 2);
				this.state = 3042;
				this.selectClause();
				this.state = 3044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LATERAL || _la === HiveParser.COMMA) {
					this.state = 3043;
					this.lateralView();
				}

				this.state = 3047;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WHERE) {
					this.state = 3046;
					this.whereClause();
				}

				this.state = 3050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_GROUP) {
					this.state = 3049;
					this.groupByClause();
				}

				this.state = 3053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_HAVING) {
					this.state = 3052;
					this.havingClause();
				}

				this.state = 3056;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WINDOW) {
					this.state = 3055;
					this.window_clause();
				}

				this.state = 3059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ORDER) {
					this.state = 3058;
					this.orderByClause();
				}

				this.state = 3062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_CLUSTER) {
					this.state = 3061;
					this.clusterByClause();
				}

				this.state = 3065;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTRIBUTE) {
					this.state = 3064;
					this.distributeByClause();
				}

				this.state = 3068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_SORT) {
					this.state = 3067;
					this.sortByClause();
				}

				this.state = 3071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LIMIT) {
					this.state = 3070;
					this.limitClause();
				}

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function InsertClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_insertClause;
	return this;
}

InsertClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertClauseContext.prototype.constructor = InsertClauseContext;

InsertClauseContext.prototype.KW_INSERT = function () {
	return this.getToken(HiveParser.KW_INSERT, 0);
};

InsertClauseContext.prototype.KW_OVERWRITE = function () {
	return this.getToken(HiveParser.KW_OVERWRITE, 0);
};

InsertClauseContext.prototype.destination = function () {
	return this.getTypedRuleContext(DestinationContext, 0);
};

InsertClauseContext.prototype.ifNotExists = function () {
	return this.getTypedRuleContext(IfNotExistsContext, 0);
};

InsertClauseContext.prototype.KW_INTO = function () {
	return this.getToken(HiveParser.KW_INTO, 0);
};

InsertClauseContext.prototype.tableOrPartition = function () {
	return this.getTypedRuleContext(TableOrPartitionContext, 0);
};

InsertClauseContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

InsertClauseContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

InsertClauseContext.prototype.columnNameList = function () {
	return this.getTypedRuleContext(ColumnNameListContext, 0);
};

InsertClauseContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

InsertClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitInsertClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.InsertClauseContext = InsertClauseContext;

HiveParser.prototype.insertClause = function () {
	var localctx = new InsertClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 504, HiveParser.RULE_insertClause);
	var _la = 0; // Token type
	try {
		this.state = 3093;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 333, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3075;
				this.match(HiveParser.KW_INSERT);
				this.state = 3076;
				this.match(HiveParser.KW_OVERWRITE);
				this.state = 3077;
				this.destination();
				this.state = 3079;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_IF) {
					this.state = 3078;
					this.ifNotExists();
				}

				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3081;
				this.match(HiveParser.KW_INSERT);
				this.state = 3082;
				this.match(HiveParser.KW_INTO);
				this.state = 3084;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TABLE) {
					this.state = 3083;
					this.match(HiveParser.KW_TABLE);
				}

				this.state = 3086;
				this.tableOrPartition();
				this.state = 3091;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 332, this._ctx);
				if (la_ === 1) {
					this.state = 3087;
					this.match(HiveParser.LPAREN);
					this.state = 3088;
					this.columnNameList();
					this.state = 3089;
					this.match(HiveParser.RPAREN);
				}
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DestinationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_destination;
	return this;
}

DestinationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DestinationContext.prototype.constructor = DestinationContext;

DestinationContext.prototype.KW_DIRECTORY = function () {
	return this.getToken(HiveParser.KW_DIRECTORY, 0);
};

DestinationContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

DestinationContext.prototype.KW_LOCAL = function () {
	return this.getToken(HiveParser.KW_LOCAL, 0);
};

DestinationContext.prototype.tableRowFormat = function () {
	return this.getTypedRuleContext(TableRowFormatContext, 0);
};

DestinationContext.prototype.tableFileFormat = function () {
	return this.getTypedRuleContext(TableFileFormatContext, 0);
};

DestinationContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

DestinationContext.prototype.tableOrPartition = function () {
	return this.getTypedRuleContext(TableOrPartitionContext, 0);
};

DestinationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDestination(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DestinationContext = DestinationContext;

HiveParser.prototype.destination = function () {
	var localctx = new DestinationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 506, HiveParser.RULE_destination);
	var _la = 0; // Token type
	try {
		this.state = 3108;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_LOCAL:
				this.enterOuterAlt(localctx, 1);
				this.state = 3096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LOCAL) {
					this.state = 3095;
					this.match(HiveParser.KW_LOCAL);
				}

				this.state = 3098;
				this.match(HiveParser.KW_DIRECTORY);
				this.state = 3099;
				this.match(HiveParser.StringLiteral);
				this.state = 3101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROW) {
					this.state = 3100;
					this.tableRowFormat();
				}

				this.state = 3104;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_STORED) {
					this.state = 3103;
					this.tableFileFormat();
				}

				break;
			case HiveParser.KW_TABLE:
				this.enterOuterAlt(localctx, 2);
				this.state = 3106;
				this.match(HiveParser.KW_TABLE);
				this.state = 3107;
				this.tableOrPartition();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LimitClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_limitClause;
	return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.KW_LIMIT = function () {
	return this.getToken(HiveParser.KW_LIMIT, 0);
};

LimitClauseContext.prototype.Number = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.Number);
	} else {
		return this.getToken(HiveParser.Number, i);
	}
};

LimitClauseContext.prototype.COMMA = function () {
	return this.getToken(HiveParser.COMMA, 0);
};

LimitClauseContext.prototype.KW_OFFSET = function () {
	return this.getToken(HiveParser.KW_OFFSET, 0);
};

LimitClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitLimitClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.LimitClauseContext = LimitClauseContext;

HiveParser.prototype.limitClause = function () {
	var localctx = new LimitClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 508, HiveParser.RULE_limitClause);
	try {
		this.state = 3120;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 339, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3110;
				this.match(HiveParser.KW_LIMIT);

				this.state = 3113;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 338, this._ctx);
				if (la_ === 1) {
					this.state = 3111;
					this.match(HiveParser.Number);
					this.state = 3112;
					this.match(HiveParser.COMMA);
				}
				this.state = 3115;
				this.match(HiveParser.Number);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3116;
				this.match(HiveParser.KW_LIMIT);
				this.state = 3117;
				this.match(HiveParser.Number);
				this.state = 3118;
				this.match(HiveParser.KW_OFFSET);
				this.state = 3119;
				this.match(HiveParser.Number);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DeleteStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_deleteStatement;
	return this;
}

DeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteStatementContext.prototype.constructor = DeleteStatementContext;

DeleteStatementContext.prototype.KW_DELETE = function () {
	return this.getToken(HiveParser.KW_DELETE, 0);
};

DeleteStatementContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

DeleteStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

DeleteStatementContext.prototype.whereClause = function () {
	return this.getTypedRuleContext(WhereClauseContext, 0);
};

DeleteStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDeleteStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DeleteStatementContext = DeleteStatementContext;

HiveParser.prototype.deleteStatement = function () {
	var localctx = new DeleteStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 510, HiveParser.RULE_deleteStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3122;
		this.match(HiveParser.KW_DELETE);
		this.state = 3123;
		this.match(HiveParser.KW_FROM);
		this.state = 3124;
		this.tableName();
		this.state = 3126;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WHERE) {
			this.state = 3125;
			this.whereClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnAssignmentClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnAssignmentClause;
	return this;
}

ColumnAssignmentClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnAssignmentClauseContext.prototype.constructor = ColumnAssignmentClauseContext;

ColumnAssignmentClauseContext.prototype.tableOrColumn = function () {
	return this.getTypedRuleContext(TableOrColumnContext, 0);
};

ColumnAssignmentClauseContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

ColumnAssignmentClauseContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

ColumnAssignmentClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnAssignmentClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnAssignmentClauseContext = ColumnAssignmentClauseContext;

HiveParser.prototype.columnAssignmentClause = function () {
	var localctx = new ColumnAssignmentClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 512, HiveParser.RULE_columnAssignmentClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3128;
		this.tableOrColumn();
		this.state = 3129;
		this.match(HiveParser.EQUAL);
		this.state = 3130;
		this.expression(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SetColumnsClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_setColumnsClause;
	return this;
}

SetColumnsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetColumnsClauseContext.prototype.constructor = SetColumnsClauseContext;

SetColumnsClauseContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

SetColumnsClauseContext.prototype.columnAssignmentClause = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnAssignmentClauseContext);
	} else {
		return this.getTypedRuleContext(ColumnAssignmentClauseContext, i);
	}
};

SetColumnsClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

SetColumnsClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSetColumnsClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SetColumnsClauseContext = SetColumnsClauseContext;

HiveParser.prototype.setColumnsClause = function () {
	var localctx = new SetColumnsClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 514, HiveParser.RULE_setColumnsClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3132;
		this.match(HiveParser.KW_SET);
		this.state = 3133;
		this.columnAssignmentClause();
		this.state = 3138;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3134;
			this.match(HiveParser.COMMA);
			this.state = 3135;
			this.columnAssignmentClause();
			this.state = 3140;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UpdateStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_updateStatement;
	return this;
}

UpdateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateStatementContext.prototype.constructor = UpdateStatementContext;

UpdateStatementContext.prototype.KW_UPDATE = function () {
	return this.getToken(HiveParser.KW_UPDATE, 0);
};

UpdateStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

UpdateStatementContext.prototype.setColumnsClause = function () {
	return this.getTypedRuleContext(SetColumnsClauseContext, 0);
};

UpdateStatementContext.prototype.whereClause = function () {
	return this.getTypedRuleContext(WhereClauseContext, 0);
};

UpdateStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUpdateStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UpdateStatementContext = UpdateStatementContext;

HiveParser.prototype.updateStatement = function () {
	var localctx = new UpdateStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 516, HiveParser.RULE_updateStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3141;
		this.match(HiveParser.KW_UPDATE);
		this.state = 3142;
		this.tableName();
		this.state = 3143;
		this.setColumnsClause();
		this.state = 3145;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WHERE) {
			this.state = 3144;
			this.whereClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SqlTransactionStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_sqlTransactionStatement;
	return this;
}

SqlTransactionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlTransactionStatementContext.prototype.constructor = SqlTransactionStatementContext;

SqlTransactionStatementContext.prototype.startTransactionStatement = function () {
	return this.getTypedRuleContext(StartTransactionStatementContext, 0);
};

SqlTransactionStatementContext.prototype.commitStatement = function () {
	return this.getTypedRuleContext(CommitStatementContext, 0);
};

SqlTransactionStatementContext.prototype.rollbackStatement = function () {
	return this.getTypedRuleContext(RollbackStatementContext, 0);
};

SqlTransactionStatementContext.prototype.setAutoCommitStatement = function () {
	return this.getTypedRuleContext(SetAutoCommitStatementContext, 0);
};

SqlTransactionStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSqlTransactionStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SqlTransactionStatementContext = SqlTransactionStatementContext;

HiveParser.prototype.sqlTransactionStatement = function () {
	var localctx = new SqlTransactionStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 518, HiveParser.RULE_sqlTransactionStatement);
	try {
		this.state = 3151;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_START:
				this.enterOuterAlt(localctx, 1);
				this.state = 3147;
				this.startTransactionStatement();
				break;
			case HiveParser.KW_COMMIT:
				this.enterOuterAlt(localctx, 2);
				this.state = 3148;
				this.commitStatement();
				break;
			case HiveParser.KW_ROLLBACK:
				this.enterOuterAlt(localctx, 3);
				this.state = 3149;
				this.rollbackStatement();
				break;
			case HiveParser.KW_SET:
				this.enterOuterAlt(localctx, 4);
				this.state = 3150;
				this.setAutoCommitStatement();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StartTransactionStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_startTransactionStatement;
	return this;
}

StartTransactionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartTransactionStatementContext.prototype.constructor = StartTransactionStatementContext;

StartTransactionStatementContext.prototype.KW_START = function () {
	return this.getToken(HiveParser.KW_START, 0);
};

StartTransactionStatementContext.prototype.KW_TRANSACTION = function () {
	return this.getToken(HiveParser.KW_TRANSACTION, 0);
};

StartTransactionStatementContext.prototype.transactionMode = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TransactionModeContext);
	} else {
		return this.getTypedRuleContext(TransactionModeContext, i);
	}
};

StartTransactionStatementContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

StartTransactionStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitStartTransactionStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.StartTransactionStatementContext = StartTransactionStatementContext;

HiveParser.prototype.startTransactionStatement = function () {
	var localctx = new StartTransactionStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 520, HiveParser.RULE_startTransactionStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3153;
		this.match(HiveParser.KW_START);
		this.state = 3154;
		this.match(HiveParser.KW_TRANSACTION);
		this.state = 3163;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_READ || _la === HiveParser.KW_ISOLATION) {
			this.state = 3155;
			this.transactionMode();
			this.state = 3160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				this.state = 3156;
				this.match(HiveParser.COMMA);
				this.state = 3157;
				this.transactionMode();
				this.state = 3162;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TransactionModeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_transactionMode;
	return this;
}

TransactionModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionModeContext.prototype.constructor = TransactionModeContext;

TransactionModeContext.prototype.isolationLevel = function () {
	return this.getTypedRuleContext(IsolationLevelContext, 0);
};

TransactionModeContext.prototype.transactionAccessMode = function () {
	return this.getTypedRuleContext(TransactionAccessModeContext, 0);
};

TransactionModeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTransactionMode(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TransactionModeContext = TransactionModeContext;

HiveParser.prototype.transactionMode = function () {
	var localctx = new TransactionModeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 522, HiveParser.RULE_transactionMode);
	try {
		this.state = 3167;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ISOLATION:
				this.enterOuterAlt(localctx, 1);
				this.state = 3165;
				this.isolationLevel();
				break;
			case HiveParser.KW_READ:
				this.enterOuterAlt(localctx, 2);
				this.state = 3166;
				this.transactionAccessMode();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TransactionAccessModeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_transactionAccessMode;
	return this;
}

TransactionAccessModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionAccessModeContext.prototype.constructor = TransactionAccessModeContext;

TransactionAccessModeContext.prototype.KW_READ = function () {
	return this.getToken(HiveParser.KW_READ, 0);
};

TransactionAccessModeContext.prototype.KW_ONLY = function () {
	return this.getToken(HiveParser.KW_ONLY, 0);
};

TransactionAccessModeContext.prototype.KW_WRITE = function () {
	return this.getToken(HiveParser.KW_WRITE, 0);
};

TransactionAccessModeContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTransactionAccessMode(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TransactionAccessModeContext = TransactionAccessModeContext;

HiveParser.prototype.transactionAccessMode = function () {
	var localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 524, HiveParser.RULE_transactionAccessMode);
	try {
		this.state = 3173;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 347, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3169;
				this.match(HiveParser.KW_READ);
				this.state = 3170;
				this.match(HiveParser.KW_ONLY);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3171;
				this.match(HiveParser.KW_READ);
				this.state = 3172;
				this.match(HiveParser.KW_WRITE);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IsolationLevelContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_isolationLevel;
	return this;
}

IsolationLevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsolationLevelContext.prototype.constructor = IsolationLevelContext;

IsolationLevelContext.prototype.KW_ISOLATION = function () {
	return this.getToken(HiveParser.KW_ISOLATION, 0);
};

IsolationLevelContext.prototype.KW_LEVEL = function () {
	return this.getToken(HiveParser.KW_LEVEL, 0);
};

IsolationLevelContext.prototype.levelOfIsolation = function () {
	return this.getTypedRuleContext(LevelOfIsolationContext, 0);
};

IsolationLevelContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIsolationLevel(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IsolationLevelContext = IsolationLevelContext;

HiveParser.prototype.isolationLevel = function () {
	var localctx = new IsolationLevelContext(this, this._ctx, this.state);
	this.enterRule(localctx, 526, HiveParser.RULE_isolationLevel);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3175;
		this.match(HiveParser.KW_ISOLATION);
		this.state = 3176;
		this.match(HiveParser.KW_LEVEL);
		this.state = 3177;
		this.levelOfIsolation();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LevelOfIsolationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_levelOfIsolation;
	return this;
}

LevelOfIsolationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LevelOfIsolationContext.prototype.constructor = LevelOfIsolationContext;

LevelOfIsolationContext.prototype.KW_SNAPSHOT = function () {
	return this.getToken(HiveParser.KW_SNAPSHOT, 0);
};

LevelOfIsolationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitLevelOfIsolation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.LevelOfIsolationContext = LevelOfIsolationContext;

HiveParser.prototype.levelOfIsolation = function () {
	var localctx = new LevelOfIsolationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 528, HiveParser.RULE_levelOfIsolation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3179;
		this.match(HiveParser.KW_SNAPSHOT);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CommitStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_commitStatement;
	return this;
}

CommitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommitStatementContext.prototype.constructor = CommitStatementContext;

CommitStatementContext.prototype.KW_COMMIT = function () {
	return this.getToken(HiveParser.KW_COMMIT, 0);
};

CommitStatementContext.prototype.KW_WORK = function () {
	return this.getToken(HiveParser.KW_WORK, 0);
};

CommitStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCommitStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CommitStatementContext = CommitStatementContext;

HiveParser.prototype.commitStatement = function () {
	var localctx = new CommitStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 530, HiveParser.RULE_commitStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3181;
		this.match(HiveParser.KW_COMMIT);
		this.state = 3183;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WORK) {
			this.state = 3182;
			this.match(HiveParser.KW_WORK);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RollbackStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rollbackStatement;
	return this;
}

RollbackStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollbackStatementContext.prototype.constructor = RollbackStatementContext;

RollbackStatementContext.prototype.KW_ROLLBACK = function () {
	return this.getToken(HiveParser.KW_ROLLBACK, 0);
};

RollbackStatementContext.prototype.KW_WORK = function () {
	return this.getToken(HiveParser.KW_WORK, 0);
};

RollbackStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRollbackStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RollbackStatementContext = RollbackStatementContext;

HiveParser.prototype.rollbackStatement = function () {
	var localctx = new RollbackStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 532, HiveParser.RULE_rollbackStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3185;
		this.match(HiveParser.KW_ROLLBACK);
		this.state = 3187;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WORK) {
			this.state = 3186;
			this.match(HiveParser.KW_WORK);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SetAutoCommitStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_setAutoCommitStatement;
	return this;
}

SetAutoCommitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetAutoCommitStatementContext.prototype.constructor = SetAutoCommitStatementContext;

SetAutoCommitStatementContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

SetAutoCommitStatementContext.prototype.KW_AUTOCOMMIT = function () {
	return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
};

SetAutoCommitStatementContext.prototype.booleanValueTok = function () {
	return this.getTypedRuleContext(BooleanValueTokContext, 0);
};

SetAutoCommitStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSetAutoCommitStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SetAutoCommitStatementContext = SetAutoCommitStatementContext;

HiveParser.prototype.setAutoCommitStatement = function () {
	var localctx = new SetAutoCommitStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 534, HiveParser.RULE_setAutoCommitStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3189;
		this.match(HiveParser.KW_SET);
		this.state = 3190;
		this.match(HiveParser.KW_AUTOCOMMIT);
		this.state = 3191;
		this.booleanValueTok();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AbortTransactionStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_abortTransactionStatement;
	return this;
}

AbortTransactionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbortTransactionStatementContext.prototype.constructor = AbortTransactionStatementContext;

AbortTransactionStatementContext.prototype.KW_ABORT = function () {
	return this.getToken(HiveParser.KW_ABORT, 0);
};

AbortTransactionStatementContext.prototype.KW_TRANSACTIONS = function () {
	return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
};

AbortTransactionStatementContext.prototype.Number = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.Number);
	} else {
		return this.getToken(HiveParser.Number, i);
	}
};

AbortTransactionStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAbortTransactionStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AbortTransactionStatementContext = AbortTransactionStatementContext;

HiveParser.prototype.abortTransactionStatement = function () {
	var localctx = new AbortTransactionStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 536, HiveParser.RULE_abortTransactionStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3193;
		this.match(HiveParser.KW_ABORT);
		this.state = 3194;
		this.match(HiveParser.KW_TRANSACTIONS);
		this.state = 3196;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 3195;
			this.match(HiveParser.Number);
			this.state = 3198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === HiveParser.Number);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function MergeStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_mergeStatement;
	return this;
}

MergeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MergeStatementContext.prototype.constructor = MergeStatementContext;

MergeStatementContext.prototype.KW_MERGE = function () {
	return this.getToken(HiveParser.KW_MERGE, 0);
};

MergeStatementContext.prototype.KW_INTO = function () {
	return this.getToken(HiveParser.KW_INTO, 0);
};

MergeStatementContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

MergeStatementContext.prototype.KW_USING = function () {
	return this.getToken(HiveParser.KW_USING, 0);
};

MergeStatementContext.prototype.joinSourcePart = function () {
	return this.getTypedRuleContext(JoinSourcePartContext, 0);
};

MergeStatementContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

MergeStatementContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

MergeStatementContext.prototype.whenClauses = function () {
	return this.getTypedRuleContext(WhenClausesContext, 0);
};

MergeStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

MergeStatementContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

MergeStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitMergeStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.MergeStatementContext = MergeStatementContext;

HiveParser.prototype.mergeStatement = function () {
	var localctx = new MergeStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 538, HiveParser.RULE_mergeStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3200;
		this.match(HiveParser.KW_MERGE);
		this.state = 3201;
		this.match(HiveParser.KW_INTO);
		this.state = 3202;
		this.tableName();
		this.state = 3207;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_ASC) |
						(1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_NULLS) |
						(1 << HiveParser.KW_LAST) |
						(1 << HiveParser.KW_AS) |
						(1 << HiveParser.KW_OVERWRITE))) !==
					0) ||
			(((_la - 36) & ~0x1f) == 0 &&
				((1 << (_la - 36)) &
					((1 << (HiveParser.KW_PARTITIONS - 36)) |
						(1 << (HiveParser.KW_TABLES - 36)) |
						(1 << (HiveParser.KW_COLUMNS - 36)) |
						(1 << (HiveParser.KW_INDEX - 36)) |
						(1 << (HiveParser.KW_INDEXES - 36)) |
						(1 << (HiveParser.KW_REBUILD - 36)) |
						(1 << (HiveParser.KW_FUNCTIONS - 36)) |
						(1 << (HiveParser.KW_SHOW - 36)) |
						(1 << (HiveParser.KW_MSCK - 36)) |
						(1 << (HiveParser.KW_REPAIR - 36)) |
						(1 << (HiveParser.KW_DIRECTORY - 36)) |
						(1 << (HiveParser.KW_CLUSTER - 36)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
						(1 << (HiveParser.KW_SORT - 36)) |
						(1 << (HiveParser.KW_LOAD - 36)) |
						(1 << (HiveParser.KW_EXPORT - 36)) |
						(1 << (HiveParser.KW_REPLICATION - 36)) |
						(1 << (HiveParser.KW_METADATA - 36)) |
						(1 << (HiveParser.KW_DATA - 36)) |
						(1 << (HiveParser.KW_INPATH - 36)))) !==
					0) ||
			(((_la - 68) & ~0x1f) == 0 &&
				((1 << (_la - 68)) &
					((1 << (HiveParser.KW_CHANGE - 68)) |
						(1 << (HiveParser.KW_FIRST - 68)) |
						(1 << (HiveParser.KW_AFTER - 68)) |
						(1 << (HiveParser.KW_RENAME - 68)) |
						(1 << (HiveParser.KW_COMMENT - 68)) |
						(1 << (HiveParser.KW_TINYINT - 68)) |
						(1 << (HiveParser.KW_DATETIME - 68)) |
						(1 << (HiveParser.KW_ZONE - 68)) |
						(1 << (HiveParser.KW_STRING - 68)) |
						(1 << (HiveParser.KW_STRUCT - 68)) |
						(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
					0) ||
			(((_la - 101) & ~0x1f) == 0 &&
				((1 << (_la - 101)) &
					((1 << (HiveParser.KW_PARTITIONED - 101)) |
						(1 << (HiveParser.KW_CLUSTERED - 101)) |
						(1 << (HiveParser.KW_SORTED - 101)) |
						(1 << (HiveParser.KW_BUCKETS - 101)) |
						(1 << (HiveParser.KW_FORMAT - 101)) |
						(1 << (HiveParser.KW_DELIMITED - 101)) |
						(1 << (HiveParser.KW_FIELDS - 101)) |
						(1 << (HiveParser.KW_TERMINATED - 101)) |
						(1 << (HiveParser.KW_ESCAPED - 101)) |
						(1 << (HiveParser.KW_COLLECTION - 101)) |
						(1 << (HiveParser.KW_ITEMS - 101)) |
						(1 << (HiveParser.KW_KEYS - 101)) |
						(1 << (HiveParser.KW_KEY_TYPE - 101)) |
						(1 << (HiveParser.KW_KILL - 101)) |
						(1 << (HiveParser.KW_LINES - 101)) |
						(1 << (HiveParser.KW_STORED - 101)) |
						(1 << (HiveParser.KW_FILEFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_ENABLE - 101)) |
						(1 << (HiveParser.KW_DISABLE - 101)) |
						(1 << (HiveParser.KW_LOCATION - 101)) |
						(1 << (HiveParser.KW_BUCKET - 101)))) !==
					0) ||
			(((_la - 134) & ~0x1f) == 0 &&
				((1 << (_la - 134)) &
					((1 << (HiveParser.KW_ADD - 134)) |
						(1 << (HiveParser.KW_REPLACE - 134)) |
						(1 << (HiveParser.KW_TEMPORARY - 134)) |
						(1 << (HiveParser.KW_FILE - 134)) |
						(1 << (HiveParser.KW_JAR - 134)) |
						(1 << (HiveParser.KW_EXPLAIN - 134)) |
						(1 << (HiveParser.KW_FORMATTED - 134)) |
						(1 << (HiveParser.KW_DEPENDENCY - 134)) |
						(1 << (HiveParser.KW_LOGICAL - 134)) |
						(1 << (HiveParser.KW_SERDE - 134)) |
						(1 << (HiveParser.KW_DEFERRED - 134)) |
						(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
						(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
						(1 << (HiveParser.KW_LIMIT - 134)) |
						(1 << (HiveParser.KW_OFFSET - 134)) |
						(1 << (HiveParser.KW_UNSET - 134)) |
						(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
						(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
						(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
						(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
						(1 << (HiveParser.KW_DEFINED - 134)))) !==
					0) ||
			(((_la - 167) & ~0x1f) == 0 &&
				((1 << (_la - 167)) &
					((1 << (HiveParser.KW_MAPJOIN - 167)) |
						(1 << (HiveParser.KW_STREAMTABLE - 167)) |
						(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
						(1 << (HiveParser.KW_UTC - 167)) |
						(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
						(1 << (HiveParser.KW_LONG - 167)) |
						(1 << (HiveParser.KW_PLUS - 167)) |
						(1 << (HiveParser.KW_VIEW - 167)) |
						(1 << (HiveParser.KW_VIEWS - 167)) |
						(1 << (HiveParser.KW_DATABASES - 167)) |
						(1 << (HiveParser.KW_MATERIALIZED - 167)) |
						(1 << (HiveParser.KW_SCHEMA - 167)) |
						(1 << (HiveParser.KW_SCHEMAS - 167)) |
						(1 << (HiveParser.KW_SSL - 167)) |
						(1 << (HiveParser.KW_UNDO - 167)) |
						(1 << (HiveParser.KW_LOCK - 167)) |
						(1 << (HiveParser.KW_LOCKS - 167)) |
						(1 << (HiveParser.KW_UNLOCK - 167)) |
						(1 << (HiveParser.KW_SHARED - 167)) |
						(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
						(1 << (HiveParser.KW_UNSIGNED - 167)) |
						(1 << (HiveParser.KW_WHILE - 167)) |
						(1 << (HiveParser.KW_READ - 167)))) !==
					0) ||
			(((_la - 200) & ~0x1f) == 0 &&
				((1 << (_la - 200)) &
					((1 << (HiveParser.KW_PURGE - 200)) |
						(1 << (HiveParser.KW_ANALYZE - 200)) |
						(1 << (HiveParser.KW_BEFORE - 200)) |
						(1 << (HiveParser.KW_CONTINUE - 200)) |
						(1 << (HiveParser.KW_RECORDREADER - 200)) |
						(1 << (HiveParser.KW_RECORDWRITER - 200)) |
						(1 << (HiveParser.KW_SEMI - 200)) |
						(1 << (HiveParser.KW_TOUCH - 200)) |
						(1 << (HiveParser.KW_ARCHIVE - 200)) |
						(1 << (HiveParser.KW_UNARCHIVE - 200)) |
						(1 << (HiveParser.KW_COMPUTE - 200)) |
						(1 << (HiveParser.KW_STATISTICS - 200)) |
						(1 << (HiveParser.KW_USE - 200)) |
						(1 << (HiveParser.KW_OPTION - 200)) |
						(1 << (HiveParser.KW_CONCATENATE - 200)) |
						(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
						(1 << (HiveParser.KW_RESTRICT - 200)) |
						(1 << (HiveParser.KW_CASCADE - 200)) |
						(1 << (HiveParser.KW_SKEWED - 200)) |
						(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
					0) ||
			(((_la - 244) & ~0x1f) == 0 &&
				((1 << (_la - 244)) &
					((1 << (HiveParser.KW_SETS - 244)) |
						(1 << (HiveParser.KW_NOSCAN - 244)) |
						(1 << (HiveParser.KW_ROLE - 244)) |
						(1 << (HiveParser.KW_ROLES - 244)) |
						(1 << (HiveParser.KW_URI - 244)) |
						(1 << (HiveParser.KW_SERVER - 244)) |
						(1 << (HiveParser.KW_ADMIN - 244)) |
						(1 << (HiveParser.KW_OWNER - 244)) |
						(1 << (HiveParser.KW_PRINCIPALS - 244)) |
						(1 << (HiveParser.KW_COMPACT - 244)) |
						(1 << (HiveParser.KW_COMPACTIONS - 244)) |
						(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
						(1 << (HiveParser.KW_REWRITE - 244)) |
						(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
						(1 << (HiveParser.KW_RELOAD - 244)) |
						(1 << (HiveParser.KW_YEAR - 244)) |
						(1 << (HiveParser.KW_QUERY - 244)) |
						(1 << (HiveParser.KW_QUARTER - 244)) |
						(1 << (HiveParser.KW_MONTH - 244)) |
						(1 << (HiveParser.KW_WEEK - 244)) |
						(1 << (HiveParser.KW_DAY - 244)) |
						(1 << (HiveParser.KW_DOW - 244)) |
						(1 << (HiveParser.KW_HOUR - 244)) |
						(1 << (HiveParser.KW_MINUTE - 244)) |
						(1 << (HiveParser.KW_SECOND - 244)))) !==
					0) ||
			(((_la - 277) & ~0x1f) == 0 &&
				((1 << (_la - 277)) &
					((1 << (HiveParser.KW_TRANSACTION - 277)) |
						(1 << (HiveParser.KW_WORK - 277)) |
						(1 << (HiveParser.KW_WRITE - 277)) |
						(1 << (HiveParser.KW_ISOLATION - 277)) |
						(1 << (HiveParser.KW_LEVEL - 277)) |
						(1 << (HiveParser.KW_SNAPSHOT - 277)) |
						(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
						(1 << (HiveParser.KW_CACHE - 277)) |
						(1 << (HiveParser.KW_ENFORCED - 277)) |
						(1 << (HiveParser.KW_VALIDATE - 277)) |
						(1 << (HiveParser.KW_NOVALIDATE - 277)) |
						(1 << (HiveParser.KW_RELY - 277)) |
						(1 << (HiveParser.KW_NORELY - 277)) |
						(1 << (HiveParser.KW_KEY - 277)) |
						(1 << (HiveParser.KW_ABORT - 277)) |
						(1 << (HiveParser.KW_MATCHED - 277)) |
						(1 << (HiveParser.KW_REPL - 277)) |
						(1 << (HiveParser.KW_DUMP - 277)) |
						(1 << (HiveParser.KW_STATUS - 277)) |
						(1 << (HiveParser.KW_VECTORIZATION - 277)) |
						(1 << (HiveParser.KW_SUMMARY - 277)))) !==
					0) ||
			(((_la - 309) & ~0x1f) == 0 &&
				((1 << (_la - 309)) &
					((1 << (HiveParser.KW_OPERATOR - 309)) |
						(1 << (HiveParser.KW_EXPRESSION - 309)) |
						(1 << (HiveParser.KW_DETAIL - 309)) |
						(1 << (HiveParser.KW_WAIT - 309)) |
						(1 << (HiveParser.KW_RESOURCE - 309)) |
						(1 << (HiveParser.KW_PLAN - 309)) |
						(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
						(1 << (HiveParser.KW_PLANS - 309)) |
						(1 << (HiveParser.KW_ACTIVATE - 309)) |
						(1 << (HiveParser.KW_DEFAULT - 309)) |
						(1 << (HiveParser.KW_CHECK - 309)) |
						(1 << (HiveParser.KW_POOL - 309)) |
						(1 << (HiveParser.KW_MOVE - 309)) |
						(1 << (HiveParser.KW_DO - 309)) |
						(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
						(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
						(1 << (HiveParser.KW_PATH - 309)) |
						(1 << (HiveParser.KW_MAPPING - 309)) |
						(1 << (HiveParser.KW_WORKLOAD - 309)) |
						(1 << (HiveParser.KW_MANAGEMENT - 309)) |
						(1 << (HiveParser.KW_ACTIVE - 309)) |
						(1 << (HiveParser.KW_UNMANAGED - 309)) |
						(1 << (HiveParser.KW_DELTA - 309)) |
						(1 << (HiveParser.KW_CSV - 309)))) !==
					0) ||
			_la === HiveParser.KW_JSON ||
			_la === HiveParser.KW_BLOOMFILTER ||
			_la === HiveParser.Identifier
		) {
			this.state = 3204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AS) {
				this.state = 3203;
				this.match(HiveParser.KW_AS);
			}

			this.state = 3206;
			this.identifier();
		}

		this.state = 3209;
		this.match(HiveParser.KW_USING);
		this.state = 3210;
		this.joinSourcePart();
		this.state = 3211;
		this.match(HiveParser.KW_ON);
		this.state = 3212;
		this.expression(0);
		this.state = 3213;
		this.whenClauses();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WhenClausesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_whenClauses;
	return this;
}

WhenClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClausesContext.prototype.constructor = WhenClausesContext;

WhenClausesContext.prototype.whenMatchedAndClause = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(WhenMatchedAndClauseContext);
	} else {
		return this.getTypedRuleContext(WhenMatchedAndClauseContext, i);
	}
};

WhenClausesContext.prototype.whenMatchedThenClause = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(WhenMatchedThenClauseContext);
	} else {
		return this.getTypedRuleContext(WhenMatchedThenClauseContext, i);
	}
};

WhenClausesContext.prototype.whenNotMatchedClause = function () {
	return this.getTypedRuleContext(WhenNotMatchedClauseContext, 0);
};

WhenClausesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWhenClauses(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WhenClausesContext = WhenClausesContext;

HiveParser.prototype.whenClauses = function () {
	var localctx = new WhenClausesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 540, HiveParser.RULE_whenClauses);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3219;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 354, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				this.state = 3217;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 353, this._ctx);
				switch (la_) {
					case 1:
						this.state = 3215;
						this.whenMatchedAndClause();
						break;

					case 2:
						this.state = 3216;
						this.whenMatchedThenClause();
						break;
				}
			}
			this.state = 3221;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 354, this._ctx);
		}

		this.state = 3223;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WHEN) {
			this.state = 3222;
			this.whenNotMatchedClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WhenNotMatchedClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_whenNotMatchedClause;
	return this;
}

WhenNotMatchedClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenNotMatchedClauseContext.prototype.constructor = WhenNotMatchedClauseContext;

WhenNotMatchedClauseContext.prototype.KW_WHEN = function () {
	return this.getToken(HiveParser.KW_WHEN, 0);
};

WhenNotMatchedClauseContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

WhenNotMatchedClauseContext.prototype.KW_MATCHED = function () {
	return this.getToken(HiveParser.KW_MATCHED, 0);
};

WhenNotMatchedClauseContext.prototype.KW_THEN = function () {
	return this.getToken(HiveParser.KW_THEN, 0);
};

WhenNotMatchedClauseContext.prototype.KW_INSERT = function () {
	return this.getToken(HiveParser.KW_INSERT, 0);
};

WhenNotMatchedClauseContext.prototype.KW_VALUES = function () {
	return this.getToken(HiveParser.KW_VALUES, 0);
};

WhenNotMatchedClauseContext.prototype.valueRowConstructor = function () {
	return this.getTypedRuleContext(ValueRowConstructorContext, 0);
};

WhenNotMatchedClauseContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

WhenNotMatchedClauseContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

WhenNotMatchedClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWhenNotMatchedClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WhenNotMatchedClauseContext = WhenNotMatchedClauseContext;

HiveParser.prototype.whenNotMatchedClause = function () {
	var localctx = new WhenNotMatchedClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 542, HiveParser.RULE_whenNotMatchedClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3225;
		this.match(HiveParser.KW_WHEN);
		this.state = 3226;
		this.match(HiveParser.KW_NOT);
		this.state = 3227;
		this.match(HiveParser.KW_MATCHED);
		this.state = 3230;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_AND) {
			this.state = 3228;
			this.match(HiveParser.KW_AND);
			this.state = 3229;
			this.expression(0);
		}

		this.state = 3232;
		this.match(HiveParser.KW_THEN);
		this.state = 3233;
		this.match(HiveParser.KW_INSERT);
		this.state = 3234;
		this.match(HiveParser.KW_VALUES);
		this.state = 3235;
		this.valueRowConstructor();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WhenMatchedAndClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_whenMatchedAndClause;
	return this;
}

WhenMatchedAndClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenMatchedAndClauseContext.prototype.constructor = WhenMatchedAndClauseContext;

WhenMatchedAndClauseContext.prototype.KW_WHEN = function () {
	return this.getToken(HiveParser.KW_WHEN, 0);
};

WhenMatchedAndClauseContext.prototype.KW_MATCHED = function () {
	return this.getToken(HiveParser.KW_MATCHED, 0);
};

WhenMatchedAndClauseContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

WhenMatchedAndClauseContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

WhenMatchedAndClauseContext.prototype.KW_THEN = function () {
	return this.getToken(HiveParser.KW_THEN, 0);
};

WhenMatchedAndClauseContext.prototype.updateOrDelete = function () {
	return this.getTypedRuleContext(UpdateOrDeleteContext, 0);
};

WhenMatchedAndClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWhenMatchedAndClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WhenMatchedAndClauseContext = WhenMatchedAndClauseContext;

HiveParser.prototype.whenMatchedAndClause = function () {
	var localctx = new WhenMatchedAndClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 544, HiveParser.RULE_whenMatchedAndClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3237;
		this.match(HiveParser.KW_WHEN);
		this.state = 3238;
		this.match(HiveParser.KW_MATCHED);
		this.state = 3239;
		this.match(HiveParser.KW_AND);
		this.state = 3240;
		this.expression(0);
		this.state = 3241;
		this.match(HiveParser.KW_THEN);
		this.state = 3242;
		this.updateOrDelete();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WhenMatchedThenClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_whenMatchedThenClause;
	return this;
}

WhenMatchedThenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenMatchedThenClauseContext.prototype.constructor = WhenMatchedThenClauseContext;

WhenMatchedThenClauseContext.prototype.KW_WHEN = function () {
	return this.getToken(HiveParser.KW_WHEN, 0);
};

WhenMatchedThenClauseContext.prototype.KW_MATCHED = function () {
	return this.getToken(HiveParser.KW_MATCHED, 0);
};

WhenMatchedThenClauseContext.prototype.KW_THEN = function () {
	return this.getToken(HiveParser.KW_THEN, 0);
};

WhenMatchedThenClauseContext.prototype.updateOrDelete = function () {
	return this.getTypedRuleContext(UpdateOrDeleteContext, 0);
};

WhenMatchedThenClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWhenMatchedThenClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WhenMatchedThenClauseContext = WhenMatchedThenClauseContext;

HiveParser.prototype.whenMatchedThenClause = function () {
	var localctx = new WhenMatchedThenClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 546, HiveParser.RULE_whenMatchedThenClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3244;
		this.match(HiveParser.KW_WHEN);
		this.state = 3245;
		this.match(HiveParser.KW_MATCHED);
		this.state = 3246;
		this.match(HiveParser.KW_THEN);
		this.state = 3247;
		this.updateOrDelete();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UpdateOrDeleteContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_updateOrDelete;
	return this;
}

UpdateOrDeleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateOrDeleteContext.prototype.constructor = UpdateOrDeleteContext;

UpdateOrDeleteContext.prototype.KW_UPDATE = function () {
	return this.getToken(HiveParser.KW_UPDATE, 0);
};

UpdateOrDeleteContext.prototype.setColumnsClause = function () {
	return this.getTypedRuleContext(SetColumnsClauseContext, 0);
};

UpdateOrDeleteContext.prototype.KW_DELETE = function () {
	return this.getToken(HiveParser.KW_DELETE, 0);
};

UpdateOrDeleteContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUpdateOrDelete(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UpdateOrDeleteContext = UpdateOrDeleteContext;

HiveParser.prototype.updateOrDelete = function () {
	var localctx = new UpdateOrDeleteContext(this, this._ctx, this.state);
	this.enterRule(localctx, 548, HiveParser.RULE_updateOrDelete);
	try {
		this.state = 3252;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_UPDATE:
				this.enterOuterAlt(localctx, 1);
				this.state = 3249;
				this.match(HiveParser.KW_UPDATE);
				this.state = 3250;
				this.setColumnsClause();
				break;
			case HiveParser.KW_DELETE:
				this.enterOuterAlt(localctx, 2);
				this.state = 3251;
				this.match(HiveParser.KW_DELETE);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function KillQueryStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_killQueryStatement;
	return this;
}

KillQueryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KillQueryStatementContext.prototype.constructor = KillQueryStatementContext;

KillQueryStatementContext.prototype.KW_KILL = function () {
	return this.getToken(HiveParser.KW_KILL, 0);
};

KillQueryStatementContext.prototype.KW_QUERY = function () {
	return this.getToken(HiveParser.KW_QUERY, 0);
};

KillQueryStatementContext.prototype.StringLiteral = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.StringLiteral);
	} else {
		return this.getToken(HiveParser.StringLiteral, i);
	}
};

KillQueryStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitKillQueryStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.KillQueryStatementContext = KillQueryStatementContext;

HiveParser.prototype.killQueryStatement = function () {
	var localctx = new KillQueryStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 550, HiveParser.RULE_killQueryStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3254;
		this.match(HiveParser.KW_KILL);
		this.state = 3255;
		this.match(HiveParser.KW_QUERY);
		this.state = 3257;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 3256;
			this.match(HiveParser.StringLiteral);
			this.state = 3259;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectClause;
	return this;
}

SelectClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectClauseContext.prototype.constructor = SelectClauseContext;

SelectClauseContext.prototype.KW_SELECT = function () {
	return this.getToken(HiveParser.KW_SELECT, 0);
};

SelectClauseContext.prototype.QUERY_HINT = function () {
	return this.getToken(HiveParser.QUERY_HINT, 0);
};

SelectClauseContext.prototype.selectList = function () {
	return this.getTypedRuleContext(SelectListContext, 0);
};

SelectClauseContext.prototype.KW_TRANSFORM = function () {
	return this.getToken(HiveParser.KW_TRANSFORM, 0);
};

SelectClauseContext.prototype.selectTrfmClause = function () {
	return this.getTypedRuleContext(SelectTrfmClauseContext, 0);
};

SelectClauseContext.prototype.KW_ALL = function () {
	return this.getToken(HiveParser.KW_ALL, 0);
};

SelectClauseContext.prototype.KW_DISTINCT = function () {
	return this.getToken(HiveParser.KW_DISTINCT, 0);
};

SelectClauseContext.prototype.trfmClause = function () {
	return this.getTypedRuleContext(TrfmClauseContext, 0);
};

SelectClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectClauseContext = SelectClauseContext;

HiveParser.prototype.selectClause = function () {
	var localctx = new SelectClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 552, HiveParser.RULE_selectClause);
	var _la = 0; // Token type
	try {
		this.state = 3274;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_SELECT:
				this.enterOuterAlt(localctx, 1);
				this.state = 3261;
				this.match(HiveParser.KW_SELECT);
				this.state = 3263;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.QUERY_HINT) {
					this.state = 3262;
					this.match(HiveParser.QUERY_HINT);
				}

				this.state = 3271;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_TRUE:
					case HiveParser.KW_FALSE:
					case HiveParser.KW_ALL:
					case HiveParser.KW_NOT:
					case HiveParser.KW_IF:
					case HiveParser.KW_EXISTS:
					case HiveParser.KW_ASC:
					case HiveParser.KW_DESC:
					case HiveParser.KW_NULLS:
					case HiveParser.KW_LAST:
					case HiveParser.KW_DISTINCT:
					case HiveParser.KW_OVERWRITE:
					case HiveParser.KW_PARTITIONS:
					case HiveParser.KW_TABLES:
					case HiveParser.KW_COLUMNS:
					case HiveParser.KW_INDEX:
					case HiveParser.KW_INDEXES:
					case HiveParser.KW_REBUILD:
					case HiveParser.KW_FUNCTIONS:
					case HiveParser.KW_SHOW:
					case HiveParser.KW_MSCK:
					case HiveParser.KW_REPAIR:
					case HiveParser.KW_DIRECTORY:
					case HiveParser.KW_CLUSTER:
					case HiveParser.KW_DISTRIBUTE:
					case HiveParser.KW_SORT:
					case HiveParser.KW_LOAD:
					case HiveParser.KW_EXPORT:
					case HiveParser.KW_REPLICATION:
					case HiveParser.KW_METADATA:
					case HiveParser.KW_DATA:
					case HiveParser.KW_INPATH:
					case HiveParser.KW_NULL:
					case HiveParser.KW_CHANGE:
					case HiveParser.KW_FIRST:
					case HiveParser.KW_AFTER:
					case HiveParser.KW_RENAME:
					case HiveParser.KW_COMMENT:
					case HiveParser.KW_BOOLEAN:
					case HiveParser.KW_TINYINT:
					case HiveParser.KW_SMALLINT:
					case HiveParser.KW_INT:
					case HiveParser.KW_BIGINT:
					case HiveParser.KW_FLOAT:
					case HiveParser.KW_DOUBLE:
					case HiveParser.KW_DATE:
					case HiveParser.KW_DATETIME:
					case HiveParser.KW_TIMESTAMP:
					case HiveParser.KW_TIMESTAMPLOCALTZ:
					case HiveParser.KW_ZONE:
					case HiveParser.KW_INTERVAL:
					case HiveParser.KW_STRING:
					case HiveParser.KW_ARRAY:
					case HiveParser.KW_STRUCT:
					case HiveParser.KW_MAP:
					case HiveParser.KW_UNIONTYPE:
					case HiveParser.KW_PARTITIONED:
					case HiveParser.KW_CLUSTERED:
					case HiveParser.KW_SORTED:
					case HiveParser.KW_BUCKETS:
					case HiveParser.KW_FORMAT:
					case HiveParser.KW_DELIMITED:
					case HiveParser.KW_FIELDS:
					case HiveParser.KW_TERMINATED:
					case HiveParser.KW_ESCAPED:
					case HiveParser.KW_COLLECTION:
					case HiveParser.KW_ITEMS:
					case HiveParser.KW_KEYS:
					case HiveParser.KW_KEY_TYPE:
					case HiveParser.KW_KILL:
					case HiveParser.KW_LINES:
					case HiveParser.KW_STORED:
					case HiveParser.KW_FILEFORMAT:
					case HiveParser.KW_INPUTFORMAT:
					case HiveParser.KW_OUTPUTFORMAT:
					case HiveParser.KW_INPUTDRIVER:
					case HiveParser.KW_OUTPUTDRIVER:
					case HiveParser.KW_ENABLE:
					case HiveParser.KW_DISABLE:
					case HiveParser.KW_LOCATION:
					case HiveParser.KW_BUCKET:
					case HiveParser.KW_CAST:
					case HiveParser.KW_ADD:
					case HiveParser.KW_REPLACE:
					case HiveParser.KW_TEMPORARY:
					case HiveParser.KW_FILE:
					case HiveParser.KW_JAR:
					case HiveParser.KW_EXPLAIN:
					case HiveParser.KW_FORMATTED:
					case HiveParser.KW_DEPENDENCY:
					case HiveParser.KW_LOGICAL:
					case HiveParser.KW_SERDE:
					case HiveParser.KW_DEFERRED:
					case HiveParser.KW_SERDEPROPERTIES:
					case HiveParser.KW_DBPROPERTIES:
					case HiveParser.KW_LIMIT:
					case HiveParser.KW_OFFSET:
					case HiveParser.KW_UNSET:
					case HiveParser.KW_TBLPROPERTIES:
					case HiveParser.KW_IDXPROPERTIES:
					case HiveParser.KW_VALUE_TYPE:
					case HiveParser.KW_ELEM_TYPE:
					case HiveParser.KW_DEFINED:
					case HiveParser.KW_CASE:
					case HiveParser.KW_MAPJOIN:
					case HiveParser.KW_STREAMTABLE:
					case HiveParser.KW_CLUSTERSTATUS:
					case HiveParser.KW_UTC:
					case HiveParser.KW_UTCTIMESTAMP:
					case HiveParser.KW_LONG:
					case HiveParser.KW_PLUS:
					case HiveParser.KW_VIEW:
					case HiveParser.KW_VIEWS:
					case HiveParser.KW_DATABASES:
					case HiveParser.KW_MATERIALIZED:
					case HiveParser.KW_SCHEMA:
					case HiveParser.KW_SCHEMAS:
					case HiveParser.KW_SSL:
					case HiveParser.KW_UNDO:
					case HiveParser.KW_LOCK:
					case HiveParser.KW_LOCKS:
					case HiveParser.KW_UNLOCK:
					case HiveParser.KW_SHARED:
					case HiveParser.KW_EXCLUSIVE:
					case HiveParser.KW_UNSIGNED:
					case HiveParser.KW_WHILE:
					case HiveParser.KW_READ:
					case HiveParser.KW_PURGE:
					case HiveParser.KW_ANALYZE:
					case HiveParser.KW_BEFORE:
					case HiveParser.KW_BINARY:
					case HiveParser.KW_CONTINUE:
					case HiveParser.KW_RECORDREADER:
					case HiveParser.KW_RECORDWRITER:
					case HiveParser.KW_SEMI:
					case HiveParser.KW_TOUCH:
					case HiveParser.KW_ARCHIVE:
					case HiveParser.KW_UNARCHIVE:
					case HiveParser.KW_COMPUTE:
					case HiveParser.KW_STATISTICS:
					case HiveParser.KW_USE:
					case HiveParser.KW_OPTION:
					case HiveParser.KW_CONCATENATE:
					case HiveParser.KW_SHOW_DATABASE:
					case HiveParser.KW_RESTRICT:
					case HiveParser.KW_CASCADE:
					case HiveParser.KW_SKEWED:
					case HiveParser.KW_DIRECTORIES:
					case HiveParser.KW_CURRENT_DATE:
					case HiveParser.KW_CURRENT_TIMESTAMP:
					case HiveParser.KW_GROUPING:
					case HiveParser.KW_SETS:
					case HiveParser.KW_NOSCAN:
					case HiveParser.KW_ROLE:
					case HiveParser.KW_ROLES:
					case HiveParser.KW_URI:
					case HiveParser.KW_SERVER:
					case HiveParser.KW_ADMIN:
					case HiveParser.KW_OWNER:
					case HiveParser.KW_PRINCIPALS:
					case HiveParser.KW_COMPACT:
					case HiveParser.KW_COMPACTIONS:
					case HiveParser.KW_TRANSACTIONS:
					case HiveParser.KW_REWRITE:
					case HiveParser.KW_REOPTIMIZATION:
					case HiveParser.KW_RELOAD:
					case HiveParser.KW_YEAR:
					case HiveParser.KW_QUERY:
					case HiveParser.KW_QUARTER:
					case HiveParser.KW_MONTH:
					case HiveParser.KW_WEEK:
					case HiveParser.KW_DAY:
					case HiveParser.KW_DOW:
					case HiveParser.KW_HOUR:
					case HiveParser.KW_MINUTE:
					case HiveParser.KW_SECOND:
					case HiveParser.KW_TRANSACTION:
					case HiveParser.KW_WORK:
					case HiveParser.KW_WRITE:
					case HiveParser.KW_ISOLATION:
					case HiveParser.KW_LEVEL:
					case HiveParser.KW_SNAPSHOT:
					case HiveParser.KW_AUTOCOMMIT:
					case HiveParser.KW_CACHE:
					case HiveParser.KW_ENFORCED:
					case HiveParser.KW_VALIDATE:
					case HiveParser.KW_NOVALIDATE:
					case HiveParser.KW_RELY:
					case HiveParser.KW_NORELY:
					case HiveParser.KW_KEY:
					case HiveParser.KW_ABORT:
					case HiveParser.KW_EXTRACT:
					case HiveParser.KW_FLOOR:
					case HiveParser.KW_MATCHED:
					case HiveParser.KW_REPL:
					case HiveParser.KW_DUMP:
					case HiveParser.KW_STATUS:
					case HiveParser.KW_VECTORIZATION:
					case HiveParser.KW_SUMMARY:
					case HiveParser.KW_OPERATOR:
					case HiveParser.KW_EXPRESSION:
					case HiveParser.KW_DETAIL:
					case HiveParser.KW_WAIT:
					case HiveParser.KW_RESOURCE:
					case HiveParser.KW_PLAN:
					case HiveParser.KW_QUERY_PARALLELISM:
					case HiveParser.KW_PLANS:
					case HiveParser.KW_ACTIVATE:
					case HiveParser.KW_DEFAULT:
					case HiveParser.KW_CHECK:
					case HiveParser.KW_POOL:
					case HiveParser.KW_MOVE:
					case HiveParser.KW_DO:
					case HiveParser.KW_ALLOC_FRACTION:
					case HiveParser.KW_SCHEDULING_POLICY:
					case HiveParser.KW_PATH:
					case HiveParser.KW_MAPPING:
					case HiveParser.KW_WORKLOAD:
					case HiveParser.KW_MANAGEMENT:
					case HiveParser.KW_ACTIVE:
					case HiveParser.KW_UNMANAGED:
					case HiveParser.KW_DELTA:
					case HiveParser.KW_CSV:
					case HiveParser.KW_JSON:
					case HiveParser.KW_BLOOMFILTER:
					case HiveParser.LPAREN:
					case HiveParser.PLUS:
					case HiveParser.MINUS:
					case HiveParser.STAR:
					case HiveParser.TILDE:
					case HiveParser.StringLiteral:
					case HiveParser.IntegralLiteral:
					case HiveParser.NumberLiteral:
					case HiveParser.Number:
					case HiveParser.Identifier:
					case HiveParser.CharSetName:
						this.state = 3266;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT) {
							this.state = 3265;
							_la = this._input.LA(1);
							if (!(_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
						}

						this.state = 3268;
						this.selectList();
						break;
					case HiveParser.KW_TRANSFORM:
						this.state = 3269;
						this.match(HiveParser.KW_TRANSFORM);
						this.state = 3270;
						this.selectTrfmClause();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				break;
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
				this.enterOuterAlt(localctx, 2);
				this.state = 3273;
				this.trfmClause();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectList;
	return this;
}

SelectListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectListContext.prototype.constructor = SelectListContext;

SelectListContext.prototype.selectItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SelectItemContext);
	} else {
		return this.getTypedRuleContext(SelectItemContext, i);
	}
};

SelectListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

SelectListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectListContext = SelectListContext;

HiveParser.prototype.selectList = function () {
	var localctx = new SelectListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 554, HiveParser.RULE_selectList);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3276;
		this.selectItem();
		this.state = 3281;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 363, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				this.state = 3277;
				this.match(HiveParser.COMMA);
				this.state = 3278;
				this.selectItem();
			}
			this.state = 3283;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 363, this._ctx);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectTrfmClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectTrfmClause;
	return this;
}

SelectTrfmClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectTrfmClauseContext.prototype.constructor = SelectTrfmClauseContext;

SelectTrfmClauseContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.LPAREN);
	} else {
		return this.getToken(HiveParser.LPAREN, i);
	}
};

SelectTrfmClauseContext.prototype.selectExpressionList = function () {
	return this.getTypedRuleContext(SelectExpressionListContext, 0);
};

SelectTrfmClauseContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.RPAREN);
	} else {
		return this.getToken(HiveParser.RPAREN, i);
	}
};

SelectTrfmClauseContext.prototype.KW_USING = function () {
	return this.getToken(HiveParser.KW_USING, 0);
};

SelectTrfmClauseContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

SelectTrfmClauseContext.prototype.rowFormat = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(RowFormatContext);
	} else {
		return this.getTypedRuleContext(RowFormatContext, i);
	}
};

SelectTrfmClauseContext.prototype.recordWriter = function () {
	return this.getTypedRuleContext(RecordWriterContext, 0);
};

SelectTrfmClauseContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

SelectTrfmClauseContext.prototype.recordReader = function () {
	return this.getTypedRuleContext(RecordReaderContext, 0);
};

SelectTrfmClauseContext.prototype.aliasList = function () {
	return this.getTypedRuleContext(AliasListContext, 0);
};

SelectTrfmClauseContext.prototype.columnNameTypeList = function () {
	return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
};

SelectTrfmClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectTrfmClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectTrfmClauseContext = SelectTrfmClauseContext;

HiveParser.prototype.selectTrfmClause = function () {
	var localctx = new SelectTrfmClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 556, HiveParser.RULE_selectTrfmClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3284;
		this.match(HiveParser.LPAREN);
		this.state = 3285;
		this.selectExpressionList();
		this.state = 3286;
		this.match(HiveParser.RPAREN);
		this.state = 3288;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ROW) {
			this.state = 3287;
			this.rowFormat();
		}

		this.state = 3291;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RECORDWRITER) {
			this.state = 3290;
			this.recordWriter();
		}

		this.state = 3293;
		this.match(HiveParser.KW_USING);
		this.state = 3294;
		this.match(HiveParser.StringLiteral);
		this.state = 3309;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_AS) {
			this.state = 3295;
			this.match(HiveParser.KW_AS);
			this.state = 3307;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case HiveParser.LPAREN:
					this.state = 3296;
					this.match(HiveParser.LPAREN);
					this.state = 3299;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 366, this._ctx);
					switch (la_) {
						case 1:
							this.state = 3297;
							this.aliasList();
							break;

						case 2:
							this.state = 3298;
							this.columnNameTypeList();
							break;
					}
					this.state = 3301;
					this.match(HiveParser.RPAREN);
					break;
				case HiveParser.KW_ASC:
				case HiveParser.KW_DESC:
				case HiveParser.KW_NULLS:
				case HiveParser.KW_LAST:
				case HiveParser.KW_OVERWRITE:
				case HiveParser.KW_PARTITIONS:
				case HiveParser.KW_TABLES:
				case HiveParser.KW_COLUMNS:
				case HiveParser.KW_INDEX:
				case HiveParser.KW_INDEXES:
				case HiveParser.KW_REBUILD:
				case HiveParser.KW_FUNCTIONS:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_REPAIR:
				case HiveParser.KW_DIRECTORY:
				case HiveParser.KW_CLUSTER:
				case HiveParser.KW_DISTRIBUTE:
				case HiveParser.KW_SORT:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_REPLICATION:
				case HiveParser.KW_METADATA:
				case HiveParser.KW_DATA:
				case HiveParser.KW_INPATH:
				case HiveParser.KW_CHANGE:
				case HiveParser.KW_FIRST:
				case HiveParser.KW_AFTER:
				case HiveParser.KW_RENAME:
				case HiveParser.KW_COMMENT:
				case HiveParser.KW_TINYINT:
				case HiveParser.KW_DATETIME:
				case HiveParser.KW_ZONE:
				case HiveParser.KW_STRING:
				case HiveParser.KW_STRUCT:
				case HiveParser.KW_UNIONTYPE:
				case HiveParser.KW_PARTITIONED:
				case HiveParser.KW_CLUSTERED:
				case HiveParser.KW_SORTED:
				case HiveParser.KW_BUCKETS:
				case HiveParser.KW_FORMAT:
				case HiveParser.KW_DELIMITED:
				case HiveParser.KW_FIELDS:
				case HiveParser.KW_TERMINATED:
				case HiveParser.KW_ESCAPED:
				case HiveParser.KW_COLLECTION:
				case HiveParser.KW_ITEMS:
				case HiveParser.KW_KEYS:
				case HiveParser.KW_KEY_TYPE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_LINES:
				case HiveParser.KW_STORED:
				case HiveParser.KW_FILEFORMAT:
				case HiveParser.KW_INPUTFORMAT:
				case HiveParser.KW_OUTPUTFORMAT:
				case HiveParser.KW_INPUTDRIVER:
				case HiveParser.KW_OUTPUTDRIVER:
				case HiveParser.KW_ENABLE:
				case HiveParser.KW_DISABLE:
				case HiveParser.KW_LOCATION:
				case HiveParser.KW_BUCKET:
				case HiveParser.KW_ADD:
				case HiveParser.KW_REPLACE:
				case HiveParser.KW_TEMPORARY:
				case HiveParser.KW_FILE:
				case HiveParser.KW_JAR:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_FORMATTED:
				case HiveParser.KW_DEPENDENCY:
				case HiveParser.KW_LOGICAL:
				case HiveParser.KW_SERDE:
				case HiveParser.KW_DEFERRED:
				case HiveParser.KW_SERDEPROPERTIES:
				case HiveParser.KW_DBPROPERTIES:
				case HiveParser.KW_LIMIT:
				case HiveParser.KW_OFFSET:
				case HiveParser.KW_UNSET:
				case HiveParser.KW_TBLPROPERTIES:
				case HiveParser.KW_IDXPROPERTIES:
				case HiveParser.KW_VALUE_TYPE:
				case HiveParser.KW_ELEM_TYPE:
				case HiveParser.KW_DEFINED:
				case HiveParser.KW_MAPJOIN:
				case HiveParser.KW_STREAMTABLE:
				case HiveParser.KW_CLUSTERSTATUS:
				case HiveParser.KW_UTC:
				case HiveParser.KW_UTCTIMESTAMP:
				case HiveParser.KW_LONG:
				case HiveParser.KW_PLUS:
				case HiveParser.KW_VIEW:
				case HiveParser.KW_VIEWS:
				case HiveParser.KW_DATABASES:
				case HiveParser.KW_MATERIALIZED:
				case HiveParser.KW_SCHEMA:
				case HiveParser.KW_SCHEMAS:
				case HiveParser.KW_SSL:
				case HiveParser.KW_UNDO:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_LOCKS:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_SHARED:
				case HiveParser.KW_EXCLUSIVE:
				case HiveParser.KW_UNSIGNED:
				case HiveParser.KW_WHILE:
				case HiveParser.KW_READ:
				case HiveParser.KW_PURGE:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_BEFORE:
				case HiveParser.KW_CONTINUE:
				case HiveParser.KW_RECORDREADER:
				case HiveParser.KW_RECORDWRITER:
				case HiveParser.KW_SEMI:
				case HiveParser.KW_TOUCH:
				case HiveParser.KW_ARCHIVE:
				case HiveParser.KW_UNARCHIVE:
				case HiveParser.KW_COMPUTE:
				case HiveParser.KW_STATISTICS:
				case HiveParser.KW_USE:
				case HiveParser.KW_OPTION:
				case HiveParser.KW_CONCATENATE:
				case HiveParser.KW_SHOW_DATABASE:
				case HiveParser.KW_RESTRICT:
				case HiveParser.KW_CASCADE:
				case HiveParser.KW_SKEWED:
				case HiveParser.KW_DIRECTORIES:
				case HiveParser.KW_SETS:
				case HiveParser.KW_NOSCAN:
				case HiveParser.KW_ROLE:
				case HiveParser.KW_ROLES:
				case HiveParser.KW_URI:
				case HiveParser.KW_SERVER:
				case HiveParser.KW_ADMIN:
				case HiveParser.KW_OWNER:
				case HiveParser.KW_PRINCIPALS:
				case HiveParser.KW_COMPACT:
				case HiveParser.KW_COMPACTIONS:
				case HiveParser.KW_TRANSACTIONS:
				case HiveParser.KW_REWRITE:
				case HiveParser.KW_REOPTIMIZATION:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_YEAR:
				case HiveParser.KW_QUERY:
				case HiveParser.KW_QUARTER:
				case HiveParser.KW_MONTH:
				case HiveParser.KW_WEEK:
				case HiveParser.KW_DAY:
				case HiveParser.KW_DOW:
				case HiveParser.KW_HOUR:
				case HiveParser.KW_MINUTE:
				case HiveParser.KW_SECOND:
				case HiveParser.KW_TRANSACTION:
				case HiveParser.KW_WORK:
				case HiveParser.KW_WRITE:
				case HiveParser.KW_ISOLATION:
				case HiveParser.KW_LEVEL:
				case HiveParser.KW_SNAPSHOT:
				case HiveParser.KW_AUTOCOMMIT:
				case HiveParser.KW_CACHE:
				case HiveParser.KW_ENFORCED:
				case HiveParser.KW_VALIDATE:
				case HiveParser.KW_NOVALIDATE:
				case HiveParser.KW_RELY:
				case HiveParser.KW_NORELY:
				case HiveParser.KW_KEY:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_MATCHED:
				case HiveParser.KW_REPL:
				case HiveParser.KW_DUMP:
				case HiveParser.KW_STATUS:
				case HiveParser.KW_VECTORIZATION:
				case HiveParser.KW_SUMMARY:
				case HiveParser.KW_OPERATOR:
				case HiveParser.KW_EXPRESSION:
				case HiveParser.KW_DETAIL:
				case HiveParser.KW_WAIT:
				case HiveParser.KW_RESOURCE:
				case HiveParser.KW_PLAN:
				case HiveParser.KW_QUERY_PARALLELISM:
				case HiveParser.KW_PLANS:
				case HiveParser.KW_ACTIVATE:
				case HiveParser.KW_DEFAULT:
				case HiveParser.KW_CHECK:
				case HiveParser.KW_POOL:
				case HiveParser.KW_MOVE:
				case HiveParser.KW_DO:
				case HiveParser.KW_ALLOC_FRACTION:
				case HiveParser.KW_SCHEDULING_POLICY:
				case HiveParser.KW_PATH:
				case HiveParser.KW_MAPPING:
				case HiveParser.KW_WORKLOAD:
				case HiveParser.KW_MANAGEMENT:
				case HiveParser.KW_ACTIVE:
				case HiveParser.KW_UNMANAGED:
				case HiveParser.KW_DELTA:
				case HiveParser.KW_CSV:
				case HiveParser.KW_JSON:
				case HiveParser.KW_BLOOMFILTER:
				case HiveParser.Identifier:
					this.state = 3305;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 367, this._ctx);
					switch (la_) {
						case 1:
							this.state = 3303;
							this.aliasList();
							break;

						case 2:
							this.state = 3304;
							this.columnNameTypeList();
							break;
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		}

		this.state = 3312;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ROW) {
			this.state = 3311;
			this.rowFormat();
		}

		this.state = 3315;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RECORDREADER) {
			this.state = 3314;
			this.recordReader();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectItem;
	return this;
}

SelectItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemContext.prototype.constructor = SelectItemContext;

SelectItemContext.prototype.tableAllColumns = function () {
	return this.getTypedRuleContext(TableAllColumnsContext, 0);
};

SelectItemContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

SelectItemContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

SelectItemContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

SelectItemContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

SelectItemContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

SelectItemContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

SelectItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectItemContext = SelectItemContext;

HiveParser.prototype.selectItem = function () {
	var localctx = new SelectItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 558, HiveParser.RULE_selectItem);
	var _la = 0; // Token type
	try {
		this.state = 3337;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 375, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3317;
				this.tableAllColumns();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3318;
				this.expression(0);
				this.state = 3335;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 374, this._ctx);
				if (la_ === 1) {
					this.state = 3320;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveParser.KW_AS) {
						this.state = 3319;
						this.match(HiveParser.KW_AS);
					}

					this.state = 3322;
					this.identifier();
				} else if (la_ === 2) {
					this.state = 3323;
					this.match(HiveParser.KW_AS);
					this.state = 3324;
					this.match(HiveParser.LPAREN);
					this.state = 3325;
					this.identifier();
					this.state = 3330;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveParser.COMMA) {
						this.state = 3326;
						this.match(HiveParser.COMMA);
						this.state = 3327;
						this.identifier();
						this.state = 3332;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3333;
					this.match(HiveParser.RPAREN);
				}
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TrfmClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_trfmClause;
	return this;
}

TrfmClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrfmClauseContext.prototype.constructor = TrfmClauseContext;

TrfmClauseContext.prototype.KW_USING = function () {
	return this.getToken(HiveParser.KW_USING, 0);
};

TrfmClauseContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TrfmClauseContext.prototype.KW_MAP = function () {
	return this.getToken(HiveParser.KW_MAP, 0);
};

TrfmClauseContext.prototype.selectExpressionList = function () {
	return this.getTypedRuleContext(SelectExpressionListContext, 0);
};

TrfmClauseContext.prototype.KW_REDUCE = function () {
	return this.getToken(HiveParser.KW_REDUCE, 0);
};

TrfmClauseContext.prototype.rowFormat = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(RowFormatContext);
	} else {
		return this.getTypedRuleContext(RowFormatContext, i);
	}
};

TrfmClauseContext.prototype.recordWriter = function () {
	return this.getTypedRuleContext(RecordWriterContext, 0);
};

TrfmClauseContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

TrfmClauseContext.prototype.recordReader = function () {
	return this.getTypedRuleContext(RecordReaderContext, 0);
};

TrfmClauseContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

TrfmClauseContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

TrfmClauseContext.prototype.aliasList = function () {
	return this.getTypedRuleContext(AliasListContext, 0);
};

TrfmClauseContext.prototype.columnNameTypeList = function () {
	return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
};

TrfmClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTrfmClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TrfmClauseContext = TrfmClauseContext;

HiveParser.prototype.trfmClause = function () {
	var localctx = new TrfmClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 560, HiveParser.RULE_trfmClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3343;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_MAP:
				this.state = 3339;
				this.match(HiveParser.KW_MAP);
				this.state = 3340;
				this.selectExpressionList();
				break;
			case HiveParser.KW_REDUCE:
				this.state = 3341;
				this.match(HiveParser.KW_REDUCE);
				this.state = 3342;
				this.selectExpressionList();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
		this.state = 3346;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ROW) {
			this.state = 3345;
			this.rowFormat();
		}

		this.state = 3349;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RECORDWRITER) {
			this.state = 3348;
			this.recordWriter();
		}

		this.state = 3351;
		this.match(HiveParser.KW_USING);
		this.state = 3352;
		this.match(HiveParser.StringLiteral);
		this.state = 3367;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_AS) {
			this.state = 3353;
			this.match(HiveParser.KW_AS);
			this.state = 3365;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case HiveParser.LPAREN:
					this.state = 3354;
					this.match(HiveParser.LPAREN);
					this.state = 3357;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 379, this._ctx);
					switch (la_) {
						case 1:
							this.state = 3355;
							this.aliasList();
							break;

						case 2:
							this.state = 3356;
							this.columnNameTypeList();
							break;
					}
					this.state = 3359;
					this.match(HiveParser.RPAREN);
					break;
				case HiveParser.KW_ASC:
				case HiveParser.KW_DESC:
				case HiveParser.KW_NULLS:
				case HiveParser.KW_LAST:
				case HiveParser.KW_OVERWRITE:
				case HiveParser.KW_PARTITIONS:
				case HiveParser.KW_TABLES:
				case HiveParser.KW_COLUMNS:
				case HiveParser.KW_INDEX:
				case HiveParser.KW_INDEXES:
				case HiveParser.KW_REBUILD:
				case HiveParser.KW_FUNCTIONS:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_REPAIR:
				case HiveParser.KW_DIRECTORY:
				case HiveParser.KW_CLUSTER:
				case HiveParser.KW_DISTRIBUTE:
				case HiveParser.KW_SORT:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_REPLICATION:
				case HiveParser.KW_METADATA:
				case HiveParser.KW_DATA:
				case HiveParser.KW_INPATH:
				case HiveParser.KW_CHANGE:
				case HiveParser.KW_FIRST:
				case HiveParser.KW_AFTER:
				case HiveParser.KW_RENAME:
				case HiveParser.KW_COMMENT:
				case HiveParser.KW_TINYINT:
				case HiveParser.KW_DATETIME:
				case HiveParser.KW_ZONE:
				case HiveParser.KW_STRING:
				case HiveParser.KW_STRUCT:
				case HiveParser.KW_UNIONTYPE:
				case HiveParser.KW_PARTITIONED:
				case HiveParser.KW_CLUSTERED:
				case HiveParser.KW_SORTED:
				case HiveParser.KW_BUCKETS:
				case HiveParser.KW_FORMAT:
				case HiveParser.KW_DELIMITED:
				case HiveParser.KW_FIELDS:
				case HiveParser.KW_TERMINATED:
				case HiveParser.KW_ESCAPED:
				case HiveParser.KW_COLLECTION:
				case HiveParser.KW_ITEMS:
				case HiveParser.KW_KEYS:
				case HiveParser.KW_KEY_TYPE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_LINES:
				case HiveParser.KW_STORED:
				case HiveParser.KW_FILEFORMAT:
				case HiveParser.KW_INPUTFORMAT:
				case HiveParser.KW_OUTPUTFORMAT:
				case HiveParser.KW_INPUTDRIVER:
				case HiveParser.KW_OUTPUTDRIVER:
				case HiveParser.KW_ENABLE:
				case HiveParser.KW_DISABLE:
				case HiveParser.KW_LOCATION:
				case HiveParser.KW_BUCKET:
				case HiveParser.KW_ADD:
				case HiveParser.KW_REPLACE:
				case HiveParser.KW_TEMPORARY:
				case HiveParser.KW_FILE:
				case HiveParser.KW_JAR:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_FORMATTED:
				case HiveParser.KW_DEPENDENCY:
				case HiveParser.KW_LOGICAL:
				case HiveParser.KW_SERDE:
				case HiveParser.KW_DEFERRED:
				case HiveParser.KW_SERDEPROPERTIES:
				case HiveParser.KW_DBPROPERTIES:
				case HiveParser.KW_LIMIT:
				case HiveParser.KW_OFFSET:
				case HiveParser.KW_UNSET:
				case HiveParser.KW_TBLPROPERTIES:
				case HiveParser.KW_IDXPROPERTIES:
				case HiveParser.KW_VALUE_TYPE:
				case HiveParser.KW_ELEM_TYPE:
				case HiveParser.KW_DEFINED:
				case HiveParser.KW_MAPJOIN:
				case HiveParser.KW_STREAMTABLE:
				case HiveParser.KW_CLUSTERSTATUS:
				case HiveParser.KW_UTC:
				case HiveParser.KW_UTCTIMESTAMP:
				case HiveParser.KW_LONG:
				case HiveParser.KW_PLUS:
				case HiveParser.KW_VIEW:
				case HiveParser.KW_VIEWS:
				case HiveParser.KW_DATABASES:
				case HiveParser.KW_MATERIALIZED:
				case HiveParser.KW_SCHEMA:
				case HiveParser.KW_SCHEMAS:
				case HiveParser.KW_SSL:
				case HiveParser.KW_UNDO:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_LOCKS:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_SHARED:
				case HiveParser.KW_EXCLUSIVE:
				case HiveParser.KW_UNSIGNED:
				case HiveParser.KW_WHILE:
				case HiveParser.KW_READ:
				case HiveParser.KW_PURGE:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_BEFORE:
				case HiveParser.KW_CONTINUE:
				case HiveParser.KW_RECORDREADER:
				case HiveParser.KW_RECORDWRITER:
				case HiveParser.KW_SEMI:
				case HiveParser.KW_TOUCH:
				case HiveParser.KW_ARCHIVE:
				case HiveParser.KW_UNARCHIVE:
				case HiveParser.KW_COMPUTE:
				case HiveParser.KW_STATISTICS:
				case HiveParser.KW_USE:
				case HiveParser.KW_OPTION:
				case HiveParser.KW_CONCATENATE:
				case HiveParser.KW_SHOW_DATABASE:
				case HiveParser.KW_RESTRICT:
				case HiveParser.KW_CASCADE:
				case HiveParser.KW_SKEWED:
				case HiveParser.KW_DIRECTORIES:
				case HiveParser.KW_SETS:
				case HiveParser.KW_NOSCAN:
				case HiveParser.KW_ROLE:
				case HiveParser.KW_ROLES:
				case HiveParser.KW_URI:
				case HiveParser.KW_SERVER:
				case HiveParser.KW_ADMIN:
				case HiveParser.KW_OWNER:
				case HiveParser.KW_PRINCIPALS:
				case HiveParser.KW_COMPACT:
				case HiveParser.KW_COMPACTIONS:
				case HiveParser.KW_TRANSACTIONS:
				case HiveParser.KW_REWRITE:
				case HiveParser.KW_REOPTIMIZATION:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_YEAR:
				case HiveParser.KW_QUERY:
				case HiveParser.KW_QUARTER:
				case HiveParser.KW_MONTH:
				case HiveParser.KW_WEEK:
				case HiveParser.KW_DAY:
				case HiveParser.KW_DOW:
				case HiveParser.KW_HOUR:
				case HiveParser.KW_MINUTE:
				case HiveParser.KW_SECOND:
				case HiveParser.KW_TRANSACTION:
				case HiveParser.KW_WORK:
				case HiveParser.KW_WRITE:
				case HiveParser.KW_ISOLATION:
				case HiveParser.KW_LEVEL:
				case HiveParser.KW_SNAPSHOT:
				case HiveParser.KW_AUTOCOMMIT:
				case HiveParser.KW_CACHE:
				case HiveParser.KW_ENFORCED:
				case HiveParser.KW_VALIDATE:
				case HiveParser.KW_NOVALIDATE:
				case HiveParser.KW_RELY:
				case HiveParser.KW_NORELY:
				case HiveParser.KW_KEY:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_MATCHED:
				case HiveParser.KW_REPL:
				case HiveParser.KW_DUMP:
				case HiveParser.KW_STATUS:
				case HiveParser.KW_VECTORIZATION:
				case HiveParser.KW_SUMMARY:
				case HiveParser.KW_OPERATOR:
				case HiveParser.KW_EXPRESSION:
				case HiveParser.KW_DETAIL:
				case HiveParser.KW_WAIT:
				case HiveParser.KW_RESOURCE:
				case HiveParser.KW_PLAN:
				case HiveParser.KW_QUERY_PARALLELISM:
				case HiveParser.KW_PLANS:
				case HiveParser.KW_ACTIVATE:
				case HiveParser.KW_DEFAULT:
				case HiveParser.KW_CHECK:
				case HiveParser.KW_POOL:
				case HiveParser.KW_MOVE:
				case HiveParser.KW_DO:
				case HiveParser.KW_ALLOC_FRACTION:
				case HiveParser.KW_SCHEDULING_POLICY:
				case HiveParser.KW_PATH:
				case HiveParser.KW_MAPPING:
				case HiveParser.KW_WORKLOAD:
				case HiveParser.KW_MANAGEMENT:
				case HiveParser.KW_ACTIVE:
				case HiveParser.KW_UNMANAGED:
				case HiveParser.KW_DELTA:
				case HiveParser.KW_CSV:
				case HiveParser.KW_JSON:
				case HiveParser.KW_BLOOMFILTER:
				case HiveParser.Identifier:
					this.state = 3363;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 380, this._ctx);
					switch (la_) {
						case 1:
							this.state = 3361;
							this.aliasList();
							break;

						case 2:
							this.state = 3362;
							this.columnNameTypeList();
							break;
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		}

		this.state = 3370;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ROW) {
			this.state = 3369;
			this.rowFormat();
		}

		this.state = 3373;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_RECORDREADER) {
			this.state = 3372;
			this.recordReader();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectExpression;
	return this;
}

SelectExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectExpressionContext.prototype.constructor = SelectExpressionContext;

SelectExpressionContext.prototype.tableAllColumns = function () {
	return this.getTypedRuleContext(TableAllColumnsContext, 0);
};

SelectExpressionContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

SelectExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectExpressionContext = SelectExpressionContext;

HiveParser.prototype.selectExpression = function () {
	var localctx = new SelectExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 562, HiveParser.RULE_selectExpression);
	try {
		this.state = 3377;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 385, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3375;
				this.tableAllColumns();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3376;
				this.expression(0);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SelectExpressionListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_selectExpressionList;
	return this;
}

SelectExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectExpressionListContext.prototype.constructor = SelectExpressionListContext;

SelectExpressionListContext.prototype.selectExpression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SelectExpressionContext);
	} else {
		return this.getTypedRuleContext(SelectExpressionContext, i);
	}
};

SelectExpressionListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

SelectExpressionListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSelectExpressionList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SelectExpressionListContext = SelectExpressionListContext;

HiveParser.prototype.selectExpressionList = function () {
	var localctx = new SelectExpressionListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 564, HiveParser.RULE_selectExpressionList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3379;
		this.selectExpression();
		this.state = 3384;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3380;
			this.match(HiveParser.COMMA);
			this.state = 3381;
			this.selectExpression();
			this.state = 3386;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_clauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_clause;
	return this;
}

Window_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_clauseContext.prototype.constructor = Window_clauseContext;

Window_clauseContext.prototype.KW_WINDOW = function () {
	return this.getToken(HiveParser.KW_WINDOW, 0);
};

Window_clauseContext.prototype.window_defn = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(Window_defnContext);
	} else {
		return this.getTypedRuleContext(Window_defnContext, i);
	}
};

Window_clauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

Window_clauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_clause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_clauseContext = Window_clauseContext;

HiveParser.prototype.window_clause = function () {
	var localctx = new Window_clauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 566, HiveParser.RULE_window_clause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3387;
		this.match(HiveParser.KW_WINDOW);
		this.state = 3388;
		this.window_defn();
		this.state = 3393;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3389;
			this.match(HiveParser.COMMA);
			this.state = 3390;
			this.window_defn();
			this.state = 3395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_defnContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_defn;
	return this;
}

Window_defnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_defnContext.prototype.constructor = Window_defnContext;

Window_defnContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

Window_defnContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

Window_defnContext.prototype.window_specification = function () {
	return this.getTypedRuleContext(Window_specificationContext, 0);
};

Window_defnContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_defn(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_defnContext = Window_defnContext;

HiveParser.prototype.window_defn = function () {
	var localctx = new Window_defnContext(this, this._ctx, this.state);
	this.enterRule(localctx, 568, HiveParser.RULE_window_defn);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3396;
		this.identifier();
		this.state = 3397;
		this.match(HiveParser.KW_AS);
		this.state = 3398;
		this.window_specification();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_specificationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_specification;
	return this;
}

Window_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_specificationContext.prototype.constructor = Window_specificationContext;

Window_specificationContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

Window_specificationContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

Window_specificationContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

Window_specificationContext.prototype.partitioningSpec = function () {
	return this.getTypedRuleContext(PartitioningSpecContext, 0);
};

Window_specificationContext.prototype.window_frame = function () {
	return this.getTypedRuleContext(Window_frameContext, 0);
};

Window_specificationContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_specification(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_specificationContext = Window_specificationContext;

HiveParser.prototype.window_specification = function () {
	var localctx = new Window_specificationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 570, HiveParser.RULE_window_specification);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3412;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.state = 3400;
				this.identifier();
				break;
			case HiveParser.LPAREN:
				this.state = 3401;
				this.match(HiveParser.LPAREN);
				this.state = 3403;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 388, this._ctx);
				if (la_ === 1) {
					this.state = 3402;
					this.identifier();
				}
				this.state = 3406;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					_la === HiveParser.KW_ORDER ||
					(((_la - 35) & ~0x1f) == 0 &&
						((1 << (_la - 35)) &
							((1 << (HiveParser.KW_PARTITION - 35)) |
								(1 << (HiveParser.KW_CLUSTER - 35)) |
								(1 << (HiveParser.KW_DISTRIBUTE - 35)) |
								(1 << (HiveParser.KW_SORT - 35)))) !==
							0)
				) {
					this.state = 3405;
					this.partitioningSpec();
				}

				this.state = 3409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROWS || _la === HiveParser.KW_RANGE) {
					this.state = 3408;
					this.window_frame();
				}

				this.state = 3411;
				this.match(HiveParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_frameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_frame;
	return this;
}

Window_frameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frameContext.prototype.constructor = Window_frameContext;

Window_frameContext.prototype.window_range_expression = function () {
	return this.getTypedRuleContext(Window_range_expressionContext, 0);
};

Window_frameContext.prototype.window_value_expression = function () {
	return this.getTypedRuleContext(Window_value_expressionContext, 0);
};

Window_frameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_frame(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_frameContext = Window_frameContext;

HiveParser.prototype.window_frame = function () {
	var localctx = new Window_frameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 572, HiveParser.RULE_window_frame);
	try {
		this.state = 3416;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ROWS:
				this.enterOuterAlt(localctx, 1);
				this.state = 3414;
				this.window_range_expression();
				break;
			case HiveParser.KW_RANGE:
				this.enterOuterAlt(localctx, 2);
				this.state = 3415;
				this.window_value_expression();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_range_expressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_range_expression;
	return this;
}

Window_range_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_range_expressionContext.prototype.constructor = Window_range_expressionContext;

Window_range_expressionContext.prototype.KW_ROWS = function () {
	return this.getToken(HiveParser.KW_ROWS, 0);
};

Window_range_expressionContext.prototype.window_frame_start_boundary = function () {
	return this.getTypedRuleContext(Window_frame_start_boundaryContext, 0);
};

Window_range_expressionContext.prototype.KW_BETWEEN = function () {
	return this.getToken(HiveParser.KW_BETWEEN, 0);
};

Window_range_expressionContext.prototype.window_frame_boundary = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(Window_frame_boundaryContext);
	} else {
		return this.getTypedRuleContext(Window_frame_boundaryContext, i);
	}
};

Window_range_expressionContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

Window_range_expressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_range_expression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_range_expressionContext = Window_range_expressionContext;

HiveParser.prototype.window_range_expression = function () {
	var localctx = new Window_range_expressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 574, HiveParser.RULE_window_range_expression);
	try {
		this.state = 3426;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 393, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3418;
				this.match(HiveParser.KW_ROWS);
				this.state = 3419;
				this.window_frame_start_boundary();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3420;
				this.match(HiveParser.KW_ROWS);
				this.state = 3421;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 3422;
				this.window_frame_boundary();
				this.state = 3423;
				this.match(HiveParser.KW_AND);
				this.state = 3424;
				this.window_frame_boundary();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_value_expressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_value_expression;
	return this;
}

Window_value_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_value_expressionContext.prototype.constructor = Window_value_expressionContext;

Window_value_expressionContext.prototype.KW_RANGE = function () {
	return this.getToken(HiveParser.KW_RANGE, 0);
};

Window_value_expressionContext.prototype.window_frame_start_boundary = function () {
	return this.getTypedRuleContext(Window_frame_start_boundaryContext, 0);
};

Window_value_expressionContext.prototype.KW_BETWEEN = function () {
	return this.getToken(HiveParser.KW_BETWEEN, 0);
};

Window_value_expressionContext.prototype.window_frame_boundary = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(Window_frame_boundaryContext);
	} else {
		return this.getTypedRuleContext(Window_frame_boundaryContext, i);
	}
};

Window_value_expressionContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

Window_value_expressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_value_expression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_value_expressionContext = Window_value_expressionContext;

HiveParser.prototype.window_value_expression = function () {
	var localctx = new Window_value_expressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 576, HiveParser.RULE_window_value_expression);
	try {
		this.state = 3436;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 394, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3428;
				this.match(HiveParser.KW_RANGE);
				this.state = 3429;
				this.window_frame_start_boundary();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3430;
				this.match(HiveParser.KW_RANGE);
				this.state = 3431;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 3432;
				this.window_frame_boundary();
				this.state = 3433;
				this.match(HiveParser.KW_AND);
				this.state = 3434;
				this.window_frame_boundary();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_frame_start_boundaryContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_frame_start_boundary;
	return this;
}

Window_frame_start_boundaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_start_boundaryContext.prototype.constructor = Window_frame_start_boundaryContext;

Window_frame_start_boundaryContext.prototype.KW_UNBOUNDED = function () {
	return this.getToken(HiveParser.KW_UNBOUNDED, 0);
};

Window_frame_start_boundaryContext.prototype.KW_PRECEDING = function () {
	return this.getToken(HiveParser.KW_PRECEDING, 0);
};

Window_frame_start_boundaryContext.prototype.KW_CURRENT = function () {
	return this.getToken(HiveParser.KW_CURRENT, 0);
};

Window_frame_start_boundaryContext.prototype.KW_ROW = function () {
	return this.getToken(HiveParser.KW_ROW, 0);
};

Window_frame_start_boundaryContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

Window_frame_start_boundaryContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_frame_start_boundary(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_frame_start_boundaryContext = Window_frame_start_boundaryContext;

HiveParser.prototype.window_frame_start_boundary = function () {
	var localctx = new Window_frame_start_boundaryContext(this, this._ctx, this.state);
	this.enterRule(localctx, 578, HiveParser.RULE_window_frame_start_boundary);
	try {
		this.state = 3444;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_UNBOUNDED:
				this.enterOuterAlt(localctx, 1);
				this.state = 3438;
				this.match(HiveParser.KW_UNBOUNDED);
				this.state = 3439;
				this.match(HiveParser.KW_PRECEDING);
				break;
			case HiveParser.KW_CURRENT:
				this.enterOuterAlt(localctx, 2);
				this.state = 3440;
				this.match(HiveParser.KW_CURRENT);
				this.state = 3441;
				this.match(HiveParser.KW_ROW);
				break;
			case HiveParser.Number:
				this.enterOuterAlt(localctx, 3);
				this.state = 3442;
				this.match(HiveParser.Number);
				this.state = 3443;
				this.match(HiveParser.KW_PRECEDING);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Window_frame_boundaryContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_window_frame_boundary;
	return this;
}

Window_frame_boundaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_boundaryContext.prototype.constructor = Window_frame_boundaryContext;

Window_frame_boundaryContext.prototype.KW_UNBOUNDED = function () {
	return this.getToken(HiveParser.KW_UNBOUNDED, 0);
};

Window_frame_boundaryContext.prototype.KW_PRECEDING = function () {
	return this.getToken(HiveParser.KW_PRECEDING, 0);
};

Window_frame_boundaryContext.prototype.KW_FOLLOWING = function () {
	return this.getToken(HiveParser.KW_FOLLOWING, 0);
};

Window_frame_boundaryContext.prototype.KW_CURRENT = function () {
	return this.getToken(HiveParser.KW_CURRENT, 0);
};

Window_frame_boundaryContext.prototype.KW_ROW = function () {
	return this.getToken(HiveParser.KW_ROW, 0);
};

Window_frame_boundaryContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

Window_frame_boundaryContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWindow_frame_boundary(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Window_frame_boundaryContext = Window_frame_boundaryContext;

HiveParser.prototype.window_frame_boundary = function () {
	var localctx = new Window_frame_boundaryContext(this, this._ctx, this.state);
	this.enterRule(localctx, 580, HiveParser.RULE_window_frame_boundary);
	var _la = 0; // Token type
	try {
		this.state = 3452;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_UNBOUNDED:
				this.enterOuterAlt(localctx, 1);
				this.state = 3446;
				this.match(HiveParser.KW_UNBOUNDED);
				this.state = 3447;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_PRECEDING || _la === HiveParser.KW_FOLLOWING)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				break;
			case HiveParser.KW_CURRENT:
				this.enterOuterAlt(localctx, 2);
				this.state = 3448;
				this.match(HiveParser.KW_CURRENT);
				this.state = 3449;
				this.match(HiveParser.KW_ROW);
				break;
			case HiveParser.Number:
				this.enterOuterAlt(localctx, 3);
				this.state = 3450;
				this.match(HiveParser.Number);
				this.state = 3451;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_PRECEDING || _la === HiveParser.KW_FOLLOWING)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableAllColumnsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableAllColumns;
	return this;
}

TableAllColumnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAllColumnsContext.prototype.constructor = TableAllColumnsContext;

TableAllColumnsContext.prototype.STAR = function () {
	return this.getToken(HiveParser.STAR, 0);
};

TableAllColumnsContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

TableAllColumnsContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

TableAllColumnsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableAllColumns(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableAllColumnsContext = TableAllColumnsContext;

HiveParser.prototype.tableAllColumns = function () {
	var localctx = new TableAllColumnsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 582, HiveParser.RULE_tableAllColumns);
	try {
		this.state = 3459;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.STAR:
				this.enterOuterAlt(localctx, 1);
				this.state = 3454;
				this.match(HiveParser.STAR);
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 2);
				this.state = 3455;
				this.tableName();
				this.state = 3456;
				this.match(HiveParser.DOT);
				this.state = 3457;
				this.match(HiveParser.STAR);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableOrColumnContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableOrColumn;
	return this;
}

TableOrColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOrColumnContext.prototype.constructor = TableOrColumnContext;

TableOrColumnContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

TableOrColumnContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableOrColumn(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableOrColumnContext = TableOrColumnContext;

HiveParser.prototype.tableOrColumn = function () {
	var localctx = new TableOrColumnContext(this, this._ctx, this.state);
	this.enterRule(localctx, 584, HiveParser.RULE_tableOrColumn);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3461;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_expressionList;
	return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

ExpressionListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ExpressionListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExpressionList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExpressionListContext = ExpressionListContext;

HiveParser.prototype.expressionList = function () {
	var localctx = new ExpressionListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 586, HiveParser.RULE_expressionList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3463;
		this.expression(0);
		this.state = 3468;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3464;
			this.match(HiveParser.COMMA);
			this.state = 3465;
			this.expression(0);
			this.state = 3470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AliasListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_aliasList;
	return this;
}

AliasListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasListContext.prototype.constructor = AliasListContext;

AliasListContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

AliasListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

AliasListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAliasList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AliasListContext = AliasListContext;

HiveParser.prototype.aliasList = function () {
	var localctx = new AliasListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 588, HiveParser.RULE_aliasList);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3471;
		this.identifier();
		this.state = 3476;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 399, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				this.state = 3472;
				this.match(HiveParser.COMMA);
				this.state = 3473;
				this.identifier();
			}
			this.state = 3478;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 399, this._ctx);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FromClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_fromClause;
	return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

FromClauseContext.prototype.fromSource = function () {
	return this.getTypedRuleContext(FromSourceContext, 0);
};

FromClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFromClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FromClauseContext = FromClauseContext;

HiveParser.prototype.fromClause = function () {
	var localctx = new FromClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 590, HiveParser.RULE_fromClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3479;
		this.match(HiveParser.KW_FROM);
		this.state = 3480;
		this.fromSource();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FromSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_fromSource;
	return this;
}

FromSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromSourceContext.prototype.constructor = FromSourceContext;

FromSourceContext.prototype.uniqueJoinToken = function () {
	return this.getTypedRuleContext(UniqueJoinTokenContext, 0);
};

FromSourceContext.prototype.uniqueJoinSource = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(UniqueJoinSourceContext);
	} else {
		return this.getTypedRuleContext(UniqueJoinSourceContext, i);
	}
};

FromSourceContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

FromSourceContext.prototype.joinSource = function () {
	return this.getTypedRuleContext(JoinSourceContext, 0);
};

FromSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFromSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FromSourceContext = FromSourceContext;

HiveParser.prototype.fromSource = function () {
	var localctx = new FromSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 592, HiveParser.RULE_fromSource);
	var _la = 0; // Token type
	try {
		this.state = 3491;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_UNIQUEJOIN:
				this.enterOuterAlt(localctx, 1);
				this.state = 3482;
				this.uniqueJoinToken();
				this.state = 3483;
				this.uniqueJoinSource();
				this.state = 3486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					this.state = 3484;
					this.match(HiveParser.COMMA);
					this.state = 3485;
					this.uniqueJoinSource();
					this.state = 3488;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === HiveParser.COMMA);
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLE:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.LPAREN:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 2);
				this.state = 3490;
				this.joinSource();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AtomjoinSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_atomjoinSource;
	return this;
}

AtomjoinSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomjoinSourceContext.prototype.constructor = AtomjoinSourceContext;

AtomjoinSourceContext.prototype.tableSource = function () {
	return this.getTypedRuleContext(TableSourceContext, 0);
};

AtomjoinSourceContext.prototype.lateralView = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(LateralViewContext);
	} else {
		return this.getTypedRuleContext(LateralViewContext, i);
	}
};

AtomjoinSourceContext.prototype.virtualTableSource = function () {
	return this.getTypedRuleContext(VirtualTableSourceContext, 0);
};

AtomjoinSourceContext.prototype.subQuerySource = function () {
	return this.getTypedRuleContext(SubQuerySourceContext, 0);
};

AtomjoinSourceContext.prototype.partitionedTableFunction = function () {
	return this.getTypedRuleContext(PartitionedTableFunctionContext, 0);
};

AtomjoinSourceContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

AtomjoinSourceContext.prototype.joinSource = function () {
	return this.getTypedRuleContext(JoinSourceContext, 0);
};

AtomjoinSourceContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

AtomjoinSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAtomjoinSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AtomjoinSourceContext = AtomjoinSourceContext;

HiveParser.prototype.atomjoinSource = function () {
	var localctx = new AtomjoinSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 594, HiveParser.RULE_atomjoinSource);
	try {
		this.state = 3525;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 406, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3493;
				this.tableSource();
				this.state = 3497;
				this._errHandler.sync(this);
				var _alt = this._interp.adaptivePredict(this._input, 402, this._ctx);
				while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						this.state = 3494;
						this.lateralView();
					}
					this.state = 3499;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 402, this._ctx);
				}

				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3500;
				this.virtualTableSource();
				this.state = 3504;
				this._errHandler.sync(this);
				var _alt = this._interp.adaptivePredict(this._input, 403, this._ctx);
				while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						this.state = 3501;
						this.lateralView();
					}
					this.state = 3506;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 403, this._ctx);
				}

				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 3507;
				this.subQuerySource();
				this.state = 3511;
				this._errHandler.sync(this);
				var _alt = this._interp.adaptivePredict(this._input, 404, this._ctx);
				while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						this.state = 3508;
						this.lateralView();
					}
					this.state = 3513;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 404, this._ctx);
				}

				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 3514;
				this.partitionedTableFunction();
				this.state = 3518;
				this._errHandler.sync(this);
				var _alt = this._interp.adaptivePredict(this._input, 405, this._ctx);
				while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						this.state = 3515;
						this.lateralView();
					}
					this.state = 3520;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 405, this._ctx);
				}

				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 3521;
				this.match(HiveParser.LPAREN);
				this.state = 3522;
				this.joinSource();
				this.state = 3523;
				this.match(HiveParser.RPAREN);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_joinSource;
	return this;
}

JoinSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinSourceContext.prototype.constructor = JoinSourceContext;

JoinSourceContext.prototype.atomjoinSource = function () {
	return this.getTypedRuleContext(AtomjoinSourceContext, 0);
};

JoinSourceContext.prototype.joinToken = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(JoinTokenContext);
	} else {
		return this.getTypedRuleContext(JoinTokenContext, i);
	}
};

JoinSourceContext.prototype.joinSourcePart = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(JoinSourcePartContext);
	} else {
		return this.getTypedRuleContext(JoinSourcePartContext, i);
	}
};

JoinSourceContext.prototype.KW_ON = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_ON);
	} else {
		return this.getToken(HiveParser.KW_ON, i);
	}
};

JoinSourceContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

JoinSourceContext.prototype.KW_USING = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_USING);
	} else {
		return this.getToken(HiveParser.KW_USING, i);
	}
};

JoinSourceContext.prototype.columnParenthesesList = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnParenthesesListContext);
	} else {
		return this.getTypedRuleContext(ColumnParenthesesListContext, i);
	}
};

JoinSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitJoinSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.JoinSourceContext = JoinSourceContext;

HiveParser.prototype.joinSource = function () {
	var localctx = new JoinSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 596, HiveParser.RULE_joinSource);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3527;
		this.atomjoinSource();
		this.state = 3538;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (
			(((_la - 30) & ~0x1f) == 0 &&
				((1 << (_la - 30)) &
					((1 << (HiveParser.KW_JOIN - 30)) |
						(1 << (HiveParser.KW_LEFT - 30)) |
						(1 << (HiveParser.KW_RIGHT - 30)) |
						(1 << (HiveParser.KW_FULL - 30)))) !==
					0) ||
			_la === HiveParser.KW_CROSS ||
			_la === HiveParser.KW_INNER ||
			_la === HiveParser.COMMA
		) {
			this.state = 3528;
			this.joinToken();
			this.state = 3529;
			this.joinSourcePart();
			this.state = 3534;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case HiveParser.KW_ON:
					this.state = 3530;
					this.match(HiveParser.KW_ON);
					this.state = 3531;
					this.expression(0);
					break;
				case HiveParser.KW_USING:
					this.state = 3532;
					this.match(HiveParser.KW_USING);
					this.state = 3533;
					this.columnParenthesesList();
					break;
				case HiveParser.KW_ORDER:
				case HiveParser.KW_GROUP:
				case HiveParser.KW_HAVING:
				case HiveParser.KW_WHERE:
				case HiveParser.KW_SELECT:
				case HiveParser.KW_INSERT:
				case HiveParser.KW_JOIN:
				case HiveParser.KW_LEFT:
				case HiveParser.KW_RIGHT:
				case HiveParser.KW_FULL:
				case HiveParser.KW_CLUSTER:
				case HiveParser.KW_DISTRIBUTE:
				case HiveParser.KW_SORT:
				case HiveParser.KW_UNION:
				case HiveParser.KW_EXCEPT:
				case HiveParser.KW_MAP:
				case HiveParser.KW_REDUCE:
				case HiveParser.KW_LIMIT:
				case HiveParser.KW_MINUS:
				case HiveParser.KW_INTERSECT:
				case HiveParser.KW_CROSS:
				case HiveParser.KW_WINDOW:
				case HiveParser.KW_INNER:
				case HiveParser.COMMA:
				case HiveParser.SEMICOLON:
				case HiveParser.RPAREN:
					break;
				default:
					break;
			}
			this.state = 3540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinSourcePartContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_joinSourcePart;
	return this;
}

JoinSourcePartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinSourcePartContext.prototype.constructor = JoinSourcePartContext;

JoinSourcePartContext.prototype.tableSource = function () {
	return this.getTypedRuleContext(TableSourceContext, 0);
};

JoinSourcePartContext.prototype.virtualTableSource = function () {
	return this.getTypedRuleContext(VirtualTableSourceContext, 0);
};

JoinSourcePartContext.prototype.subQuerySource = function () {
	return this.getTypedRuleContext(SubQuerySourceContext, 0);
};

JoinSourcePartContext.prototype.partitionedTableFunction = function () {
	return this.getTypedRuleContext(PartitionedTableFunctionContext, 0);
};

JoinSourcePartContext.prototype.lateralView = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(LateralViewContext);
	} else {
		return this.getTypedRuleContext(LateralViewContext, i);
	}
};

JoinSourcePartContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitJoinSourcePart(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.JoinSourcePartContext = JoinSourcePartContext;

HiveParser.prototype.joinSourcePart = function () {
	var localctx = new JoinSourcePartContext(this, this._ctx, this.state);
	this.enterRule(localctx, 598, HiveParser.RULE_joinSourcePart);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3545;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 409, this._ctx);
		switch (la_) {
			case 1:
				this.state = 3541;
				this.tableSource();
				break;

			case 2:
				this.state = 3542;
				this.virtualTableSource();
				break;

			case 3:
				this.state = 3543;
				this.subQuerySource();
				break;

			case 4:
				this.state = 3544;
				this.partitionedTableFunction();
				break;
		}
		this.state = 3550;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 410, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				this.state = 3547;
				this.lateralView();
			}
			this.state = 3552;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 410, this._ctx);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UniqueJoinSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_uniqueJoinSource;
	return this;
}

UniqueJoinSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueJoinSourceContext.prototype.constructor = UniqueJoinSourceContext;

UniqueJoinSourceContext.prototype.uniqueJoinTableSource = function () {
	return this.getTypedRuleContext(UniqueJoinTableSourceContext, 0);
};

UniqueJoinSourceContext.prototype.uniqueJoinExpr = function () {
	return this.getTypedRuleContext(UniqueJoinExprContext, 0);
};

UniqueJoinSourceContext.prototype.KW_PRESERVE = function () {
	return this.getToken(HiveParser.KW_PRESERVE, 0);
};

UniqueJoinSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUniqueJoinSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UniqueJoinSourceContext = UniqueJoinSourceContext;

HiveParser.prototype.uniqueJoinSource = function () {
	var localctx = new UniqueJoinSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 600, HiveParser.RULE_uniqueJoinSource);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3554;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PRESERVE) {
			this.state = 3553;
			this.match(HiveParser.KW_PRESERVE);
		}

		this.state = 3556;
		this.uniqueJoinTableSource();
		this.state = 3557;
		this.uniqueJoinExpr();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UniqueJoinExprContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_uniqueJoinExpr;
	return this;
}

UniqueJoinExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueJoinExprContext.prototype.constructor = UniqueJoinExprContext;

UniqueJoinExprContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

UniqueJoinExprContext.prototype.expressionList = function () {
	return this.getTypedRuleContext(ExpressionListContext, 0);
};

UniqueJoinExprContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

UniqueJoinExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUniqueJoinExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UniqueJoinExprContext = UniqueJoinExprContext;

HiveParser.prototype.uniqueJoinExpr = function () {
	var localctx = new UniqueJoinExprContext(this, this._ctx, this.state);
	this.enterRule(localctx, 602, HiveParser.RULE_uniqueJoinExpr);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3559;
		this.match(HiveParser.LPAREN);
		this.state = 3560;
		this.expressionList();
		this.state = 3561;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UniqueJoinTokenContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_uniqueJoinToken;
	return this;
}

UniqueJoinTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueJoinTokenContext.prototype.constructor = UniqueJoinTokenContext;

UniqueJoinTokenContext.prototype.KW_UNIQUEJOIN = function () {
	return this.getToken(HiveParser.KW_UNIQUEJOIN, 0);
};

UniqueJoinTokenContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUniqueJoinToken(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UniqueJoinTokenContext = UniqueJoinTokenContext;

HiveParser.prototype.uniqueJoinToken = function () {
	var localctx = new UniqueJoinTokenContext(this, this._ctx, this.state);
	this.enterRule(localctx, 604, HiveParser.RULE_uniqueJoinToken);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3563;
		this.match(HiveParser.KW_UNIQUEJOIN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinTokenContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_joinToken;
	return this;
}

JoinTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTokenContext.prototype.constructor = JoinTokenContext;

JoinTokenContext.prototype.KW_JOIN = function () {
	return this.getToken(HiveParser.KW_JOIN, 0);
};

JoinTokenContext.prototype.KW_INNER = function () {
	return this.getToken(HiveParser.KW_INNER, 0);
};

JoinTokenContext.prototype.COMMA = function () {
	return this.getToken(HiveParser.COMMA, 0);
};

JoinTokenContext.prototype.KW_CROSS = function () {
	return this.getToken(HiveParser.KW_CROSS, 0);
};

JoinTokenContext.prototype.KW_LEFT = function () {
	return this.getToken(HiveParser.KW_LEFT, 0);
};

JoinTokenContext.prototype.KW_OUTER = function () {
	return this.getToken(HiveParser.KW_OUTER, 0);
};

JoinTokenContext.prototype.KW_RIGHT = function () {
	return this.getToken(HiveParser.KW_RIGHT, 0);
};

JoinTokenContext.prototype.KW_FULL = function () {
	return this.getToken(HiveParser.KW_FULL, 0);
};

JoinTokenContext.prototype.KW_SEMI = function () {
	return this.getToken(HiveParser.KW_SEMI, 0);
};

JoinTokenContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitJoinToken(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.JoinTokenContext = JoinTokenContext;

HiveParser.prototype.joinToken = function () {
	var localctx = new JoinTokenContext(this, this._ctx, this.state);
	this.enterRule(localctx, 606, HiveParser.RULE_joinToken);
	var _la = 0; // Token type
	try {
		this.state = 3589;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 415, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3565;
				this.match(HiveParser.KW_JOIN);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3566;
				this.match(HiveParser.KW_INNER);
				this.state = 3567;
				this.match(HiveParser.KW_JOIN);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 3568;
				this.match(HiveParser.COMMA);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 3569;
				this.match(HiveParser.KW_CROSS);
				this.state = 3570;
				this.match(HiveParser.KW_JOIN);
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 3571;
				this.match(HiveParser.KW_LEFT);
				this.state = 3573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_OUTER) {
					this.state = 3572;
					this.match(HiveParser.KW_OUTER);
				}

				this.state = 3575;
				this.match(HiveParser.KW_JOIN);
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 3576;
				this.match(HiveParser.KW_RIGHT);
				this.state = 3578;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_OUTER) {
					this.state = 3577;
					this.match(HiveParser.KW_OUTER);
				}

				this.state = 3580;
				this.match(HiveParser.KW_JOIN);
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 3581;
				this.match(HiveParser.KW_FULL);
				this.state = 3583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_OUTER) {
					this.state = 3582;
					this.match(HiveParser.KW_OUTER);
				}

				this.state = 3585;
				this.match(HiveParser.KW_JOIN);
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 3586;
				this.match(HiveParser.KW_LEFT);
				this.state = 3587;
				this.match(HiveParser.KW_SEMI);
				this.state = 3588;
				this.match(HiveParser.KW_JOIN);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LateralViewContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_lateralView;
	return this;
}

LateralViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LateralViewContext.prototype.constructor = LateralViewContext;

LateralViewContext.prototype.KW_LATERAL = function () {
	return this.getToken(HiveParser.KW_LATERAL, 0);
};

LateralViewContext.prototype.KW_VIEW = function () {
	return this.getToken(HiveParser.KW_VIEW, 0);
};

LateralViewContext.prototype.KW_OUTER = function () {
	return this.getToken(HiveParser.KW_OUTER, 0);
};

LateralViewContext.prototype.functionStatement = function () {
	return this.getTypedRuleContext(FunctionStatementContext, 0);
};

LateralViewContext.prototype.tableAlias = function () {
	return this.getTypedRuleContext(TableAliasContext, 0);
};

LateralViewContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

LateralViewContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

LateralViewContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

LateralViewContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

LateralViewContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.LPAREN);
	} else {
		return this.getToken(HiveParser.LPAREN, i);
	}
};

LateralViewContext.prototype.valuesClause = function () {
	return this.getTypedRuleContext(ValuesClauseContext, 0);
};

LateralViewContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.RPAREN);
	} else {
		return this.getToken(HiveParser.RPAREN, i);
	}
};

LateralViewContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitLateralView(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.LateralViewContext = LateralViewContext;

HiveParser.prototype.lateralView = function () {
	var localctx = new LateralViewContext(this, this._ctx, this.state);
	this.enterRule(localctx, 608, HiveParser.RULE_lateralView);
	var _la = 0; // Token type
	try {
		this.state = 3650;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 425, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3591;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3592;
				this.match(HiveParser.KW_VIEW);
				this.state = 3593;
				this.match(HiveParser.KW_OUTER);
				this.state = 3594;
				this.functionStatement();
				this.state = 3595;
				this.tableAlias();
				this.state = 3605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					this.state = 3596;
					this.match(HiveParser.KW_AS);
					this.state = 3597;
					this.identifier();
					this.state = 3602;
					this._errHandler.sync(this);
					var _alt = this._interp.adaptivePredict(this._input, 416, this._ctx);
					while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							this.state = 3598;
							this.match(HiveParser.COMMA);
							this.state = 3599;
							this.identifier();
						}
						this.state = 3604;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 416, this._ctx);
					}
				}

				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.COMMA) {
					this.state = 3607;
					this.match(HiveParser.COMMA);
				}

				this.state = 3610;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3611;
				this.match(HiveParser.KW_VIEW);
				this.state = 3612;
				this.functionStatement();
				this.state = 3613;
				this.tableAlias();
				this.state = 3623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					this.state = 3614;
					this.match(HiveParser.KW_AS);
					this.state = 3615;
					this.identifier();
					this.state = 3620;
					this._errHandler.sync(this);
					var _alt = this._interp.adaptivePredict(this._input, 419, this._ctx);
					while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							this.state = 3616;
							this.match(HiveParser.COMMA);
							this.state = 3617;
							this.identifier();
						}
						this.state = 3622;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 419, this._ctx);
					}
				}

				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 3626;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.COMMA) {
					this.state = 3625;
					this.match(HiveParser.COMMA);
				}

				this.state = 3628;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3629;
				this.match(HiveParser.KW_TABLE);
				this.state = 3630;
				this.match(HiveParser.LPAREN);
				this.state = 3631;
				this.valuesClause();
				this.state = 3632;
				this.match(HiveParser.RPAREN);
				this.state = 3634;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					this.state = 3633;
					this.match(HiveParser.KW_AS);
				}

				this.state = 3636;
				this.tableAlias();
				this.state = 3648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.LPAREN) {
					this.state = 3637;
					this.match(HiveParser.LPAREN);
					this.state = 3638;
					this.identifier();
					this.state = 3643;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveParser.COMMA) {
						this.state = 3639;
						this.match(HiveParser.COMMA);
						this.state = 3640;
						this.identifier();
						this.state = 3645;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3646;
					this.match(HiveParser.RPAREN);
				}

				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableAliasContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableAlias;
	return this;
}

TableAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasContext.prototype.constructor = TableAliasContext;

TableAliasContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

TableAliasContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableAlias(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableAliasContext = TableAliasContext;

HiveParser.prototype.tableAlias = function () {
	var localctx = new TableAliasContext(this, this._ctx, this.state);
	this.enterRule(localctx, 610, HiveParser.RULE_tableAlias);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3652;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableBucketSampleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableBucketSample;
	return this;
}

TableBucketSampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableBucketSampleContext.prototype.constructor = TableBucketSampleContext;

TableBucketSampleContext.prototype.KW_TABLESAMPLE = function () {
	return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
};

TableBucketSampleContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

TableBucketSampleContext.prototype.KW_BUCKET = function () {
	return this.getToken(HiveParser.KW_BUCKET, 0);
};

TableBucketSampleContext.prototype.Number = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.Number);
	} else {
		return this.getToken(HiveParser.Number, i);
	}
};

TableBucketSampleContext.prototype.KW_OUT = function () {
	return this.getToken(HiveParser.KW_OUT, 0);
};

TableBucketSampleContext.prototype.KW_OF = function () {
	return this.getToken(HiveParser.KW_OF, 0);
};

TableBucketSampleContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

TableBucketSampleContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

TableBucketSampleContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

TableBucketSampleContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

TableBucketSampleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableBucketSample(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableBucketSampleContext = TableBucketSampleContext;

HiveParser.prototype.tableBucketSample = function () {
	var localctx = new TableBucketSampleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 612, HiveParser.RULE_tableBucketSample);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3654;
		this.match(HiveParser.KW_TABLESAMPLE);
		this.state = 3655;
		this.match(HiveParser.LPAREN);
		this.state = 3656;
		this.match(HiveParser.KW_BUCKET);
		this.state = 3657;
		this.match(HiveParser.Number);
		this.state = 3658;
		this.match(HiveParser.KW_OUT);
		this.state = 3659;
		this.match(HiveParser.KW_OF);
		this.state = 3660;
		this.match(HiveParser.Number);
		this.state = 3670;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ON) {
			this.state = 3661;
			this.match(HiveParser.KW_ON);
			this.state = 3662;
			this.expression(0);
			this.state = 3667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				this.state = 3663;
				this.match(HiveParser.COMMA);
				this.state = 3664;
				this.expression(0);
				this.state = 3669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		}

		this.state = 3672;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SplitSampleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_splitSample;
	return this;
}

SplitSampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SplitSampleContext.prototype.constructor = SplitSampleContext;

SplitSampleContext.prototype.KW_TABLESAMPLE = function () {
	return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
};

SplitSampleContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

SplitSampleContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

SplitSampleContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

SplitSampleContext.prototype.KW_PERCENT = function () {
	return this.getToken(HiveParser.KW_PERCENT, 0);
};

SplitSampleContext.prototype.KW_ROWS = function () {
	return this.getToken(HiveParser.KW_ROWS, 0);
};

SplitSampleContext.prototype.ByteLengthLiteral = function () {
	return this.getToken(HiveParser.ByteLengthLiteral, 0);
};

SplitSampleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSplitSample(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SplitSampleContext = SplitSampleContext;

HiveParser.prototype.splitSample = function () {
	var localctx = new SplitSampleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 614, HiveParser.RULE_splitSample);
	var _la = 0; // Token type
	try {
		this.state = 3683;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 428, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3674;
				this.match(HiveParser.KW_TABLESAMPLE);
				this.state = 3675;
				this.match(HiveParser.LPAREN);
				this.state = 3676;
				this.match(HiveParser.Number);
				this.state = 3677;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_ROWS || _la === HiveParser.KW_PERCENT)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3678;
				this.match(HiveParser.RPAREN);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3679;
				this.match(HiveParser.KW_TABLESAMPLE);
				this.state = 3680;
				this.match(HiveParser.LPAREN);
				this.state = 3681;
				this.match(HiveParser.ByteLengthLiteral);
				this.state = 3682;
				this.match(HiveParser.RPAREN);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableSampleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableSample;
	return this;
}

TableSampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSampleContext.prototype.constructor = TableSampleContext;

TableSampleContext.prototype.tableBucketSample = function () {
	return this.getTypedRuleContext(TableBucketSampleContext, 0);
};

TableSampleContext.prototype.splitSample = function () {
	return this.getTypedRuleContext(SplitSampleContext, 0);
};

TableSampleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableSample(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableSampleContext = TableSampleContext;

HiveParser.prototype.tableSample = function () {
	var localctx = new TableSampleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 616, HiveParser.RULE_tableSample);
	try {
		this.state = 3687;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 429, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3685;
				this.tableBucketSample();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3686;
				this.splitSample();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableSource;
	return this;
}

TableSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSourceContext.prototype.constructor = TableSourceContext;

TableSourceContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

TableSourceContext.prototype.tableProperties = function () {
	return this.getTypedRuleContext(TablePropertiesContext, 0);
};

TableSourceContext.prototype.tableSample = function () {
	return this.getTypedRuleContext(TableSampleContext, 0);
};

TableSourceContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

TableSourceContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

TableSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableSourceContext = TableSourceContext;

HiveParser.prototype.tableSource = function () {
	var localctx = new TableSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 618, HiveParser.RULE_tableSource);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3689;
		this.tableName();
		this.state = 3691;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.LPAREN) {
			this.state = 3690;
			this.tableProperties();
		}

		this.state = 3694;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TABLESAMPLE) {
			this.state = 3693;
			this.tableSample();
		}

		this.state = 3700;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 433, this._ctx);
		if (la_ === 1) {
			this.state = 3697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AS) {
				this.state = 3696;
				this.match(HiveParser.KW_AS);
			}

			this.state = 3699;
			this.identifier();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UniqueJoinTableSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_uniqueJoinTableSource;
	return this;
}

UniqueJoinTableSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueJoinTableSourceContext.prototype.constructor = UniqueJoinTableSourceContext;

UniqueJoinTableSourceContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

UniqueJoinTableSourceContext.prototype.tableSample = function () {
	return this.getTypedRuleContext(TableSampleContext, 0);
};

UniqueJoinTableSourceContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

UniqueJoinTableSourceContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

UniqueJoinTableSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUniqueJoinTableSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UniqueJoinTableSourceContext = UniqueJoinTableSourceContext;

HiveParser.prototype.uniqueJoinTableSource = function () {
	var localctx = new UniqueJoinTableSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 620, HiveParser.RULE_uniqueJoinTableSource);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3702;
		this.tableName();
		this.state = 3704;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TABLESAMPLE) {
			this.state = 3703;
			this.tableSample();
		}

		this.state = 3710;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_ASC) |
						(1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_NULLS) |
						(1 << HiveParser.KW_LAST) |
						(1 << HiveParser.KW_AS) |
						(1 << HiveParser.KW_OVERWRITE))) !==
					0) ||
			(((_la - 36) & ~0x1f) == 0 &&
				((1 << (_la - 36)) &
					((1 << (HiveParser.KW_PARTITIONS - 36)) |
						(1 << (HiveParser.KW_TABLES - 36)) |
						(1 << (HiveParser.KW_COLUMNS - 36)) |
						(1 << (HiveParser.KW_INDEX - 36)) |
						(1 << (HiveParser.KW_INDEXES - 36)) |
						(1 << (HiveParser.KW_REBUILD - 36)) |
						(1 << (HiveParser.KW_FUNCTIONS - 36)) |
						(1 << (HiveParser.KW_SHOW - 36)) |
						(1 << (HiveParser.KW_MSCK - 36)) |
						(1 << (HiveParser.KW_REPAIR - 36)) |
						(1 << (HiveParser.KW_DIRECTORY - 36)) |
						(1 << (HiveParser.KW_CLUSTER - 36)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
						(1 << (HiveParser.KW_SORT - 36)) |
						(1 << (HiveParser.KW_LOAD - 36)) |
						(1 << (HiveParser.KW_EXPORT - 36)) |
						(1 << (HiveParser.KW_REPLICATION - 36)) |
						(1 << (HiveParser.KW_METADATA - 36)) |
						(1 << (HiveParser.KW_DATA - 36)) |
						(1 << (HiveParser.KW_INPATH - 36)))) !==
					0) ||
			(((_la - 68) & ~0x1f) == 0 &&
				((1 << (_la - 68)) &
					((1 << (HiveParser.KW_CHANGE - 68)) |
						(1 << (HiveParser.KW_FIRST - 68)) |
						(1 << (HiveParser.KW_AFTER - 68)) |
						(1 << (HiveParser.KW_RENAME - 68)) |
						(1 << (HiveParser.KW_COMMENT - 68)) |
						(1 << (HiveParser.KW_TINYINT - 68)) |
						(1 << (HiveParser.KW_DATETIME - 68)) |
						(1 << (HiveParser.KW_ZONE - 68)) |
						(1 << (HiveParser.KW_STRING - 68)) |
						(1 << (HiveParser.KW_STRUCT - 68)) |
						(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
					0) ||
			(((_la - 101) & ~0x1f) == 0 &&
				((1 << (_la - 101)) &
					((1 << (HiveParser.KW_PARTITIONED - 101)) |
						(1 << (HiveParser.KW_CLUSTERED - 101)) |
						(1 << (HiveParser.KW_SORTED - 101)) |
						(1 << (HiveParser.KW_BUCKETS - 101)) |
						(1 << (HiveParser.KW_FORMAT - 101)) |
						(1 << (HiveParser.KW_DELIMITED - 101)) |
						(1 << (HiveParser.KW_FIELDS - 101)) |
						(1 << (HiveParser.KW_TERMINATED - 101)) |
						(1 << (HiveParser.KW_ESCAPED - 101)) |
						(1 << (HiveParser.KW_COLLECTION - 101)) |
						(1 << (HiveParser.KW_ITEMS - 101)) |
						(1 << (HiveParser.KW_KEYS - 101)) |
						(1 << (HiveParser.KW_KEY_TYPE - 101)) |
						(1 << (HiveParser.KW_KILL - 101)) |
						(1 << (HiveParser.KW_LINES - 101)) |
						(1 << (HiveParser.KW_STORED - 101)) |
						(1 << (HiveParser.KW_FILEFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_ENABLE - 101)) |
						(1 << (HiveParser.KW_DISABLE - 101)) |
						(1 << (HiveParser.KW_LOCATION - 101)) |
						(1 << (HiveParser.KW_BUCKET - 101)))) !==
					0) ||
			(((_la - 134) & ~0x1f) == 0 &&
				((1 << (_la - 134)) &
					((1 << (HiveParser.KW_ADD - 134)) |
						(1 << (HiveParser.KW_REPLACE - 134)) |
						(1 << (HiveParser.KW_TEMPORARY - 134)) |
						(1 << (HiveParser.KW_FILE - 134)) |
						(1 << (HiveParser.KW_JAR - 134)) |
						(1 << (HiveParser.KW_EXPLAIN - 134)) |
						(1 << (HiveParser.KW_FORMATTED - 134)) |
						(1 << (HiveParser.KW_DEPENDENCY - 134)) |
						(1 << (HiveParser.KW_LOGICAL - 134)) |
						(1 << (HiveParser.KW_SERDE - 134)) |
						(1 << (HiveParser.KW_DEFERRED - 134)) |
						(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
						(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
						(1 << (HiveParser.KW_LIMIT - 134)) |
						(1 << (HiveParser.KW_OFFSET - 134)) |
						(1 << (HiveParser.KW_UNSET - 134)) |
						(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
						(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
						(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
						(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
						(1 << (HiveParser.KW_DEFINED - 134)))) !==
					0) ||
			(((_la - 167) & ~0x1f) == 0 &&
				((1 << (_la - 167)) &
					((1 << (HiveParser.KW_MAPJOIN - 167)) |
						(1 << (HiveParser.KW_STREAMTABLE - 167)) |
						(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
						(1 << (HiveParser.KW_UTC - 167)) |
						(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
						(1 << (HiveParser.KW_LONG - 167)) |
						(1 << (HiveParser.KW_PLUS - 167)) |
						(1 << (HiveParser.KW_VIEW - 167)) |
						(1 << (HiveParser.KW_VIEWS - 167)) |
						(1 << (HiveParser.KW_DATABASES - 167)) |
						(1 << (HiveParser.KW_MATERIALIZED - 167)) |
						(1 << (HiveParser.KW_SCHEMA - 167)) |
						(1 << (HiveParser.KW_SCHEMAS - 167)) |
						(1 << (HiveParser.KW_SSL - 167)) |
						(1 << (HiveParser.KW_UNDO - 167)) |
						(1 << (HiveParser.KW_LOCK - 167)) |
						(1 << (HiveParser.KW_LOCKS - 167)) |
						(1 << (HiveParser.KW_UNLOCK - 167)) |
						(1 << (HiveParser.KW_SHARED - 167)) |
						(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
						(1 << (HiveParser.KW_UNSIGNED - 167)) |
						(1 << (HiveParser.KW_WHILE - 167)) |
						(1 << (HiveParser.KW_READ - 167)))) !==
					0) ||
			(((_la - 200) & ~0x1f) == 0 &&
				((1 << (_la - 200)) &
					((1 << (HiveParser.KW_PURGE - 200)) |
						(1 << (HiveParser.KW_ANALYZE - 200)) |
						(1 << (HiveParser.KW_BEFORE - 200)) |
						(1 << (HiveParser.KW_CONTINUE - 200)) |
						(1 << (HiveParser.KW_RECORDREADER - 200)) |
						(1 << (HiveParser.KW_RECORDWRITER - 200)) |
						(1 << (HiveParser.KW_SEMI - 200)) |
						(1 << (HiveParser.KW_TOUCH - 200)) |
						(1 << (HiveParser.KW_ARCHIVE - 200)) |
						(1 << (HiveParser.KW_UNARCHIVE - 200)) |
						(1 << (HiveParser.KW_COMPUTE - 200)) |
						(1 << (HiveParser.KW_STATISTICS - 200)) |
						(1 << (HiveParser.KW_USE - 200)) |
						(1 << (HiveParser.KW_OPTION - 200)) |
						(1 << (HiveParser.KW_CONCATENATE - 200)) |
						(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
						(1 << (HiveParser.KW_RESTRICT - 200)) |
						(1 << (HiveParser.KW_CASCADE - 200)) |
						(1 << (HiveParser.KW_SKEWED - 200)) |
						(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
					0) ||
			(((_la - 244) & ~0x1f) == 0 &&
				((1 << (_la - 244)) &
					((1 << (HiveParser.KW_SETS - 244)) |
						(1 << (HiveParser.KW_NOSCAN - 244)) |
						(1 << (HiveParser.KW_ROLE - 244)) |
						(1 << (HiveParser.KW_ROLES - 244)) |
						(1 << (HiveParser.KW_URI - 244)) |
						(1 << (HiveParser.KW_SERVER - 244)) |
						(1 << (HiveParser.KW_ADMIN - 244)) |
						(1 << (HiveParser.KW_OWNER - 244)) |
						(1 << (HiveParser.KW_PRINCIPALS - 244)) |
						(1 << (HiveParser.KW_COMPACT - 244)) |
						(1 << (HiveParser.KW_COMPACTIONS - 244)) |
						(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
						(1 << (HiveParser.KW_REWRITE - 244)) |
						(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
						(1 << (HiveParser.KW_RELOAD - 244)) |
						(1 << (HiveParser.KW_YEAR - 244)) |
						(1 << (HiveParser.KW_QUERY - 244)) |
						(1 << (HiveParser.KW_QUARTER - 244)) |
						(1 << (HiveParser.KW_MONTH - 244)) |
						(1 << (HiveParser.KW_WEEK - 244)) |
						(1 << (HiveParser.KW_DAY - 244)) |
						(1 << (HiveParser.KW_DOW - 244)) |
						(1 << (HiveParser.KW_HOUR - 244)) |
						(1 << (HiveParser.KW_MINUTE - 244)) |
						(1 << (HiveParser.KW_SECOND - 244)))) !==
					0) ||
			(((_la - 277) & ~0x1f) == 0 &&
				((1 << (_la - 277)) &
					((1 << (HiveParser.KW_TRANSACTION - 277)) |
						(1 << (HiveParser.KW_WORK - 277)) |
						(1 << (HiveParser.KW_WRITE - 277)) |
						(1 << (HiveParser.KW_ISOLATION - 277)) |
						(1 << (HiveParser.KW_LEVEL - 277)) |
						(1 << (HiveParser.KW_SNAPSHOT - 277)) |
						(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
						(1 << (HiveParser.KW_CACHE - 277)) |
						(1 << (HiveParser.KW_ENFORCED - 277)) |
						(1 << (HiveParser.KW_VALIDATE - 277)) |
						(1 << (HiveParser.KW_NOVALIDATE - 277)) |
						(1 << (HiveParser.KW_RELY - 277)) |
						(1 << (HiveParser.KW_NORELY - 277)) |
						(1 << (HiveParser.KW_KEY - 277)) |
						(1 << (HiveParser.KW_ABORT - 277)) |
						(1 << (HiveParser.KW_MATCHED - 277)) |
						(1 << (HiveParser.KW_REPL - 277)) |
						(1 << (HiveParser.KW_DUMP - 277)) |
						(1 << (HiveParser.KW_STATUS - 277)) |
						(1 << (HiveParser.KW_VECTORIZATION - 277)) |
						(1 << (HiveParser.KW_SUMMARY - 277)))) !==
					0) ||
			(((_la - 309) & ~0x1f) == 0 &&
				((1 << (_la - 309)) &
					((1 << (HiveParser.KW_OPERATOR - 309)) |
						(1 << (HiveParser.KW_EXPRESSION - 309)) |
						(1 << (HiveParser.KW_DETAIL - 309)) |
						(1 << (HiveParser.KW_WAIT - 309)) |
						(1 << (HiveParser.KW_RESOURCE - 309)) |
						(1 << (HiveParser.KW_PLAN - 309)) |
						(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
						(1 << (HiveParser.KW_PLANS - 309)) |
						(1 << (HiveParser.KW_ACTIVATE - 309)) |
						(1 << (HiveParser.KW_DEFAULT - 309)) |
						(1 << (HiveParser.KW_CHECK - 309)) |
						(1 << (HiveParser.KW_POOL - 309)) |
						(1 << (HiveParser.KW_MOVE - 309)) |
						(1 << (HiveParser.KW_DO - 309)) |
						(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
						(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
						(1 << (HiveParser.KW_PATH - 309)) |
						(1 << (HiveParser.KW_MAPPING - 309)) |
						(1 << (HiveParser.KW_WORKLOAD - 309)) |
						(1 << (HiveParser.KW_MANAGEMENT - 309)) |
						(1 << (HiveParser.KW_ACTIVE - 309)) |
						(1 << (HiveParser.KW_UNMANAGED - 309)) |
						(1 << (HiveParser.KW_DELTA - 309)) |
						(1 << (HiveParser.KW_CSV - 309)))) !==
					0) ||
			_la === HiveParser.KW_JSON ||
			_la === HiveParser.KW_BLOOMFILTER ||
			_la === HiveParser.Identifier
		) {
			this.state = 3707;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AS) {
				this.state = 3706;
				this.match(HiveParser.KW_AS);
			}

			this.state = 3709;
			this.identifier();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableName;
	return this;
}

TableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

TableNameContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

TableNameContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

TableNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableNameContext = TableNameContext;

HiveParser.prototype.tableName = function () {
	var localctx = new TableNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 622, HiveParser.RULE_tableName);
	try {
		this.state = 3717;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 437, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3712;
				this.identifier();
				this.state = 3713;
				this.match(HiveParser.DOT);
				this.state = 3714;
				this.identifier();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3716;
				this.identifier();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ViewNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_viewName;
	return this;
}

ViewNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewNameContext.prototype.constructor = ViewNameContext;

ViewNameContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

ViewNameContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

ViewNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitViewName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ViewNameContext = ViewNameContext;

HiveParser.prototype.viewName = function () {
	var localctx = new ViewNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 624, HiveParser.RULE_viewName);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3722;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 438, this._ctx);
		if (la_ === 1) {
			this.state = 3719;
			this.identifier();
			this.state = 3720;
			this.match(HiveParser.DOT);
		}
		this.state = 3724;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SubQuerySourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_subQuerySource;
	return this;
}

SubQuerySourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubQuerySourceContext.prototype.constructor = SubQuerySourceContext;

SubQuerySourceContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

SubQuerySourceContext.prototype.queryStatementExpression = function () {
	return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
};

SubQuerySourceContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

SubQuerySourceContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

SubQuerySourceContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

SubQuerySourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSubQuerySource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SubQuerySourceContext = SubQuerySourceContext;

HiveParser.prototype.subQuerySource = function () {
	var localctx = new SubQuerySourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 626, HiveParser.RULE_subQuerySource);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3726;
		this.match(HiveParser.LPAREN);
		this.state = 3727;
		this.queryStatementExpression();
		this.state = 3728;
		this.match(HiveParser.RPAREN);
		this.state = 3730;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_AS) {
			this.state = 3729;
			this.match(HiveParser.KW_AS);
		}

		this.state = 3732;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitioningSpecContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitioningSpec;
	return this;
}

PartitioningSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitioningSpecContext.prototype.constructor = PartitioningSpecContext;

PartitioningSpecContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};

PartitioningSpecContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

PartitioningSpecContext.prototype.distributeByClause = function () {
	return this.getTypedRuleContext(DistributeByClauseContext, 0);
};

PartitioningSpecContext.prototype.sortByClause = function () {
	return this.getTypedRuleContext(SortByClauseContext, 0);
};

PartitioningSpecContext.prototype.clusterByClause = function () {
	return this.getTypedRuleContext(ClusterByClauseContext, 0);
};

PartitioningSpecContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitioningSpec(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitioningSpecContext = PartitioningSpecContext;

HiveParser.prototype.partitioningSpec = function () {
	var localctx = new PartitioningSpecContext(this, this._ctx, this.state);
	this.enterRule(localctx, 628, HiveParser.RULE_partitioningSpec);
	var _la = 0; // Token type
	try {
		this.state = 3745;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_PARTITION:
				this.enterOuterAlt(localctx, 1);
				this.state = 3734;
				this.partitionByClause();
				this.state = 3736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ORDER) {
					this.state = 3735;
					this.orderByClause();
				}

				break;
			case HiveParser.KW_ORDER:
				this.enterOuterAlt(localctx, 2);
				this.state = 3738;
				this.orderByClause();
				break;
			case HiveParser.KW_DISTRIBUTE:
				this.enterOuterAlt(localctx, 3);
				this.state = 3739;
				this.distributeByClause();
				this.state = 3741;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_SORT) {
					this.state = 3740;
					this.sortByClause();
				}

				break;
			case HiveParser.KW_SORT:
				this.enterOuterAlt(localctx, 4);
				this.state = 3743;
				this.sortByClause();
				break;
			case HiveParser.KW_CLUSTER:
				this.enterOuterAlt(localctx, 5);
				this.state = 3744;
				this.clusterByClause();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionTableFunctionSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitionTableFunctionSource;
	return this;
}

PartitionTableFunctionSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionTableFunctionSourceContext.prototype.constructor = PartitionTableFunctionSourceContext;

PartitionTableFunctionSourceContext.prototype.subQuerySource = function () {
	return this.getTypedRuleContext(SubQuerySourceContext, 0);
};

PartitionTableFunctionSourceContext.prototype.tableSource = function () {
	return this.getTypedRuleContext(TableSourceContext, 0);
};

PartitionTableFunctionSourceContext.prototype.partitionedTableFunction = function () {
	return this.getTypedRuleContext(PartitionedTableFunctionContext, 0);
};

PartitionTableFunctionSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitionTableFunctionSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitionTableFunctionSourceContext = PartitionTableFunctionSourceContext;

HiveParser.prototype.partitionTableFunctionSource = function () {
	var localctx = new PartitionTableFunctionSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 630, HiveParser.RULE_partitionTableFunctionSource);
	try {
		this.state = 3750;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 443, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3747;
				this.subQuerySource();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3748;
				this.tableSource();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 3749;
				this.partitionedTableFunction();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionedTableFunctionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitionedTableFunction;
	return this;
}

PartitionedTableFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionedTableFunctionContext.prototype.constructor = PartitionedTableFunctionContext;

PartitionedTableFunctionContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

PartitionedTableFunctionContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.LPAREN);
	} else {
		return this.getToken(HiveParser.LPAREN, i);
	}
};

PartitionedTableFunctionContext.prototype.KW_ON = function () {
	return this.getToken(HiveParser.KW_ON, 0);
};

PartitionedTableFunctionContext.prototype.partitionTableFunctionSource = function () {
	return this.getTypedRuleContext(PartitionTableFunctionSourceContext, 0);
};

PartitionedTableFunctionContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.RPAREN);
	} else {
		return this.getToken(HiveParser.RPAREN, i);
	}
};

PartitionedTableFunctionContext.prototype.partitioningSpec = function () {
	return this.getTypedRuleContext(PartitioningSpecContext, 0);
};

PartitionedTableFunctionContext.prototype.Identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.Identifier);
	} else {
		return this.getToken(HiveParser.Identifier, i);
	}
};

PartitionedTableFunctionContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

PartitionedTableFunctionContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

PartitionedTableFunctionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitionedTableFunction(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitionedTableFunctionContext = PartitionedTableFunctionContext;

HiveParser.prototype.partitionedTableFunction = function () {
	var localctx = new PartitionedTableFunctionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 632, HiveParser.RULE_partitionedTableFunction);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3752;
		this.identifier();
		this.state = 3753;
		this.match(HiveParser.LPAREN);
		this.state = 3754;
		this.match(HiveParser.KW_ON);
		this.state = 3755;
		this.partitionTableFunctionSource();
		this.state = 3757;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === HiveParser.KW_ORDER ||
			(((_la - 35) & ~0x1f) == 0 &&
				((1 << (_la - 35)) &
					((1 << (HiveParser.KW_PARTITION - 35)) |
						(1 << (HiveParser.KW_CLUSTER - 35)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 35)) |
						(1 << (HiveParser.KW_SORT - 35)))) !==
					0)
		) {
			this.state = 3756;
			this.partitioningSpec();
		}

		this.state = 3774;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.Identifier) {
			this.state = 3759;
			this.match(HiveParser.Identifier);
			this.state = 3760;
			this.match(HiveParser.LPAREN);
			this.state = 3761;
			this.expression(0);
			this.state = 3762;
			this.match(HiveParser.RPAREN);
			this.state = 3771;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				this.state = 3763;
				this.match(HiveParser.COMMA);
				this.state = 3764;
				this.match(HiveParser.Identifier);
				this.state = 3765;
				this.match(HiveParser.LPAREN);
				this.state = 3766;
				this.expression(0);
				this.state = 3767;
				this.match(HiveParser.RPAREN);
				this.state = 3773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		}

		this.state = 3776;
		this.match(HiveParser.RPAREN);
		this.state = 3778;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 447, this._ctx);
		if (la_ === 1) {
			this.state = 3777;
			this.identifier();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WhereClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_whereClause;
	return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.KW_WHERE = function () {
	return this.getToken(HiveParser.KW_WHERE, 0);
};

WhereClauseContext.prototype.searchCondition = function () {
	return this.getTypedRuleContext(SearchConditionContext, 0);
};

WhereClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWhereClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WhereClauseContext = WhereClauseContext;

HiveParser.prototype.whereClause = function () {
	var localctx = new WhereClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 634, HiveParser.RULE_whereClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3780;
		this.match(HiveParser.KW_WHERE);
		this.state = 3781;
		this.searchCondition();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SearchConditionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_searchCondition;
	return this;
}

SearchConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchConditionContext.prototype.constructor = SearchConditionContext;

SearchConditionContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

SearchConditionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSearchCondition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SearchConditionContext = SearchConditionContext;

HiveParser.prototype.searchCondition = function () {
	var localctx = new SearchConditionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 636, HiveParser.RULE_searchCondition);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3783;
		this.expression(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValuesClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_valuesClause;
	return this;
}

ValuesClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesClauseContext.prototype.constructor = ValuesClauseContext;

ValuesClauseContext.prototype.KW_VALUES = function () {
	return this.getToken(HiveParser.KW_VALUES, 0);
};

ValuesClauseContext.prototype.valuesTableConstructor = function () {
	return this.getTypedRuleContext(ValuesTableConstructorContext, 0);
};

ValuesClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitValuesClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ValuesClauseContext = ValuesClauseContext;

HiveParser.prototype.valuesClause = function () {
	var localctx = new ValuesClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 638, HiveParser.RULE_valuesClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3785;
		this.match(HiveParser.KW_VALUES);
		this.state = 3786;
		this.valuesTableConstructor();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValuesTableConstructorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_valuesTableConstructor;
	return this;
}

ValuesTableConstructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesTableConstructorContext.prototype.constructor = ValuesTableConstructorContext;

ValuesTableConstructorContext.prototype.valueRowConstructor = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ValueRowConstructorContext);
	} else {
		return this.getTypedRuleContext(ValueRowConstructorContext, i);
	}
};

ValuesTableConstructorContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ValuesTableConstructorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitValuesTableConstructor(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ValuesTableConstructorContext = ValuesTableConstructorContext;

HiveParser.prototype.valuesTableConstructor = function () {
	var localctx = new ValuesTableConstructorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 640, HiveParser.RULE_valuesTableConstructor);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3788;
		this.valueRowConstructor();
		this.state = 3793;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3789;
			this.match(HiveParser.COMMA);
			this.state = 3790;
			this.valueRowConstructor();
			this.state = 3795;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValueRowConstructorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_valueRowConstructor;
	return this;
}

ValueRowConstructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueRowConstructorContext.prototype.constructor = ValueRowConstructorContext;

ValueRowConstructorContext.prototype.expressionsInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
};

ValueRowConstructorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitValueRowConstructor(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ValueRowConstructorContext = ValueRowConstructorContext;

HiveParser.prototype.valueRowConstructor = function () {
	var localctx = new ValueRowConstructorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 642, HiveParser.RULE_valueRowConstructor);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3796;
		this.expressionsInParenthesis();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function VirtualTableSourceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_virtualTableSource;
	return this;
}

VirtualTableSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VirtualTableSourceContext.prototype.constructor = VirtualTableSourceContext;

VirtualTableSourceContext.prototype.KW_TABLE = function () {
	return this.getToken(HiveParser.KW_TABLE, 0);
};

VirtualTableSourceContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.LPAREN);
	} else {
		return this.getToken(HiveParser.LPAREN, i);
	}
};

VirtualTableSourceContext.prototype.valuesClause = function () {
	return this.getTypedRuleContext(ValuesClauseContext, 0);
};

VirtualTableSourceContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.RPAREN);
	} else {
		return this.getToken(HiveParser.RPAREN, i);
	}
};

VirtualTableSourceContext.prototype.tableAlias = function () {
	return this.getTypedRuleContext(TableAliasContext, 0);
};

VirtualTableSourceContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

VirtualTableSourceContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

VirtualTableSourceContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

VirtualTableSourceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitVirtualTableSource(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.VirtualTableSourceContext = VirtualTableSourceContext;

HiveParser.prototype.virtualTableSource = function () {
	var localctx = new VirtualTableSourceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 644, HiveParser.RULE_virtualTableSource);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3798;
		this.match(HiveParser.KW_TABLE);
		this.state = 3799;
		this.match(HiveParser.LPAREN);
		this.state = 3800;
		this.valuesClause();
		this.state = 3801;
		this.match(HiveParser.RPAREN);
		this.state = 3803;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_AS) {
			this.state = 3802;
			this.match(HiveParser.KW_AS);
		}

		this.state = 3805;
		this.tableAlias();
		this.state = 3815;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.LPAREN) {
			this.state = 3806;
			this.match(HiveParser.LPAREN);
			this.state = 3807;
			this.identifier();
			this.state = 3812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				this.state = 3808;
				this.match(HiveParser.COMMA);
				this.state = 3809;
				this.identifier();
				this.state = 3814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		}

		this.state = 3817;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GroupByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_groupByClause;
	return this;
}

GroupByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByClauseContext.prototype.constructor = GroupByClauseContext;

GroupByClauseContext.prototype.KW_GROUP = function () {
	return this.getToken(HiveParser.KW_GROUP, 0);
};

GroupByClauseContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

GroupByClauseContext.prototype.groupby_expression = function () {
	return this.getTypedRuleContext(Groupby_expressionContext, 0);
};

GroupByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGroupByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GroupByClauseContext = GroupByClauseContext;

HiveParser.prototype.groupByClause = function () {
	var localctx = new GroupByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 646, HiveParser.RULE_groupByClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3819;
		this.match(HiveParser.KW_GROUP);
		this.state = 3820;
		this.match(HiveParser.KW_BY);
		this.state = 3821;
		this.groupby_expression();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Groupby_expressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_groupby_expression;
	return this;
}

Groupby_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Groupby_expressionContext.prototype.constructor = Groupby_expressionContext;

Groupby_expressionContext.prototype.rollupStandard = function () {
	return this.getTypedRuleContext(RollupStandardContext, 0);
};

Groupby_expressionContext.prototype.rollupOldSyntax = function () {
	return this.getTypedRuleContext(RollupOldSyntaxContext, 0);
};

Groupby_expressionContext.prototype.groupByEmpty = function () {
	return this.getTypedRuleContext(GroupByEmptyContext, 0);
};

Groupby_expressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGroupby_expression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Groupby_expressionContext = Groupby_expressionContext;

HiveParser.prototype.groupby_expression = function () {
	var localctx = new Groupby_expressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 648, HiveParser.RULE_groupby_expression);
	try {
		this.state = 3826;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 452, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3823;
				this.rollupStandard();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3824;
				this.rollupOldSyntax();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 3825;
				this.groupByEmpty();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GroupByEmptyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_groupByEmpty;
	return this;
}

GroupByEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByEmptyContext.prototype.constructor = GroupByEmptyContext;

GroupByEmptyContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

GroupByEmptyContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

GroupByEmptyContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGroupByEmpty(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GroupByEmptyContext = GroupByEmptyContext;

HiveParser.prototype.groupByEmpty = function () {
	var localctx = new GroupByEmptyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 650, HiveParser.RULE_groupByEmpty);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3828;
		this.match(HiveParser.LPAREN);
		this.state = 3829;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RollupStandardContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rollupStandard;
	return this;
}

RollupStandardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollupStandardContext.prototype.constructor = RollupStandardContext;

RollupStandardContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

RollupStandardContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

RollupStandardContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

RollupStandardContext.prototype.KW_ROLLUP = function () {
	return this.getToken(HiveParser.KW_ROLLUP, 0);
};

RollupStandardContext.prototype.KW_CUBE = function () {
	return this.getToken(HiveParser.KW_CUBE, 0);
};

RollupStandardContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

RollupStandardContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRollupStandard(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RollupStandardContext = RollupStandardContext;

HiveParser.prototype.rollupStandard = function () {
	var localctx = new RollupStandardContext(this, this._ctx, this.state);
	this.enterRule(localctx, 652, HiveParser.RULE_rollupStandard);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3831;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_ROLLUP || _la === HiveParser.KW_CUBE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 3832;
		this.match(HiveParser.LPAREN);
		this.state = 3833;
		this.expression(0);
		this.state = 3838;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3834;
			this.match(HiveParser.COMMA);
			this.state = 3835;
			this.expression(0);
			this.state = 3840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 3841;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RollupOldSyntaxContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rollupOldSyntax;
	return this;
}

RollupOldSyntaxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollupOldSyntaxContext.prototype.constructor = RollupOldSyntaxContext;

RollupOldSyntaxContext.prototype.expressionsNotInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0);
};

RollupOldSyntaxContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

RollupOldSyntaxContext.prototype.KW_ROLLUP = function () {
	return this.getToken(HiveParser.KW_ROLLUP, 0);
};

RollupOldSyntaxContext.prototype.KW_CUBE = function () {
	return this.getToken(HiveParser.KW_CUBE, 0);
};

RollupOldSyntaxContext.prototype.KW_GROUPING = function () {
	return this.getToken(HiveParser.KW_GROUPING, 0);
};

RollupOldSyntaxContext.prototype.KW_SETS = function () {
	return this.getToken(HiveParser.KW_SETS, 0);
};

RollupOldSyntaxContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

RollupOldSyntaxContext.prototype.groupingSetExpression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(GroupingSetExpressionContext);
	} else {
		return this.getTypedRuleContext(GroupingSetExpressionContext, i);
	}
};

RollupOldSyntaxContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

RollupOldSyntaxContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

RollupOldSyntaxContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRollupOldSyntax(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RollupOldSyntaxContext = RollupOldSyntaxContext;

HiveParser.prototype.rollupOldSyntax = function () {
	var localctx = new RollupOldSyntaxContext(this, this._ctx, this.state);
	this.enterRule(localctx, 654, HiveParser.RULE_rollupOldSyntax);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3843;
		this.expressionsNotInParenthesis();
		this.state = 3848;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 454, this._ctx);
		if (la_ === 1) {
			this.state = 3844;
			this.match(HiveParser.KW_WITH);
			this.state = 3845;
			this.match(HiveParser.KW_ROLLUP);
		} else if (la_ === 2) {
			this.state = 3846;
			this.match(HiveParser.KW_WITH);
			this.state = 3847;
			this.match(HiveParser.KW_CUBE);
		}
		this.state = 3863;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_GROUPING) {
			this.state = 3850;
			this.match(HiveParser.KW_GROUPING);
			this.state = 3851;
			this.match(HiveParser.KW_SETS);
			this.state = 3852;
			this.match(HiveParser.LPAREN);
			this.state = 3853;
			this.groupingSetExpression();
			this.state = 3858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				this.state = 3854;
				this.match(HiveParser.COMMA);
				this.state = 3855;
				this.groupingSetExpression();
				this.state = 3860;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3861;
			this.match(HiveParser.RPAREN);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GroupingSetExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_groupingSetExpression;
	return this;
}

GroupingSetExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingSetExpressionContext.prototype.constructor = GroupingSetExpressionContext;

GroupingSetExpressionContext.prototype.groupingSetExpressionMultiple = function () {
	return this.getTypedRuleContext(GroupingSetExpressionMultipleContext, 0);
};

GroupingSetExpressionContext.prototype.groupingExpressionSingle = function () {
	return this.getTypedRuleContext(GroupingExpressionSingleContext, 0);
};

GroupingSetExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGroupingSetExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GroupingSetExpressionContext = GroupingSetExpressionContext;

HiveParser.prototype.groupingSetExpression = function () {
	var localctx = new GroupingSetExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 656, HiveParser.RULE_groupingSetExpression);
	try {
		this.state = 3867;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 457, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3865;
				this.groupingSetExpressionMultiple();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3866;
				this.groupingExpressionSingle();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GroupingSetExpressionMultipleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_groupingSetExpressionMultiple;
	return this;
}

GroupingSetExpressionMultipleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingSetExpressionMultipleContext.prototype.constructor = GroupingSetExpressionMultipleContext;

GroupingSetExpressionMultipleContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

GroupingSetExpressionMultipleContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

GroupingSetExpressionMultipleContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

GroupingSetExpressionMultipleContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

GroupingSetExpressionMultipleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGroupingSetExpressionMultiple(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GroupingSetExpressionMultipleContext = GroupingSetExpressionMultipleContext;

HiveParser.prototype.groupingSetExpressionMultiple = function () {
	var localctx = new GroupingSetExpressionMultipleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 658, HiveParser.RULE_groupingSetExpressionMultiple);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3869;
		this.match(HiveParser.LPAREN);
		this.state = 3871;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << HiveParser.KW_TRUE) |
						(1 << HiveParser.KW_FALSE) |
						(1 << HiveParser.KW_NOT) |
						(1 << HiveParser.KW_IF) |
						(1 << HiveParser.KW_EXISTS) |
						(1 << HiveParser.KW_ASC) |
						(1 << HiveParser.KW_DESC) |
						(1 << HiveParser.KW_NULLS) |
						(1 << HiveParser.KW_LAST) |
						(1 << HiveParser.KW_OVERWRITE))) !==
					0) ||
			(((_la - 36) & ~0x1f) == 0 &&
				((1 << (_la - 36)) &
					((1 << (HiveParser.KW_PARTITIONS - 36)) |
						(1 << (HiveParser.KW_TABLES - 36)) |
						(1 << (HiveParser.KW_COLUMNS - 36)) |
						(1 << (HiveParser.KW_INDEX - 36)) |
						(1 << (HiveParser.KW_INDEXES - 36)) |
						(1 << (HiveParser.KW_REBUILD - 36)) |
						(1 << (HiveParser.KW_FUNCTIONS - 36)) |
						(1 << (HiveParser.KW_SHOW - 36)) |
						(1 << (HiveParser.KW_MSCK - 36)) |
						(1 << (HiveParser.KW_REPAIR - 36)) |
						(1 << (HiveParser.KW_DIRECTORY - 36)) |
						(1 << (HiveParser.KW_CLUSTER - 36)) |
						(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
						(1 << (HiveParser.KW_SORT - 36)) |
						(1 << (HiveParser.KW_LOAD - 36)) |
						(1 << (HiveParser.KW_EXPORT - 36)) |
						(1 << (HiveParser.KW_REPLICATION - 36)) |
						(1 << (HiveParser.KW_METADATA - 36)) |
						(1 << (HiveParser.KW_DATA - 36)) |
						(1 << (HiveParser.KW_INPATH - 36)) |
						(1 << (HiveParser.KW_NULL - 36)))) !==
					0) ||
			(((_la - 68) & ~0x1f) == 0 &&
				((1 << (_la - 68)) &
					((1 << (HiveParser.KW_CHANGE - 68)) |
						(1 << (HiveParser.KW_FIRST - 68)) |
						(1 << (HiveParser.KW_AFTER - 68)) |
						(1 << (HiveParser.KW_RENAME - 68)) |
						(1 << (HiveParser.KW_COMMENT - 68)) |
						(1 << (HiveParser.KW_BOOLEAN - 68)) |
						(1 << (HiveParser.KW_TINYINT - 68)) |
						(1 << (HiveParser.KW_SMALLINT - 68)) |
						(1 << (HiveParser.KW_INT - 68)) |
						(1 << (HiveParser.KW_BIGINT - 68)) |
						(1 << (HiveParser.KW_FLOAT - 68)) |
						(1 << (HiveParser.KW_DOUBLE - 68)) |
						(1 << (HiveParser.KW_DATE - 68)) |
						(1 << (HiveParser.KW_DATETIME - 68)) |
						(1 << (HiveParser.KW_TIMESTAMP - 68)) |
						(1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) |
						(1 << (HiveParser.KW_ZONE - 68)) |
						(1 << (HiveParser.KW_INTERVAL - 68)) |
						(1 << (HiveParser.KW_STRING - 68)) |
						(1 << (HiveParser.KW_ARRAY - 68)) |
						(1 << (HiveParser.KW_STRUCT - 68)) |
						(1 << (HiveParser.KW_MAP - 68)) |
						(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
					0) ||
			(((_la - 101) & ~0x1f) == 0 &&
				((1 << (_la - 101)) &
					((1 << (HiveParser.KW_PARTITIONED - 101)) |
						(1 << (HiveParser.KW_CLUSTERED - 101)) |
						(1 << (HiveParser.KW_SORTED - 101)) |
						(1 << (HiveParser.KW_BUCKETS - 101)) |
						(1 << (HiveParser.KW_FORMAT - 101)) |
						(1 << (HiveParser.KW_DELIMITED - 101)) |
						(1 << (HiveParser.KW_FIELDS - 101)) |
						(1 << (HiveParser.KW_TERMINATED - 101)) |
						(1 << (HiveParser.KW_ESCAPED - 101)) |
						(1 << (HiveParser.KW_COLLECTION - 101)) |
						(1 << (HiveParser.KW_ITEMS - 101)) |
						(1 << (HiveParser.KW_KEYS - 101)) |
						(1 << (HiveParser.KW_KEY_TYPE - 101)) |
						(1 << (HiveParser.KW_KILL - 101)) |
						(1 << (HiveParser.KW_LINES - 101)) |
						(1 << (HiveParser.KW_STORED - 101)) |
						(1 << (HiveParser.KW_FILEFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
						(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
						(1 << (HiveParser.KW_ENABLE - 101)) |
						(1 << (HiveParser.KW_DISABLE - 101)) |
						(1 << (HiveParser.KW_LOCATION - 101)) |
						(1 << (HiveParser.KW_BUCKET - 101)))) !==
					0) ||
			(((_la - 133) & ~0x1f) == 0 &&
				((1 << (_la - 133)) &
					((1 << (HiveParser.KW_CAST - 133)) |
						(1 << (HiveParser.KW_ADD - 133)) |
						(1 << (HiveParser.KW_REPLACE - 133)) |
						(1 << (HiveParser.KW_TEMPORARY - 133)) |
						(1 << (HiveParser.KW_FILE - 133)) |
						(1 << (HiveParser.KW_JAR - 133)) |
						(1 << (HiveParser.KW_EXPLAIN - 133)) |
						(1 << (HiveParser.KW_FORMATTED - 133)) |
						(1 << (HiveParser.KW_DEPENDENCY - 133)) |
						(1 << (HiveParser.KW_LOGICAL - 133)) |
						(1 << (HiveParser.KW_SERDE - 133)) |
						(1 << (HiveParser.KW_DEFERRED - 133)) |
						(1 << (HiveParser.KW_SERDEPROPERTIES - 133)) |
						(1 << (HiveParser.KW_DBPROPERTIES - 133)) |
						(1 << (HiveParser.KW_LIMIT - 133)) |
						(1 << (HiveParser.KW_OFFSET - 133)) |
						(1 << (HiveParser.KW_UNSET - 133)) |
						(1 << (HiveParser.KW_TBLPROPERTIES - 133)) |
						(1 << (HiveParser.KW_IDXPROPERTIES - 133)) |
						(1 << (HiveParser.KW_VALUE_TYPE - 133)) |
						(1 << (HiveParser.KW_ELEM_TYPE - 133)) |
						(1 << (HiveParser.KW_DEFINED - 133)) |
						(1 << (HiveParser.KW_CASE - 133)))) !==
					0) ||
			(((_la - 167) & ~0x1f) == 0 &&
				((1 << (_la - 167)) &
					((1 << (HiveParser.KW_MAPJOIN - 167)) |
						(1 << (HiveParser.KW_STREAMTABLE - 167)) |
						(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
						(1 << (HiveParser.KW_UTC - 167)) |
						(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
						(1 << (HiveParser.KW_LONG - 167)) |
						(1 << (HiveParser.KW_PLUS - 167)) |
						(1 << (HiveParser.KW_VIEW - 167)) |
						(1 << (HiveParser.KW_VIEWS - 167)) |
						(1 << (HiveParser.KW_DATABASES - 167)) |
						(1 << (HiveParser.KW_MATERIALIZED - 167)) |
						(1 << (HiveParser.KW_SCHEMA - 167)) |
						(1 << (HiveParser.KW_SCHEMAS - 167)) |
						(1 << (HiveParser.KW_SSL - 167)) |
						(1 << (HiveParser.KW_UNDO - 167)) |
						(1 << (HiveParser.KW_LOCK - 167)) |
						(1 << (HiveParser.KW_LOCKS - 167)) |
						(1 << (HiveParser.KW_UNLOCK - 167)) |
						(1 << (HiveParser.KW_SHARED - 167)) |
						(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
						(1 << (HiveParser.KW_UNSIGNED - 167)) |
						(1 << (HiveParser.KW_WHILE - 167)) |
						(1 << (HiveParser.KW_READ - 167)))) !==
					0) ||
			(((_la - 200) & ~0x1f) == 0 &&
				((1 << (_la - 200)) &
					((1 << (HiveParser.KW_PURGE - 200)) |
						(1 << (HiveParser.KW_ANALYZE - 200)) |
						(1 << (HiveParser.KW_BEFORE - 200)) |
						(1 << (HiveParser.KW_BINARY - 200)) |
						(1 << (HiveParser.KW_CONTINUE - 200)) |
						(1 << (HiveParser.KW_RECORDREADER - 200)) |
						(1 << (HiveParser.KW_RECORDWRITER - 200)) |
						(1 << (HiveParser.KW_SEMI - 200)) |
						(1 << (HiveParser.KW_TOUCH - 200)) |
						(1 << (HiveParser.KW_ARCHIVE - 200)) |
						(1 << (HiveParser.KW_UNARCHIVE - 200)) |
						(1 << (HiveParser.KW_COMPUTE - 200)) |
						(1 << (HiveParser.KW_STATISTICS - 200)) |
						(1 << (HiveParser.KW_USE - 200)) |
						(1 << (HiveParser.KW_OPTION - 200)) |
						(1 << (HiveParser.KW_CONCATENATE - 200)) |
						(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
						(1 << (HiveParser.KW_RESTRICT - 200)) |
						(1 << (HiveParser.KW_CASCADE - 200)) |
						(1 << (HiveParser.KW_SKEWED - 200)) |
						(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
					0) ||
			(((_la - 238) & ~0x1f) == 0 &&
				((1 << (_la - 238)) &
					((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
						(1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
						(1 << (HiveParser.KW_GROUPING - 238)) |
						(1 << (HiveParser.KW_SETS - 238)) |
						(1 << (HiveParser.KW_NOSCAN - 238)) |
						(1 << (HiveParser.KW_ROLE - 238)) |
						(1 << (HiveParser.KW_ROLES - 238)) |
						(1 << (HiveParser.KW_URI - 238)) |
						(1 << (HiveParser.KW_SERVER - 238)) |
						(1 << (HiveParser.KW_ADMIN - 238)) |
						(1 << (HiveParser.KW_OWNER - 238)) |
						(1 << (HiveParser.KW_PRINCIPALS - 238)) |
						(1 << (HiveParser.KW_COMPACT - 238)) |
						(1 << (HiveParser.KW_COMPACTIONS - 238)) |
						(1 << (HiveParser.KW_TRANSACTIONS - 238)) |
						(1 << (HiveParser.KW_REWRITE - 238)) |
						(1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
						(1 << (HiveParser.KW_RELOAD - 238)) |
						(1 << (HiveParser.KW_YEAR - 238)) |
						(1 << (HiveParser.KW_QUERY - 238)) |
						(1 << (HiveParser.KW_QUARTER - 238)) |
						(1 << (HiveParser.KW_MONTH - 238)))) !==
					0) ||
			(((_la - 270) & ~0x1f) == 0 &&
				((1 << (_la - 270)) &
					((1 << (HiveParser.KW_WEEK - 270)) |
						(1 << (HiveParser.KW_DAY - 270)) |
						(1 << (HiveParser.KW_DOW - 270)) |
						(1 << (HiveParser.KW_HOUR - 270)) |
						(1 << (HiveParser.KW_MINUTE - 270)) |
						(1 << (HiveParser.KW_SECOND - 270)) |
						(1 << (HiveParser.KW_TRANSACTION - 270)) |
						(1 << (HiveParser.KW_WORK - 270)) |
						(1 << (HiveParser.KW_WRITE - 270)) |
						(1 << (HiveParser.KW_ISOLATION - 270)) |
						(1 << (HiveParser.KW_LEVEL - 270)) |
						(1 << (HiveParser.KW_SNAPSHOT - 270)) |
						(1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
						(1 << (HiveParser.KW_CACHE - 270)) |
						(1 << (HiveParser.KW_ENFORCED - 270)) |
						(1 << (HiveParser.KW_VALIDATE - 270)) |
						(1 << (HiveParser.KW_NOVALIDATE - 270)) |
						(1 << (HiveParser.KW_RELY - 270)) |
						(1 << (HiveParser.KW_NORELY - 270)) |
						(1 << (HiveParser.KW_KEY - 270)) |
						(1 << (HiveParser.KW_ABORT - 270)) |
						(1 << (HiveParser.KW_EXTRACT - 270)) |
						(1 << (HiveParser.KW_FLOOR - 270)))) !==
					0) ||
			(((_la - 303) & ~0x1f) == 0 &&
				((1 << (_la - 303)) &
					((1 << (HiveParser.KW_MATCHED - 303)) |
						(1 << (HiveParser.KW_REPL - 303)) |
						(1 << (HiveParser.KW_DUMP - 303)) |
						(1 << (HiveParser.KW_STATUS - 303)) |
						(1 << (HiveParser.KW_VECTORIZATION - 303)) |
						(1 << (HiveParser.KW_SUMMARY - 303)) |
						(1 << (HiveParser.KW_OPERATOR - 303)) |
						(1 << (HiveParser.KW_EXPRESSION - 303)) |
						(1 << (HiveParser.KW_DETAIL - 303)) |
						(1 << (HiveParser.KW_WAIT - 303)) |
						(1 << (HiveParser.KW_RESOURCE - 303)) |
						(1 << (HiveParser.KW_PLAN - 303)) |
						(1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
						(1 << (HiveParser.KW_PLANS - 303)) |
						(1 << (HiveParser.KW_ACTIVATE - 303)) |
						(1 << (HiveParser.KW_DEFAULT - 303)) |
						(1 << (HiveParser.KW_CHECK - 303)) |
						(1 << (HiveParser.KW_POOL - 303)) |
						(1 << (HiveParser.KW_MOVE - 303)) |
						(1 << (HiveParser.KW_DO - 303)) |
						(1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
						(1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
						(1 << (HiveParser.KW_PATH - 303)) |
						(1 << (HiveParser.KW_MAPPING - 303)) |
						(1 << (HiveParser.KW_WORKLOAD - 303)) |
						(1 << (HiveParser.KW_MANAGEMENT - 303)) |
						(1 << (HiveParser.KW_ACTIVE - 303)) |
						(1 << (HiveParser.KW_UNMANAGED - 303)))) !==
					0) ||
			(((_la - 338) & ~0x1f) == 0 &&
				((1 << (_la - 338)) &
					((1 << (HiveParser.KW_DELTA - 338)) |
						(1 << (HiveParser.KW_CSV - 338)) |
						(1 << (HiveParser.KW_JSON - 338)) |
						(1 << (HiveParser.KW_BLOOMFILTER - 338)) |
						(1 << (HiveParser.LPAREN - 338)) |
						(1 << (HiveParser.PLUS - 338)) |
						(1 << (HiveParser.MINUS - 338)) |
						(1 << (HiveParser.TILDE - 338)))) !==
					0) ||
			(((_la - 374) & ~0x1f) == 0 &&
				((1 << (_la - 374)) &
					((1 << (HiveParser.StringLiteral - 374)) |
						(1 << (HiveParser.IntegralLiteral - 374)) |
						(1 << (HiveParser.NumberLiteral - 374)) |
						(1 << (HiveParser.Number - 374)) |
						(1 << (HiveParser.Identifier - 374)) |
						(1 << (HiveParser.CharSetName - 374)))) !==
					0)
		) {
			this.state = 3870;
			this.expression(0);
		}

		this.state = 3877;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3873;
			this.match(HiveParser.COMMA);
			this.state = 3874;
			this.expression(0);
			this.state = 3879;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 3880;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GroupingExpressionSingleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_groupingExpressionSingle;
	return this;
}

GroupingExpressionSingleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingExpressionSingleContext.prototype.constructor = GroupingExpressionSingleContext;

GroupingExpressionSingleContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

GroupingExpressionSingleContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGroupingExpressionSingle(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GroupingExpressionSingleContext = GroupingExpressionSingleContext;

HiveParser.prototype.groupingExpressionSingle = function () {
	var localctx = new GroupingExpressionSingleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 660, HiveParser.RULE_groupingExpressionSingle);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3882;
		this.expression(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function HavingClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_havingClause;
	return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.KW_HAVING = function () {
	return this.getToken(HiveParser.KW_HAVING, 0);
};

HavingClauseContext.prototype.havingCondition = function () {
	return this.getTypedRuleContext(HavingConditionContext, 0);
};

HavingClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitHavingClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.HavingClauseContext = HavingClauseContext;

HiveParser.prototype.havingClause = function () {
	var localctx = new HavingClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 662, HiveParser.RULE_havingClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3884;
		this.match(HiveParser.KW_HAVING);
		this.state = 3885;
		this.havingCondition();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function HavingConditionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_havingCondition;
	return this;
}

HavingConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingConditionContext.prototype.constructor = HavingConditionContext;

HavingConditionContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

HavingConditionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitHavingCondition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.HavingConditionContext = HavingConditionContext;

HiveParser.prototype.havingCondition = function () {
	var localctx = new HavingConditionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 664, HiveParser.RULE_havingCondition);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3887;
		this.expression(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExpressionsInParenthesisContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_expressionsInParenthesis;
	return this;
}

ExpressionsInParenthesisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsInParenthesisContext.prototype.constructor = ExpressionsInParenthesisContext;

ExpressionsInParenthesisContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ExpressionsInParenthesisContext.prototype.expressionsNotInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0);
};

ExpressionsInParenthesisContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ExpressionsInParenthesisContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExpressionsInParenthesis(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExpressionsInParenthesisContext = ExpressionsInParenthesisContext;

HiveParser.prototype.expressionsInParenthesis = function () {
	var localctx = new ExpressionsInParenthesisContext(this, this._ctx, this.state);
	this.enterRule(localctx, 666, HiveParser.RULE_expressionsInParenthesis);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3889;
		this.match(HiveParser.LPAREN);
		this.state = 3890;
		this.expressionsNotInParenthesis();
		this.state = 3891;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExpressionsNotInParenthesisContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_expressionsNotInParenthesis;
	return this;
}

ExpressionsNotInParenthesisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsNotInParenthesisContext.prototype.constructor = ExpressionsNotInParenthesisContext;

ExpressionsNotInParenthesisContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

ExpressionsNotInParenthesisContext.prototype.expressionPart = function () {
	return this.getTypedRuleContext(ExpressionPartContext, 0);
};

ExpressionsNotInParenthesisContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExpressionsNotInParenthesis(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExpressionsNotInParenthesisContext = ExpressionsNotInParenthesisContext;

HiveParser.prototype.expressionsNotInParenthesis = function () {
	var localctx = new ExpressionsNotInParenthesisContext(this, this._ctx, this.state);
	this.enterRule(localctx, 668, HiveParser.RULE_expressionsNotInParenthesis);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3893;
		this.expression(0);
		this.state = 3895;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.COMMA) {
			this.state = 3894;
			this.expressionPart();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExpressionPartContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_expressionPart;
	return this;
}

ExpressionPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionPartContext.prototype.constructor = ExpressionPartContext;

ExpressionPartContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ExpressionPartContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

ExpressionPartContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExpressionPart(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExpressionPartContext = ExpressionPartContext;

HiveParser.prototype.expressionPart = function () {
	var localctx = new ExpressionPartContext(this, this._ctx, this.state);
	this.enterRule(localctx, 670, HiveParser.RULE_expressionPart);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3899;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 3897;
			this.match(HiveParser.COMMA);
			this.state = 3898;
			this.expression(0);
			this.state = 3901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === HiveParser.COMMA);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExpressionsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_expressions;
	return this;
}

ExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsContext.prototype.constructor = ExpressionsContext;

ExpressionsContext.prototype.expressionsInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
};

ExpressionsContext.prototype.expressionsNotInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0);
};

ExpressionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExpressions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExpressionsContext = ExpressionsContext;

HiveParser.prototype.expressions = function () {
	var localctx = new ExpressionsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 672, HiveParser.RULE_expressions);
	try {
		this.state = 3905;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 462, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 3903;
				this.expressionsInParenthesis();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 3904;
				this.expressionsNotInParenthesis();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnRefOrderInParenthesisContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnRefOrderInParenthesis;
	return this;
}

ColumnRefOrderInParenthesisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnRefOrderInParenthesisContext.prototype.constructor = ColumnRefOrderInParenthesisContext;

ColumnRefOrderInParenthesisContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ColumnRefOrderInParenthesisContext.prototype.columnRefOrder = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnRefOrderContext);
	} else {
		return this.getTypedRuleContext(ColumnRefOrderContext, i);
	}
};

ColumnRefOrderInParenthesisContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ColumnRefOrderInParenthesisContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnRefOrderInParenthesisContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnRefOrderInParenthesis(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnRefOrderInParenthesisContext = ColumnRefOrderInParenthesisContext;

HiveParser.prototype.columnRefOrderInParenthesis = function () {
	var localctx = new ColumnRefOrderInParenthesisContext(this, this._ctx, this.state);
	this.enterRule(localctx, 674, HiveParser.RULE_columnRefOrderInParenthesis);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3907;
		this.match(HiveParser.LPAREN);
		this.state = 3908;
		this.columnRefOrder();
		this.state = 3913;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3909;
			this.match(HiveParser.COMMA);
			this.state = 3910;
			this.columnRefOrder();
			this.state = 3915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 3916;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ColumnRefOrderNotInParenthesisContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_columnRefOrderNotInParenthesis;
	return this;
}

ColumnRefOrderNotInParenthesisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnRefOrderNotInParenthesisContext.prototype.constructor = ColumnRefOrderNotInParenthesisContext;

ColumnRefOrderNotInParenthesisContext.prototype.columnRefOrder = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnRefOrderContext);
	} else {
		return this.getTypedRuleContext(ColumnRefOrderContext, i);
	}
};

ColumnRefOrderNotInParenthesisContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

ColumnRefOrderNotInParenthesisContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitColumnRefOrderNotInParenthesis(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ColumnRefOrderNotInParenthesisContext = ColumnRefOrderNotInParenthesisContext;

HiveParser.prototype.columnRefOrderNotInParenthesis = function () {
	var localctx = new ColumnRefOrderNotInParenthesisContext(this, this._ctx, this.state);
	this.enterRule(localctx, 676, HiveParser.RULE_columnRefOrderNotInParenthesis);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3918;
		this.columnRefOrder();
		this.state = 3923;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3919;
			this.match(HiveParser.COMMA);
			this.state = 3920;
			this.columnRefOrder();
			this.state = 3925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OrderByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_orderByClause;
	return this;
}

OrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.KW_ORDER = function () {
	return this.getToken(HiveParser.KW_ORDER, 0);
};

OrderByClauseContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

OrderByClauseContext.prototype.columnRefOrder = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ColumnRefOrderContext);
	} else {
		return this.getTypedRuleContext(ColumnRefOrderContext, i);
	}
};

OrderByClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

OrderByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitOrderByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.OrderByClauseContext = OrderByClauseContext;

HiveParser.prototype.orderByClause = function () {
	var localctx = new OrderByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 678, HiveParser.RULE_orderByClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3926;
		this.match(HiveParser.KW_ORDER);
		this.state = 3927;
		this.match(HiveParser.KW_BY);
		this.state = 3928;
		this.columnRefOrder();
		this.state = 3933;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 3929;
			this.match(HiveParser.COMMA);
			this.state = 3930;
			this.columnRefOrder();
			this.state = 3935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ClusterByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_clusterByClause;
	return this;
}

ClusterByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusterByClauseContext.prototype.constructor = ClusterByClauseContext;

ClusterByClauseContext.prototype.KW_CLUSTER = function () {
	return this.getToken(HiveParser.KW_CLUSTER, 0);
};

ClusterByClauseContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

ClusterByClauseContext.prototype.expressions = function () {
	return this.getTypedRuleContext(ExpressionsContext, 0);
};

ClusterByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitClusterByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ClusterByClauseContext = ClusterByClauseContext;

HiveParser.prototype.clusterByClause = function () {
	var localctx = new ClusterByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 680, HiveParser.RULE_clusterByClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3936;
		this.match(HiveParser.KW_CLUSTER);
		this.state = 3937;
		this.match(HiveParser.KW_BY);
		this.state = 3938;
		this.expressions();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitionByClause;
	return this;
}

PartitionByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionByClauseContext.prototype.constructor = PartitionByClauseContext;

PartitionByClauseContext.prototype.KW_PARTITION = function () {
	return this.getToken(HiveParser.KW_PARTITION, 0);
};

PartitionByClauseContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

PartitionByClauseContext.prototype.expressions = function () {
	return this.getTypedRuleContext(ExpressionsContext, 0);
};

PartitionByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitionByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitionByClauseContext = PartitionByClauseContext;

HiveParser.prototype.partitionByClause = function () {
	var localctx = new PartitionByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 682, HiveParser.RULE_partitionByClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3940;
		this.match(HiveParser.KW_PARTITION);
		this.state = 3941;
		this.match(HiveParser.KW_BY);
		this.state = 3942;
		this.expressions();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DistributeByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_distributeByClause;
	return this;
}

DistributeByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DistributeByClauseContext.prototype.constructor = DistributeByClauseContext;

DistributeByClauseContext.prototype.KW_DISTRIBUTE = function () {
	return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
};

DistributeByClauseContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

DistributeByClauseContext.prototype.expressions = function () {
	return this.getTypedRuleContext(ExpressionsContext, 0);
};

DistributeByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDistributeByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DistributeByClauseContext = DistributeByClauseContext;

HiveParser.prototype.distributeByClause = function () {
	var localctx = new DistributeByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 684, HiveParser.RULE_distributeByClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3944;
		this.match(HiveParser.KW_DISTRIBUTE);
		this.state = 3945;
		this.match(HiveParser.KW_BY);
		this.state = 3946;
		this.expressions();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SortByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_sortByClause;
	return this;
}

SortByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortByClauseContext.prototype.constructor = SortByClauseContext;

SortByClauseContext.prototype.KW_SORT = function () {
	return this.getToken(HiveParser.KW_SORT, 0);
};

SortByClauseContext.prototype.KW_BY = function () {
	return this.getToken(HiveParser.KW_BY, 0);
};

SortByClauseContext.prototype.columnRefOrderInParenthesis = function () {
	return this.getTypedRuleContext(ColumnRefOrderInParenthesisContext, 0);
};

SortByClauseContext.prototype.columnRefOrderNotInParenthesis = function () {
	return this.getTypedRuleContext(ColumnRefOrderNotInParenthesisContext, 0);
};

SortByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSortByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SortByClauseContext = SortByClauseContext;

HiveParser.prototype.sortByClause = function () {
	var localctx = new SortByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 686, HiveParser.RULE_sortByClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3948;
		this.match(HiveParser.KW_SORT);
		this.state = 3949;
		this.match(HiveParser.KW_BY);
		this.state = 3952;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 466, this._ctx);
		switch (la_) {
			case 1:
				this.state = 3950;
				this.columnRefOrderInParenthesis();
				break;

			case 2:
				this.state = 3951;
				this.columnRefOrderNotInParenthesis();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FunctionStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_functionStatement;
	return this;
}

FunctionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionStatementContext.prototype.constructor = FunctionStatementContext;

FunctionStatementContext.prototype.functionName = function () {
	return this.getTypedRuleContext(FunctionNameContext, 0);
};

FunctionStatementContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

FunctionStatementContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

FunctionStatementContext.prototype.STAR = function () {
	return this.getToken(HiveParser.STAR, 0);
};

FunctionStatementContext.prototype.KW_OVER = function () {
	return this.getToken(HiveParser.KW_OVER, 0);
};

FunctionStatementContext.prototype.window_specification = function () {
	return this.getTypedRuleContext(Window_specificationContext, 0);
};

FunctionStatementContext.prototype.selectExpression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SelectExpressionContext);
	} else {
		return this.getTypedRuleContext(SelectExpressionContext, i);
	}
};

FunctionStatementContext.prototype.KW_DISTINCT = function () {
	return this.getToken(HiveParser.KW_DISTINCT, 0);
};

FunctionStatementContext.prototype.KW_ALL = function () {
	return this.getToken(HiveParser.KW_ALL, 0);
};

FunctionStatementContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

FunctionStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFunctionStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FunctionStatementContext = FunctionStatementContext;

HiveParser.prototype.functionStatement = function () {
	var localctx = new FunctionStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 688, HiveParser.RULE_functionStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3954;
		this.functionName();
		this.state = 3955;
		this.match(HiveParser.LPAREN);
		this.state = 3970;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 470, this._ctx);
		switch (la_) {
			case 1:
				this.state = 3956;
				this.match(HiveParser.STAR);
				break;

			case 2:
				this.state = 3958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT) {
					this.state = 3957;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}

				this.state = 3968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					((_la & ~0x1f) == 0 &&
						((1 << _la) &
							((1 << HiveParser.KW_TRUE) |
								(1 << HiveParser.KW_FALSE) |
								(1 << HiveParser.KW_NOT) |
								(1 << HiveParser.KW_IF) |
								(1 << HiveParser.KW_EXISTS) |
								(1 << HiveParser.KW_ASC) |
								(1 << HiveParser.KW_DESC) |
								(1 << HiveParser.KW_NULLS) |
								(1 << HiveParser.KW_LAST) |
								(1 << HiveParser.KW_OVERWRITE))) !==
							0) ||
					(((_la - 36) & ~0x1f) == 0 &&
						((1 << (_la - 36)) &
							((1 << (HiveParser.KW_PARTITIONS - 36)) |
								(1 << (HiveParser.KW_TABLES - 36)) |
								(1 << (HiveParser.KW_COLUMNS - 36)) |
								(1 << (HiveParser.KW_INDEX - 36)) |
								(1 << (HiveParser.KW_INDEXES - 36)) |
								(1 << (HiveParser.KW_REBUILD - 36)) |
								(1 << (HiveParser.KW_FUNCTIONS - 36)) |
								(1 << (HiveParser.KW_SHOW - 36)) |
								(1 << (HiveParser.KW_MSCK - 36)) |
								(1 << (HiveParser.KW_REPAIR - 36)) |
								(1 << (HiveParser.KW_DIRECTORY - 36)) |
								(1 << (HiveParser.KW_CLUSTER - 36)) |
								(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
								(1 << (HiveParser.KW_SORT - 36)) |
								(1 << (HiveParser.KW_LOAD - 36)) |
								(1 << (HiveParser.KW_EXPORT - 36)) |
								(1 << (HiveParser.KW_REPLICATION - 36)) |
								(1 << (HiveParser.KW_METADATA - 36)) |
								(1 << (HiveParser.KW_DATA - 36)) |
								(1 << (HiveParser.KW_INPATH - 36)) |
								(1 << (HiveParser.KW_NULL - 36)))) !==
							0) ||
					(((_la - 68) & ~0x1f) == 0 &&
						((1 << (_la - 68)) &
							((1 << (HiveParser.KW_CHANGE - 68)) |
								(1 << (HiveParser.KW_FIRST - 68)) |
								(1 << (HiveParser.KW_AFTER - 68)) |
								(1 << (HiveParser.KW_RENAME - 68)) |
								(1 << (HiveParser.KW_COMMENT - 68)) |
								(1 << (HiveParser.KW_BOOLEAN - 68)) |
								(1 << (HiveParser.KW_TINYINT - 68)) |
								(1 << (HiveParser.KW_SMALLINT - 68)) |
								(1 << (HiveParser.KW_INT - 68)) |
								(1 << (HiveParser.KW_BIGINT - 68)) |
								(1 << (HiveParser.KW_FLOAT - 68)) |
								(1 << (HiveParser.KW_DOUBLE - 68)) |
								(1 << (HiveParser.KW_DATE - 68)) |
								(1 << (HiveParser.KW_DATETIME - 68)) |
								(1 << (HiveParser.KW_TIMESTAMP - 68)) |
								(1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) |
								(1 << (HiveParser.KW_ZONE - 68)) |
								(1 << (HiveParser.KW_INTERVAL - 68)) |
								(1 << (HiveParser.KW_STRING - 68)) |
								(1 << (HiveParser.KW_ARRAY - 68)) |
								(1 << (HiveParser.KW_STRUCT - 68)) |
								(1 << (HiveParser.KW_MAP - 68)) |
								(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
							0) ||
					(((_la - 101) & ~0x1f) == 0 &&
						((1 << (_la - 101)) &
							((1 << (HiveParser.KW_PARTITIONED - 101)) |
								(1 << (HiveParser.KW_CLUSTERED - 101)) |
								(1 << (HiveParser.KW_SORTED - 101)) |
								(1 << (HiveParser.KW_BUCKETS - 101)) |
								(1 << (HiveParser.KW_FORMAT - 101)) |
								(1 << (HiveParser.KW_DELIMITED - 101)) |
								(1 << (HiveParser.KW_FIELDS - 101)) |
								(1 << (HiveParser.KW_TERMINATED - 101)) |
								(1 << (HiveParser.KW_ESCAPED - 101)) |
								(1 << (HiveParser.KW_COLLECTION - 101)) |
								(1 << (HiveParser.KW_ITEMS - 101)) |
								(1 << (HiveParser.KW_KEYS - 101)) |
								(1 << (HiveParser.KW_KEY_TYPE - 101)) |
								(1 << (HiveParser.KW_KILL - 101)) |
								(1 << (HiveParser.KW_LINES - 101)) |
								(1 << (HiveParser.KW_STORED - 101)) |
								(1 << (HiveParser.KW_FILEFORMAT - 101)) |
								(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
								(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
								(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
								(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
								(1 << (HiveParser.KW_ENABLE - 101)) |
								(1 << (HiveParser.KW_DISABLE - 101)) |
								(1 << (HiveParser.KW_LOCATION - 101)) |
								(1 << (HiveParser.KW_BUCKET - 101)))) !==
							0) ||
					(((_la - 133) & ~0x1f) == 0 &&
						((1 << (_la - 133)) &
							((1 << (HiveParser.KW_CAST - 133)) |
								(1 << (HiveParser.KW_ADD - 133)) |
								(1 << (HiveParser.KW_REPLACE - 133)) |
								(1 << (HiveParser.KW_TEMPORARY - 133)) |
								(1 << (HiveParser.KW_FILE - 133)) |
								(1 << (HiveParser.KW_JAR - 133)) |
								(1 << (HiveParser.KW_EXPLAIN - 133)) |
								(1 << (HiveParser.KW_FORMATTED - 133)) |
								(1 << (HiveParser.KW_DEPENDENCY - 133)) |
								(1 << (HiveParser.KW_LOGICAL - 133)) |
								(1 << (HiveParser.KW_SERDE - 133)) |
								(1 << (HiveParser.KW_DEFERRED - 133)) |
								(1 << (HiveParser.KW_SERDEPROPERTIES - 133)) |
								(1 << (HiveParser.KW_DBPROPERTIES - 133)) |
								(1 << (HiveParser.KW_LIMIT - 133)) |
								(1 << (HiveParser.KW_OFFSET - 133)) |
								(1 << (HiveParser.KW_UNSET - 133)) |
								(1 << (HiveParser.KW_TBLPROPERTIES - 133)) |
								(1 << (HiveParser.KW_IDXPROPERTIES - 133)) |
								(1 << (HiveParser.KW_VALUE_TYPE - 133)) |
								(1 << (HiveParser.KW_ELEM_TYPE - 133)) |
								(1 << (HiveParser.KW_DEFINED - 133)) |
								(1 << (HiveParser.KW_CASE - 133)))) !==
							0) ||
					(((_la - 167) & ~0x1f) == 0 &&
						((1 << (_la - 167)) &
							((1 << (HiveParser.KW_MAPJOIN - 167)) |
								(1 << (HiveParser.KW_STREAMTABLE - 167)) |
								(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
								(1 << (HiveParser.KW_UTC - 167)) |
								(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
								(1 << (HiveParser.KW_LONG - 167)) |
								(1 << (HiveParser.KW_PLUS - 167)) |
								(1 << (HiveParser.KW_VIEW - 167)) |
								(1 << (HiveParser.KW_VIEWS - 167)) |
								(1 << (HiveParser.KW_DATABASES - 167)) |
								(1 << (HiveParser.KW_MATERIALIZED - 167)) |
								(1 << (HiveParser.KW_SCHEMA - 167)) |
								(1 << (HiveParser.KW_SCHEMAS - 167)) |
								(1 << (HiveParser.KW_SSL - 167)) |
								(1 << (HiveParser.KW_UNDO - 167)) |
								(1 << (HiveParser.KW_LOCK - 167)) |
								(1 << (HiveParser.KW_LOCKS - 167)) |
								(1 << (HiveParser.KW_UNLOCK - 167)) |
								(1 << (HiveParser.KW_SHARED - 167)) |
								(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
								(1 << (HiveParser.KW_UNSIGNED - 167)) |
								(1 << (HiveParser.KW_WHILE - 167)) |
								(1 << (HiveParser.KW_READ - 167)))) !==
							0) ||
					(((_la - 200) & ~0x1f) == 0 &&
						((1 << (_la - 200)) &
							((1 << (HiveParser.KW_PURGE - 200)) |
								(1 << (HiveParser.KW_ANALYZE - 200)) |
								(1 << (HiveParser.KW_BEFORE - 200)) |
								(1 << (HiveParser.KW_BINARY - 200)) |
								(1 << (HiveParser.KW_CONTINUE - 200)) |
								(1 << (HiveParser.KW_RECORDREADER - 200)) |
								(1 << (HiveParser.KW_RECORDWRITER - 200)) |
								(1 << (HiveParser.KW_SEMI - 200)) |
								(1 << (HiveParser.KW_TOUCH - 200)) |
								(1 << (HiveParser.KW_ARCHIVE - 200)) |
								(1 << (HiveParser.KW_UNARCHIVE - 200)) |
								(1 << (HiveParser.KW_COMPUTE - 200)) |
								(1 << (HiveParser.KW_STATISTICS - 200)) |
								(1 << (HiveParser.KW_USE - 200)) |
								(1 << (HiveParser.KW_OPTION - 200)) |
								(1 << (HiveParser.KW_CONCATENATE - 200)) |
								(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
								(1 << (HiveParser.KW_RESTRICT - 200)) |
								(1 << (HiveParser.KW_CASCADE - 200)) |
								(1 << (HiveParser.KW_SKEWED - 200)) |
								(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
							0) ||
					(((_la - 238) & ~0x1f) == 0 &&
						((1 << (_la - 238)) &
							((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
								(1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
								(1 << (HiveParser.KW_GROUPING - 238)) |
								(1 << (HiveParser.KW_SETS - 238)) |
								(1 << (HiveParser.KW_NOSCAN - 238)) |
								(1 << (HiveParser.KW_ROLE - 238)) |
								(1 << (HiveParser.KW_ROLES - 238)) |
								(1 << (HiveParser.KW_URI - 238)) |
								(1 << (HiveParser.KW_SERVER - 238)) |
								(1 << (HiveParser.KW_ADMIN - 238)) |
								(1 << (HiveParser.KW_OWNER - 238)) |
								(1 << (HiveParser.KW_PRINCIPALS - 238)) |
								(1 << (HiveParser.KW_COMPACT - 238)) |
								(1 << (HiveParser.KW_COMPACTIONS - 238)) |
								(1 << (HiveParser.KW_TRANSACTIONS - 238)) |
								(1 << (HiveParser.KW_REWRITE - 238)) |
								(1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
								(1 << (HiveParser.KW_RELOAD - 238)) |
								(1 << (HiveParser.KW_YEAR - 238)) |
								(1 << (HiveParser.KW_QUERY - 238)) |
								(1 << (HiveParser.KW_QUARTER - 238)) |
								(1 << (HiveParser.KW_MONTH - 238)))) !==
							0) ||
					(((_la - 270) & ~0x1f) == 0 &&
						((1 << (_la - 270)) &
							((1 << (HiveParser.KW_WEEK - 270)) |
								(1 << (HiveParser.KW_DAY - 270)) |
								(1 << (HiveParser.KW_DOW - 270)) |
								(1 << (HiveParser.KW_HOUR - 270)) |
								(1 << (HiveParser.KW_MINUTE - 270)) |
								(1 << (HiveParser.KW_SECOND - 270)) |
								(1 << (HiveParser.KW_TRANSACTION - 270)) |
								(1 << (HiveParser.KW_WORK - 270)) |
								(1 << (HiveParser.KW_WRITE - 270)) |
								(1 << (HiveParser.KW_ISOLATION - 270)) |
								(1 << (HiveParser.KW_LEVEL - 270)) |
								(1 << (HiveParser.KW_SNAPSHOT - 270)) |
								(1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
								(1 << (HiveParser.KW_CACHE - 270)) |
								(1 << (HiveParser.KW_ENFORCED - 270)) |
								(1 << (HiveParser.KW_VALIDATE - 270)) |
								(1 << (HiveParser.KW_NOVALIDATE - 270)) |
								(1 << (HiveParser.KW_RELY - 270)) |
								(1 << (HiveParser.KW_NORELY - 270)) |
								(1 << (HiveParser.KW_KEY - 270)) |
								(1 << (HiveParser.KW_ABORT - 270)) |
								(1 << (HiveParser.KW_EXTRACT - 270)) |
								(1 << (HiveParser.KW_FLOOR - 270)))) !==
							0) ||
					(((_la - 303) & ~0x1f) == 0 &&
						((1 << (_la - 303)) &
							((1 << (HiveParser.KW_MATCHED - 303)) |
								(1 << (HiveParser.KW_REPL - 303)) |
								(1 << (HiveParser.KW_DUMP - 303)) |
								(1 << (HiveParser.KW_STATUS - 303)) |
								(1 << (HiveParser.KW_VECTORIZATION - 303)) |
								(1 << (HiveParser.KW_SUMMARY - 303)) |
								(1 << (HiveParser.KW_OPERATOR - 303)) |
								(1 << (HiveParser.KW_EXPRESSION - 303)) |
								(1 << (HiveParser.KW_DETAIL - 303)) |
								(1 << (HiveParser.KW_WAIT - 303)) |
								(1 << (HiveParser.KW_RESOURCE - 303)) |
								(1 << (HiveParser.KW_PLAN - 303)) |
								(1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
								(1 << (HiveParser.KW_PLANS - 303)) |
								(1 << (HiveParser.KW_ACTIVATE - 303)) |
								(1 << (HiveParser.KW_DEFAULT - 303)) |
								(1 << (HiveParser.KW_CHECK - 303)) |
								(1 << (HiveParser.KW_POOL - 303)) |
								(1 << (HiveParser.KW_MOVE - 303)) |
								(1 << (HiveParser.KW_DO - 303)) |
								(1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
								(1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
								(1 << (HiveParser.KW_PATH - 303)) |
								(1 << (HiveParser.KW_MAPPING - 303)) |
								(1 << (HiveParser.KW_WORKLOAD - 303)) |
								(1 << (HiveParser.KW_MANAGEMENT - 303)) |
								(1 << (HiveParser.KW_ACTIVE - 303)) |
								(1 << (HiveParser.KW_UNMANAGED - 303)))) !==
							0) ||
					(((_la - 338) & ~0x1f) == 0 &&
						((1 << (_la - 338)) &
							((1 << (HiveParser.KW_DELTA - 338)) |
								(1 << (HiveParser.KW_CSV - 338)) |
								(1 << (HiveParser.KW_JSON - 338)) |
								(1 << (HiveParser.KW_BLOOMFILTER - 338)) |
								(1 << (HiveParser.LPAREN - 338)) |
								(1 << (HiveParser.PLUS - 338)) |
								(1 << (HiveParser.MINUS - 338)) |
								(1 << (HiveParser.STAR - 338)) |
								(1 << (HiveParser.TILDE - 338)))) !==
							0) ||
					(((_la - 374) & ~0x1f) == 0 &&
						((1 << (_la - 374)) &
							((1 << (HiveParser.StringLiteral - 374)) |
								(1 << (HiveParser.IntegralLiteral - 374)) |
								(1 << (HiveParser.NumberLiteral - 374)) |
								(1 << (HiveParser.Number - 374)) |
								(1 << (HiveParser.Identifier - 374)) |
								(1 << (HiveParser.CharSetName - 374)))) !==
							0)
				) {
					this.state = 3960;
					this.selectExpression();
					this.state = 3965;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveParser.COMMA) {
						this.state = 3961;
						this.match(HiveParser.COMMA);
						this.state = 3962;
						this.selectExpression();
						this.state = 3967;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
				}

				break;
		}
		this.state = 3972;
		this.match(HiveParser.RPAREN);
		this.state = 3975;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 471, this._ctx);
		if (la_ === 1) {
			this.state = 3973;
			this.match(HiveParser.KW_OVER);
			this.state = 3974;
			this.window_specification();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FunctionNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_functionName;
	return this;
}

FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionNameContext.prototype.constructor = FunctionNameContext;

FunctionNameContext.prototype.functionIdentifier = function () {
	return this.getTypedRuleContext(FunctionIdentifierContext, 0);
};

FunctionNameContext.prototype.sql11ReservedKeywordsUsedAsFunctionName = function () {
	return this.getTypedRuleContext(Sql11ReservedKeywordsUsedAsFunctionNameContext, 0);
};

FunctionNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFunctionName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FunctionNameContext = FunctionNameContext;

HiveParser.prototype.functionName = function () {
	var localctx = new FunctionNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 690, HiveParser.RULE_functionName);
	try {
		this.state = 3979;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 1);
				this.state = 3977;
				this.functionIdentifier();
				break;
			case HiveParser.KW_IF:
			case HiveParser.KW_BOOLEAN:
			case HiveParser.KW_SMALLINT:
			case HiveParser.KW_INT:
			case HiveParser.KW_BIGINT:
			case HiveParser.KW_FLOAT:
			case HiveParser.KW_DOUBLE:
			case HiveParser.KW_DATE:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_ARRAY:
			case HiveParser.KW_MAP:
			case HiveParser.KW_BINARY:
			case HiveParser.KW_CURRENT_DATE:
			case HiveParser.KW_CURRENT_TIMESTAMP:
			case HiveParser.KW_GROUPING:
				this.enterOuterAlt(localctx, 2);
				this.state = 3978;
				this.sql11ReservedKeywordsUsedAsFunctionName();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CastExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_castExpression;
	return this;
}

CastExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.KW_CAST = function () {
	return this.getToken(HiveParser.KW_CAST, 0);
};

CastExpressionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

CastExpressionContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

CastExpressionContext.prototype.KW_AS = function () {
	return this.getToken(HiveParser.KW_AS, 0);
};

CastExpressionContext.prototype.primitiveType = function () {
	return this.getTypedRuleContext(PrimitiveTypeContext, 0);
};

CastExpressionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

CastExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCastExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CastExpressionContext = CastExpressionContext;

HiveParser.prototype.castExpression = function () {
	var localctx = new CastExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 692, HiveParser.RULE_castExpression);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3981;
		this.match(HiveParser.KW_CAST);
		this.state = 3982;
		this.match(HiveParser.LPAREN);
		this.state = 3983;
		this.expression(0);
		this.state = 3984;
		this.match(HiveParser.KW_AS);
		this.state = 3985;
		this.primitiveType();
		this.state = 3986;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CaseExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_caseExpression;
	return this;
}

CaseExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseExpressionContext.prototype.constructor = CaseExpressionContext;

CaseExpressionContext.prototype.KW_CASE = function () {
	return this.getToken(HiveParser.KW_CASE, 0);
};

CaseExpressionContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

CaseExpressionContext.prototype.KW_END = function () {
	return this.getToken(HiveParser.KW_END, 0);
};

CaseExpressionContext.prototype.KW_WHEN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_WHEN);
	} else {
		return this.getToken(HiveParser.KW_WHEN, i);
	}
};

CaseExpressionContext.prototype.KW_THEN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_THEN);
	} else {
		return this.getToken(HiveParser.KW_THEN, i);
	}
};

CaseExpressionContext.prototype.KW_ELSE = function () {
	return this.getToken(HiveParser.KW_ELSE, 0);
};

CaseExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCaseExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CaseExpressionContext = CaseExpressionContext;

HiveParser.prototype.caseExpression = function () {
	var localctx = new CaseExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 694, HiveParser.RULE_caseExpression);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 3988;
		this.match(HiveParser.KW_CASE);
		this.state = 3989;
		this.expression(0);
		this.state = 3995;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 3990;
			this.match(HiveParser.KW_WHEN);
			this.state = 3991;
			this.expression(0);
			this.state = 3992;
			this.match(HiveParser.KW_THEN);
			this.state = 3993;
			this.expression(0);
			this.state = 3997;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === HiveParser.KW_WHEN);
		this.state = 4001;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ELSE) {
			this.state = 3999;
			this.match(HiveParser.KW_ELSE);
			this.state = 4000;
			this.expression(0);
		}

		this.state = 4003;
		this.match(HiveParser.KW_END);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WhenExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_whenExpression;
	return this;
}

WhenExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenExpressionContext.prototype.constructor = WhenExpressionContext;

WhenExpressionContext.prototype.KW_CASE = function () {
	return this.getToken(HiveParser.KW_CASE, 0);
};

WhenExpressionContext.prototype.KW_END = function () {
	return this.getToken(HiveParser.KW_END, 0);
};

WhenExpressionContext.prototype.KW_WHEN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_WHEN);
	} else {
		return this.getToken(HiveParser.KW_WHEN, i);
	}
};

WhenExpressionContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

WhenExpressionContext.prototype.KW_THEN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_THEN);
	} else {
		return this.getToken(HiveParser.KW_THEN, i);
	}
};

WhenExpressionContext.prototype.KW_ELSE = function () {
	return this.getToken(HiveParser.KW_ELSE, 0);
};

WhenExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWhenExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WhenExpressionContext = WhenExpressionContext;

HiveParser.prototype.whenExpression = function () {
	var localctx = new WhenExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 696, HiveParser.RULE_whenExpression);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4005;
		this.match(HiveParser.KW_CASE);
		this.state = 4011;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 4006;
			this.match(HiveParser.KW_WHEN);
			this.state = 4007;
			this.expression(0);
			this.state = 4008;
			this.match(HiveParser.KW_THEN);
			this.state = 4009;
			this.expression(0);
			this.state = 4013;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === HiveParser.KW_WHEN);
		this.state = 4017;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_ELSE) {
			this.state = 4015;
			this.match(HiveParser.KW_ELSE);
			this.state = 4016;
			this.expression(0);
		}

		this.state = 4019;
		this.match(HiveParser.KW_END);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FloorExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_floorExpression;
	return this;
}

FloorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloorExpressionContext.prototype.constructor = FloorExpressionContext;

FloorExpressionContext.prototype.KW_FLOOR = function () {
	return this.getToken(HiveParser.KW_FLOOR, 0);
};

FloorExpressionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

FloorExpressionContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

FloorExpressionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

FloorExpressionContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

FloorExpressionContext.prototype.floorDateQualifiers = function () {
	return this.getTypedRuleContext(FloorDateQualifiersContext, 0);
};

FloorExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFloorExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FloorExpressionContext = FloorExpressionContext;

HiveParser.prototype.floorExpression = function () {
	var localctx = new FloorExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 698, HiveParser.RULE_floorExpression);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4021;
		this.match(HiveParser.KW_FLOOR);
		this.state = 4022;
		this.match(HiveParser.LPAREN);
		this.state = 4023;
		this.expression(0);
		this.state = 4026;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_TO) {
			this.state = 4024;
			this.match(HiveParser.KW_TO);
			this.state = 4025;
			this.floorDateQualifiers();
		}

		this.state = 4028;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FloorDateQualifiersContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_floorDateQualifiers;
	return this;
}

FloorDateQualifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloorDateQualifiersContext.prototype.constructor = FloorDateQualifiersContext;

FloorDateQualifiersContext.prototype.KW_YEAR = function () {
	return this.getToken(HiveParser.KW_YEAR, 0);
};

FloorDateQualifiersContext.prototype.KW_QUARTER = function () {
	return this.getToken(HiveParser.KW_QUARTER, 0);
};

FloorDateQualifiersContext.prototype.KW_MONTH = function () {
	return this.getToken(HiveParser.KW_MONTH, 0);
};

FloorDateQualifiersContext.prototype.KW_WEEK = function () {
	return this.getToken(HiveParser.KW_WEEK, 0);
};

FloorDateQualifiersContext.prototype.KW_DAY = function () {
	return this.getToken(HiveParser.KW_DAY, 0);
};

FloorDateQualifiersContext.prototype.KW_HOUR = function () {
	return this.getToken(HiveParser.KW_HOUR, 0);
};

FloorDateQualifiersContext.prototype.KW_MINUTE = function () {
	return this.getToken(HiveParser.KW_MINUTE, 0);
};

FloorDateQualifiersContext.prototype.KW_SECOND = function () {
	return this.getToken(HiveParser.KW_SECOND, 0);
};

FloorDateQualifiersContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFloorDateQualifiers(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FloorDateQualifiersContext = FloorDateQualifiersContext;

HiveParser.prototype.floorDateQualifiers = function () {
	var localctx = new FloorDateQualifiersContext(this, this._ctx, this.state);
	this.enterRule(localctx, 700, HiveParser.RULE_floorDateQualifiers);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4030;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 266) & ~0x1f) == 0 &&
				((1 << (_la - 266)) &
					((1 << (HiveParser.KW_YEAR - 266)) |
						(1 << (HiveParser.KW_QUARTER - 266)) |
						(1 << (HiveParser.KW_MONTH - 266)) |
						(1 << (HiveParser.KW_WEEK - 266)) |
						(1 << (HiveParser.KW_DAY - 266)) |
						(1 << (HiveParser.KW_HOUR - 266)) |
						(1 << (HiveParser.KW_MINUTE - 266)) |
						(1 << (HiveParser.KW_SECOND - 266)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExtractExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_extractExpression;
	return this;
}

ExtractExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtractExpressionContext.prototype.constructor = ExtractExpressionContext;

ExtractExpressionContext.prototype.KW_EXTRACT = function () {
	return this.getToken(HiveParser.KW_EXTRACT, 0);
};

ExtractExpressionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ExtractExpressionContext.prototype.timeQualifiers = function () {
	return this.getTypedRuleContext(TimeQualifiersContext, 0);
};

ExtractExpressionContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

ExtractExpressionContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

ExtractExpressionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ExtractExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExtractExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ExtractExpressionContext = ExtractExpressionContext;

HiveParser.prototype.extractExpression = function () {
	var localctx = new ExtractExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 702, HiveParser.RULE_extractExpression);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4032;
		this.match(HiveParser.KW_EXTRACT);
		this.state = 4033;
		this.match(HiveParser.LPAREN);
		this.state = 4034;
		this.timeQualifiers();
		this.state = 4035;
		this.match(HiveParser.KW_FROM);
		this.state = 4036;
		this.expression(0);
		this.state = 4037;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TimeQualifiersContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_timeQualifiers;
	return this;
}

TimeQualifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeQualifiersContext.prototype.constructor = TimeQualifiersContext;

TimeQualifiersContext.prototype.KW_YEAR = function () {
	return this.getToken(HiveParser.KW_YEAR, 0);
};

TimeQualifiersContext.prototype.KW_QUARTER = function () {
	return this.getToken(HiveParser.KW_QUARTER, 0);
};

TimeQualifiersContext.prototype.KW_MONTH = function () {
	return this.getToken(HiveParser.KW_MONTH, 0);
};

TimeQualifiersContext.prototype.KW_WEEK = function () {
	return this.getToken(HiveParser.KW_WEEK, 0);
};

TimeQualifiersContext.prototype.KW_DAY = function () {
	return this.getToken(HiveParser.KW_DAY, 0);
};

TimeQualifiersContext.prototype.KW_DOW = function () {
	return this.getToken(HiveParser.KW_DOW, 0);
};

TimeQualifiersContext.prototype.KW_HOUR = function () {
	return this.getToken(HiveParser.KW_HOUR, 0);
};

TimeQualifiersContext.prototype.KW_MINUTE = function () {
	return this.getToken(HiveParser.KW_MINUTE, 0);
};

TimeQualifiersContext.prototype.KW_SECOND = function () {
	return this.getToken(HiveParser.KW_SECOND, 0);
};

TimeQualifiersContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTimeQualifiers(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TimeQualifiersContext = TimeQualifiersContext;

HiveParser.prototype.timeQualifiers = function () {
	var localctx = new TimeQualifiersContext(this, this._ctx, this.state);
	this.enterRule(localctx, 704, HiveParser.RULE_timeQualifiers);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4039;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 266) & ~0x1f) == 0 &&
				((1 << (_la - 266)) &
					((1 << (HiveParser.KW_YEAR - 266)) |
						(1 << (HiveParser.KW_QUARTER - 266)) |
						(1 << (HiveParser.KW_MONTH - 266)) |
						(1 << (HiveParser.KW_WEEK - 266)) |
						(1 << (HiveParser.KW_DAY - 266)) |
						(1 << (HiveParser.KW_DOW - 266)) |
						(1 << (HiveParser.KW_HOUR - 266)) |
						(1 << (HiveParser.KW_MINUTE - 266)) |
						(1 << (HiveParser.KW_SECOND - 266)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_constant;
	return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.intervalLiteral = function () {
	return this.getTypedRuleContext(IntervalLiteralContext, 0);
};

ConstantContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

ConstantContext.prototype.dateLiteral = function () {
	return this.getTypedRuleContext(DateLiteralContext, 0);
};

ConstantContext.prototype.timestampLiteral = function () {
	return this.getTypedRuleContext(TimestampLiteralContext, 0);
};

ConstantContext.prototype.timestampLocalTZLiteral = function () {
	return this.getTypedRuleContext(TimestampLocalTZLiteralContext, 0);
};

ConstantContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

ConstantContext.prototype.stringLiteralSequence = function () {
	return this.getTypedRuleContext(StringLiteralSequenceContext, 0);
};

ConstantContext.prototype.IntegralLiteral = function () {
	return this.getToken(HiveParser.IntegralLiteral, 0);
};

ConstantContext.prototype.NumberLiteral = function () {
	return this.getToken(HiveParser.NumberLiteral, 0);
};

ConstantContext.prototype.charSetStringLiteral = function () {
	return this.getTypedRuleContext(CharSetStringLiteralContext, 0);
};

ConstantContext.prototype.booleanValue = function () {
	return this.getTypedRuleContext(BooleanValueContext, 0);
};

ConstantContext.prototype.KW_NULL = function () {
	return this.getToken(HiveParser.KW_NULL, 0);
};

ConstantContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitConstant(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ConstantContext = ConstantContext;

HiveParser.prototype.constant = function () {
	var localctx = new ConstantContext(this, this._ctx, this.state);
	this.enterRule(localctx, 706, HiveParser.RULE_constant);
	try {
		this.state = 4053;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 478, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4041;
				this.intervalLiteral();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4042;
				this.match(HiveParser.Number);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4043;
				this.dateLiteral();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 4044;
				this.timestampLiteral();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 4045;
				this.timestampLocalTZLiteral();
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 4046;
				this.match(HiveParser.StringLiteral);
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 4047;
				this.stringLiteralSequence();
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 4048;
				this.match(HiveParser.IntegralLiteral);
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 4049;
				this.match(HiveParser.NumberLiteral);
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 4050;
				this.charSetStringLiteral();
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 4051;
				this.booleanValue();
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 4052;
				this.match(HiveParser.KW_NULL);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StringLiteralSequenceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_stringLiteralSequence;
	return this;
}

StringLiteralSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralSequenceContext.prototype.constructor = StringLiteralSequenceContext;

StringLiteralSequenceContext.prototype.StringLiteral = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.StringLiteral);
	} else {
		return this.getToken(HiveParser.StringLiteral, i);
	}
};

StringLiteralSequenceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitStringLiteralSequence(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.StringLiteralSequenceContext = StringLiteralSequenceContext;

HiveParser.prototype.stringLiteralSequence = function () {
	var localctx = new StringLiteralSequenceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 708, HiveParser.RULE_stringLiteralSequence);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4055;
		this.match(HiveParser.StringLiteral);
		this.state = 4057;
		this._errHandler.sync(this);
		var _alt = 1;
		do {
			switch (_alt) {
				case 1:
					this.state = 4056;
					this.match(HiveParser.StringLiteral);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 4059;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 479, this._ctx);
		} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CharSetStringLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_charSetStringLiteral;
	return this;
}

CharSetStringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharSetStringLiteralContext.prototype.constructor = CharSetStringLiteralContext;

CharSetStringLiteralContext.prototype.CharSetName = function () {
	return this.getToken(HiveParser.CharSetName, 0);
};

CharSetStringLiteralContext.prototype.CharSetLiteral = function () {
	return this.getToken(HiveParser.CharSetLiteral, 0);
};

CharSetStringLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCharSetStringLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CharSetStringLiteralContext = CharSetStringLiteralContext;

HiveParser.prototype.charSetStringLiteral = function () {
	var localctx = new CharSetStringLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 710, HiveParser.RULE_charSetStringLiteral);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4061;
		this.match(HiveParser.CharSetName);
		this.state = 4062;
		this.match(HiveParser.CharSetLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DateLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dateLiteral;
	return this;
}

DateLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateLiteralContext.prototype.constructor = DateLiteralContext;

DateLiteralContext.prototype.KW_DATE = function () {
	return this.getToken(HiveParser.KW_DATE, 0);
};

DateLiteralContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

DateLiteralContext.prototype.KW_CURRENT_DATE = function () {
	return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
};

DateLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDateLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DateLiteralContext = DateLiteralContext;

HiveParser.prototype.dateLiteral = function () {
	var localctx = new DateLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 712, HiveParser.RULE_dateLiteral);
	try {
		this.state = 4067;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_DATE:
				this.enterOuterAlt(localctx, 1);
				this.state = 4064;
				this.match(HiveParser.KW_DATE);
				this.state = 4065;
				this.match(HiveParser.StringLiteral);
				break;
			case HiveParser.KW_CURRENT_DATE:
				this.enterOuterAlt(localctx, 2);
				this.state = 4066;
				this.match(HiveParser.KW_CURRENT_DATE);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TimestampLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_timestampLiteral;
	return this;
}

TimestampLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimestampLiteralContext.prototype.constructor = TimestampLiteralContext;

TimestampLiteralContext.prototype.KW_TIMESTAMP = function () {
	return this.getToken(HiveParser.KW_TIMESTAMP, 0);
};

TimestampLiteralContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TimestampLiteralContext.prototype.KW_CURRENT_TIMESTAMP = function () {
	return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
};

TimestampLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTimestampLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TimestampLiteralContext = TimestampLiteralContext;

HiveParser.prototype.timestampLiteral = function () {
	var localctx = new TimestampLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 714, HiveParser.RULE_timestampLiteral);
	try {
		this.state = 4072;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_TIMESTAMP:
				this.enterOuterAlt(localctx, 1);
				this.state = 4069;
				this.match(HiveParser.KW_TIMESTAMP);
				this.state = 4070;
				this.match(HiveParser.StringLiteral);
				break;
			case HiveParser.KW_CURRENT_TIMESTAMP:
				this.enterOuterAlt(localctx, 2);
				this.state = 4071;
				this.match(HiveParser.KW_CURRENT_TIMESTAMP);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TimestampLocalTZLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_timestampLocalTZLiteral;
	return this;
}

TimestampLocalTZLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimestampLocalTZLiteralContext.prototype.constructor = TimestampLocalTZLiteralContext;

TimestampLocalTZLiteralContext.prototype.KW_TIMESTAMPLOCALTZ = function () {
	return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
};

TimestampLocalTZLiteralContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TimestampLocalTZLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTimestampLocalTZLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TimestampLocalTZLiteralContext = TimestampLocalTZLiteralContext;

HiveParser.prototype.timestampLocalTZLiteral = function () {
	var localctx = new TimestampLocalTZLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 716, HiveParser.RULE_timestampLocalTZLiteral);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4074;
		this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
		this.state = 4075;
		this.match(HiveParser.StringLiteral);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IntervalValueContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_intervalValue;
	return this;
}

IntervalValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalValueContext.prototype.constructor = IntervalValueContext;

IntervalValueContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

IntervalValueContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

IntervalValueContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIntervalValue(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IntervalValueContext = IntervalValueContext;

HiveParser.prototype.intervalValue = function () {
	var localctx = new IntervalValueContext(this, this._ctx, this.state);
	this.enterRule(localctx, 718, HiveParser.RULE_intervalValue);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4077;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.StringLiteral || _la === HiveParser.Number)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IntervalLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_intervalLiteral;
	return this;
}

IntervalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;

IntervalLiteralContext.prototype.intervalValue = function () {
	return this.getTypedRuleContext(IntervalValueContext, 0);
};

IntervalLiteralContext.prototype.intervalQualifiers = function () {
	return this.getTypedRuleContext(IntervalQualifiersContext, 0);
};

IntervalLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIntervalLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IntervalLiteralContext = IntervalLiteralContext;

HiveParser.prototype.intervalLiteral = function () {
	var localctx = new IntervalLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 720, HiveParser.RULE_intervalLiteral);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4079;
		this.intervalValue();
		this.state = 4080;
		this.intervalQualifiers();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IntervalExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_intervalExpression;
	return this;
}

IntervalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalExpressionContext.prototype.constructor = IntervalExpressionContext;

IntervalExpressionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

IntervalExpressionContext.prototype.intervalValue = function () {
	return this.getTypedRuleContext(IntervalValueContext, 0);
};

IntervalExpressionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

IntervalExpressionContext.prototype.intervalQualifiers = function () {
	return this.getTypedRuleContext(IntervalQualifiersContext, 0);
};

IntervalExpressionContext.prototype.KW_INTERVAL = function () {
	return this.getToken(HiveParser.KW_INTERVAL, 0);
};

IntervalExpressionContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

IntervalExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIntervalExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IntervalExpressionContext = IntervalExpressionContext;

HiveParser.prototype.intervalExpression = function () {
	var localctx = new IntervalExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 722, HiveParser.RULE_intervalExpression);
	try {
		this.state = 4097;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 482, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4082;
				this.match(HiveParser.LPAREN);
				this.state = 4083;
				this.intervalValue();
				this.state = 4084;
				this.match(HiveParser.RPAREN);
				this.state = 4085;
				this.intervalQualifiers();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4087;
				this.match(HiveParser.KW_INTERVAL);
				this.state = 4088;
				this.intervalValue();
				this.state = 4089;
				this.intervalQualifiers();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4091;
				this.match(HiveParser.KW_INTERVAL);
				this.state = 4092;
				this.match(HiveParser.LPAREN);
				this.state = 4093;
				this.expression(0);
				this.state = 4094;
				this.match(HiveParser.RPAREN);
				this.state = 4095;
				this.intervalQualifiers();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IntervalQualifiersContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_intervalQualifiers;
	return this;
}

IntervalQualifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalQualifiersContext.prototype.constructor = IntervalQualifiersContext;

IntervalQualifiersContext.prototype.KW_YEAR = function () {
	return this.getToken(HiveParser.KW_YEAR, 0);
};

IntervalQualifiersContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

IntervalQualifiersContext.prototype.KW_MONTH = function () {
	return this.getToken(HiveParser.KW_MONTH, 0);
};

IntervalQualifiersContext.prototype.KW_DAY = function () {
	return this.getToken(HiveParser.KW_DAY, 0);
};

IntervalQualifiersContext.prototype.KW_SECOND = function () {
	return this.getToken(HiveParser.KW_SECOND, 0);
};

IntervalQualifiersContext.prototype.KW_HOUR = function () {
	return this.getToken(HiveParser.KW_HOUR, 0);
};

IntervalQualifiersContext.prototype.KW_MINUTE = function () {
	return this.getToken(HiveParser.KW_MINUTE, 0);
};

IntervalQualifiersContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIntervalQualifiers(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IntervalQualifiersContext = IntervalQualifiersContext;

HiveParser.prototype.intervalQualifiers = function () {
	var localctx = new IntervalQualifiersContext(this, this._ctx, this.state);
	this.enterRule(localctx, 724, HiveParser.RULE_intervalQualifiers);
	try {
		this.state = 4111;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 483, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4099;
				this.match(HiveParser.KW_YEAR);
				this.state = 4100;
				this.match(HiveParser.KW_TO);
				this.state = 4101;
				this.match(HiveParser.KW_MONTH);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4102;
				this.match(HiveParser.KW_DAY);
				this.state = 4103;
				this.match(HiveParser.KW_TO);
				this.state = 4104;
				this.match(HiveParser.KW_SECOND);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4105;
				this.match(HiveParser.KW_YEAR);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 4106;
				this.match(HiveParser.KW_MONTH);
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 4107;
				this.match(HiveParser.KW_DAY);
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 4108;
				this.match(HiveParser.KW_HOUR);
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 4109;
				this.match(HiveParser.KW_MINUTE);
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 4110;
				this.match(HiveParser.KW_SECOND);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AtomExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_atomExpression;
	return this;
}

AtomExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomExpressionContext.prototype.constructor = AtomExpressionContext;

AtomExpressionContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

AtomExpressionContext.prototype.intervalExpression = function () {
	return this.getTypedRuleContext(IntervalExpressionContext, 0);
};

AtomExpressionContext.prototype.castExpression = function () {
	return this.getTypedRuleContext(CastExpressionContext, 0);
};

AtomExpressionContext.prototype.extractExpression = function () {
	return this.getTypedRuleContext(ExtractExpressionContext, 0);
};

AtomExpressionContext.prototype.floorExpression = function () {
	return this.getTypedRuleContext(FloorExpressionContext, 0);
};

AtomExpressionContext.prototype.caseExpression = function () {
	return this.getTypedRuleContext(CaseExpressionContext, 0);
};

AtomExpressionContext.prototype.whenExpression = function () {
	return this.getTypedRuleContext(WhenExpressionContext, 0);
};

AtomExpressionContext.prototype.subQueryExpression = function () {
	return this.getTypedRuleContext(SubQueryExpressionContext, 0);
};

AtomExpressionContext.prototype.functionStatement = function () {
	return this.getTypedRuleContext(FunctionStatementContext, 0);
};

AtomExpressionContext.prototype.tableOrColumn = function () {
	return this.getTypedRuleContext(TableOrColumnContext, 0);
};

AtomExpressionContext.prototype.expressionsInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
};

AtomExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAtomExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AtomExpressionContext = AtomExpressionContext;

HiveParser.prototype.atomExpression = function () {
	var localctx = new AtomExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 726, HiveParser.RULE_atomExpression);
	try {
		this.state = 4124;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 484, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4113;
				this.constant();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4114;
				this.intervalExpression();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4115;
				this.castExpression();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 4116;
				this.extractExpression();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 4117;
				this.floorExpression();
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 4118;
				this.caseExpression();
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 4119;
				this.whenExpression();
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 4120;
				this.subQueryExpression();
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 4121;
				this.functionStatement();
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 4122;
				this.tableOrColumn();
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 4123;
				this.expressionsInParenthesis();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceUnaryOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceUnaryOperator;
	return this;
}

PrecedenceUnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceUnaryOperatorContext.prototype.constructor = PrecedenceUnaryOperatorContext;

PrecedenceUnaryOperatorContext.prototype.PLUS = function () {
	return this.getToken(HiveParser.PLUS, 0);
};

PrecedenceUnaryOperatorContext.prototype.MINUS = function () {
	return this.getToken(HiveParser.MINUS, 0);
};

PrecedenceUnaryOperatorContext.prototype.TILDE = function () {
	return this.getToken(HiveParser.TILDE, 0);
};

PrecedenceUnaryOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceUnaryOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceUnaryOperatorContext = PrecedenceUnaryOperatorContext;

HiveParser.prototype.precedenceUnaryOperator = function () {
	var localctx = new PrecedenceUnaryOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 728, HiveParser.RULE_precedenceUnaryOperator);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4126;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 362) & ~0x1f) == 0 &&
				((1 << (_la - 362)) &
					((1 << (HiveParser.PLUS - 362)) |
						(1 << (HiveParser.MINUS - 362)) |
						(1 << (HiveParser.TILDE - 362)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IsConditionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_isCondition;
	return this;
}

IsConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsConditionContext.prototype.constructor = IsConditionContext;

IsConditionContext.prototype.KW_NULL = function () {
	return this.getToken(HiveParser.KW_NULL, 0);
};

IsConditionContext.prototype.KW_TRUE = function () {
	return this.getToken(HiveParser.KW_TRUE, 0);
};

IsConditionContext.prototype.KW_FALSE = function () {
	return this.getToken(HiveParser.KW_FALSE, 0);
};

IsConditionContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

IsConditionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIsCondition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IsConditionContext = IsConditionContext;

HiveParser.prototype.isCondition = function () {
	var localctx = new IsConditionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 730, HiveParser.RULE_isCondition);
	try {
		this.state = 4137;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 485, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4128;
				this.match(HiveParser.KW_NULL);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4129;
				this.match(HiveParser.KW_TRUE);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4130;
				this.match(HiveParser.KW_FALSE);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 4131;
				this.match(HiveParser.KW_NOT);
				this.state = 4132;
				this.match(HiveParser.KW_NULL);
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 4133;
				this.match(HiveParser.KW_NOT);
				this.state = 4134;
				this.match(HiveParser.KW_TRUE);
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 4135;
				this.match(HiveParser.KW_NOT);
				this.state = 4136;
				this.match(HiveParser.KW_FALSE);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceBitwiseXorOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceBitwiseXorOperator;
	return this;
}

PrecedenceBitwiseXorOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceBitwiseXorOperatorContext.prototype.constructor = PrecedenceBitwiseXorOperatorContext;

PrecedenceBitwiseXorOperatorContext.prototype.BITWISEXOR = function () {
	return this.getToken(HiveParser.BITWISEXOR, 0);
};

PrecedenceBitwiseXorOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceBitwiseXorOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceBitwiseXorOperatorContext = PrecedenceBitwiseXorOperatorContext;

HiveParser.prototype.precedenceBitwiseXorOperator = function () {
	var localctx = new PrecedenceBitwiseXorOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 732, HiveParser.RULE_precedenceBitwiseXorOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4139;
		this.match(HiveParser.BITWISEXOR);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceStarOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceStarOperator;
	return this;
}

PrecedenceStarOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceStarOperatorContext.prototype.constructor = PrecedenceStarOperatorContext;

PrecedenceStarOperatorContext.prototype.STAR = function () {
	return this.getToken(HiveParser.STAR, 0);
};

PrecedenceStarOperatorContext.prototype.DIVIDE = function () {
	return this.getToken(HiveParser.DIVIDE, 0);
};

PrecedenceStarOperatorContext.prototype.MOD = function () {
	return this.getToken(HiveParser.MOD, 0);
};

PrecedenceStarOperatorContext.prototype.DIV = function () {
	return this.getToken(HiveParser.DIV, 0);
};

PrecedenceStarOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceStarOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceStarOperatorContext = PrecedenceStarOperatorContext;

HiveParser.prototype.precedenceStarOperator = function () {
	var localctx = new PrecedenceStarOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 734, HiveParser.RULE_precedenceStarOperator);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4141;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 361) & ~0x1f) == 0 &&
				((1 << (_la - 361)) &
					((1 << (HiveParser.DIVIDE - 361)) |
						(1 << (HiveParser.STAR - 361)) |
						(1 << (HiveParser.MOD - 361)) |
						(1 << (HiveParser.DIV - 361)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedencePlusOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedencePlusOperator;
	return this;
}

PrecedencePlusOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedencePlusOperatorContext.prototype.constructor = PrecedencePlusOperatorContext;

PrecedencePlusOperatorContext.prototype.PLUS = function () {
	return this.getToken(HiveParser.PLUS, 0);
};

PrecedencePlusOperatorContext.prototype.MINUS = function () {
	return this.getToken(HiveParser.MINUS, 0);
};

PrecedencePlusOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedencePlusOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedencePlusOperatorContext = PrecedencePlusOperatorContext;

HiveParser.prototype.precedencePlusOperator = function () {
	var localctx = new PrecedencePlusOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 736, HiveParser.RULE_precedencePlusOperator);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4143;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.PLUS || _la === HiveParser.MINUS)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceConcatenateOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceConcatenateOperator;
	return this;
}

PrecedenceConcatenateOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceConcatenateOperatorContext.prototype.constructor = PrecedenceConcatenateOperatorContext;

PrecedenceConcatenateOperatorContext.prototype.CONCATENATE = function () {
	return this.getToken(HiveParser.CONCATENATE, 0);
};

PrecedenceConcatenateOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceConcatenateOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceConcatenateOperatorContext = PrecedenceConcatenateOperatorContext;

HiveParser.prototype.precedenceConcatenateOperator = function () {
	var localctx = new PrecedenceConcatenateOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 738, HiveParser.RULE_precedenceConcatenateOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4145;
		this.match(HiveParser.CONCATENATE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceAmpersandOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceAmpersandOperator;
	return this;
}

PrecedenceAmpersandOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceAmpersandOperatorContext.prototype.constructor = PrecedenceAmpersandOperatorContext;

PrecedenceAmpersandOperatorContext.prototype.AMPERSAND = function () {
	return this.getToken(HiveParser.AMPERSAND, 0);
};

PrecedenceAmpersandOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceAmpersandOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceAmpersandOperatorContext = PrecedenceAmpersandOperatorContext;

HiveParser.prototype.precedenceAmpersandOperator = function () {
	var localctx = new PrecedenceAmpersandOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 740, HiveParser.RULE_precedenceAmpersandOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4147;
		this.match(HiveParser.AMPERSAND);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceBitwiseOrOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceBitwiseOrOperator;
	return this;
}

PrecedenceBitwiseOrOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceBitwiseOrOperatorContext.prototype.constructor = PrecedenceBitwiseOrOperatorContext;

PrecedenceBitwiseOrOperatorContext.prototype.BITWISEOR = function () {
	return this.getToken(HiveParser.BITWISEOR, 0);
};

PrecedenceBitwiseOrOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceBitwiseOrOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceBitwiseOrOperatorContext = PrecedenceBitwiseOrOperatorContext;

HiveParser.prototype.precedenceBitwiseOrOperator = function () {
	var localctx = new PrecedenceBitwiseOrOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 742, HiveParser.RULE_precedenceBitwiseOrOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4149;
		this.match(HiveParser.BITWISEOR);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceRegexpOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceRegexpOperator;
	return this;
}

PrecedenceRegexpOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceRegexpOperatorContext.prototype.constructor = PrecedenceRegexpOperatorContext;

PrecedenceRegexpOperatorContext.prototype.KW_LIKE = function () {
	return this.getToken(HiveParser.KW_LIKE, 0);
};

PrecedenceRegexpOperatorContext.prototype.KW_RLIKE = function () {
	return this.getToken(HiveParser.KW_RLIKE, 0);
};

PrecedenceRegexpOperatorContext.prototype.KW_REGEXP = function () {
	return this.getToken(HiveParser.KW_REGEXP, 0);
};

PrecedenceRegexpOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceRegexpOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceRegexpOperatorContext = PrecedenceRegexpOperatorContext;

HiveParser.prototype.precedenceRegexpOperator = function () {
	var localctx = new PrecedenceRegexpOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 744, HiveParser.RULE_precedenceRegexpOperator);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4151;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_LIKE || _la === HiveParser.KW_RLIKE || _la === HiveParser.KW_REGEXP)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceSimilarOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceSimilarOperator;
	return this;
}

PrecedenceSimilarOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceSimilarOperatorContext.prototype.constructor = PrecedenceSimilarOperatorContext;

PrecedenceSimilarOperatorContext.prototype.precedenceRegexpOperator = function () {
	return this.getTypedRuleContext(PrecedenceRegexpOperatorContext, 0);
};

PrecedenceSimilarOperatorContext.prototype.LESSTHANOREQUALTO = function () {
	return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
};

PrecedenceSimilarOperatorContext.prototype.LESSTHAN = function () {
	return this.getToken(HiveParser.LESSTHAN, 0);
};

PrecedenceSimilarOperatorContext.prototype.GREATERTHANOREQUALTO = function () {
	return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
};

PrecedenceSimilarOperatorContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

PrecedenceSimilarOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceSimilarOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceSimilarOperatorContext = PrecedenceSimilarOperatorContext;

HiveParser.prototype.precedenceSimilarOperator = function () {
	var localctx = new PrecedenceSimilarOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 746, HiveParser.RULE_precedenceSimilarOperator);
	try {
		this.state = 4158;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_LIKE:
			case HiveParser.KW_RLIKE:
			case HiveParser.KW_REGEXP:
				this.enterOuterAlt(localctx, 1);
				this.state = 4153;
				this.precedenceRegexpOperator();
				break;
			case HiveParser.LESSTHANOREQUALTO:
				this.enterOuterAlt(localctx, 2);
				this.state = 4154;
				this.match(HiveParser.LESSTHANOREQUALTO);
				break;
			case HiveParser.LESSTHAN:
				this.enterOuterAlt(localctx, 3);
				this.state = 4155;
				this.match(HiveParser.LESSTHAN);
				break;
			case HiveParser.GREATERTHANOREQUALTO:
				this.enterOuterAlt(localctx, 4);
				this.state = 4156;
				this.match(HiveParser.GREATERTHANOREQUALTO);
				break;
			case HiveParser.GREATERTHAN:
				this.enterOuterAlt(localctx, 5);
				this.state = 4157;
				this.match(HiveParser.GREATERTHAN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceDistinctOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceDistinctOperator;
	return this;
}

PrecedenceDistinctOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceDistinctOperatorContext.prototype.constructor = PrecedenceDistinctOperatorContext;

PrecedenceDistinctOperatorContext.prototype.KW_IS = function () {
	return this.getToken(HiveParser.KW_IS, 0);
};

PrecedenceDistinctOperatorContext.prototype.KW_DISTINCT = function () {
	return this.getToken(HiveParser.KW_DISTINCT, 0);
};

PrecedenceDistinctOperatorContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

PrecedenceDistinctOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceDistinctOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceDistinctOperatorContext = PrecedenceDistinctOperatorContext;

HiveParser.prototype.precedenceDistinctOperator = function () {
	var localctx = new PrecedenceDistinctOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 748, HiveParser.RULE_precedenceDistinctOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4160;
		this.match(HiveParser.KW_IS);
		this.state = 4161;
		this.match(HiveParser.KW_DISTINCT);
		this.state = 4162;
		this.match(HiveParser.KW_FROM);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceEqualOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceEqualOperator;
	return this;
}

PrecedenceEqualOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceEqualOperatorContext.prototype.constructor = PrecedenceEqualOperatorContext;

PrecedenceEqualOperatorContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

PrecedenceEqualOperatorContext.prototype.EQUAL_NS = function () {
	return this.getToken(HiveParser.EQUAL_NS, 0);
};

PrecedenceEqualOperatorContext.prototype.NOTEQUAL = function () {
	return this.getToken(HiveParser.NOTEQUAL, 0);
};

PrecedenceEqualOperatorContext.prototype.KW_IS = function () {
	return this.getToken(HiveParser.KW_IS, 0);
};

PrecedenceEqualOperatorContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

PrecedenceEqualOperatorContext.prototype.KW_DISTINCT = function () {
	return this.getToken(HiveParser.KW_DISTINCT, 0);
};

PrecedenceEqualOperatorContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

PrecedenceEqualOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceEqualOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceEqualOperatorContext = PrecedenceEqualOperatorContext;

HiveParser.prototype.precedenceEqualOperator = function () {
	var localctx = new PrecedenceEqualOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 750, HiveParser.RULE_precedenceEqualOperator);
	try {
		this.state = 4171;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.EQUAL:
				this.enterOuterAlt(localctx, 1);
				this.state = 4164;
				this.match(HiveParser.EQUAL);
				break;
			case HiveParser.EQUAL_NS:
				this.enterOuterAlt(localctx, 2);
				this.state = 4165;
				this.match(HiveParser.EQUAL_NS);
				break;
			case HiveParser.NOTEQUAL:
				this.enterOuterAlt(localctx, 3);
				this.state = 4166;
				this.match(HiveParser.NOTEQUAL);
				break;
			case HiveParser.KW_IS:
				this.enterOuterAlt(localctx, 4);
				this.state = 4167;
				this.match(HiveParser.KW_IS);
				this.state = 4168;
				this.match(HiveParser.KW_NOT);
				this.state = 4169;
				this.match(HiveParser.KW_DISTINCT);
				this.state = 4170;
				this.match(HiveParser.KW_FROM);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceNotOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceNotOperator;
	return this;
}

PrecedenceNotOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceNotOperatorContext.prototype.constructor = PrecedenceNotOperatorContext;

PrecedenceNotOperatorContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

PrecedenceNotOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceNotOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceNotOperatorContext = PrecedenceNotOperatorContext;

HiveParser.prototype.precedenceNotOperator = function () {
	var localctx = new PrecedenceNotOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 752, HiveParser.RULE_precedenceNotOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4173;
		this.match(HiveParser.KW_NOT);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceAndOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceAndOperator;
	return this;
}

PrecedenceAndOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceAndOperatorContext.prototype.constructor = PrecedenceAndOperatorContext;

PrecedenceAndOperatorContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

PrecedenceAndOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceAndOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceAndOperatorContext = PrecedenceAndOperatorContext;

HiveParser.prototype.precedenceAndOperator = function () {
	var localctx = new PrecedenceAndOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 754, HiveParser.RULE_precedenceAndOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4175;
		this.match(HiveParser.KW_AND);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceOrOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceOrOperator;
	return this;
}

PrecedenceOrOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceOrOperatorContext.prototype.constructor = PrecedenceOrOperatorContext;

PrecedenceOrOperatorContext.prototype.KW_OR = function () {
	return this.getToken(HiveParser.KW_OR, 0);
};

PrecedenceOrOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceOrOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceOrOperatorContext = PrecedenceOrOperatorContext;

HiveParser.prototype.precedenceOrOperator = function () {
	var localctx = new PrecedenceOrOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 756, HiveParser.RULE_precedenceOrOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4177;
		this.match(HiveParser.KW_OR);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_expression;
	return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.atomExpression = function () {
	return this.getTypedRuleContext(AtomExpressionContext, 0);
};

ExpressionContext.prototype.LSQUARE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.LSQUARE);
	} else {
		return this.getToken(HiveParser.LSQUARE, i);
	}
};

ExpressionContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

ExpressionContext.prototype.RSQUARE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.RSQUARE);
	} else {
		return this.getToken(HiveParser.RSQUARE, i);
	}
};

ExpressionContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.DOT);
	} else {
		return this.getToken(HiveParser.DOT, i);
	}
};

ExpressionContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

ExpressionContext.prototype.precedenceUnaryOperator = function () {
	return this.getTypedRuleContext(PrecedenceUnaryOperatorContext, 0);
};

ExpressionContext.prototype.KW_EXISTS = function () {
	return this.getToken(HiveParser.KW_EXISTS, 0);
};

ExpressionContext.prototype.subQueryExpression = function () {
	return this.getTypedRuleContext(SubQueryExpressionContext, 0);
};

ExpressionContext.prototype.precedenceNotOperator = function () {
	return this.getTypedRuleContext(PrecedenceNotOperatorContext, 0);
};

ExpressionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

ExpressionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

ExpressionContext.prototype.precedenceBitwiseXorOperator = function () {
	return this.getTypedRuleContext(PrecedenceBitwiseXorOperatorContext, 0);
};

ExpressionContext.prototype.precedenceStarOperator = function () {
	return this.getTypedRuleContext(PrecedenceStarOperatorContext, 0);
};

ExpressionContext.prototype.precedencePlusOperator = function () {
	return this.getTypedRuleContext(PrecedencePlusOperatorContext, 0);
};

ExpressionContext.prototype.precedenceConcatenateOperator = function () {
	return this.getTypedRuleContext(PrecedenceConcatenateOperatorContext, 0);
};

ExpressionContext.prototype.precedenceAmpersandOperator = function () {
	return this.getTypedRuleContext(PrecedenceAmpersandOperatorContext, 0);
};

ExpressionContext.prototype.precedenceBitwiseOrOperator = function () {
	return this.getTypedRuleContext(PrecedenceBitwiseOrOperatorContext, 0);
};

ExpressionContext.prototype.precedenceEqualOperator = function () {
	return this.getTypedRuleContext(PrecedenceEqualOperatorContext, 0);
};

ExpressionContext.prototype.precedenceDistinctOperator = function () {
	return this.getTypedRuleContext(PrecedenceDistinctOperatorContext, 0);
};

ExpressionContext.prototype.precedenceAndOperator = function () {
	return this.getTypedRuleContext(PrecedenceAndOperatorContext, 0);
};

ExpressionContext.prototype.precedenceOrOperator = function () {
	return this.getTypedRuleContext(PrecedenceOrOperatorContext, 0);
};

ExpressionContext.prototype.KW_IS = function () {
	return this.getToken(HiveParser.KW_IS, 0);
};

ExpressionContext.prototype.isCondition = function () {
	return this.getTypedRuleContext(IsConditionContext, 0);
};

ExpressionContext.prototype.precedenceSimilarExpressionPart = function () {
	return this.getTypedRuleContext(PrecedenceSimilarExpressionPartContext, 0);
};

ExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.prototype.expression = function (_p) {
	if (_p === undefined) {
		_p = 0;
	}
	var _parentctx = this._ctx;
	var _parentState = this.state;
	var localctx = new ExpressionContext(this, this._ctx, _parentState);
	var _prevctx = localctx;
	var _startState = 758;
	this.enterRecursionRule(localctx, 758, HiveParser.RULE_expression, _p);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4204;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 490, this._ctx);
		switch (la_) {
			case 1:
				this.state = 4180;
				this.atomExpression();
				this.state = 4189;
				this._errHandler.sync(this);
				var _alt = this._interp.adaptivePredict(this._input, 489, this._ctx);
				while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						this.state = 4187;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
							case HiveParser.LSQUARE:
								this.state = 4181;
								this.match(HiveParser.LSQUARE);
								this.state = 4182;
								this.expression(0);
								this.state = 4183;
								this.match(HiveParser.RSQUARE);
								break;
							case HiveParser.DOT:
								this.state = 4185;
								this.match(HiveParser.DOT);
								this.state = 4186;
								this.identifier();
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
					}
					this.state = 4191;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 489, this._ctx);
				}

				break;

			case 2:
				this.state = 4192;
				this.precedenceUnaryOperator();
				this.state = 4193;
				this.expression(15);
				break;

			case 3:
				this.state = 4195;
				this.match(HiveParser.KW_EXISTS);
				this.state = 4196;
				this.subQueryExpression();
				break;

			case 4:
				this.state = 4197;
				this.precedenceNotOperator();
				this.state = 4198;
				this.expression(4);
				break;

			case 5:
				this.state = 4200;
				this.match(HiveParser.LPAREN);
				this.state = 4201;
				this.expression(0);
				this.state = 4202;
				this.match(HiveParser.RPAREN);
				break;
		}
		this._ctx.stop = this._input.LT(-1);
		this.state = 4252;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 493, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				if (this._parseListeners !== null) {
					this.triggerExitRuleEvent();
				}
				_prevctx = localctx;
				this.state = 4250;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 492, this._ctx);
				switch (la_) {
					case 1:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4206;
						if (!this.precpred(this._ctx, 13)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 13)');
						}
						this.state = 4207;
						this.precedenceBitwiseXorOperator();
						this.state = 4208;
						this.expression(14);
						break;

					case 2:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4210;
						if (!this.precpred(this._ctx, 12)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 12)');
						}
						this.state = 4211;
						this.precedenceStarOperator();
						this.state = 4212;
						this.expression(13);
						break;

					case 3:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4214;
						if (!this.precpred(this._ctx, 11)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 11)');
						}
						this.state = 4215;
						this.precedencePlusOperator();
						this.state = 4216;
						this.expression(12);
						break;

					case 4:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4218;
						if (!this.precpred(this._ctx, 10)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 10)');
						}
						this.state = 4219;
						this.precedenceConcatenateOperator();
						this.state = 4220;
						this.expression(11);
						break;

					case 5:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4222;
						if (!this.precpred(this._ctx, 9)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 9)');
						}
						this.state = 4223;
						this.precedenceAmpersandOperator();
						this.state = 4224;
						this.expression(10);
						break;

					case 6:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4226;
						if (!this.precpred(this._ctx, 8)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 8)');
						}
						this.state = 4227;
						this.precedenceBitwiseOrOperator();
						this.state = 4228;
						this.expression(9);
						break;

					case 7:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4230;
						if (!this.precpred(this._ctx, 5)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 5)');
						}
						this.state = 4233;
						this._errHandler.sync(this);
						var la_ = this._interp.adaptivePredict(this._input, 491, this._ctx);
						switch (la_) {
							case 1:
								this.state = 4231;
								this.precedenceEqualOperator();
								break;

							case 2:
								this.state = 4232;
								this.precedenceDistinctOperator();
								break;
						}
						this.state = 4235;
						this.expression(6);
						break;

					case 8:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4237;
						if (!this.precpred(this._ctx, 3)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');
						}
						this.state = 4238;
						this.precedenceAndOperator();
						this.state = 4239;
						this.expression(4);
						break;

					case 9:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4241;
						if (!this.precpred(this._ctx, 2)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');
						}
						this.state = 4242;
						this.precedenceOrOperator();
						this.state = 4243;
						this.expression(3);
						break;

					case 10:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4245;
						if (!this.precpred(this._ctx, 14)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 14)');
						}
						this.state = 4246;
						this.match(HiveParser.KW_IS);
						this.state = 4247;
						this.isCondition();
						break;

					case 11:
						localctx = new ExpressionContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
						this.state = 4248;
						if (!this.precpred(this._ctx, 7)) {
							throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 7)');
						}
						this.state = 4249;
						this.precedenceSimilarExpressionPart();
						break;
				}
			}
			this.state = 4254;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 493, this._ctx);
		}
	} catch (error) {
		if (error instanceof antlr4.error.RecognitionException) {
			localctx.exception = error;
			this._errHandler.reportError(this, error);
			this._errHandler.recover(this, error);
		} else {
			throw error;
		}
	} finally {
		this.unrollRecursionContexts(_parentctx);
	}
	return localctx;
};

function SubQueryExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_subQueryExpression;
	return this;
}

SubQueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubQueryExpressionContext.prototype.constructor = SubQueryExpressionContext;

SubQueryExpressionContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

SubQueryExpressionContext.prototype.selectStatement = function () {
	return this.getTypedRuleContext(SelectStatementContext, 0);
};

SubQueryExpressionContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

SubQueryExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSubQueryExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SubQueryExpressionContext = SubQueryExpressionContext;

HiveParser.prototype.subQueryExpression = function () {
	var localctx = new SubQueryExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 760, HiveParser.RULE_subQueryExpression);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4255;
		this.match(HiveParser.LPAREN);
		this.state = 4256;
		this.selectStatement();
		this.state = 4257;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceSimilarExpressionPartContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionPart;
	return this;
}

PrecedenceSimilarExpressionPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceSimilarExpressionPartContext.prototype.constructor = PrecedenceSimilarExpressionPartContext;

PrecedenceSimilarExpressionPartContext.prototype.precedenceSimilarOperator = function () {
	return this.getTypedRuleContext(PrecedenceSimilarOperatorContext, 0);
};

PrecedenceSimilarExpressionPartContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

PrecedenceSimilarExpressionPartContext.prototype.precedenceSimilarExpressionAtom = function () {
	return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext, 0);
};

PrecedenceSimilarExpressionPartContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

PrecedenceSimilarExpressionPartContext.prototype.precedenceSimilarExpressionPartNot = function () {
	return this.getTypedRuleContext(PrecedenceSimilarExpressionPartNotContext, 0);
};

PrecedenceSimilarExpressionPartContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceSimilarExpressionPart(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceSimilarExpressionPartContext = PrecedenceSimilarExpressionPartContext;

HiveParser.prototype.precedenceSimilarExpressionPart = function () {
	var localctx = new PrecedenceSimilarExpressionPartContext(this, this._ctx, this.state);
	this.enterRule(localctx, 762, HiveParser.RULE_precedenceSimilarExpressionPart);
	try {
		this.state = 4265;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 494, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4259;
				this.precedenceSimilarOperator();
				this.state = 4260;
				this.expression(0);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4262;
				this.precedenceSimilarExpressionAtom();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4263;
				this.match(HiveParser.KW_NOT);
				this.state = 4264;
				this.precedenceSimilarExpressionPartNot();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceSimilarExpressionAtomContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionAtom;
	return this;
}

PrecedenceSimilarExpressionAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceSimilarExpressionAtomContext.prototype.constructor = PrecedenceSimilarExpressionAtomContext;

PrecedenceSimilarExpressionAtomContext.prototype.KW_IN = function () {
	return this.getToken(HiveParser.KW_IN, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.precedenceSimilarExpressionIn = function () {
	return this.getTypedRuleContext(PrecedenceSimilarExpressionInContext, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.KW_BETWEEN = function () {
	return this.getToken(HiveParser.KW_BETWEEN, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.expression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExpressionContext);
	} else {
		return this.getTypedRuleContext(ExpressionContext, i);
	}
};

PrecedenceSimilarExpressionAtomContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.KW_LIKE = function () {
	return this.getToken(HiveParser.KW_LIKE, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.KW_ANY = function () {
	return this.getToken(HiveParser.KW_ANY, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.expressionsInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.KW_ALL = function () {
	return this.getToken(HiveParser.KW_ALL, 0);
};

PrecedenceSimilarExpressionAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceSimilarExpressionAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceSimilarExpressionAtomContext = PrecedenceSimilarExpressionAtomContext;

HiveParser.prototype.precedenceSimilarExpressionAtom = function () {
	var localctx = new PrecedenceSimilarExpressionAtomContext(this, this._ctx, this.state);
	this.enterRule(localctx, 764, HiveParser.RULE_precedenceSimilarExpressionAtom);
	try {
		this.state = 4280;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 495, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4267;
				this.match(HiveParser.KW_IN);
				this.state = 4268;
				this.precedenceSimilarExpressionIn();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4269;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 4270;
				this.expression(0);
				this.state = 4271;
				this.match(HiveParser.KW_AND);
				this.state = 4272;
				this.expression(0);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4274;
				this.match(HiveParser.KW_LIKE);
				this.state = 4275;
				this.match(HiveParser.KW_ANY);
				this.state = 4276;
				this.expressionsInParenthesis();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 4277;
				this.match(HiveParser.KW_LIKE);
				this.state = 4278;
				this.match(HiveParser.KW_ALL);
				this.state = 4279;
				this.expressionsInParenthesis();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceSimilarExpressionInContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionIn;
	return this;
}

PrecedenceSimilarExpressionInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceSimilarExpressionInContext.prototype.constructor = PrecedenceSimilarExpressionInContext;

PrecedenceSimilarExpressionInContext.prototype.subQueryExpression = function () {
	return this.getTypedRuleContext(SubQueryExpressionContext, 0);
};

PrecedenceSimilarExpressionInContext.prototype.expressionsInParenthesis = function () {
	return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
};

PrecedenceSimilarExpressionInContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceSimilarExpressionIn(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceSimilarExpressionInContext = PrecedenceSimilarExpressionInContext;

HiveParser.prototype.precedenceSimilarExpressionIn = function () {
	var localctx = new PrecedenceSimilarExpressionInContext(this, this._ctx, this.state);
	this.enterRule(localctx, 766, HiveParser.RULE_precedenceSimilarExpressionIn);
	try {
		this.state = 4284;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 496, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4282;
				this.subQueryExpression();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4283;
				this.expressionsInParenthesis();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrecedenceSimilarExpressionPartNotContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionPartNot;
	return this;
}

PrecedenceSimilarExpressionPartNotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecedenceSimilarExpressionPartNotContext.prototype.constructor = PrecedenceSimilarExpressionPartNotContext;

PrecedenceSimilarExpressionPartNotContext.prototype.precedenceRegexpOperator = function () {
	return this.getTypedRuleContext(PrecedenceRegexpOperatorContext, 0);
};

PrecedenceSimilarExpressionPartNotContext.prototype.expression = function () {
	return this.getTypedRuleContext(ExpressionContext, 0);
};

PrecedenceSimilarExpressionPartNotContext.prototype.precedenceSimilarExpressionAtom = function () {
	return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext, 0);
};

PrecedenceSimilarExpressionPartNotContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrecedenceSimilarExpressionPartNot(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrecedenceSimilarExpressionPartNotContext = PrecedenceSimilarExpressionPartNotContext;

HiveParser.prototype.precedenceSimilarExpressionPartNot = function () {
	var localctx = new PrecedenceSimilarExpressionPartNotContext(this, this._ctx, this.state);
	this.enterRule(localctx, 768, HiveParser.RULE_precedenceSimilarExpressionPartNot);
	try {
		this.state = 4290;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 497, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4286;
				this.precedenceRegexpOperator();
				this.state = 4287;
				this.expression(0);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4289;
				this.precedenceSimilarExpressionAtom();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BooleanValueContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_booleanValue;
	return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.KW_TRUE = function () {
	return this.getToken(HiveParser.KW_TRUE, 0);
};

BooleanValueContext.prototype.KW_FALSE = function () {
	return this.getToken(HiveParser.KW_FALSE, 0);
};

BooleanValueContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBooleanValue(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BooleanValueContext = BooleanValueContext;

HiveParser.prototype.booleanValue = function () {
	var localctx = new BooleanValueContext(this, this._ctx, this.state);
	this.enterRule(localctx, 770, HiveParser.RULE_booleanValue);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4292;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_TRUE || _la === HiveParser.KW_FALSE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BooleanValueTokContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_booleanValueTok;
	return this;
}

BooleanValueTokContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueTokContext.prototype.constructor = BooleanValueTokContext;

BooleanValueTokContext.prototype.KW_TRUE = function () {
	return this.getToken(HiveParser.KW_TRUE, 0);
};

BooleanValueTokContext.prototype.KW_FALSE = function () {
	return this.getToken(HiveParser.KW_FALSE, 0);
};

BooleanValueTokContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitBooleanValueTok(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.BooleanValueTokContext = BooleanValueTokContext;

HiveParser.prototype.booleanValueTok = function () {
	var localctx = new BooleanValueTokContext(this, this._ctx, this.state);
	this.enterRule(localctx, 772, HiveParser.RULE_booleanValueTok);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4294;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_TRUE || _la === HiveParser.KW_FALSE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TableOrPartitionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_tableOrPartition;
	return this;
}

TableOrPartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOrPartitionContext.prototype.constructor = TableOrPartitionContext;

TableOrPartitionContext.prototype.tableName = function () {
	return this.getTypedRuleContext(TableNameContext, 0);
};

TableOrPartitionContext.prototype.partitionSpec = function () {
	return this.getTypedRuleContext(PartitionSpecContext, 0);
};

TableOrPartitionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTableOrPartition(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TableOrPartitionContext = TableOrPartitionContext;

HiveParser.prototype.tableOrPartition = function () {
	var localctx = new TableOrPartitionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 774, HiveParser.RULE_tableOrPartition);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4296;
		this.tableName();
		this.state = 4298;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_PARTITION) {
			this.state = 4297;
			this.partitionSpec();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionSpecContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitionSpec;
	return this;
}

PartitionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecContext.prototype.constructor = PartitionSpecContext;

PartitionSpecContext.prototype.KW_PARTITION = function () {
	return this.getToken(HiveParser.KW_PARTITION, 0);
};

PartitionSpecContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

PartitionSpecContext.prototype.partitionVal = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PartitionValContext);
	} else {
		return this.getTypedRuleContext(PartitionValContext, i);
	}
};

PartitionSpecContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

PartitionSpecContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

PartitionSpecContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitionSpec(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitionSpecContext = PartitionSpecContext;

HiveParser.prototype.partitionSpec = function () {
	var localctx = new PartitionSpecContext(this, this._ctx, this.state);
	this.enterRule(localctx, 776, HiveParser.RULE_partitionSpec);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4300;
		this.match(HiveParser.KW_PARTITION);
		this.state = 4301;
		this.match(HiveParser.LPAREN);
		this.state = 4302;
		this.partitionVal();
		this.state = 4307;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 4303;
			this.match(HiveParser.COMMA);
			this.state = 4304;
			this.partitionVal();
			this.state = 4309;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 4310;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionValContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_partitionVal;
	return this;
}

PartitionValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionValContext.prototype.constructor = PartitionValContext;

PartitionValContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

PartitionValContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

PartitionValContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

PartitionValContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPartitionVal(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PartitionValContext = PartitionValContext;

HiveParser.prototype.partitionVal = function () {
	var localctx = new PartitionValContext(this, this._ctx, this.state);
	this.enterRule(localctx, 778, HiveParser.RULE_partitionVal);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4312;
		this.identifier();
		this.state = 4315;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.EQUAL) {
			this.state = 4313;
			this.match(HiveParser.EQUAL);
			this.state = 4314;
			this.constant();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropPartitionSpecContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropPartitionSpec;
	return this;
}

DropPartitionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropPartitionSpecContext.prototype.constructor = DropPartitionSpecContext;

DropPartitionSpecContext.prototype.KW_PARTITION = function () {
	return this.getToken(HiveParser.KW_PARTITION, 0);
};

DropPartitionSpecContext.prototype.LPAREN = function () {
	return this.getToken(HiveParser.LPAREN, 0);
};

DropPartitionSpecContext.prototype.dropPartitionVal = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(DropPartitionValContext);
	} else {
		return this.getTypedRuleContext(DropPartitionValContext, i);
	}
};

DropPartitionSpecContext.prototype.RPAREN = function () {
	return this.getToken(HiveParser.RPAREN, 0);
};

DropPartitionSpecContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

DropPartitionSpecContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropPartitionSpec(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropPartitionSpecContext = DropPartitionSpecContext;

HiveParser.prototype.dropPartitionSpec = function () {
	var localctx = new DropPartitionSpecContext(this, this._ctx, this.state);
	this.enterRule(localctx, 780, HiveParser.RULE_dropPartitionSpec);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4317;
		this.match(HiveParser.KW_PARTITION);
		this.state = 4318;
		this.match(HiveParser.LPAREN);
		this.state = 4319;
		this.dropPartitionVal();
		this.state = 4324;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 4320;
			this.match(HiveParser.COMMA);
			this.state = 4321;
			this.dropPartitionVal();
			this.state = 4326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 4327;
		this.match(HiveParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropPartitionValContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropPartitionVal;
	return this;
}

DropPartitionValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropPartitionValContext.prototype.constructor = DropPartitionValContext;

DropPartitionValContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DropPartitionValContext.prototype.dropPartitionOperator = function () {
	return this.getTypedRuleContext(DropPartitionOperatorContext, 0);
};

DropPartitionValContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

DropPartitionValContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropPartitionVal(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropPartitionValContext = DropPartitionValContext;

HiveParser.prototype.dropPartitionVal = function () {
	var localctx = new DropPartitionValContext(this, this._ctx, this.state);
	this.enterRule(localctx, 782, HiveParser.RULE_dropPartitionVal);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4329;
		this.identifier();
		this.state = 4330;
		this.dropPartitionOperator();
		this.state = 4331;
		this.constant();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropPartitionOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropPartitionOperator;
	return this;
}

DropPartitionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropPartitionOperatorContext.prototype.constructor = DropPartitionOperatorContext;

DropPartitionOperatorContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

DropPartitionOperatorContext.prototype.NOTEQUAL = function () {
	return this.getToken(HiveParser.NOTEQUAL, 0);
};

DropPartitionOperatorContext.prototype.LESSTHANOREQUALTO = function () {
	return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
};

DropPartitionOperatorContext.prototype.LESSTHAN = function () {
	return this.getToken(HiveParser.LESSTHAN, 0);
};

DropPartitionOperatorContext.prototype.GREATERTHANOREQUALTO = function () {
	return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
};

DropPartitionOperatorContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

DropPartitionOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropPartitionOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropPartitionOperatorContext = DropPartitionOperatorContext;

HiveParser.prototype.dropPartitionOperator = function () {
	var localctx = new DropPartitionOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 784, HiveParser.RULE_dropPartitionOperator);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4333;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 354) & ~0x1f) == 0 &&
				((1 << (_la - 354)) &
					((1 << (HiveParser.EQUAL - 354)) |
						(1 << (HiveParser.NOTEQUAL - 354)) |
						(1 << (HiveParser.LESSTHANOREQUALTO - 354)) |
						(1 << (HiveParser.LESSTHAN - 354)) |
						(1 << (HiveParser.GREATERTHANOREQUALTO - 354)) |
						(1 << (HiveParser.GREATERTHAN - 354)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SysFuncNamesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_sysFuncNames;
	return this;
}

SysFuncNamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SysFuncNamesContext.prototype.constructor = SysFuncNamesContext;

SysFuncNamesContext.prototype.KW_AND = function () {
	return this.getToken(HiveParser.KW_AND, 0);
};

SysFuncNamesContext.prototype.KW_OR = function () {
	return this.getToken(HiveParser.KW_OR, 0);
};

SysFuncNamesContext.prototype.KW_NOT = function () {
	return this.getToken(HiveParser.KW_NOT, 0);
};

SysFuncNamesContext.prototype.KW_LIKE = function () {
	return this.getToken(HiveParser.KW_LIKE, 0);
};

SysFuncNamesContext.prototype.KW_IF = function () {
	return this.getToken(HiveParser.KW_IF, 0);
};

SysFuncNamesContext.prototype.KW_CASE = function () {
	return this.getToken(HiveParser.KW_CASE, 0);
};

SysFuncNamesContext.prototype.KW_WHEN = function () {
	return this.getToken(HiveParser.KW_WHEN, 0);
};

SysFuncNamesContext.prototype.KW_FLOOR = function () {
	return this.getToken(HiveParser.KW_FLOOR, 0);
};

SysFuncNamesContext.prototype.KW_TINYINT = function () {
	return this.getToken(HiveParser.KW_TINYINT, 0);
};

SysFuncNamesContext.prototype.KW_SMALLINT = function () {
	return this.getToken(HiveParser.KW_SMALLINT, 0);
};

SysFuncNamesContext.prototype.KW_INT = function () {
	return this.getToken(HiveParser.KW_INT, 0);
};

SysFuncNamesContext.prototype.KW_BIGINT = function () {
	return this.getToken(HiveParser.KW_BIGINT, 0);
};

SysFuncNamesContext.prototype.KW_FLOAT = function () {
	return this.getToken(HiveParser.KW_FLOAT, 0);
};

SysFuncNamesContext.prototype.KW_DOUBLE = function () {
	return this.getToken(HiveParser.KW_DOUBLE, 0);
};

SysFuncNamesContext.prototype.KW_BOOLEAN = function () {
	return this.getToken(HiveParser.KW_BOOLEAN, 0);
};

SysFuncNamesContext.prototype.KW_STRING = function () {
	return this.getToken(HiveParser.KW_STRING, 0);
};

SysFuncNamesContext.prototype.KW_BINARY = function () {
	return this.getToken(HiveParser.KW_BINARY, 0);
};

SysFuncNamesContext.prototype.KW_ARRAY = function () {
	return this.getToken(HiveParser.KW_ARRAY, 0);
};

SysFuncNamesContext.prototype.KW_MAP = function () {
	return this.getToken(HiveParser.KW_MAP, 0);
};

SysFuncNamesContext.prototype.KW_STRUCT = function () {
	return this.getToken(HiveParser.KW_STRUCT, 0);
};

SysFuncNamesContext.prototype.KW_UNIONTYPE = function () {
	return this.getToken(HiveParser.KW_UNIONTYPE, 0);
};

SysFuncNamesContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

SysFuncNamesContext.prototype.EQUAL_NS = function () {
	return this.getToken(HiveParser.EQUAL_NS, 0);
};

SysFuncNamesContext.prototype.NOTEQUAL = function () {
	return this.getToken(HiveParser.NOTEQUAL, 0);
};

SysFuncNamesContext.prototype.LESSTHANOREQUALTO = function () {
	return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
};

SysFuncNamesContext.prototype.LESSTHAN = function () {
	return this.getToken(HiveParser.LESSTHAN, 0);
};

SysFuncNamesContext.prototype.GREATERTHANOREQUALTO = function () {
	return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
};

SysFuncNamesContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

SysFuncNamesContext.prototype.DIVIDE = function () {
	return this.getToken(HiveParser.DIVIDE, 0);
};

SysFuncNamesContext.prototype.PLUS = function () {
	return this.getToken(HiveParser.PLUS, 0);
};

SysFuncNamesContext.prototype.MINUS = function () {
	return this.getToken(HiveParser.MINUS, 0);
};

SysFuncNamesContext.prototype.STAR = function () {
	return this.getToken(HiveParser.STAR, 0);
};

SysFuncNamesContext.prototype.MOD = function () {
	return this.getToken(HiveParser.MOD, 0);
};

SysFuncNamesContext.prototype.DIV = function () {
	return this.getToken(HiveParser.DIV, 0);
};

SysFuncNamesContext.prototype.AMPERSAND = function () {
	return this.getToken(HiveParser.AMPERSAND, 0);
};

SysFuncNamesContext.prototype.TILDE = function () {
	return this.getToken(HiveParser.TILDE, 0);
};

SysFuncNamesContext.prototype.BITWISEOR = function () {
	return this.getToken(HiveParser.BITWISEOR, 0);
};

SysFuncNamesContext.prototype.BITWISEXOR = function () {
	return this.getToken(HiveParser.BITWISEXOR, 0);
};

SysFuncNamesContext.prototype.KW_RLIKE = function () {
	return this.getToken(HiveParser.KW_RLIKE, 0);
};

SysFuncNamesContext.prototype.KW_REGEXP = function () {
	return this.getToken(HiveParser.KW_REGEXP, 0);
};

SysFuncNamesContext.prototype.KW_IN = function () {
	return this.getToken(HiveParser.KW_IN, 0);
};

SysFuncNamesContext.prototype.KW_BETWEEN = function () {
	return this.getToken(HiveParser.KW_BETWEEN, 0);
};

SysFuncNamesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSysFuncNames(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.SysFuncNamesContext = SysFuncNamesContext;

HiveParser.prototype.sysFuncNames = function () {
	var localctx = new SysFuncNamesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 786, HiveParser.RULE_sysFuncNames);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4335;
		_la = this._input.LA(1);
		if (
			!(
				((_la & ~0x1f) == 0 &&
					((1 << _la) &
						((1 << HiveParser.KW_AND) |
							(1 << HiveParser.KW_OR) |
							(1 << HiveParser.KW_NOT) |
							(1 << HiveParser.KW_LIKE) |
							(1 << HiveParser.KW_IF))) !==
						0) ||
				(((_la - 77) & ~0x1f) == 0 &&
					((1 << (_la - 77)) &
						((1 << (HiveParser.KW_BOOLEAN - 77)) |
							(1 << (HiveParser.KW_TINYINT - 77)) |
							(1 << (HiveParser.KW_SMALLINT - 77)) |
							(1 << (HiveParser.KW_INT - 77)) |
							(1 << (HiveParser.KW_BIGINT - 77)) |
							(1 << (HiveParser.KW_FLOAT - 77)) |
							(1 << (HiveParser.KW_DOUBLE - 77)) |
							(1 << (HiveParser.KW_STRING - 77)) |
							(1 << (HiveParser.KW_ARRAY - 77)) |
							(1 << (HiveParser.KW_STRUCT - 77)) |
							(1 << (HiveParser.KW_MAP - 77)) |
							(1 << (HiveParser.KW_UNIONTYPE - 77)))) !==
						0) ||
				(((_la - 136) & ~0x1f) == 0 &&
					((1 << (_la - 136)) &
						((1 << (HiveParser.KW_RLIKE - 136)) |
							(1 << (HiveParser.KW_REGEXP - 136)) |
							(1 << (HiveParser.KW_CASE - 136)) |
							(1 << (HiveParser.KW_WHEN - 136)))) !==
						0) ||
				(((_la - 180) & ~0x1f) == 0 &&
					((1 << (_la - 180)) &
						((1 << (HiveParser.KW_IN - 180)) |
							(1 << (HiveParser.KW_BETWEEN - 180)) |
							(1 << (HiveParser.KW_BINARY - 180)))) !==
						0) ||
				_la === HiveParser.KW_FLOOR ||
				(((_la - 354) & ~0x1f) == 0 &&
					((1 << (_la - 354)) &
						((1 << (HiveParser.EQUAL - 354)) |
							(1 << (HiveParser.EQUAL_NS - 354)) |
							(1 << (HiveParser.NOTEQUAL - 354)) |
							(1 << (HiveParser.LESSTHANOREQUALTO - 354)) |
							(1 << (HiveParser.LESSTHAN - 354)) |
							(1 << (HiveParser.GREATERTHANOREQUALTO - 354)) |
							(1 << (HiveParser.GREATERTHAN - 354)) |
							(1 << (HiveParser.DIVIDE - 354)) |
							(1 << (HiveParser.PLUS - 354)) |
							(1 << (HiveParser.MINUS - 354)) |
							(1 << (HiveParser.STAR - 354)) |
							(1 << (HiveParser.MOD - 354)) |
							(1 << (HiveParser.DIV - 354)) |
							(1 << (HiveParser.AMPERSAND - 354)) |
							(1 << (HiveParser.TILDE - 354)) |
							(1 << (HiveParser.BITWISEOR - 354)) |
							(1 << (HiveParser.BITWISEXOR - 354)))) !==
						0)
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DescFuncNamesContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_descFuncNames;
	return this;
}

DescFuncNamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescFuncNamesContext.prototype.constructor = DescFuncNamesContext;

DescFuncNamesContext.prototype.sysFuncNames = function () {
	return this.getTypedRuleContext(SysFuncNamesContext, 0);
};

DescFuncNamesContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

DescFuncNamesContext.prototype.functionIdentifier = function () {
	return this.getTypedRuleContext(FunctionIdentifierContext, 0);
};

DescFuncNamesContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDescFuncNames(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DescFuncNamesContext = DescFuncNamesContext;

HiveParser.prototype.descFuncNames = function () {
	var localctx = new DescFuncNamesContext(this, this._ctx, this.state);
	this.enterRule(localctx, 788, HiveParser.RULE_descFuncNames);
	try {
		this.state = 4340;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 502, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4337;
				this.sysFuncNames();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4338;
				this.match(HiveParser.StringLiteral);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4339;
				this.functionIdentifier();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_identifier;
	return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function () {
	return this.getToken(HiveParser.Identifier, 0);
};

IdentifierContext.prototype.nonReserved = function () {
	return this.getTypedRuleContext(NonReservedContext, 0);
};

IdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.IdentifierContext = IdentifierContext;

HiveParser.prototype.identifier = function () {
	var localctx = new IdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 790, HiveParser.RULE_identifier);
	try {
		this.state = 4344;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 1);
				this.state = 4342;
				this.match(HiveParser.Identifier);
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
				this.enterOuterAlt(localctx, 2);
				this.state = 4343;
				this.nonReserved();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FunctionIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_functionIdentifier;
	return this;
}

FunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionIdentifierContext.prototype.constructor = FunctionIdentifierContext;

FunctionIdentifierContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

FunctionIdentifierContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

FunctionIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitFunctionIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.FunctionIdentifierContext = FunctionIdentifierContext;

HiveParser.prototype.functionIdentifier = function () {
	var localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 792, HiveParser.RULE_functionIdentifier);
	try {
		this.state = 4351;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 504, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4346;
				this.identifier();
				this.state = 4347;
				this.match(HiveParser.DOT);
				this.state = 4348;
				this.identifier();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4350;
				this.identifier();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PrincipalIdentifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_principalIdentifier;
	return this;
}

PrincipalIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrincipalIdentifierContext.prototype.constructor = PrincipalIdentifierContext;

PrincipalIdentifierContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

PrincipalIdentifierContext.prototype.QuotedIdentifier = function () {
	return this.getToken(HiveParser.QuotedIdentifier, 0);
};

PrincipalIdentifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPrincipalIdentifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PrincipalIdentifierContext = PrincipalIdentifierContext;

HiveParser.prototype.principalIdentifier = function () {
	var localctx = new PrincipalIdentifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 794, HiveParser.RULE_principalIdentifier);
	try {
		this.state = 4355;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.KW_DELTA:
			case HiveParser.KW_CSV:
			case HiveParser.KW_JSON:
			case HiveParser.KW_BLOOMFILTER:
			case HiveParser.Identifier:
				this.enterOuterAlt(localctx, 1);
				this.state = 4353;
				this.identifier();
				break;
			case HiveParser.QuotedIdentifier:
				this.enterOuterAlt(localctx, 2);
				this.state = 4354;
				this.match(HiveParser.QuotedIdentifier);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function NonReservedContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_nonReserved;
	return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.KW_ABORT = function () {
	return this.getToken(HiveParser.KW_ABORT, 0);
};

NonReservedContext.prototype.KW_ADD = function () {
	return this.getToken(HiveParser.KW_ADD, 0);
};

NonReservedContext.prototype.KW_ADMIN = function () {
	return this.getToken(HiveParser.KW_ADMIN, 0);
};

NonReservedContext.prototype.KW_AFTER = function () {
	return this.getToken(HiveParser.KW_AFTER, 0);
};

NonReservedContext.prototype.KW_ANALYZE = function () {
	return this.getToken(HiveParser.KW_ANALYZE, 0);
};

NonReservedContext.prototype.KW_ARCHIVE = function () {
	return this.getToken(HiveParser.KW_ARCHIVE, 0);
};

NonReservedContext.prototype.KW_ASC = function () {
	return this.getToken(HiveParser.KW_ASC, 0);
};

NonReservedContext.prototype.KW_BEFORE = function () {
	return this.getToken(HiveParser.KW_BEFORE, 0);
};

NonReservedContext.prototype.KW_BUCKET = function () {
	return this.getToken(HiveParser.KW_BUCKET, 0);
};

NonReservedContext.prototype.KW_BUCKETS = function () {
	return this.getToken(HiveParser.KW_BUCKETS, 0);
};

NonReservedContext.prototype.KW_CASCADE = function () {
	return this.getToken(HiveParser.KW_CASCADE, 0);
};

NonReservedContext.prototype.KW_CHANGE = function () {
	return this.getToken(HiveParser.KW_CHANGE, 0);
};

NonReservedContext.prototype.KW_CHECK = function () {
	return this.getToken(HiveParser.KW_CHECK, 0);
};

NonReservedContext.prototype.KW_CLUSTER = function () {
	return this.getToken(HiveParser.KW_CLUSTER, 0);
};

NonReservedContext.prototype.KW_CLUSTERED = function () {
	return this.getToken(HiveParser.KW_CLUSTERED, 0);
};

NonReservedContext.prototype.KW_CLUSTERSTATUS = function () {
	return this.getToken(HiveParser.KW_CLUSTERSTATUS, 0);
};

NonReservedContext.prototype.KW_COLLECTION = function () {
	return this.getToken(HiveParser.KW_COLLECTION, 0);
};

NonReservedContext.prototype.KW_COLUMNS = function () {
	return this.getToken(HiveParser.KW_COLUMNS, 0);
};

NonReservedContext.prototype.KW_COMMENT = function () {
	return this.getToken(HiveParser.KW_COMMENT, 0);
};

NonReservedContext.prototype.KW_COMPACT = function () {
	return this.getToken(HiveParser.KW_COMPACT, 0);
};

NonReservedContext.prototype.KW_COMPACTIONS = function () {
	return this.getToken(HiveParser.KW_COMPACTIONS, 0);
};

NonReservedContext.prototype.KW_COMPUTE = function () {
	return this.getToken(HiveParser.KW_COMPUTE, 0);
};

NonReservedContext.prototype.KW_CONCATENATE = function () {
	return this.getToken(HiveParser.KW_CONCATENATE, 0);
};

NonReservedContext.prototype.KW_CONTINUE = function () {
	return this.getToken(HiveParser.KW_CONTINUE, 0);
};

NonReservedContext.prototype.KW_DATA = function () {
	return this.getToken(HiveParser.KW_DATA, 0);
};

NonReservedContext.prototype.KW_DAY = function () {
	return this.getToken(HiveParser.KW_DAY, 0);
};

NonReservedContext.prototype.KW_DATABASES = function () {
	return this.getToken(HiveParser.KW_DATABASES, 0);
};

NonReservedContext.prototype.KW_DATETIME = function () {
	return this.getToken(HiveParser.KW_DATETIME, 0);
};

NonReservedContext.prototype.KW_DBPROPERTIES = function () {
	return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
};

NonReservedContext.prototype.KW_DEFERRED = function () {
	return this.getToken(HiveParser.KW_DEFERRED, 0);
};

NonReservedContext.prototype.KW_DEFINED = function () {
	return this.getToken(HiveParser.KW_DEFINED, 0);
};

NonReservedContext.prototype.KW_DELIMITED = function () {
	return this.getToken(HiveParser.KW_DELIMITED, 0);
};

NonReservedContext.prototype.KW_DEPENDENCY = function () {
	return this.getToken(HiveParser.KW_DEPENDENCY, 0);
};

NonReservedContext.prototype.KW_DESC = function () {
	return this.getToken(HiveParser.KW_DESC, 0);
};

NonReservedContext.prototype.KW_DIRECTORIES = function () {
	return this.getToken(HiveParser.KW_DIRECTORIES, 0);
};

NonReservedContext.prototype.KW_DIRECTORY = function () {
	return this.getToken(HiveParser.KW_DIRECTORY, 0);
};

NonReservedContext.prototype.KW_DISABLE = function () {
	return this.getToken(HiveParser.KW_DISABLE, 0);
};

NonReservedContext.prototype.KW_DISTRIBUTE = function () {
	return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
};

NonReservedContext.prototype.KW_DOW = function () {
	return this.getToken(HiveParser.KW_DOW, 0);
};

NonReservedContext.prototype.KW_ELEM_TYPE = function () {
	return this.getToken(HiveParser.KW_ELEM_TYPE, 0);
};

NonReservedContext.prototype.KW_ENABLE = function () {
	return this.getToken(HiveParser.KW_ENABLE, 0);
};

NonReservedContext.prototype.KW_ENFORCED = function () {
	return this.getToken(HiveParser.KW_ENFORCED, 0);
};

NonReservedContext.prototype.KW_ESCAPED = function () {
	return this.getToken(HiveParser.KW_ESCAPED, 0);
};

NonReservedContext.prototype.KW_EXCLUSIVE = function () {
	return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
};

NonReservedContext.prototype.KW_EXPLAIN = function () {
	return this.getToken(HiveParser.KW_EXPLAIN, 0);
};

NonReservedContext.prototype.KW_EXPORT = function () {
	return this.getToken(HiveParser.KW_EXPORT, 0);
};

NonReservedContext.prototype.KW_FIELDS = function () {
	return this.getToken(HiveParser.KW_FIELDS, 0);
};

NonReservedContext.prototype.KW_FILE = function () {
	return this.getToken(HiveParser.KW_FILE, 0);
};

NonReservedContext.prototype.KW_FILEFORMAT = function () {
	return this.getToken(HiveParser.KW_FILEFORMAT, 0);
};

NonReservedContext.prototype.KW_FIRST = function () {
	return this.getToken(HiveParser.KW_FIRST, 0);
};

NonReservedContext.prototype.KW_FORMAT = function () {
	return this.getToken(HiveParser.KW_FORMAT, 0);
};

NonReservedContext.prototype.KW_FORMATTED = function () {
	return this.getToken(HiveParser.KW_FORMATTED, 0);
};

NonReservedContext.prototype.KW_FUNCTIONS = function () {
	return this.getToken(HiveParser.KW_FUNCTIONS, 0);
};

NonReservedContext.prototype.KW_HOUR = function () {
	return this.getToken(HiveParser.KW_HOUR, 0);
};

NonReservedContext.prototype.KW_IDXPROPERTIES = function () {
	return this.getToken(HiveParser.KW_IDXPROPERTIES, 0);
};

NonReservedContext.prototype.KW_INDEX = function () {
	return this.getToken(HiveParser.KW_INDEX, 0);
};

NonReservedContext.prototype.KW_INDEXES = function () {
	return this.getToken(HiveParser.KW_INDEXES, 0);
};

NonReservedContext.prototype.KW_INPATH = function () {
	return this.getToken(HiveParser.KW_INPATH, 0);
};

NonReservedContext.prototype.KW_INPUTDRIVER = function () {
	return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
};

NonReservedContext.prototype.KW_INPUTFORMAT = function () {
	return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
};

NonReservedContext.prototype.KW_ITEMS = function () {
	return this.getToken(HiveParser.KW_ITEMS, 0);
};

NonReservedContext.prototype.KW_JAR = function () {
	return this.getToken(HiveParser.KW_JAR, 0);
};

NonReservedContext.prototype.KW_KILL = function () {
	return this.getToken(HiveParser.KW_KILL, 0);
};

NonReservedContext.prototype.KW_KEYS = function () {
	return this.getToken(HiveParser.KW_KEYS, 0);
};

NonReservedContext.prototype.KW_KEY_TYPE = function () {
	return this.getToken(HiveParser.KW_KEY_TYPE, 0);
};

NonReservedContext.prototype.KW_LAST = function () {
	return this.getToken(HiveParser.KW_LAST, 0);
};

NonReservedContext.prototype.KW_LIMIT = function () {
	return this.getToken(HiveParser.KW_LIMIT, 0);
};

NonReservedContext.prototype.KW_OFFSET = function () {
	return this.getToken(HiveParser.KW_OFFSET, 0);
};

NonReservedContext.prototype.KW_LINES = function () {
	return this.getToken(HiveParser.KW_LINES, 0);
};

NonReservedContext.prototype.KW_LOAD = function () {
	return this.getToken(HiveParser.KW_LOAD, 0);
};

NonReservedContext.prototype.KW_LOCATION = function () {
	return this.getToken(HiveParser.KW_LOCATION, 0);
};

NonReservedContext.prototype.KW_LOCK = function () {
	return this.getToken(HiveParser.KW_LOCK, 0);
};

NonReservedContext.prototype.KW_LOCKS = function () {
	return this.getToken(HiveParser.KW_LOCKS, 0);
};

NonReservedContext.prototype.KW_LOGICAL = function () {
	return this.getToken(HiveParser.KW_LOGICAL, 0);
};

NonReservedContext.prototype.KW_LONG = function () {
	return this.getToken(HiveParser.KW_LONG, 0);
};

NonReservedContext.prototype.KW_MAPJOIN = function () {
	return this.getToken(HiveParser.KW_MAPJOIN, 0);
};

NonReservedContext.prototype.KW_MATERIALIZED = function () {
	return this.getToken(HiveParser.KW_MATERIALIZED, 0);
};

NonReservedContext.prototype.KW_METADATA = function () {
	return this.getToken(HiveParser.KW_METADATA, 0);
};

NonReservedContext.prototype.KW_MINUTE = function () {
	return this.getToken(HiveParser.KW_MINUTE, 0);
};

NonReservedContext.prototype.KW_MONTH = function () {
	return this.getToken(HiveParser.KW_MONTH, 0);
};

NonReservedContext.prototype.KW_MSCK = function () {
	return this.getToken(HiveParser.KW_MSCK, 0);
};

NonReservedContext.prototype.KW_NOSCAN = function () {
	return this.getToken(HiveParser.KW_NOSCAN, 0);
};

NonReservedContext.prototype.KW_NULLS = function () {
	return this.getToken(HiveParser.KW_NULLS, 0);
};

NonReservedContext.prototype.KW_OPTION = function () {
	return this.getToken(HiveParser.KW_OPTION, 0);
};

NonReservedContext.prototype.KW_OUTPUTDRIVER = function () {
	return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
};

NonReservedContext.prototype.KW_OUTPUTFORMAT = function () {
	return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
};

NonReservedContext.prototype.KW_OVERWRITE = function () {
	return this.getToken(HiveParser.KW_OVERWRITE, 0);
};

NonReservedContext.prototype.KW_OWNER = function () {
	return this.getToken(HiveParser.KW_OWNER, 0);
};

NonReservedContext.prototype.KW_PARTITIONED = function () {
	return this.getToken(HiveParser.KW_PARTITIONED, 0);
};

NonReservedContext.prototype.KW_PARTITIONS = function () {
	return this.getToken(HiveParser.KW_PARTITIONS, 0);
};

NonReservedContext.prototype.KW_PLUS = function () {
	return this.getToken(HiveParser.KW_PLUS, 0);
};

NonReservedContext.prototype.KW_PRINCIPALS = function () {
	return this.getToken(HiveParser.KW_PRINCIPALS, 0);
};

NonReservedContext.prototype.KW_PURGE = function () {
	return this.getToken(HiveParser.KW_PURGE, 0);
};

NonReservedContext.prototype.KW_QUERY = function () {
	return this.getToken(HiveParser.KW_QUERY, 0);
};

NonReservedContext.prototype.KW_QUARTER = function () {
	return this.getToken(HiveParser.KW_QUARTER, 0);
};

NonReservedContext.prototype.KW_READ = function () {
	return this.getToken(HiveParser.KW_READ, 0);
};

NonReservedContext.prototype.KW_REBUILD = function () {
	return this.getToken(HiveParser.KW_REBUILD, 0);
};

NonReservedContext.prototype.KW_RECORDREADER = function () {
	return this.getToken(HiveParser.KW_RECORDREADER, 0);
};

NonReservedContext.prototype.KW_RECORDWRITER = function () {
	return this.getToken(HiveParser.KW_RECORDWRITER, 0);
};

NonReservedContext.prototype.KW_RELOAD = function () {
	return this.getToken(HiveParser.KW_RELOAD, 0);
};

NonReservedContext.prototype.KW_RENAME = function () {
	return this.getToken(HiveParser.KW_RENAME, 0);
};

NonReservedContext.prototype.KW_REPAIR = function () {
	return this.getToken(HiveParser.KW_REPAIR, 0);
};

NonReservedContext.prototype.KW_REPLACE = function () {
	return this.getToken(HiveParser.KW_REPLACE, 0);
};

NonReservedContext.prototype.KW_REPLICATION = function () {
	return this.getToken(HiveParser.KW_REPLICATION, 0);
};

NonReservedContext.prototype.KW_RESTRICT = function () {
	return this.getToken(HiveParser.KW_RESTRICT, 0);
};

NonReservedContext.prototype.KW_REWRITE = function () {
	return this.getToken(HiveParser.KW_REWRITE, 0);
};

NonReservedContext.prototype.KW_ROLE = function () {
	return this.getToken(HiveParser.KW_ROLE, 0);
};

NonReservedContext.prototype.KW_ROLES = function () {
	return this.getToken(HiveParser.KW_ROLES, 0);
};

NonReservedContext.prototype.KW_SCHEMA = function () {
	return this.getToken(HiveParser.KW_SCHEMA, 0);
};

NonReservedContext.prototype.KW_SCHEMAS = function () {
	return this.getToken(HiveParser.KW_SCHEMAS, 0);
};

NonReservedContext.prototype.KW_SECOND = function () {
	return this.getToken(HiveParser.KW_SECOND, 0);
};

NonReservedContext.prototype.KW_SEMI = function () {
	return this.getToken(HiveParser.KW_SEMI, 0);
};

NonReservedContext.prototype.KW_SERDE = function () {
	return this.getToken(HiveParser.KW_SERDE, 0);
};

NonReservedContext.prototype.KW_SERDEPROPERTIES = function () {
	return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
};

NonReservedContext.prototype.KW_SERVER = function () {
	return this.getToken(HiveParser.KW_SERVER, 0);
};

NonReservedContext.prototype.KW_SETS = function () {
	return this.getToken(HiveParser.KW_SETS, 0);
};

NonReservedContext.prototype.KW_SHARED = function () {
	return this.getToken(HiveParser.KW_SHARED, 0);
};

NonReservedContext.prototype.KW_SHOW = function () {
	return this.getToken(HiveParser.KW_SHOW, 0);
};

NonReservedContext.prototype.KW_SHOW_DATABASE = function () {
	return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
};

NonReservedContext.prototype.KW_SKEWED = function () {
	return this.getToken(HiveParser.KW_SKEWED, 0);
};

NonReservedContext.prototype.KW_SORT = function () {
	return this.getToken(HiveParser.KW_SORT, 0);
};

NonReservedContext.prototype.KW_SORTED = function () {
	return this.getToken(HiveParser.KW_SORTED, 0);
};

NonReservedContext.prototype.KW_SSL = function () {
	return this.getToken(HiveParser.KW_SSL, 0);
};

NonReservedContext.prototype.KW_STATISTICS = function () {
	return this.getToken(HiveParser.KW_STATISTICS, 0);
};

NonReservedContext.prototype.KW_STORED = function () {
	return this.getToken(HiveParser.KW_STORED, 0);
};

NonReservedContext.prototype.KW_STREAMTABLE = function () {
	return this.getToken(HiveParser.KW_STREAMTABLE, 0);
};

NonReservedContext.prototype.KW_STRING = function () {
	return this.getToken(HiveParser.KW_STRING, 0);
};

NonReservedContext.prototype.KW_STRUCT = function () {
	return this.getToken(HiveParser.KW_STRUCT, 0);
};

NonReservedContext.prototype.KW_TABLES = function () {
	return this.getToken(HiveParser.KW_TABLES, 0);
};

NonReservedContext.prototype.KW_TBLPROPERTIES = function () {
	return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
};

NonReservedContext.prototype.KW_TEMPORARY = function () {
	return this.getToken(HiveParser.KW_TEMPORARY, 0);
};

NonReservedContext.prototype.KW_TERMINATED = function () {
	return this.getToken(HiveParser.KW_TERMINATED, 0);
};

NonReservedContext.prototype.KW_TINYINT = function () {
	return this.getToken(HiveParser.KW_TINYINT, 0);
};

NonReservedContext.prototype.KW_TOUCH = function () {
	return this.getToken(HiveParser.KW_TOUCH, 0);
};

NonReservedContext.prototype.KW_TRANSACTIONS = function () {
	return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
};

NonReservedContext.prototype.KW_UNARCHIVE = function () {
	return this.getToken(HiveParser.KW_UNARCHIVE, 0);
};

NonReservedContext.prototype.KW_UNDO = function () {
	return this.getToken(HiveParser.KW_UNDO, 0);
};

NonReservedContext.prototype.KW_UNIONTYPE = function () {
	return this.getToken(HiveParser.KW_UNIONTYPE, 0);
};

NonReservedContext.prototype.KW_UNLOCK = function () {
	return this.getToken(HiveParser.KW_UNLOCK, 0);
};

NonReservedContext.prototype.KW_UNSET = function () {
	return this.getToken(HiveParser.KW_UNSET, 0);
};

NonReservedContext.prototype.KW_UNSIGNED = function () {
	return this.getToken(HiveParser.KW_UNSIGNED, 0);
};

NonReservedContext.prototype.KW_URI = function () {
	return this.getToken(HiveParser.KW_URI, 0);
};

NonReservedContext.prototype.KW_USE = function () {
	return this.getToken(HiveParser.KW_USE, 0);
};

NonReservedContext.prototype.KW_UTC = function () {
	return this.getToken(HiveParser.KW_UTC, 0);
};

NonReservedContext.prototype.KW_UTCTIMESTAMP = function () {
	return this.getToken(HiveParser.KW_UTCTIMESTAMP, 0);
};

NonReservedContext.prototype.KW_VALUE_TYPE = function () {
	return this.getToken(HiveParser.KW_VALUE_TYPE, 0);
};

NonReservedContext.prototype.KW_VIEW = function () {
	return this.getToken(HiveParser.KW_VIEW, 0);
};

NonReservedContext.prototype.KW_WEEK = function () {
	return this.getToken(HiveParser.KW_WEEK, 0);
};

NonReservedContext.prototype.KW_WHILE = function () {
	return this.getToken(HiveParser.KW_WHILE, 0);
};

NonReservedContext.prototype.KW_YEAR = function () {
	return this.getToken(HiveParser.KW_YEAR, 0);
};

NonReservedContext.prototype.KW_WORK = function () {
	return this.getToken(HiveParser.KW_WORK, 0);
};

NonReservedContext.prototype.KW_TRANSACTION = function () {
	return this.getToken(HiveParser.KW_TRANSACTION, 0);
};

NonReservedContext.prototype.KW_WRITE = function () {
	return this.getToken(HiveParser.KW_WRITE, 0);
};

NonReservedContext.prototype.KW_ISOLATION = function () {
	return this.getToken(HiveParser.KW_ISOLATION, 0);
};

NonReservedContext.prototype.KW_LEVEL = function () {
	return this.getToken(HiveParser.KW_LEVEL, 0);
};

NonReservedContext.prototype.KW_SNAPSHOT = function () {
	return this.getToken(HiveParser.KW_SNAPSHOT, 0);
};

NonReservedContext.prototype.KW_AUTOCOMMIT = function () {
	return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
};

NonReservedContext.prototype.KW_RELY = function () {
	return this.getToken(HiveParser.KW_RELY, 0);
};

NonReservedContext.prototype.KW_NORELY = function () {
	return this.getToken(HiveParser.KW_NORELY, 0);
};

NonReservedContext.prototype.KW_VALIDATE = function () {
	return this.getToken(HiveParser.KW_VALIDATE, 0);
};

NonReservedContext.prototype.KW_NOVALIDATE = function () {
	return this.getToken(HiveParser.KW_NOVALIDATE, 0);
};

NonReservedContext.prototype.KW_KEY = function () {
	return this.getToken(HiveParser.KW_KEY, 0);
};

NonReservedContext.prototype.KW_MATCHED = function () {
	return this.getToken(HiveParser.KW_MATCHED, 0);
};

NonReservedContext.prototype.KW_REPL = function () {
	return this.getToken(HiveParser.KW_REPL, 0);
};

NonReservedContext.prototype.KW_DUMP = function () {
	return this.getToken(HiveParser.KW_DUMP, 0);
};

NonReservedContext.prototype.KW_STATUS = function () {
	return this.getToken(HiveParser.KW_STATUS, 0);
};

NonReservedContext.prototype.KW_CACHE = function () {
	return this.getToken(HiveParser.KW_CACHE, 0);
};

NonReservedContext.prototype.KW_VIEWS = function () {
	return this.getToken(HiveParser.KW_VIEWS, 0);
};

NonReservedContext.prototype.KW_VECTORIZATION = function () {
	return this.getToken(HiveParser.KW_VECTORIZATION, 0);
};

NonReservedContext.prototype.KW_SUMMARY = function () {
	return this.getToken(HiveParser.KW_SUMMARY, 0);
};

NonReservedContext.prototype.KW_OPERATOR = function () {
	return this.getToken(HiveParser.KW_OPERATOR, 0);
};

NonReservedContext.prototype.KW_EXPRESSION = function () {
	return this.getToken(HiveParser.KW_EXPRESSION, 0);
};

NonReservedContext.prototype.KW_DETAIL = function () {
	return this.getToken(HiveParser.KW_DETAIL, 0);
};

NonReservedContext.prototype.KW_WAIT = function () {
	return this.getToken(HiveParser.KW_WAIT, 0);
};

NonReservedContext.prototype.KW_ZONE = function () {
	return this.getToken(HiveParser.KW_ZONE, 0);
};

NonReservedContext.prototype.KW_DEFAULT = function () {
	return this.getToken(HiveParser.KW_DEFAULT, 0);
};

NonReservedContext.prototype.KW_REOPTIMIZATION = function () {
	return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
};

NonReservedContext.prototype.KW_RESOURCE = function () {
	return this.getToken(HiveParser.KW_RESOURCE, 0);
};

NonReservedContext.prototype.KW_PLAN = function () {
	return this.getToken(HiveParser.KW_PLAN, 0);
};

NonReservedContext.prototype.KW_PLANS = function () {
	return this.getToken(HiveParser.KW_PLANS, 0);
};

NonReservedContext.prototype.KW_QUERY_PARALLELISM = function () {
	return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
};

NonReservedContext.prototype.KW_ACTIVATE = function () {
	return this.getToken(HiveParser.KW_ACTIVATE, 0);
};

NonReservedContext.prototype.KW_MOVE = function () {
	return this.getToken(HiveParser.KW_MOVE, 0);
};

NonReservedContext.prototype.KW_DO = function () {
	return this.getToken(HiveParser.KW_DO, 0);
};

NonReservedContext.prototype.KW_POOL = function () {
	return this.getToken(HiveParser.KW_POOL, 0);
};

NonReservedContext.prototype.KW_ALLOC_FRACTION = function () {
	return this.getToken(HiveParser.KW_ALLOC_FRACTION, 0);
};

NonReservedContext.prototype.KW_SCHEDULING_POLICY = function () {
	return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
};

NonReservedContext.prototype.KW_PATH = function () {
	return this.getToken(HiveParser.KW_PATH, 0);
};

NonReservedContext.prototype.KW_MAPPING = function () {
	return this.getToken(HiveParser.KW_MAPPING, 0);
};

NonReservedContext.prototype.KW_WORKLOAD = function () {
	return this.getToken(HiveParser.KW_WORKLOAD, 0);
};

NonReservedContext.prototype.KW_MANAGEMENT = function () {
	return this.getToken(HiveParser.KW_MANAGEMENT, 0);
};

NonReservedContext.prototype.KW_ACTIVE = function () {
	return this.getToken(HiveParser.KW_ACTIVE, 0);
};

NonReservedContext.prototype.KW_UNMANAGED = function () {
	return this.getToken(HiveParser.KW_UNMANAGED, 0);
};

NonReservedContext.prototype.KW_DELTA = function () {
	return this.getToken(HiveParser.KW_DELTA, 0);
};

NonReservedContext.prototype.KW_CSV = function () {
	return this.getToken(HiveParser.KW_CSV, 0);
};

NonReservedContext.prototype.KW_JSON = function () {
	return this.getToken(HiveParser.KW_JSON, 0);
};

NonReservedContext.prototype.KW_BLOOMFILTER = function () {
	return this.getToken(HiveParser.KW_BLOOMFILTER, 0);
};

NonReservedContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitNonReserved(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.NonReservedContext = NonReservedContext;

HiveParser.prototype.nonReserved = function () {
	var localctx = new NonReservedContext(this, this._ctx, this.state);
	this.enterRule(localctx, 796, HiveParser.RULE_nonReserved);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4357;
		_la = this._input.LA(1);
		if (
			!(
				((_la & ~0x1f) == 0 &&
					((1 << _la) &
						((1 << HiveParser.KW_ASC) |
							(1 << HiveParser.KW_DESC) |
							(1 << HiveParser.KW_NULLS) |
							(1 << HiveParser.KW_LAST) |
							(1 << HiveParser.KW_OVERWRITE))) !==
						0) ||
				(((_la - 36) & ~0x1f) == 0 &&
					((1 << (_la - 36)) &
						((1 << (HiveParser.KW_PARTITIONS - 36)) |
							(1 << (HiveParser.KW_TABLES - 36)) |
							(1 << (HiveParser.KW_COLUMNS - 36)) |
							(1 << (HiveParser.KW_INDEX - 36)) |
							(1 << (HiveParser.KW_INDEXES - 36)) |
							(1 << (HiveParser.KW_REBUILD - 36)) |
							(1 << (HiveParser.KW_FUNCTIONS - 36)) |
							(1 << (HiveParser.KW_SHOW - 36)) |
							(1 << (HiveParser.KW_MSCK - 36)) |
							(1 << (HiveParser.KW_REPAIR - 36)) |
							(1 << (HiveParser.KW_DIRECTORY - 36)) |
							(1 << (HiveParser.KW_CLUSTER - 36)) |
							(1 << (HiveParser.KW_DISTRIBUTE - 36)) |
							(1 << (HiveParser.KW_SORT - 36)) |
							(1 << (HiveParser.KW_LOAD - 36)) |
							(1 << (HiveParser.KW_EXPORT - 36)) |
							(1 << (HiveParser.KW_REPLICATION - 36)) |
							(1 << (HiveParser.KW_METADATA - 36)) |
							(1 << (HiveParser.KW_DATA - 36)) |
							(1 << (HiveParser.KW_INPATH - 36)))) !==
						0) ||
				(((_la - 68) & ~0x1f) == 0 &&
					((1 << (_la - 68)) &
						((1 << (HiveParser.KW_CHANGE - 68)) |
							(1 << (HiveParser.KW_FIRST - 68)) |
							(1 << (HiveParser.KW_AFTER - 68)) |
							(1 << (HiveParser.KW_RENAME - 68)) |
							(1 << (HiveParser.KW_COMMENT - 68)) |
							(1 << (HiveParser.KW_TINYINT - 68)) |
							(1 << (HiveParser.KW_DATETIME - 68)) |
							(1 << (HiveParser.KW_ZONE - 68)) |
							(1 << (HiveParser.KW_STRING - 68)) |
							(1 << (HiveParser.KW_STRUCT - 68)) |
							(1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
						0) ||
				(((_la - 101) & ~0x1f) == 0 &&
					((1 << (_la - 101)) &
						((1 << (HiveParser.KW_PARTITIONED - 101)) |
							(1 << (HiveParser.KW_CLUSTERED - 101)) |
							(1 << (HiveParser.KW_SORTED - 101)) |
							(1 << (HiveParser.KW_BUCKETS - 101)) |
							(1 << (HiveParser.KW_FORMAT - 101)) |
							(1 << (HiveParser.KW_DELIMITED - 101)) |
							(1 << (HiveParser.KW_FIELDS - 101)) |
							(1 << (HiveParser.KW_TERMINATED - 101)) |
							(1 << (HiveParser.KW_ESCAPED - 101)) |
							(1 << (HiveParser.KW_COLLECTION - 101)) |
							(1 << (HiveParser.KW_ITEMS - 101)) |
							(1 << (HiveParser.KW_KEYS - 101)) |
							(1 << (HiveParser.KW_KEY_TYPE - 101)) |
							(1 << (HiveParser.KW_KILL - 101)) |
							(1 << (HiveParser.KW_LINES - 101)) |
							(1 << (HiveParser.KW_STORED - 101)) |
							(1 << (HiveParser.KW_FILEFORMAT - 101)) |
							(1 << (HiveParser.KW_INPUTFORMAT - 101)) |
							(1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
							(1 << (HiveParser.KW_INPUTDRIVER - 101)) |
							(1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
							(1 << (HiveParser.KW_ENABLE - 101)) |
							(1 << (HiveParser.KW_DISABLE - 101)) |
							(1 << (HiveParser.KW_LOCATION - 101)) |
							(1 << (HiveParser.KW_BUCKET - 101)))) !==
						0) ||
				(((_la - 134) & ~0x1f) == 0 &&
					((1 << (_la - 134)) &
						((1 << (HiveParser.KW_ADD - 134)) |
							(1 << (HiveParser.KW_REPLACE - 134)) |
							(1 << (HiveParser.KW_TEMPORARY - 134)) |
							(1 << (HiveParser.KW_FILE - 134)) |
							(1 << (HiveParser.KW_JAR - 134)) |
							(1 << (HiveParser.KW_EXPLAIN - 134)) |
							(1 << (HiveParser.KW_FORMATTED - 134)) |
							(1 << (HiveParser.KW_DEPENDENCY - 134)) |
							(1 << (HiveParser.KW_LOGICAL - 134)) |
							(1 << (HiveParser.KW_SERDE - 134)) |
							(1 << (HiveParser.KW_DEFERRED - 134)) |
							(1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
							(1 << (HiveParser.KW_DBPROPERTIES - 134)) |
							(1 << (HiveParser.KW_LIMIT - 134)) |
							(1 << (HiveParser.KW_OFFSET - 134)) |
							(1 << (HiveParser.KW_UNSET - 134)) |
							(1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
							(1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
							(1 << (HiveParser.KW_VALUE_TYPE - 134)) |
							(1 << (HiveParser.KW_ELEM_TYPE - 134)) |
							(1 << (HiveParser.KW_DEFINED - 134)))) !==
						0) ||
				(((_la - 167) & ~0x1f) == 0 &&
					((1 << (_la - 167)) &
						((1 << (HiveParser.KW_MAPJOIN - 167)) |
							(1 << (HiveParser.KW_STREAMTABLE - 167)) |
							(1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
							(1 << (HiveParser.KW_UTC - 167)) |
							(1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
							(1 << (HiveParser.KW_LONG - 167)) |
							(1 << (HiveParser.KW_PLUS - 167)) |
							(1 << (HiveParser.KW_VIEW - 167)) |
							(1 << (HiveParser.KW_VIEWS - 167)) |
							(1 << (HiveParser.KW_DATABASES - 167)) |
							(1 << (HiveParser.KW_MATERIALIZED - 167)) |
							(1 << (HiveParser.KW_SCHEMA - 167)) |
							(1 << (HiveParser.KW_SCHEMAS - 167)) |
							(1 << (HiveParser.KW_SSL - 167)) |
							(1 << (HiveParser.KW_UNDO - 167)) |
							(1 << (HiveParser.KW_LOCK - 167)) |
							(1 << (HiveParser.KW_LOCKS - 167)) |
							(1 << (HiveParser.KW_UNLOCK - 167)) |
							(1 << (HiveParser.KW_SHARED - 167)) |
							(1 << (HiveParser.KW_EXCLUSIVE - 167)) |
							(1 << (HiveParser.KW_UNSIGNED - 167)) |
							(1 << (HiveParser.KW_WHILE - 167)) |
							(1 << (HiveParser.KW_READ - 167)))) !==
						0) ||
				(((_la - 200) & ~0x1f) == 0 &&
					((1 << (_la - 200)) &
						((1 << (HiveParser.KW_PURGE - 200)) |
							(1 << (HiveParser.KW_ANALYZE - 200)) |
							(1 << (HiveParser.KW_BEFORE - 200)) |
							(1 << (HiveParser.KW_CONTINUE - 200)) |
							(1 << (HiveParser.KW_RECORDREADER - 200)) |
							(1 << (HiveParser.KW_RECORDWRITER - 200)) |
							(1 << (HiveParser.KW_SEMI - 200)) |
							(1 << (HiveParser.KW_TOUCH - 200)) |
							(1 << (HiveParser.KW_ARCHIVE - 200)) |
							(1 << (HiveParser.KW_UNARCHIVE - 200)) |
							(1 << (HiveParser.KW_COMPUTE - 200)) |
							(1 << (HiveParser.KW_STATISTICS - 200)) |
							(1 << (HiveParser.KW_USE - 200)) |
							(1 << (HiveParser.KW_OPTION - 200)) |
							(1 << (HiveParser.KW_CONCATENATE - 200)) |
							(1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
							(1 << (HiveParser.KW_RESTRICT - 200)) |
							(1 << (HiveParser.KW_CASCADE - 200)) |
							(1 << (HiveParser.KW_SKEWED - 200)) |
							(1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
						0) ||
				(((_la - 244) & ~0x1f) == 0 &&
					((1 << (_la - 244)) &
						((1 << (HiveParser.KW_SETS - 244)) |
							(1 << (HiveParser.KW_NOSCAN - 244)) |
							(1 << (HiveParser.KW_ROLE - 244)) |
							(1 << (HiveParser.KW_ROLES - 244)) |
							(1 << (HiveParser.KW_URI - 244)) |
							(1 << (HiveParser.KW_SERVER - 244)) |
							(1 << (HiveParser.KW_ADMIN - 244)) |
							(1 << (HiveParser.KW_OWNER - 244)) |
							(1 << (HiveParser.KW_PRINCIPALS - 244)) |
							(1 << (HiveParser.KW_COMPACT - 244)) |
							(1 << (HiveParser.KW_COMPACTIONS - 244)) |
							(1 << (HiveParser.KW_TRANSACTIONS - 244)) |
							(1 << (HiveParser.KW_REWRITE - 244)) |
							(1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
							(1 << (HiveParser.KW_RELOAD - 244)) |
							(1 << (HiveParser.KW_YEAR - 244)) |
							(1 << (HiveParser.KW_QUERY - 244)) |
							(1 << (HiveParser.KW_QUARTER - 244)) |
							(1 << (HiveParser.KW_MONTH - 244)) |
							(1 << (HiveParser.KW_WEEK - 244)) |
							(1 << (HiveParser.KW_DAY - 244)) |
							(1 << (HiveParser.KW_DOW - 244)) |
							(1 << (HiveParser.KW_HOUR - 244)) |
							(1 << (HiveParser.KW_MINUTE - 244)) |
							(1 << (HiveParser.KW_SECOND - 244)))) !==
						0) ||
				(((_la - 277) & ~0x1f) == 0 &&
					((1 << (_la - 277)) &
						((1 << (HiveParser.KW_TRANSACTION - 277)) |
							(1 << (HiveParser.KW_WORK - 277)) |
							(1 << (HiveParser.KW_WRITE - 277)) |
							(1 << (HiveParser.KW_ISOLATION - 277)) |
							(1 << (HiveParser.KW_LEVEL - 277)) |
							(1 << (HiveParser.KW_SNAPSHOT - 277)) |
							(1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
							(1 << (HiveParser.KW_CACHE - 277)) |
							(1 << (HiveParser.KW_ENFORCED - 277)) |
							(1 << (HiveParser.KW_VALIDATE - 277)) |
							(1 << (HiveParser.KW_NOVALIDATE - 277)) |
							(1 << (HiveParser.KW_RELY - 277)) |
							(1 << (HiveParser.KW_NORELY - 277)) |
							(1 << (HiveParser.KW_KEY - 277)) |
							(1 << (HiveParser.KW_ABORT - 277)) |
							(1 << (HiveParser.KW_MATCHED - 277)) |
							(1 << (HiveParser.KW_REPL - 277)) |
							(1 << (HiveParser.KW_DUMP - 277)) |
							(1 << (HiveParser.KW_STATUS - 277)) |
							(1 << (HiveParser.KW_VECTORIZATION - 277)) |
							(1 << (HiveParser.KW_SUMMARY - 277)))) !==
						0) ||
				(((_la - 309) & ~0x1f) == 0 &&
					((1 << (_la - 309)) &
						((1 << (HiveParser.KW_OPERATOR - 309)) |
							(1 << (HiveParser.KW_EXPRESSION - 309)) |
							(1 << (HiveParser.KW_DETAIL - 309)) |
							(1 << (HiveParser.KW_WAIT - 309)) |
							(1 << (HiveParser.KW_RESOURCE - 309)) |
							(1 << (HiveParser.KW_PLAN - 309)) |
							(1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
							(1 << (HiveParser.KW_PLANS - 309)) |
							(1 << (HiveParser.KW_ACTIVATE - 309)) |
							(1 << (HiveParser.KW_DEFAULT - 309)) |
							(1 << (HiveParser.KW_CHECK - 309)) |
							(1 << (HiveParser.KW_POOL - 309)) |
							(1 << (HiveParser.KW_MOVE - 309)) |
							(1 << (HiveParser.KW_DO - 309)) |
							(1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
							(1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
							(1 << (HiveParser.KW_PATH - 309)) |
							(1 << (HiveParser.KW_MAPPING - 309)) |
							(1 << (HiveParser.KW_WORKLOAD - 309)) |
							(1 << (HiveParser.KW_MANAGEMENT - 309)) |
							(1 << (HiveParser.KW_ACTIVE - 309)) |
							(1 << (HiveParser.KW_UNMANAGED - 309)) |
							(1 << (HiveParser.KW_DELTA - 309)) |
							(1 << (HiveParser.KW_CSV - 309)))) !==
						0) ||
				_la === HiveParser.KW_JSON ||
				_la === HiveParser.KW_BLOOMFILTER
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function Sql11ReservedKeywordsUsedAsFunctionNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName;
	return this;
}

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.constructor = Sql11ReservedKeywordsUsedAsFunctionNameContext;

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_IF = function () {
	return this.getToken(HiveParser.KW_IF, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_ARRAY = function () {
	return this.getToken(HiveParser.KW_ARRAY, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_MAP = function () {
	return this.getToken(HiveParser.KW_MAP, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_BIGINT = function () {
	return this.getToken(HiveParser.KW_BIGINT, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_BINARY = function () {
	return this.getToken(HiveParser.KW_BINARY, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_BOOLEAN = function () {
	return this.getToken(HiveParser.KW_BOOLEAN, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_CURRENT_DATE = function () {
	return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_CURRENT_TIMESTAMP = function () {
	return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_DATE = function () {
	return this.getToken(HiveParser.KW_DATE, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_DOUBLE = function () {
	return this.getToken(HiveParser.KW_DOUBLE, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_FLOAT = function () {
	return this.getToken(HiveParser.KW_FLOAT, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_GROUPING = function () {
	return this.getToken(HiveParser.KW_GROUPING, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_INT = function () {
	return this.getToken(HiveParser.KW_INT, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_SMALLINT = function () {
	return this.getToken(HiveParser.KW_SMALLINT, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.KW_TIMESTAMP = function () {
	return this.getToken(HiveParser.KW_TIMESTAMP, 0);
};

Sql11ReservedKeywordsUsedAsFunctionNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext = Sql11ReservedKeywordsUsedAsFunctionNameContext;

HiveParser.prototype.sql11ReservedKeywordsUsedAsFunctionName = function () {
	var localctx = new Sql11ReservedKeywordsUsedAsFunctionNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 798, HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4359;
		_la = this._input.LA(1);
		if (
			!(
				_la === HiveParser.KW_IF ||
				(((_la - 77) & ~0x1f) == 0 &&
					((1 << (_la - 77)) &
						((1 << (HiveParser.KW_BOOLEAN - 77)) |
							(1 << (HiveParser.KW_SMALLINT - 77)) |
							(1 << (HiveParser.KW_INT - 77)) |
							(1 << (HiveParser.KW_BIGINT - 77)) |
							(1 << (HiveParser.KW_FLOAT - 77)) |
							(1 << (HiveParser.KW_DOUBLE - 77)) |
							(1 << (HiveParser.KW_DATE - 77)) |
							(1 << (HiveParser.KW_TIMESTAMP - 77)) |
							(1 << (HiveParser.KW_ARRAY - 77)) |
							(1 << (HiveParser.KW_MAP - 77)))) !==
						0) ||
				_la === HiveParser.KW_BINARY ||
				(((_la - 238) & ~0x1f) == 0 &&
					((1 << (_la - 238)) &
						((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
							(1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
							(1 << (HiveParser.KW_GROUPING - 238)))) !==
						0)
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ResourcePlanDdlStatementsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_resourcePlanDdlStatements;
	return this;
}

ResourcePlanDdlStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourcePlanDdlStatementsContext.prototype.constructor = ResourcePlanDdlStatementsContext;

ResourcePlanDdlStatementsContext.prototype.createResourcePlanStatement = function () {
	return this.getTypedRuleContext(CreateResourcePlanStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.alterResourcePlanStatement = function () {
	return this.getTypedRuleContext(AlterResourcePlanStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.dropResourcePlanStatement = function () {
	return this.getTypedRuleContext(DropResourcePlanStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.globalWmStatement = function () {
	return this.getTypedRuleContext(GlobalWmStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.replaceResourcePlanStatement = function () {
	return this.getTypedRuleContext(ReplaceResourcePlanStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.createTriggerStatement = function () {
	return this.getTypedRuleContext(CreateTriggerStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.alterTriggerStatement = function () {
	return this.getTypedRuleContext(AlterTriggerStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.dropTriggerStatement = function () {
	return this.getTypedRuleContext(DropTriggerStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.createPoolStatement = function () {
	return this.getTypedRuleContext(CreatePoolStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.alterPoolStatement = function () {
	return this.getTypedRuleContext(AlterPoolStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.dropPoolStatement = function () {
	return this.getTypedRuleContext(DropPoolStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.createMappingStatement = function () {
	return this.getTypedRuleContext(CreateMappingStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.alterMappingStatement = function () {
	return this.getTypedRuleContext(AlterMappingStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.dropMappingStatement = function () {
	return this.getTypedRuleContext(DropMappingStatementContext, 0);
};

ResourcePlanDdlStatementsContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitResourcePlanDdlStatements(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ResourcePlanDdlStatementsContext = ResourcePlanDdlStatementsContext;

HiveParser.prototype.resourcePlanDdlStatements = function () {
	var localctx = new ResourcePlanDdlStatementsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 800, HiveParser.RULE_resourcePlanDdlStatements);
	try {
		this.state = 4375;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 506, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 4361;
				this.createResourcePlanStatement();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 4362;
				this.alterResourcePlanStatement();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 4363;
				this.dropResourcePlanStatement();
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 4364;
				this.globalWmStatement();
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 4365;
				this.replaceResourcePlanStatement();
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 4366;
				this.createTriggerStatement();
				break;

			case 7:
				this.enterOuterAlt(localctx, 7);
				this.state = 4367;
				this.alterTriggerStatement();
				break;

			case 8:
				this.enterOuterAlt(localctx, 8);
				this.state = 4368;
				this.dropTriggerStatement();
				break;

			case 9:
				this.enterOuterAlt(localctx, 9);
				this.state = 4369;
				this.createPoolStatement();
				break;

			case 10:
				this.enterOuterAlt(localctx, 10);
				this.state = 4370;
				this.alterPoolStatement();
				break;

			case 11:
				this.enterOuterAlt(localctx, 11);
				this.state = 4371;
				this.dropPoolStatement();
				break;

			case 12:
				this.enterOuterAlt(localctx, 12);
				this.state = 4372;
				this.createMappingStatement();
				break;

			case 13:
				this.enterOuterAlt(localctx, 13);
				this.state = 4373;
				this.alterMappingStatement();
				break;

			case 14:
				this.enterOuterAlt(localctx, 14);
				this.state = 4374;
				this.dropMappingStatement();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RpAssignContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rpAssign;
	return this;
}

RpAssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RpAssignContext.prototype.constructor = RpAssignContext;

RpAssignContext.prototype.KW_QUERY_PARALLELISM = function () {
	return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
};

RpAssignContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

RpAssignContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

RpAssignContext.prototype.KW_DEFAULT = function () {
	return this.getToken(HiveParser.KW_DEFAULT, 0);
};

RpAssignContext.prototype.KW_POOL = function () {
	return this.getToken(HiveParser.KW_POOL, 0);
};

RpAssignContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

RpAssignContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRpAssign(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RpAssignContext = RpAssignContext;

HiveParser.prototype.rpAssign = function () {
	var localctx = new RpAssignContext(this, this._ctx, this.state);
	this.enterRule(localctx, 802, HiveParser.RULE_rpAssign);
	try {
		this.state = 4384;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_QUERY_PARALLELISM:
				this.enterOuterAlt(localctx, 1);
				this.state = 4377;
				this.match(HiveParser.KW_QUERY_PARALLELISM);
				this.state = 4378;
				this.match(HiveParser.EQUAL);
				this.state = 4379;
				this.match(HiveParser.Number);
				break;
			case HiveParser.KW_DEFAULT:
				this.enterOuterAlt(localctx, 2);
				this.state = 4380;
				this.match(HiveParser.KW_DEFAULT);
				this.state = 4381;
				this.match(HiveParser.KW_POOL);
				this.state = 4382;
				this.match(HiveParser.EQUAL);
				this.state = 4383;
				this.poolPath();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RpAssignListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rpAssignList;
	return this;
}

RpAssignListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RpAssignListContext.prototype.constructor = RpAssignListContext;

RpAssignListContext.prototype.rpAssign = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(RpAssignContext);
	} else {
		return this.getTypedRuleContext(RpAssignContext, i);
	}
};

RpAssignListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

RpAssignListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRpAssignList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RpAssignListContext = RpAssignListContext;

HiveParser.prototype.rpAssignList = function () {
	var localctx = new RpAssignListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 804, HiveParser.RULE_rpAssignList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4386;
		this.rpAssign();
		this.state = 4391;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 4387;
			this.match(HiveParser.COMMA);
			this.state = 4388;
			this.rpAssign();
			this.state = 4393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RpUnassignContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rpUnassign;
	return this;
}

RpUnassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RpUnassignContext.prototype.constructor = RpUnassignContext;

RpUnassignContext.prototype.KW_QUERY_PARALLELISM = function () {
	return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
};

RpUnassignContext.prototype.KW_DEFAULT = function () {
	return this.getToken(HiveParser.KW_DEFAULT, 0);
};

RpUnassignContext.prototype.KW_POOL = function () {
	return this.getToken(HiveParser.KW_POOL, 0);
};

RpUnassignContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRpUnassign(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RpUnassignContext = RpUnassignContext;

HiveParser.prototype.rpUnassign = function () {
	var localctx = new RpUnassignContext(this, this._ctx, this.state);
	this.enterRule(localctx, 806, HiveParser.RULE_rpUnassign);
	try {
		this.state = 4397;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_QUERY_PARALLELISM:
				this.enterOuterAlt(localctx, 1);
				this.state = 4394;
				this.match(HiveParser.KW_QUERY_PARALLELISM);
				break;
			case HiveParser.KW_DEFAULT:
				this.enterOuterAlt(localctx, 2);
				this.state = 4395;
				this.match(HiveParser.KW_DEFAULT);
				this.state = 4396;
				this.match(HiveParser.KW_POOL);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RpUnassignListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_rpUnassignList;
	return this;
}

RpUnassignListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RpUnassignListContext.prototype.constructor = RpUnassignListContext;

RpUnassignListContext.prototype.rpUnassign = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(RpUnassignContext);
	} else {
		return this.getTypedRuleContext(RpUnassignContext, i);
	}
};

RpUnassignListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

RpUnassignListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitRpUnassignList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.RpUnassignListContext = RpUnassignListContext;

HiveParser.prototype.rpUnassignList = function () {
	var localctx = new RpUnassignListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 808, HiveParser.RULE_rpUnassignList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4399;
		this.rpUnassign();
		this.state = 4404;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 4400;
			this.match(HiveParser.COMMA);
			this.state = 4401;
			this.rpUnassign();
			this.state = 4406;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateResourcePlanStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createResourcePlanStatement;
	return this;
}

CreateResourcePlanStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateResourcePlanStatementContext.prototype.constructor = CreateResourcePlanStatementContext;

CreateResourcePlanStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateResourcePlanStatementContext.prototype.KW_RESOURCE = function () {
	return this.getToken(HiveParser.KW_RESOURCE, 0);
};

CreateResourcePlanStatementContext.prototype.KW_PLAN = function () {
	return this.getToken(HiveParser.KW_PLAN, 0);
};

CreateResourcePlanStatementContext.prototype.createResourcePlanStatementLikeExisting = function () {
	return this.getTypedRuleContext(CreateResourcePlanStatementLikeExistingContext, 0);
};

CreateResourcePlanStatementContext.prototype.createNewResourcePlanStatement = function () {
	return this.getTypedRuleContext(CreateNewResourcePlanStatementContext, 0);
};

CreateResourcePlanStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateResourcePlanStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateResourcePlanStatementContext = CreateResourcePlanStatementContext;

HiveParser.prototype.createResourcePlanStatement = function () {
	var localctx = new CreateResourcePlanStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 810, HiveParser.RULE_createResourcePlanStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4407;
		this.match(HiveParser.KW_CREATE);
		this.state = 4408;
		this.match(HiveParser.KW_RESOURCE);
		this.state = 4409;
		this.match(HiveParser.KW_PLAN);
		this.state = 4412;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 511, this._ctx);
		switch (la_) {
			case 1:
				this.state = 4410;
				this.createResourcePlanStatementLikeExisting();
				break;

			case 2:
				this.state = 4411;
				this.createNewResourcePlanStatement();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateResourcePlanStatementLikeExistingContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createResourcePlanStatementLikeExisting;
	return this;
}

CreateResourcePlanStatementLikeExistingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateResourcePlanStatementLikeExistingContext.prototype.constructor = CreateResourcePlanStatementLikeExistingContext;

CreateResourcePlanStatementLikeExistingContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

CreateResourcePlanStatementLikeExistingContext.prototype.KW_LIKE = function () {
	return this.getToken(HiveParser.KW_LIKE, 0);
};

CreateResourcePlanStatementLikeExistingContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateResourcePlanStatementLikeExisting(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateResourcePlanStatementLikeExistingContext = CreateResourcePlanStatementLikeExistingContext;

HiveParser.prototype.createResourcePlanStatementLikeExisting = function () {
	var localctx = new CreateResourcePlanStatementLikeExistingContext(this, this._ctx, this.state);
	this.enterRule(localctx, 812, HiveParser.RULE_createResourcePlanStatementLikeExisting);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4414;
		this.identifier();
		this.state = 4415;
		this.match(HiveParser.KW_LIKE);
		this.state = 4416;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateNewResourcePlanStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createNewResourcePlanStatement;
	return this;
}

CreateNewResourcePlanStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateNewResourcePlanStatementContext.prototype.constructor = CreateNewResourcePlanStatementContext;

CreateNewResourcePlanStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreateNewResourcePlanStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

CreateNewResourcePlanStatementContext.prototype.rpAssignList = function () {
	return this.getTypedRuleContext(RpAssignListContext, 0);
};

CreateNewResourcePlanStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateNewResourcePlanStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateNewResourcePlanStatementContext = CreateNewResourcePlanStatementContext;

HiveParser.prototype.createNewResourcePlanStatement = function () {
	var localctx = new CreateNewResourcePlanStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 814, HiveParser.RULE_createNewResourcePlanStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4418;
		this.identifier();
		this.state = 4421;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 4419;
			this.match(HiveParser.KW_WITH);
			this.state = 4420;
			this.rpAssignList();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WithReplaceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_withReplace;
	return this;
}

WithReplaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithReplaceContext.prototype.constructor = WithReplaceContext;

WithReplaceContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

WithReplaceContext.prototype.KW_REPLACE = function () {
	return this.getToken(HiveParser.KW_REPLACE, 0);
};

WithReplaceContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitWithReplace(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.WithReplaceContext = WithReplaceContext;

HiveParser.prototype.withReplace = function () {
	var localctx = new WithReplaceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 816, HiveParser.RULE_withReplace);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4423;
		this.match(HiveParser.KW_WITH);
		this.state = 4424;
		this.match(HiveParser.KW_REPLACE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ActivateContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_activate;
	return this;
}

ActivateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActivateContext.prototype.constructor = ActivateContext;

ActivateContext.prototype.KW_ACTIVATE = function () {
	return this.getToken(HiveParser.KW_ACTIVATE, 0);
};

ActivateContext.prototype.withReplace = function () {
	return this.getTypedRuleContext(WithReplaceContext, 0);
};

ActivateContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitActivate(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ActivateContext = ActivateContext;

HiveParser.prototype.activate = function () {
	var localctx = new ActivateContext(this, this._ctx, this.state);
	this.enterRule(localctx, 818, HiveParser.RULE_activate);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4426;
		this.match(HiveParser.KW_ACTIVATE);
		this.state = 4428;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 4427;
			this.withReplace();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function EnableContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_enable;
	return this;
}

EnableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnableContext.prototype.constructor = EnableContext;

EnableContext.prototype.KW_ENABLE = function () {
	return this.getToken(HiveParser.KW_ENABLE, 0);
};

EnableContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitEnable(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.EnableContext = EnableContext;

HiveParser.prototype.enable = function () {
	var localctx = new EnableContext(this, this._ctx, this.state);
	this.enterRule(localctx, 820, HiveParser.RULE_enable);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4430;
		this.match(HiveParser.KW_ENABLE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DisableContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_disable;
	return this;
}

DisableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DisableContext.prototype.constructor = DisableContext;

DisableContext.prototype.KW_DISABLE = function () {
	return this.getToken(HiveParser.KW_DISABLE, 0);
};

DisableContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDisable(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DisableContext = DisableContext;

HiveParser.prototype.disable = function () {
	var localctx = new DisableContext(this, this._ctx, this.state);
	this.enterRule(localctx, 822, HiveParser.RULE_disable);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4432;
		this.match(HiveParser.KW_DISABLE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function UnmanagedContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_unmanaged;
	return this;
}

UnmanagedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnmanagedContext.prototype.constructor = UnmanagedContext;

UnmanagedContext.prototype.KW_UNMANAGED = function () {
	return this.getToken(HiveParser.KW_UNMANAGED, 0);
};

UnmanagedContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitUnmanaged(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.UnmanagedContext = UnmanagedContext;

HiveParser.prototype.unmanaged = function () {
	var localctx = new UnmanagedContext(this, this._ctx, this.state);
	this.enterRule(localctx, 824, HiveParser.RULE_unmanaged);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4434;
		this.match(HiveParser.KW_UNMANAGED);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterResourcePlanStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterResourcePlanStatement;
	return this;
}

AlterResourcePlanStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterResourcePlanStatementContext.prototype.constructor = AlterResourcePlanStatementContext;

AlterResourcePlanStatementContext.prototype.KW_ALTER = function () {
	return this.getToken(HiveParser.KW_ALTER, 0);
};

AlterResourcePlanStatementContext.prototype.KW_RESOURCE = function () {
	return this.getToken(HiveParser.KW_RESOURCE, 0);
};

AlterResourcePlanStatementContext.prototype.KW_PLAN = function () {
	return this.getToken(HiveParser.KW_PLAN, 0);
};

AlterResourcePlanStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterResourcePlanStatementContext.prototype.alterResourcePlanRenameSuffix = function () {
	return this.getTypedRuleContext(AlterResourcePlanRenameSuffixContext, 0);
};

AlterResourcePlanStatementContext.prototype.KW_VALIDATE = function () {
	return this.getToken(HiveParser.KW_VALIDATE, 0);
};

AlterResourcePlanStatementContext.prototype.KW_DISABLE = function () {
	return this.getToken(HiveParser.KW_DISABLE, 0);
};

AlterResourcePlanStatementContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterResourcePlanStatementContext.prototype.rpAssignList = function () {
	return this.getTypedRuleContext(RpAssignListContext, 0);
};

AlterResourcePlanStatementContext.prototype.KW_UNSET = function () {
	return this.getToken(HiveParser.KW_UNSET, 0);
};

AlterResourcePlanStatementContext.prototype.rpUnassignList = function () {
	return this.getTypedRuleContext(RpUnassignListContext, 0);
};

AlterResourcePlanStatementContext.prototype.activate = function () {
	return this.getTypedRuleContext(ActivateContext, 0);
};

AlterResourcePlanStatementContext.prototype.enable = function () {
	return this.getTypedRuleContext(EnableContext, 0);
};

AlterResourcePlanStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterResourcePlanStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterResourcePlanStatementContext = AlterResourcePlanStatementContext;

HiveParser.prototype.alterResourcePlanStatement = function () {
	var localctx = new AlterResourcePlanStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 826, HiveParser.RULE_alterResourcePlanStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4436;
		this.match(HiveParser.KW_ALTER);
		this.state = 4437;
		this.match(HiveParser.KW_RESOURCE);
		this.state = 4438;
		this.match(HiveParser.KW_PLAN);
		this.state = 4439;
		this.identifier();
		this.state = 4457;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_VALIDATE:
				this.state = 4440;
				this.match(HiveParser.KW_VALIDATE);
				break;
			case HiveParser.KW_DISABLE:
				this.state = 4441;
				this.match(HiveParser.KW_DISABLE);
				break;
			case HiveParser.KW_SET:
				this.state = 4442;
				this.match(HiveParser.KW_SET);
				this.state = 4443;
				this.rpAssignList();
				break;
			case HiveParser.KW_UNSET:
				this.state = 4444;
				this.match(HiveParser.KW_UNSET);
				this.state = 4445;
				this.rpUnassignList();
				break;
			case HiveParser.KW_RENAME:
				this.state = 4446;
				this.alterResourcePlanRenameSuffix();
				break;
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_ACTIVATE:
				this.state = 4455;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case HiveParser.KW_ACTIVATE:
						this.state = 4447;
						this.activate();
						this.state = 4449;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_ENABLE) {
							this.state = 4448;
							this.enable();
						}

						break;
					case HiveParser.KW_ENABLE:
						this.state = 4451;
						this.enable();
						this.state = 4453;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_ACTIVATE) {
							this.state = 4452;
							this.activate();
						}

						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterResourcePlanRenameSuffixContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterResourcePlanRenameSuffix;
	return this;
}

AlterResourcePlanRenameSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterResourcePlanRenameSuffixContext.prototype.constructor = AlterResourcePlanRenameSuffixContext;

AlterResourcePlanRenameSuffixContext.prototype.KW_RENAME = function () {
	return this.getToken(HiveParser.KW_RENAME, 0);
};

AlterResourcePlanRenameSuffixContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

AlterResourcePlanRenameSuffixContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterResourcePlanRenameSuffixContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterResourcePlanRenameSuffix(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterResourcePlanRenameSuffixContext = AlterResourcePlanRenameSuffixContext;

HiveParser.prototype.alterResourcePlanRenameSuffix = function () {
	var localctx = new AlterResourcePlanRenameSuffixContext(this, this._ctx, this.state);
	this.enterRule(localctx, 828, HiveParser.RULE_alterResourcePlanRenameSuffix);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4459;
		this.match(HiveParser.KW_RENAME);
		this.state = 4460;
		this.match(HiveParser.KW_TO);
		this.state = 4461;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GlobalWmStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_globalWmStatement;
	return this;
}

GlobalWmStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalWmStatementContext.prototype.constructor = GlobalWmStatementContext;

GlobalWmStatementContext.prototype.KW_WORKLOAD = function () {
	return this.getToken(HiveParser.KW_WORKLOAD, 0);
};

GlobalWmStatementContext.prototype.KW_MANAGEMENT = function () {
	return this.getToken(HiveParser.KW_MANAGEMENT, 0);
};

GlobalWmStatementContext.prototype.enable = function () {
	return this.getTypedRuleContext(EnableContext, 0);
};

GlobalWmStatementContext.prototype.disable = function () {
	return this.getTypedRuleContext(DisableContext, 0);
};

GlobalWmStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitGlobalWmStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.GlobalWmStatementContext = GlobalWmStatementContext;

HiveParser.prototype.globalWmStatement = function () {
	var localctx = new GlobalWmStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 830, HiveParser.RULE_globalWmStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4465;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ENABLE:
				this.state = 4463;
				this.enable();
				break;
			case HiveParser.KW_DISABLE:
				this.state = 4464;
				this.disable();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
		this.state = 4467;
		this.match(HiveParser.KW_WORKLOAD);
		this.state = 4468;
		this.match(HiveParser.KW_MANAGEMENT);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ReplaceResourcePlanStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_replaceResourcePlanStatement;
	return this;
}

ReplaceResourcePlanStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplaceResourcePlanStatementContext.prototype.constructor = ReplaceResourcePlanStatementContext;

ReplaceResourcePlanStatementContext.prototype.KW_REPLACE = function () {
	return this.getToken(HiveParser.KW_REPLACE, 0);
};

ReplaceResourcePlanStatementContext.prototype.KW_ACTIVE = function () {
	return this.getToken(HiveParser.KW_ACTIVE, 0);
};

ReplaceResourcePlanStatementContext.prototype.KW_RESOURCE = function () {
	return this.getToken(HiveParser.KW_RESOURCE, 0);
};

ReplaceResourcePlanStatementContext.prototype.KW_PLAN = function () {
	return this.getToken(HiveParser.KW_PLAN, 0);
};

ReplaceResourcePlanStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

ReplaceResourcePlanStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

ReplaceResourcePlanStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitReplaceResourcePlanStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ReplaceResourcePlanStatementContext = ReplaceResourcePlanStatementContext;

HiveParser.prototype.replaceResourcePlanStatement = function () {
	var localctx = new ReplaceResourcePlanStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 832, HiveParser.RULE_replaceResourcePlanStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4470;
		this.match(HiveParser.KW_REPLACE);
		this.state = 4482;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ACTIVE:
				this.state = 4471;
				this.match(HiveParser.KW_ACTIVE);
				this.state = 4472;
				this.match(HiveParser.KW_RESOURCE);
				this.state = 4473;
				this.match(HiveParser.KW_PLAN);
				this.state = 4474;
				this.match(HiveParser.KW_WITH);
				this.state = 4475;
				this.identifier();
				break;
			case HiveParser.KW_RESOURCE:
				this.state = 4476;
				this.match(HiveParser.KW_RESOURCE);
				this.state = 4477;
				this.match(HiveParser.KW_PLAN);
				this.state = 4478;
				this.identifier();
				this.state = 4479;
				this.match(HiveParser.KW_WITH);
				this.state = 4480;
				this.identifier();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropResourcePlanStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropResourcePlanStatement;
	return this;
}

DropResourcePlanStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropResourcePlanStatementContext.prototype.constructor = DropResourcePlanStatementContext;

DropResourcePlanStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropResourcePlanStatementContext.prototype.KW_RESOURCE = function () {
	return this.getToken(HiveParser.KW_RESOURCE, 0);
};

DropResourcePlanStatementContext.prototype.KW_PLAN = function () {
	return this.getToken(HiveParser.KW_PLAN, 0);
};

DropResourcePlanStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DropResourcePlanStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropResourcePlanStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropResourcePlanStatementContext = DropResourcePlanStatementContext;

HiveParser.prototype.dropResourcePlanStatement = function () {
	var localctx = new DropResourcePlanStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 834, HiveParser.RULE_dropResourcePlanStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4484;
		this.match(HiveParser.KW_DROP);
		this.state = 4485;
		this.match(HiveParser.KW_RESOURCE);
		this.state = 4486;
		this.match(HiveParser.KW_PLAN);
		this.state = 4487;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PoolPathContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_poolPath;
	return this;
}

PoolPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PoolPathContext.prototype.constructor = PoolPathContext;

PoolPathContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

PoolPathContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.DOT);
	} else {
		return this.getToken(HiveParser.DOT, i);
	}
};

PoolPathContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPoolPath(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PoolPathContext = PoolPathContext;

HiveParser.prototype.poolPath = function () {
	var localctx = new PoolPathContext(this, this._ctx, this.state);
	this.enterRule(localctx, 836, HiveParser.RULE_poolPath);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4489;
		this.identifier();
		this.state = 4494;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.DOT) {
			this.state = 4490;
			this.match(HiveParser.DOT);
			this.state = 4491;
			this.identifier();
			this.state = 4496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerExpression;
	return this;
}

TriggerExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerExpressionContext.prototype.constructor = TriggerExpressionContext;

TriggerExpressionContext.prototype.triggerAtomExpression = function () {
	return this.getTypedRuleContext(TriggerAtomExpressionContext, 0);
};

TriggerExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerExpressionContext = TriggerExpressionContext;

HiveParser.prototype.triggerExpression = function () {
	var localctx = new TriggerExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 838, HiveParser.RULE_triggerExpression);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4497;
		this.triggerAtomExpression();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerExpressionStandaloneContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerExpressionStandalone;
	return this;
}

TriggerExpressionStandaloneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerExpressionStandaloneContext.prototype.constructor = TriggerExpressionStandaloneContext;

TriggerExpressionStandaloneContext.prototype.triggerExpression = function () {
	return this.getTypedRuleContext(TriggerExpressionContext, 0);
};

TriggerExpressionStandaloneContext.prototype.EOF = function () {
	return this.getToken(HiveParser.EOF, 0);
};

TriggerExpressionStandaloneContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerExpressionStandalone(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerExpressionStandaloneContext = TriggerExpressionStandaloneContext;

HiveParser.prototype.triggerExpressionStandalone = function () {
	var localctx = new TriggerExpressionStandaloneContext(this, this._ctx, this.state);
	this.enterRule(localctx, 840, HiveParser.RULE_triggerExpressionStandalone);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4499;
		this.triggerExpression();
		this.state = 4500;
		this.match(HiveParser.EOF);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerOrExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerOrExpression;
	return this;
}

TriggerOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerOrExpressionContext.prototype.constructor = TriggerOrExpressionContext;

TriggerOrExpressionContext.prototype.triggerAndExpression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TriggerAndExpressionContext);
	} else {
		return this.getTypedRuleContext(TriggerAndExpressionContext, i);
	}
};

TriggerOrExpressionContext.prototype.KW_OR = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_OR);
	} else {
		return this.getToken(HiveParser.KW_OR, i);
	}
};

TriggerOrExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerOrExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerOrExpressionContext = TriggerOrExpressionContext;

HiveParser.prototype.triggerOrExpression = function () {
	var localctx = new TriggerOrExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 842, HiveParser.RULE_triggerOrExpression);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4502;
		this.triggerAndExpression();
		this.state = 4507;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.KW_OR) {
			this.state = 4503;
			this.match(HiveParser.KW_OR);
			this.state = 4504;
			this.triggerAndExpression();
			this.state = 4509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerAndExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerAndExpression;
	return this;
}

TriggerAndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerAndExpressionContext.prototype.constructor = TriggerAndExpressionContext;

TriggerAndExpressionContext.prototype.triggerAtomExpression = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TriggerAtomExpressionContext);
	} else {
		return this.getTypedRuleContext(TriggerAtomExpressionContext, i);
	}
};

TriggerAndExpressionContext.prototype.KW_AND = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.KW_AND);
	} else {
		return this.getToken(HiveParser.KW_AND, i);
	}
};

TriggerAndExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerAndExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerAndExpressionContext = TriggerAndExpressionContext;

HiveParser.prototype.triggerAndExpression = function () {
	var localctx = new TriggerAndExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 844, HiveParser.RULE_triggerAndExpression);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4510;
		this.triggerAtomExpression();
		this.state = 4515;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.KW_AND) {
			this.state = 4511;
			this.match(HiveParser.KW_AND);
			this.state = 4512;
			this.triggerAtomExpression();
			this.state = 4517;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerAtomExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerAtomExpression;
	return this;
}

TriggerAtomExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerAtomExpressionContext.prototype.constructor = TriggerAtomExpressionContext;

TriggerAtomExpressionContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

TriggerAtomExpressionContext.prototype.comparisionOperator = function () {
	return this.getTypedRuleContext(ComparisionOperatorContext, 0);
};

TriggerAtomExpressionContext.prototype.triggerLiteral = function () {
	return this.getTypedRuleContext(TriggerLiteralContext, 0);
};

TriggerAtomExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerAtomExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerAtomExpressionContext = TriggerAtomExpressionContext;

HiveParser.prototype.triggerAtomExpression = function () {
	var localctx = new TriggerAtomExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 846, HiveParser.RULE_triggerAtomExpression);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4518;
		this.identifier();
		this.state = 4519;
		this.comparisionOperator();
		this.state = 4520;
		this.triggerLiteral();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerLiteralContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerLiteral;
	return this;
}

TriggerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerLiteralContext.prototype.constructor = TriggerLiteralContext;

TriggerLiteralContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

TriggerLiteralContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

TriggerLiteralContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerLiteral(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerLiteralContext = TriggerLiteralContext;

HiveParser.prototype.triggerLiteral = function () {
	var localctx = new TriggerLiteralContext(this, this._ctx, this.state);
	this.enterRule(localctx, 848, HiveParser.RULE_triggerLiteral);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4522;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.StringLiteral || _la === HiveParser.Number)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ComparisionOperatorContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_comparisionOperator;
	return this;
}

ComparisionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisionOperatorContext.prototype.constructor = ComparisionOperatorContext;

ComparisionOperatorContext.prototype.GREATERTHAN = function () {
	return this.getToken(HiveParser.GREATERTHAN, 0);
};

ComparisionOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitComparisionOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.ComparisionOperatorContext = ComparisionOperatorContext;

HiveParser.prototype.comparisionOperator = function () {
	var localctx = new ComparisionOperatorContext(this, this._ctx, this.state);
	this.enterRule(localctx, 850, HiveParser.RULE_comparisionOperator);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4524;
		this.match(HiveParser.GREATERTHAN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerActionExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerActionExpression;
	return this;
}

TriggerActionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerActionExpressionContext.prototype.constructor = TriggerActionExpressionContext;

TriggerActionExpressionContext.prototype.KW_KILL = function () {
	return this.getToken(HiveParser.KW_KILL, 0);
};

TriggerActionExpressionContext.prototype.KW_MOVE = function () {
	return this.getToken(HiveParser.KW_MOVE, 0);
};

TriggerActionExpressionContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

TriggerActionExpressionContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

TriggerActionExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerActionExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerActionExpressionContext = TriggerActionExpressionContext;

HiveParser.prototype.triggerActionExpression = function () {
	var localctx = new TriggerActionExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 852, HiveParser.RULE_triggerActionExpression);
	try {
		this.state = 4530;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_KILL:
				this.enterOuterAlt(localctx, 1);
				this.state = 4526;
				this.match(HiveParser.KW_KILL);
				break;
			case HiveParser.KW_MOVE:
				this.enterOuterAlt(localctx, 2);
				this.state = 4527;
				this.match(HiveParser.KW_MOVE);
				this.state = 4528;
				this.match(HiveParser.KW_TO);
				this.state = 4529;
				this.poolPath();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerActionExpressionStandaloneContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerActionExpressionStandalone;
	return this;
}

TriggerActionExpressionStandaloneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerActionExpressionStandaloneContext.prototype.constructor = TriggerActionExpressionStandaloneContext;

TriggerActionExpressionStandaloneContext.prototype.triggerActionExpression = function () {
	return this.getTypedRuleContext(TriggerActionExpressionContext, 0);
};

TriggerActionExpressionStandaloneContext.prototype.EOF = function () {
	return this.getToken(HiveParser.EOF, 0);
};

TriggerActionExpressionStandaloneContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerActionExpressionStandalone(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerActionExpressionStandaloneContext = TriggerActionExpressionStandaloneContext;

HiveParser.prototype.triggerActionExpressionStandalone = function () {
	var localctx = new TriggerActionExpressionStandaloneContext(this, this._ctx, this.state);
	this.enterRule(localctx, 854, HiveParser.RULE_triggerActionExpressionStandalone);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4532;
		this.triggerActionExpression();
		this.state = 4533;
		this.match(HiveParser.EOF);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateTriggerStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createTriggerStatement;
	return this;
}

CreateTriggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTriggerStatementContext.prototype.constructor = CreateTriggerStatementContext;

CreateTriggerStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateTriggerStatementContext.prototype.KW_TRIGGER = function () {
	return this.getToken(HiveParser.KW_TRIGGER, 0);
};

CreateTriggerStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

CreateTriggerStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

CreateTriggerStatementContext.prototype.triggerConditionExpression = function () {
	return this.getTypedRuleContext(TriggerConditionExpressionContext, 0);
};

CreateTriggerStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateTriggerStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateTriggerStatementContext = CreateTriggerStatementContext;

HiveParser.prototype.createTriggerStatement = function () {
	var localctx = new CreateTriggerStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 856, HiveParser.RULE_createTriggerStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4535;
		this.match(HiveParser.KW_CREATE);
		this.state = 4536;
		this.match(HiveParser.KW_TRIGGER);
		this.state = 4537;
		this.identifier();
		this.state = 4538;
		this.match(HiveParser.DOT);
		this.state = 4539;
		this.identifier();
		this.state = 4540;
		this.triggerConditionExpression();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterTriggerStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterTriggerStatement;
	return this;
}

AlterTriggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTriggerStatementContext.prototype.constructor = AlterTriggerStatementContext;

AlterTriggerStatementContext.prototype.KW_ALTER = function () {
	return this.getToken(HiveParser.KW_ALTER, 0);
};

AlterTriggerStatementContext.prototype.KW_TRIGGER = function () {
	return this.getToken(HiveParser.KW_TRIGGER, 0);
};

AlterTriggerStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

AlterTriggerStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

AlterTriggerStatementContext.prototype.triggerConditionExpression = function () {
	return this.getTypedRuleContext(TriggerConditionExpressionContext, 0);
};

AlterTriggerStatementContext.prototype.KW_ADD = function () {
	return this.getToken(HiveParser.KW_ADD, 0);
};

AlterTriggerStatementContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

AlterTriggerStatementContext.prototype.KW_POOL = function () {
	return this.getToken(HiveParser.KW_POOL, 0);
};

AlterTriggerStatementContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

AlterTriggerStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

AlterTriggerStatementContext.prototype.KW_FROM = function () {
	return this.getToken(HiveParser.KW_FROM, 0);
};

AlterTriggerStatementContext.prototype.KW_UNMANAGED = function () {
	return this.getToken(HiveParser.KW_UNMANAGED, 0);
};

AlterTriggerStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterTriggerStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterTriggerStatementContext = AlterTriggerStatementContext;

HiveParser.prototype.alterTriggerStatement = function () {
	var localctx = new AlterTriggerStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 858, HiveParser.RULE_alterTriggerStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4542;
		this.match(HiveParser.KW_ALTER);
		this.state = 4543;
		this.match(HiveParser.KW_TRIGGER);
		this.state = 4544;
		this.identifier();
		this.state = 4545;
		this.match(HiveParser.DOT);
		this.state = 4546;
		this.identifier();
		this.state = 4562;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 524, this._ctx);
		switch (la_) {
			case 1:
				this.state = 4547;
				this.triggerConditionExpression();
				break;

			case 2:
				this.state = 4548;
				this.match(HiveParser.KW_ADD);
				this.state = 4549;
				this.match(HiveParser.KW_TO);
				this.state = 4550;
				this.match(HiveParser.KW_POOL);
				this.state = 4551;
				this.poolPath();
				break;

			case 3:
				this.state = 4552;
				this.match(HiveParser.KW_DROP);
				this.state = 4553;
				this.match(HiveParser.KW_FROM);
				this.state = 4554;
				this.match(HiveParser.KW_POOL);
				this.state = 4555;
				this.poolPath();
				break;

			case 4:
				this.state = 4556;
				this.match(HiveParser.KW_ADD);
				this.state = 4557;
				this.match(HiveParser.KW_TO);
				this.state = 4558;
				this.match(HiveParser.KW_UNMANAGED);
				break;

			case 5:
				this.state = 4559;
				this.match(HiveParser.KW_DROP);
				this.state = 4560;
				this.match(HiveParser.KW_FROM);
				this.state = 4561;
				this.match(HiveParser.KW_UNMANAGED);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TriggerConditionExpressionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_triggerConditionExpression;
	return this;
}

TriggerConditionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerConditionExpressionContext.prototype.constructor = TriggerConditionExpressionContext;

TriggerConditionExpressionContext.prototype.KW_WHEN = function () {
	return this.getToken(HiveParser.KW_WHEN, 0);
};

TriggerConditionExpressionContext.prototype.triggerExpression = function () {
	return this.getTypedRuleContext(TriggerExpressionContext, 0);
};

TriggerConditionExpressionContext.prototype.KW_DO = function () {
	return this.getToken(HiveParser.KW_DO, 0);
};

TriggerConditionExpressionContext.prototype.triggerActionExpression = function () {
	return this.getTypedRuleContext(TriggerActionExpressionContext, 0);
};

TriggerConditionExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitTriggerConditionExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.TriggerConditionExpressionContext = TriggerConditionExpressionContext;

HiveParser.prototype.triggerConditionExpression = function () {
	var localctx = new TriggerConditionExpressionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 860, HiveParser.RULE_triggerConditionExpression);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4564;
		this.match(HiveParser.KW_WHEN);
		this.state = 4565;
		this.triggerExpression();
		this.state = 4566;
		this.match(HiveParser.KW_DO);
		this.state = 4567;
		this.triggerActionExpression();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropTriggerStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropTriggerStatement;
	return this;
}

DropTriggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTriggerStatementContext.prototype.constructor = DropTriggerStatementContext;

DropTriggerStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropTriggerStatementContext.prototype.KW_TRIGGER = function () {
	return this.getToken(HiveParser.KW_TRIGGER, 0);
};

DropTriggerStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

DropTriggerStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

DropTriggerStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropTriggerStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropTriggerStatementContext = DropTriggerStatementContext;

HiveParser.prototype.dropTriggerStatement = function () {
	var localctx = new DropTriggerStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 862, HiveParser.RULE_dropTriggerStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4569;
		this.match(HiveParser.KW_DROP);
		this.state = 4570;
		this.match(HiveParser.KW_TRIGGER);
		this.state = 4571;
		this.identifier();
		this.state = 4572;
		this.match(HiveParser.DOT);
		this.state = 4573;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PoolAssignContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_poolAssign;
	return this;
}

PoolAssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PoolAssignContext.prototype.constructor = PoolAssignContext;

PoolAssignContext.prototype.KW_ALLOC_FRACTION = function () {
	return this.getToken(HiveParser.KW_ALLOC_FRACTION, 0);
};

PoolAssignContext.prototype.EQUAL = function () {
	return this.getToken(HiveParser.EQUAL, 0);
};

PoolAssignContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

PoolAssignContext.prototype.KW_QUERY_PARALLELISM = function () {
	return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
};

PoolAssignContext.prototype.KW_SCHEDULING_POLICY = function () {
	return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
};

PoolAssignContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

PoolAssignContext.prototype.KW_PATH = function () {
	return this.getToken(HiveParser.KW_PATH, 0);
};

PoolAssignContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

PoolAssignContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPoolAssign(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PoolAssignContext = PoolAssignContext;

HiveParser.prototype.poolAssign = function () {
	var localctx = new PoolAssignContext(this, this._ctx, this.state);
	this.enterRule(localctx, 864, HiveParser.RULE_poolAssign);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4587;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_ALLOC_FRACTION:
				this.state = 4575;
				this.match(HiveParser.KW_ALLOC_FRACTION);
				this.state = 4576;
				this.match(HiveParser.EQUAL);
				this.state = 4577;
				this.match(HiveParser.Number);
				break;
			case HiveParser.KW_QUERY_PARALLELISM:
				this.state = 4578;
				this.match(HiveParser.KW_QUERY_PARALLELISM);
				this.state = 4579;
				this.match(HiveParser.EQUAL);
				this.state = 4580;
				this.match(HiveParser.Number);
				break;
			case HiveParser.KW_SCHEDULING_POLICY:
				this.state = 4581;
				this.match(HiveParser.KW_SCHEDULING_POLICY);
				this.state = 4582;
				this.match(HiveParser.EQUAL);
				this.state = 4583;
				this.match(HiveParser.StringLiteral);
				break;
			case HiveParser.KW_PATH:
				this.state = 4584;
				this.match(HiveParser.KW_PATH);
				this.state = 4585;
				this.match(HiveParser.EQUAL);
				this.state = 4586;
				this.poolPath();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PoolAssignListContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_poolAssignList;
	return this;
}

PoolAssignListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PoolAssignListContext.prototype.constructor = PoolAssignListContext;

PoolAssignListContext.prototype.poolAssign = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(PoolAssignContext);
	} else {
		return this.getTypedRuleContext(PoolAssignContext, i);
	}
};

PoolAssignListContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(HiveParser.COMMA);
	} else {
		return this.getToken(HiveParser.COMMA, i);
	}
};

PoolAssignListContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitPoolAssignList(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.PoolAssignListContext = PoolAssignListContext;

HiveParser.prototype.poolAssignList = function () {
	var localctx = new PoolAssignListContext(this, this._ctx, this.state);
	this.enterRule(localctx, 866, HiveParser.RULE_poolAssignList);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4589;
		this.poolAssign();
		this.state = 4594;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === HiveParser.COMMA) {
			this.state = 4590;
			this.match(HiveParser.COMMA);
			this.state = 4591;
			this.poolAssign();
			this.state = 4596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreatePoolStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createPoolStatement;
	return this;
}

CreatePoolStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatePoolStatementContext.prototype.constructor = CreatePoolStatementContext;

CreatePoolStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreatePoolStatementContext.prototype.KW_POOL = function () {
	return this.getToken(HiveParser.KW_POOL, 0);
};

CreatePoolStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreatePoolStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

CreatePoolStatementContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

CreatePoolStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

CreatePoolStatementContext.prototype.poolAssignList = function () {
	return this.getTypedRuleContext(PoolAssignListContext, 0);
};

CreatePoolStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreatePoolStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreatePoolStatementContext = CreatePoolStatementContext;

HiveParser.prototype.createPoolStatement = function () {
	var localctx = new CreatePoolStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 868, HiveParser.RULE_createPoolStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4597;
		this.match(HiveParser.KW_CREATE);
		this.state = 4598;
		this.match(HiveParser.KW_POOL);
		this.state = 4599;
		this.identifier();
		this.state = 4600;
		this.match(HiveParser.DOT);
		this.state = 4601;
		this.poolPath();
		this.state = 4602;
		this.match(HiveParser.KW_WITH);
		this.state = 4603;
		this.poolAssignList();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterPoolStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterPoolStatement;
	return this;
}

AlterPoolStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterPoolStatementContext.prototype.constructor = AlterPoolStatementContext;

AlterPoolStatementContext.prototype.KW_ALTER = function () {
	return this.getToken(HiveParser.KW_ALTER, 0);
};

AlterPoolStatementContext.prototype.KW_POOL = function () {
	return this.getToken(HiveParser.KW_POOL, 0);
};

AlterPoolStatementContext.prototype.identifier = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(IdentifierContext);
	} else {
		return this.getTypedRuleContext(IdentifierContext, i);
	}
};

AlterPoolStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

AlterPoolStatementContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

AlterPoolStatementContext.prototype.KW_SET = function () {
	return this.getToken(HiveParser.KW_SET, 0);
};

AlterPoolStatementContext.prototype.poolAssignList = function () {
	return this.getTypedRuleContext(PoolAssignListContext, 0);
};

AlterPoolStatementContext.prototype.KW_UNSET = function () {
	return this.getToken(HiveParser.KW_UNSET, 0);
};

AlterPoolStatementContext.prototype.KW_SCHEDULING_POLICY = function () {
	return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
};

AlterPoolStatementContext.prototype.KW_ADD = function () {
	return this.getToken(HiveParser.KW_ADD, 0);
};

AlterPoolStatementContext.prototype.KW_TRIGGER = function () {
	return this.getToken(HiveParser.KW_TRIGGER, 0);
};

AlterPoolStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

AlterPoolStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterPoolStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterPoolStatementContext = AlterPoolStatementContext;

HiveParser.prototype.alterPoolStatement = function () {
	var localctx = new AlterPoolStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 870, HiveParser.RULE_alterPoolStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4605;
		this.match(HiveParser.KW_ALTER);
		this.state = 4606;
		this.match(HiveParser.KW_POOL);
		this.state = 4607;
		this.identifier();
		this.state = 4608;
		this.match(HiveParser.DOT);
		this.state = 4609;
		this.poolPath();
		this.state = 4620;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_SET:
				this.state = 4610;
				this.match(HiveParser.KW_SET);
				this.state = 4611;
				this.poolAssignList();
				break;
			case HiveParser.KW_UNSET:
				this.state = 4612;
				this.match(HiveParser.KW_UNSET);
				this.state = 4613;
				this.match(HiveParser.KW_SCHEDULING_POLICY);
				break;
			case HiveParser.KW_ADD:
				this.state = 4614;
				this.match(HiveParser.KW_ADD);
				this.state = 4615;
				this.match(HiveParser.KW_TRIGGER);
				this.state = 4616;
				this.identifier();
				break;
			case HiveParser.KW_DROP:
				this.state = 4617;
				this.match(HiveParser.KW_DROP);
				this.state = 4618;
				this.match(HiveParser.KW_TRIGGER);
				this.state = 4619;
				this.identifier();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropPoolStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropPoolStatement;
	return this;
}

DropPoolStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropPoolStatementContext.prototype.constructor = DropPoolStatementContext;

DropPoolStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropPoolStatementContext.prototype.KW_POOL = function () {
	return this.getToken(HiveParser.KW_POOL, 0);
};

DropPoolStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DropPoolStatementContext.prototype.DOT = function () {
	return this.getToken(HiveParser.DOT, 0);
};

DropPoolStatementContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

DropPoolStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropPoolStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropPoolStatementContext = DropPoolStatementContext;

HiveParser.prototype.dropPoolStatement = function () {
	var localctx = new DropPoolStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 872, HiveParser.RULE_dropPoolStatement);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4622;
		this.match(HiveParser.KW_DROP);
		this.state = 4623;
		this.match(HiveParser.KW_POOL);
		this.state = 4624;
		this.identifier();
		this.state = 4625;
		this.match(HiveParser.DOT);
		this.state = 4626;
		this.poolPath();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CreateMappingStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_createMappingStatement;
	return this;
}

CreateMappingStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateMappingStatementContext.prototype.constructor = CreateMappingStatementContext;

CreateMappingStatementContext.prototype.KW_CREATE = function () {
	return this.getToken(HiveParser.KW_CREATE, 0);
};

CreateMappingStatementContext.prototype.KW_MAPPING = function () {
	return this.getToken(HiveParser.KW_MAPPING, 0);
};

CreateMappingStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

CreateMappingStatementContext.prototype.KW_IN = function () {
	return this.getToken(HiveParser.KW_IN, 0);
};

CreateMappingStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

CreateMappingStatementContext.prototype.KW_USER = function () {
	return this.getToken(HiveParser.KW_USER, 0);
};

CreateMappingStatementContext.prototype.KW_GROUP = function () {
	return this.getToken(HiveParser.KW_GROUP, 0);
};

CreateMappingStatementContext.prototype.KW_APPLICATION = function () {
	return this.getToken(HiveParser.KW_APPLICATION, 0);
};

CreateMappingStatementContext.prototype.unmanaged = function () {
	return this.getTypedRuleContext(UnmanagedContext, 0);
};

CreateMappingStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

CreateMappingStatementContext.prototype.KW_ORDER = function () {
	return this.getToken(HiveParser.KW_ORDER, 0);
};

CreateMappingStatementContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

CreateMappingStatementContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

CreateMappingStatementContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

CreateMappingStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitCreateMappingStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.CreateMappingStatementContext = CreateMappingStatementContext;

HiveParser.prototype.createMappingStatement = function () {
	var localctx = new CreateMappingStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 874, HiveParser.RULE_createMappingStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4628;
		this.match(HiveParser.KW_CREATE);
		this.state = 4629;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_GROUP || _la === HiveParser.KW_USER || _la === HiveParser.KW_APPLICATION)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 4630;
		this.match(HiveParser.KW_MAPPING);
		this.state = 4631;
		this.match(HiveParser.StringLiteral);
		this.state = 4632;
		this.match(HiveParser.KW_IN);
		this.state = 4633;
		this.identifier();
		this.state = 4637;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_TO:
				this.state = 4634;
				this.match(HiveParser.KW_TO);
				this.state = 4635;
				this.poolPath();
				break;
			case HiveParser.KW_UNMANAGED:
				this.state = 4636;
				this.unmanaged();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
		this.state = 4642;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 4639;
			this.match(HiveParser.KW_WITH);
			this.state = 4640;
			this.match(HiveParser.KW_ORDER);
			this.state = 4641;
			this.match(HiveParser.Number);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AlterMappingStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_alterMappingStatement;
	return this;
}

AlterMappingStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterMappingStatementContext.prototype.constructor = AlterMappingStatementContext;

AlterMappingStatementContext.prototype.KW_ALTER = function () {
	return this.getToken(HiveParser.KW_ALTER, 0);
};

AlterMappingStatementContext.prototype.KW_MAPPING = function () {
	return this.getToken(HiveParser.KW_MAPPING, 0);
};

AlterMappingStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

AlterMappingStatementContext.prototype.KW_IN = function () {
	return this.getToken(HiveParser.KW_IN, 0);
};

AlterMappingStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

AlterMappingStatementContext.prototype.KW_USER = function () {
	return this.getToken(HiveParser.KW_USER, 0);
};

AlterMappingStatementContext.prototype.KW_GROUP = function () {
	return this.getToken(HiveParser.KW_GROUP, 0);
};

AlterMappingStatementContext.prototype.KW_APPLICATION = function () {
	return this.getToken(HiveParser.KW_APPLICATION, 0);
};

AlterMappingStatementContext.prototype.unmanaged = function () {
	return this.getTypedRuleContext(UnmanagedContext, 0);
};

AlterMappingStatementContext.prototype.KW_WITH = function () {
	return this.getToken(HiveParser.KW_WITH, 0);
};

AlterMappingStatementContext.prototype.KW_ORDER = function () {
	return this.getToken(HiveParser.KW_ORDER, 0);
};

AlterMappingStatementContext.prototype.Number = function () {
	return this.getToken(HiveParser.Number, 0);
};

AlterMappingStatementContext.prototype.KW_TO = function () {
	return this.getToken(HiveParser.KW_TO, 0);
};

AlterMappingStatementContext.prototype.poolPath = function () {
	return this.getTypedRuleContext(PoolPathContext, 0);
};

AlterMappingStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitAlterMappingStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.AlterMappingStatementContext = AlterMappingStatementContext;

HiveParser.prototype.alterMappingStatement = function () {
	var localctx = new AlterMappingStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 876, HiveParser.RULE_alterMappingStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4644;
		this.match(HiveParser.KW_ALTER);
		this.state = 4645;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_GROUP || _la === HiveParser.KW_USER || _la === HiveParser.KW_APPLICATION)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 4646;
		this.match(HiveParser.KW_MAPPING);
		this.state = 4647;
		this.match(HiveParser.StringLiteral);
		this.state = 4648;
		this.match(HiveParser.KW_IN);
		this.state = 4649;
		this.identifier();
		this.state = 4653;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case HiveParser.KW_TO:
				this.state = 4650;
				this.match(HiveParser.KW_TO);
				this.state = 4651;
				this.poolPath();
				break;
			case HiveParser.KW_UNMANAGED:
				this.state = 4652;
				this.unmanaged();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
		this.state = 4658;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === HiveParser.KW_WITH) {
			this.state = 4655;
			this.match(HiveParser.KW_WITH);
			this.state = 4656;
			this.match(HiveParser.KW_ORDER);
			this.state = 4657;
			this.match(HiveParser.Number);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DropMappingStatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = HiveParser.RULE_dropMappingStatement;
	return this;
}

DropMappingStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropMappingStatementContext.prototype.constructor = DropMappingStatementContext;

DropMappingStatementContext.prototype.KW_DROP = function () {
	return this.getToken(HiveParser.KW_DROP, 0);
};

DropMappingStatementContext.prototype.KW_MAPPING = function () {
	return this.getToken(HiveParser.KW_MAPPING, 0);
};

DropMappingStatementContext.prototype.StringLiteral = function () {
	return this.getToken(HiveParser.StringLiteral, 0);
};

DropMappingStatementContext.prototype.KW_IN = function () {
	return this.getToken(HiveParser.KW_IN, 0);
};

DropMappingStatementContext.prototype.identifier = function () {
	return this.getTypedRuleContext(IdentifierContext, 0);
};

DropMappingStatementContext.prototype.KW_USER = function () {
	return this.getToken(HiveParser.KW_USER, 0);
};

DropMappingStatementContext.prototype.KW_GROUP = function () {
	return this.getToken(HiveParser.KW_GROUP, 0);
};

DropMappingStatementContext.prototype.KW_APPLICATION = function () {
	return this.getToken(HiveParser.KW_APPLICATION, 0);
};

DropMappingStatementContext.prototype.accept = function (visitor) {
	if (visitor instanceof HiveParserVisitor) {
		return visitor.visitDropMappingStatement(this);
	} else {
		return visitor.visitChildren(this);
	}
};

HiveParser.DropMappingStatementContext = DropMappingStatementContext;

HiveParser.prototype.dropMappingStatement = function () {
	var localctx = new DropMappingStatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 878, HiveParser.RULE_dropMappingStatement);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 4660;
		this.match(HiveParser.KW_DROP);
		this.state = 4661;
		_la = this._input.LA(1);
		if (!(_la === HiveParser.KW_GROUP || _la === HiveParser.KW_USER || _la === HiveParser.KW_APPLICATION)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 4662;
		this.match(HiveParser.KW_MAPPING);
		this.state = 4663;
		this.match(HiveParser.StringLiteral);
		this.state = 4664;
		this.match(HiveParser.KW_IN);
		this.state = 4665;
		this.identifier();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

HiveParser.prototype.sempred = function (localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 379:
			return this.expression_sempred(localctx, predIndex);
		default:
			throw 'No predicate with index:' + ruleIndex;
	}
};

HiveParser.prototype.expression_sempred = function (localctx, predIndex) {
	switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 9);
		case 5:
			return this.precpred(this._ctx, 8);
		case 6:
			return this.precpred(this._ctx, 5);
		case 7:
			return this.precpred(this._ctx, 3);
		case 8:
			return this.precpred(this._ctx, 2);
		case 9:
			return this.precpred(this._ctx, 14);
		case 10:
			return this.precpred(this._ctx, 7);
		default:
			throw 'No predicate with index:' + predIndex;
	}
};

exports.HiveParser = HiveParser;
